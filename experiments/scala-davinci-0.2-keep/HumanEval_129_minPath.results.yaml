language: scala
name: HumanEval_129_minPath
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                dp(i)(j) = List(grid(i)(j))\n\
    \                if (i > 0 && dp(i - 1)(j).length < k) {\n                   \
    \ val newPath = dp(i - 1)(j) :+ grid(i)(j)\n                    if (newPath.length\
    \ == k) {\n                        if (dp(i)(j).length == k) {\n             \
    \               if (newPath < dp(i)(j)) dp(i)(j) = newPath\n                 \
    \       } else dp(i)(j) = newPath\n                    } else if (newPath.length\
    \ < k) dp(i)(j) = newPath\n                }\n                if (j > 0 && dp(i)(j\
    \ - 1).length < k) {\n                    val newPath = dp(i)(j - 1) :+ grid(i)(j)\n\
    \                    if (newPath.length == k) {\n                        if (dp(i)(j).length\
    \ == k) {\n                            if (newPath < dp(i)(j)) dp(i)(j) = newPath\n\
    \                        } else dp(i)(j) = newPath\n                    } else\
    \ if (newPath.length < k) dp(i)(j) = newPath\n                }\n            }\n\
    \        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfi9ropf7.scala:38:40 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                            \e[33mif\e[0m (newPath <\
    \ dp(i)(j)) dp(i)(j) = newPath\n\e[31m\e[31m   |\e[0m                        \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfi9ropf7.scala:46:40 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                            \e[33mif\e[0m (newPath <\
    \ dp(i)(j)) dp(i)(j) = newPath\n\e[31m\e[31m   |\e[0m                        \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val visited = Array.fill(n, m)(false)\n        while (pq2.nonEmpty)\
    \ {\n            val (cost, i, j) = pq2.dequeue\n            if (!visited(i)(j))\
    \ {\n                visited(i)(j) = true\n                if (i > 0 && dp(i -\
    \ 1)(j) == cost + grid(i - 1)(j)) pq2.enqueue((cost + grid(i - 1)(j), i - 1, j))\n\
    \                if (i < n - 1 && dp(i + 1)(j) == cost + grid(i + 1)(j)) pq2.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0 && dp(i)(j - 1) == cost\
    \ + grid(i)(j - 1)) pq2.enqueue((cost +\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf19h633v.scala:52:87 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                \e[33mif\e[0m (j > \e[31m0\e[0m && dp(i)(j\
    \ - \e[31m1\e[0m) == cost + grid(i)(j - \e[31m1\e[0m)) pq2.enqueue((cost +\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpf19h633v.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[33m\e[33m-- Warning: /tmp/tmpf19h633v.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val q = new Queue[(Int, Int)]\n        val dx = List(-1, 0,\
    \ 1, 0)\n        val dy = List(0, 1, 0, -1)\n        for (i <- 0 until n; j <-\
    \ 0 until m) {\n            dp(i)(j) = grid(i)(j)\n            q.enqueue((i, j))\n\
    \        }\n        while (!q.isEmpty) {\n            val (x, y) = q.dequeue\n\
    \            for (i <- 0 until 4) {\n                val nx = x + dx(i)\n    \
    \            val ny = y + dy(i)\n                if (nx >= 0 && nx < n && ny >=\
    \ 0 && ny < m) {\n                    if (dp(nx)(ny) > dp(x)(y) + grid(nx)(ny))\
    \ {\n                        dp(nx)(ny) = dp(x)(y) + grid(nx)(ny)\n          \
    \              prev(nx)(ny) = (x, y)\n                        q.enqueue((nx, ny))\n\
    \                    }\n                }\n            }\n        }\n        val\
    \ res = new ListBuffer[Long]\n        var x = 0\n        var y = 0\n        for\
    \ (i <- 0 until n; j <- 0 until m) {\n            if (dp(i)(j) < dp(x)(y)) {\n\
    \                x = i\n                y = j\n            }\n        }\n    \
    \    for (i <- 0 until k.toInt) {\n            res += grid(x)(y)\n           \
    \ val (nx, ny) = prev(x)(y)\n            x = nx\n            y = ny\n        }\n\
    \        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfebt0ck5.scala:47:39\
    \ --------------------\e[0m\e[0m\n\e[31m47 |\e[0m                        prev(nx)(ny)\
    \ = (x, y)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    (Int, Int)\n\
    \e[31m   |\e[0m                                       Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfebt0ck5.scala:65:16 --------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m            x = nx\n\e[31m\e[31m   |\e[0m           \
    \     ^^\e[0m\n\e[31m   |\e[0m                Found:    (nx : Any)\n\e[31m   |\e\
    [0m                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfebt0ck5.scala:66:16 --------------------\e[0m\e[0m\n\e[31m66\
    \ |\e[0m            y = ny\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\e[31m\
    \   |\e[0m                Found:    (ny : Any)\n\e[31m   |\e[0m              \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    path(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\n           \
    \             path(i)(j) = path(i - 1)(j)\n                    }\n           \
    \         if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1)\n                        path(i)(j) = path(i)(j - 1)\n      \
    \              }\n                    if (i > 0 && j > 0 && dp(i - 1)(j - 1) <\
    \ dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j - 1)\n         \
    \               path(i)(j) = path(i - 1)(j - 1)\n                    }\n     \
    \               dp(i)(j) += grid(i)(j)\n                    path(i)(j) = (path(i)(j)\
    \ :+ grid(i)(j)).sorted\n                }\n            }\n        }\n       \
    \ var i = n - 1\n        var j = m - 1\n        while (k > 1) {\n            if\
    \ (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n            }\n\
    \            else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                j -=\
    \ 1\n            }\n            else {\n                i -= 1\n             \
    \   j -= 1\n            }\n            k -= 1\n        }\n        path(i)(j\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo6hff5nf.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo6hff5nf.scala:69:14\
    \ ------------------------\e[0m\e[0m\n\e[31m69 |\e[0m            k -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean k.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                val lst = List(grid(i)(j))\n\
    \                if (i == 0 && j == 0) dp(i)(j) = lst\n                else if\
    \ (i == 0) dp(i)(j) = (dp(i)(j - 1) :+ grid(i)(j)).sorted\n                else\
    \ if (j == 0) dp(i)(j) = (dp(i - 1)(j) :+ grid(i)(j)).sorted\n               \
    \ else {\n                    val lst1 = dp(i - 1)(j) :+ grid(i)(j)\n        \
    \            val lst2 = dp(i)(j - 1) :+ grid(i)(j)\n                    if (lst1.sorted\
    \ < lst2.sorted) dp(i)(j) = lst1.sorted\n                    else dp(i)(j) = lst2.sorted\n\
    \                }\n            }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqjhj3vyk.scala:40:36 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    \e[33mif\e[0m (lst1.sorted < lst2.sorted)\
    \ dp(i)(j) = lst1.sorted\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                val lst = List(grid(i)(j))\n\
    \                if (i == 0 && j == 0) dp(i)(j) = lst\n                else if\
    \ (i == 0) dp(i)(j) = (dp(i)(j - 1) :+ grid(i)(j)).sorted\n                else\
    \ if (j == 0) dp(i)(j) = (dp(i - 1)(j) :+ grid(i)(j)).sorted\n               \
    \ else {\n                    val lst1 = (dp(i)(j - 1) :+ grid(i)(j)).sorted\n\
    \                    val lst2 = (dp(i - 1)(j) :+ grid(i)(j)).sorted\n        \
    \            if (lst1 < lst2) dp(i)(j) = lst1\n                    else dp(i)(j)\
    \ = lst2\n                }\n            }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvd0n_8ej.scala:40:29 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    \e[33mif\e[0m (lst1 < lst2) dp(i)(j)\
    \ = lst1\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue < is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    prev(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\n           \
    \             prev(i)(j) = prev(i - 1)(j)\n                    }\n           \
    \         if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1)\n                        prev(i)(j) = prev(i)(j - 1)\n      \
    \              }\n                    dp(i)(j) += grid(i)(j)\n               \
    \     prev(i)(j) = prev(i)(j) :+ grid(i)(j)\n                }\n            }\n\
    \        }\n        val result = prev(n - 1)(m - 1)\n        result.drop(result.length\
    \ - k.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8qpe7rk.scala:56)\n\tat Problem.main(tmpe8qpe7rk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    if\
    \ (i > 0) {\n                        val lst = dp(i - 1)(j)\n                \
    \        if (lst.length < k) dp(i)(j) = (grid(i)(j) :: lst).sorted\n         \
    \               else if (lst.length == k) {\n                            val lst2\
    \ = (grid(i)(j) :: lst).sorted\n                            if (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n                        }\n                    }\n        \
    \            if (j > 0) {\n                        val lst = dp(i)(j - 1)\n  \
    \                      if (lst.length < k) {\n                            val\
    \ lst2 = (grid(i)(j) :: lst).sorted\n                            if (lst2.length\
    \ == k) {\n                                if (lst2 < dp(i)(j)) dp(i)(j) = lst2\n\
    \                            }\n                            else dp(i)(j) = lst2\n\
    \                        }\n                        else if (lst.length == k)\
    \ {\n                            val lst2 = (grid(i)(j) :: lst).sorted\n     \
    \                       if (lst2 < dp(i)(j)) dp(i)(j) = lst2\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbszjv3fl.scala:40:37 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbszjv3fl.scala:48:41 ------------------------\e[0m\e\
    [0m\n\e[31m48 |\e[0m                                \e[33mif\e[0m (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n\e[31m\e[31m   |\e[0m                                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbszjv3fl.scala:54:37 ------------------------\e[0m\e\
    [0m\n\e[31m54 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659798719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        // dp(i)(j)(k) = the minimum path of length\
    \ k starting from (i, j)\n        val dp = Array.fill(grid.length, grid.length,\
    \ k.toInt + 1)(Long.MaxValue)\n        // Initialization\n        for (i <- 0\
    \ until grid.length; j <- 0 until grid.length) {\n            dp(i)(j)(1) = grid(i)(j)\n\
    \        }\n        // Recurrence\n        for (i <- 0 until grid.length; j <-\
    \ 0 until grid.length; l <- 2 to k.toInt) {\n            for (x <- 0 until grid.length;\
    \ y <- 0 until grid.length) {\n                if (abs(x - i) + abs(y - j) ==\
    \ 1) {\n                    dp(i)(j)(l) = min(dp(i)(j)(l), dp(x)(y)(l - 1) + grid(i)(j))\n\
    \                }\n            }\n        }\n        // Find the minimum path\n\
    \        var min = Long.MaxValue\n        var minPath = List[Long]()\n       \
    \ for (i <- 0 until grid.length; j <- 0 until grid.length) {\n            if (dp(i)(j)(k.toInt)\
    \ < min) {\n                min = dp(i)(j)(k.toInt)\n                minPath =\
    \ List[Long]()\n                var curr = (i, j)\n                var currK =\
    \ k.toInt\n                while (currK > 0) {\n                    minPath =\
    \ grid(curr._1)(curr._2) :: minPath\n                    var next = (0, 0)\n \
    \                   var min = Long.MaxValue\n                    for (x <- 0 until\
    \ grid.length; y <- 0 until grid.length) {\n                        if (abs(x\
    \ - curr._1) + abs(y - curr._2) == 1) {\n                            if (dp(x)(y)(currK\
    \ - 1) + grid(curr._1)(curr._2) < min) {\n                                min\
    \ = dp(x)(y)(currK - 1) + grid(curr._1)(curr._2)\n                           \
    \     next =\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoi0bjs1m.scala:59:38 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m                                next =\n\e[31m\e[31m\
    \   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m      \
    \                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoi0bjs1m.scala:76:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmpoi0bjs1m.scala:38:34 -----------------------------\e[0m\e[0m\n\
    \e[31m38 |\e[0m                    dp(i)(j)(l) = min(dp(i)(j)(l), dp(x)(y)(l -\
    \ \e[31m1\e[0m) + grid(i)(j))\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  \e[33mvariable\e\
    [0m \e[35mmin\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpoi0bjs1m.scala:62:19 --------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    assert(minPath((List[\e[35mList\e[0m[\e[35mLong\e\
    [0m]](List[\e[35mLong\e[0m](\e[31m1l\e[0m.toLong, \e[31m2l\e[0m.toLong, \e[31m3l\e\
    [0m.toLong), List[\e[35mLong\e[0m](\e[31m4l\e[0m.toLong, \e[31m5l\e[0m.toLong,\
    \ \e[31m6l\e[0m.toLong), List[\e[35mLong\e[0m](\e[31m7l\e[0m.toLong, \e[31m8l\e\
    [0m.toLong, \e[31m9l\e[0m.toLong))), (\e[31m3l\e[0m)).equals((List[\e[35mLong\e\
    [0m](\e[31m1l\e[0m.toLong, \e[31m2l\e[0m.toLong, \e[31m1l\e[0m.toLong))));\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    (List[List[Long]], Long)\n\e\
    [31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpoi0bjs1m.scala:63:19 --------------------\e\
    [0m\e[0m\n\e["
  stdout: ''
  timestamp: 1659798721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (d, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > d) {\n                dp(i)(j) = d\n                if (i > 0) pq.enqueue((d\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((d +\
    \ grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((d + grid(i)(j\
    \ - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((d + grid(i)(j +\
    \ 1), i, j + 1))\n            }\n        }\n        val pq2 = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0, 0, 0))\n        val\
    \ dp2 = Array.fill(n, m)(Long.MaxValue)\n        dp2(0)(0) = 0\n        val parent\
    \ = Array.fill(n, m)((-1, -1))\n        val path = ListBuffer[Long]()\n      \
    \  while (pq2.nonEmpty) {\n            val (d, i, j) = pq2.dequeue\n         \
    \   if (dp2(i)(j) == d) {\n                if (k == 1) {\n                   \
    \ path += grid(i)(j)\n                    var (x, y) = parent(i)(j)\n        \
    \            while (x != -1) {\n                        path += grid(x)(y)\n \
    \                       val (xx, yy) = parent(x)(y)\n                        x\
    \ = xx\n                        y = yy\n                    }\n              \
    \      return path.reverse.toList\n                }\n                if (i\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmd7ydbr3.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmd7ydbr3.scala:80:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpmd7ydbr3.scala:63:20 --------------------\e[0m\e[0m\n\
    \e[31m63 |\e[0m                \e[33mif\e[0m (i\n\e[31m\e[31m   |\e[0m       \
    \             ^\e[0m\n\e[31m   |\e[0m                    Found:    (i : Int)\n\
    \e[31m   |\e[0m                    Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpmd7ydbr3.scala:65:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m65 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        pq.enqueue((0, 0, 0))\n      \
    \  while (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n        \
    \    if (dp(i)(j) <= cost) {\n                if (i == n - 1 && j == m - 1 &&\
    \ cost <= k) return reconstruct(dp, i, j, k)\n                if (i + 1 < n &&\
    \ dp(i + 1)(j) > cost + grid(i + 1)(j)) {\n                    dp(i + 1)(j) =\
    \ cost + grid(i + 1)(j)\n                    pq.enqueue((dp(i + 1)(j), i + 1,\
    \ j))\n                }\n                if (j + 1 < m && dp(i)(j + 1) > cost\
    \ + grid(i)(j + 1)) {\n                    dp(i)(j + 1) = cost + grid(i)(j + 1)\n\
    \                    pq.enqueue((dp(i)(j + 1), i, j + 1))\n                }\n\
    \            }\n        }\n        return List()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdh9oi_v.scala:36:66 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                \e[33mif\e[0m (i == n - \e[31m1\e[0m\
    \ && j == m - \e[31m1\e[0m && cost <= k) \e[33mreturn\e[0m reconstruct(dp, i,\
    \ j, k)\n\e[31m\e[31m   |\e[0m                                               \
    \                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                          Not found: reconstruct\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n          \
    \      pq.enqueue((dp(i)(j), i, j))\n            }\n        }\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until m) {\n                if (i >\
    \ 0) {\n                    dp(i)(j) = min(dp(i)(j), dp(i - 1)(j) + grid(i)(j))\n\
    \                    pq.enqueue((dp(i)(j), i, j))\n                }\n       \
    \         if (j > 0) {\n                    dp(i)(j) = min(dp(i)(j), dp(i)(j -\
    \ 1) + grid(i)(j))\n                    pq.enqueue((dp(i)(j), i, j))\n       \
    \         }\n            }\n        }\n        val result = new ListBuffer[Long]()\n\
    \        while (result.length < k) {\n            val (value, i, j) = pq.dequeue()\n\
    \            result += value\n            if (i > 0) {\n                dp(i)(j)\
    \ = min(dp(i)(j), dp(i - 1)(j) + grid(i)(j))\n                pq.enqueue((dp(i)(j),\
    \ i, j))\n            }\n            if (j > 0) {\n                dp(i)(j) =\
    \ min(dp(i)(j), dp(i)(j - 1) + grid(i)(j))\n                pq.enqueue((dp(i)(j),\
    \ i, j))\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0_sx1wmn.scala:66)\n\tat Problem.main(tmp0_sx1wmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                dp(i)(j) = List(grid(i)(j))\n                if (i > 0\
    \ && dp(i - 1)(j).length + 1 <= k && dp(i - 1)(j) < dp(i)(j)) dp(i)(j) = dp(i\
    \ - 1)(j) :+ grid(i)(j)\n                if (j > 0 && dp(i)(j - 1).length + 1\
    \ <= k && dp(i)(j - 1) < dp(i)(j)) dp(i)(j) = dp(i)(j - 1) :+ grid(i)(j)\n   \
    \         }\n        }\n        dp(n - 1)(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmkv9jo1c.scala:33:74 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mif\e[0m (i > \e[31m0\e[0m && dp(i\
    \ - \e[31m1\e[0m)(j).length + \e[31m1\e[0m <= k && dp(i - \e[31m1\e[0m)(j) < dp(i)(j))\
    \ dp(i)(j) = dp(i - \e[31m1\e[0m)(j) :+ grid(i)(j)\n\e[31m\e[31m   |\e[0m    \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmkv9jo1c.scala:34:74 ------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m                \e[33mif\e[0m (j > \e[31m0\e[0m && dp(i)(j\
    \ - \e[31m1\e[0m).length + \e[31m1\e[0m <= k && dp(i)(j - \e[31m1\e[0m) < dp(i)(j))\
    \ dp(i)(j) = dp(i)(j - \e[31m1\e[0m) :+ grid(i)(j)\n\e[31m\e[31m   |\e[0m    \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798717
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    if\
    \ (i > 0) {\n                        val lst = dp(i - 1)(j)\n                \
    \        if (lst.length < k) dp(i)(j) = grid(i)(j) :: lst\n                  \
    \      else if (lst.length == k) dp(i)(j) = grid(i)(j) :: lst.dropRight(1)\n \
    \                   }\n                    if (j > 0) {\n                    \
    \    val lst = dp(i)(j - 1)\n                        if (lst.length < k) {\n \
    \                           if (dp(i)(j).length < k) dp(i)(j) = grid(i)(j) ::\
    \ lst\n                            else if (lst.length < dp(i)(j).length) dp(i)(j)\
    \ = grid(i)(j) :: lst.dropRight(1)\n                        }\n              \
    \          else if (lst.length == k) {\n                            if (dp(i)(j).length\
    \ < k) dp(i)(j) = grid(i)(j) :: lst.dropRight(1)\n                           \
    \ else if (lst.length < dp(i)(j).length) dp(i)(j) = grid(i)(j) :: lst.dropRight(1)\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpada8vt3d.scala:57)\n\tat Problem.main(tmpada8vt3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val visited = Array.fill(n, m)(false)\n        visited(0)(0)\
    \ = true\n        var ans = List[Long]()\n        while (!pq2.isEmpty) {\n   \
    \         val (cost, i, j) = pq2.dequeue\n            ans = ans :+ grid(i)(j)\n\
    \            if (ans.length == k) return ans\n            if (i > 0 && !visited(i\
    \ - 1)(j) && dp(i - 1)(j) == cost + grid(i - 1)(j)) {\n                pq2.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                visited(i - 1)(j) = true\n   \
    \         }\n            if (i < n - 1 && !visited(i + 1)(j) && dp(i + 1)(j) ==\
    \ cost + grid(i + 1)(j\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmltui4fl.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmltui4fl.scala:73:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpmltui4fl.scala:72:1 ---------------------\e[0m\e[0m\n\
    \e[31m72 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpmltui4fl.scala:58:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(0L)\n        val prev = Array.fill(n, m)(0L)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n        \
    \        dp(i)(j) = grid(i)(j)\n                prev(i)(j) = -1\n            }\n\
    \        }\n        for (i <- 1 until n) {\n            for (j <- 0 until m) {\n\
    \                if (dp(i - 1)(j) < dp(i)(j)) {\n                    dp(i)(j)\
    \ = dp(i - 1)(j)\n                    prev(i)(j) = 0\n                }\n    \
    \        }\n        }\n        for (j <- 1 until m) {\n            for (i <- 0\
    \ until n) {\n                if (dp(i)(j - 1) < dp(i)(j)) {\n               \
    \     dp(i)(j) = dp(i)(j - 1)\n                    prev(i)(j) = 1\n          \
    \      }\n            }\n        }\n        for (j <- 1 until m) {\n         \
    \   for (i <- 1 until n) {\n                if (dp(i - 1)(j - 1) < dp(i)(j)) {\n\
    \                    dp(i)(j) = dp(i - 1)(j - 1)\n                    prev(i)(j)\
    \ = 2\n                }\n            }\n        }\n        var i = n - 1\n  \
    \      var j = m - 1\n        var path = List[Long]()\n        while (k > 0) {\n\
    \            path = grid(i)(j) :: path\n            k -= 1\n            if (prev(i)(j)\
    \ == 0) i -= 1\n            else if (prev(i)(j) == 1) j -= 1\n            else\
    \ {\n                i -= 1\n                j -= 1\n            }\n        }\n\
    \        path\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjm207anc.scala:67:14 ------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)((0, 0))\n        val q = new Queue[(Int, Int)]\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until m) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    dp(i)(j) = 0\n                    q.enqueue((i, j))\n\
    \                }\n            }\n        }\n        while (!q.isEmpty) {\n \
    \           val (x, y) = q.dequeue\n            for (i <- -1 to 1) {\n       \
    \         for (j <- -1 to 1) {\n                    if (i == 0 && j == 0) {\n\
    \                        // do nothing\n                    } else if (x + i >=\
    \ 0 && x + i < n && y + j >= 0 && y + j < m) {\n                        if (dp(x\
    \ + i)(y + j) > dp(x)(y) + 1) {\n                            dp(x + i)(y + j)\
    \ = dp(x)(y) + 1\n                            prev(x + i)(y + j) = (x, y)\n  \
    \                          q.enqueue((x + i, y + j))\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    \
    \    var (x, y) = (0, 0)\n        var min = Long.MaxValue\n        for (i <- 0\
    \ until n) {\n            for (j <- 0 until m) {\n                if (dp(i)(j)\
    \ < min) {\n                    min = dp(i)(j)\n                    x = i\n  \
    \                  y = j\n                }\n            }\n        }\n      \
    \  var result = List[Long]()\n        for (i <- 0 until k) {\n            result\
    \ = grid(x)(y) :: result\n            val (x1, y1) = prev(x)(y)\n            x\
    \ = x1\n            y = y1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplirhbcg4.scala:69:26\
    \ --------------------\e[0m\e[0m\n\e[31m69 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798717
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[List[Long]]()\n                    if (i > 0) lst += dp(i -\
    \ 1)(j)\n                    if (j > 0) lst += dp(i)(j - 1)\n                \
    \    if (lst.isEmpty) dp(i)(j) = List(grid(i)(j))\n                    else {\n\
    \                        val min = lst.minBy(l => (l :+ grid(i)(j)).mkString(\"\
    \"))\n                        dp(i)(j) = min :+ grid(i)(j)\n                 \
    \   }\n                }\n            }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxb27_app.scala:49)\n\tat Problem.main(tmpxb27_app.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(0L)\n        for (i <- 0 until n) {\n     \
    \       for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n      \
    \          if (i > 0) dp(i)(j) = min(dp(i)(j), dp(i - 1)(j))\n               \
    \ if (j > 0) dp(i)(j) = min(dp(i)(j), dp(i)(j - 1))\n            }\n        }\n\
    \        val result = ListBuffer[Long]()\n        var i = 0\n        var j = 0\n\
    \        while (k > 0) {\n            result += grid(i)(j)\n            k -= 1\n\
    \            if (i == n - 1 && j == m - 1) return result.toList\n            if\
    \ (i == n - 1) {\n                j += 1\n            } else if (j == m - 1) {\n\
    \                i += 1\n            } else {\n                if (dp(i + 1)(j)\
    \ < dp(i)(j + 1)) {\n                    i += 1\n                } else {\n  \
    \                  j += 1\n                }\n            }\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7zvag2y4.scala:43:14 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val prev = Array.fill(n, n)(List[Long]())\n     \
    \   dp(0)(0) = grid(0)(0)\n        prev(0)(0) = List(grid(0)(0))\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ > 0) {\n                    if (dp(i - 1)(j) + grid(i)(j) < dp(i)(j)) {\n  \
    \                      dp(i)(j) = dp(i - 1)(j) + grid(i)(j)\n                \
    \        prev(i)(j) = prev(i - 1)(j) :+ grid(i)(j)\n                    }\n  \
    \                  else if (dp(i - 1)(j) + grid(i)(j) == dp(i)(j)) {\n       \
    \                 val lst = prev(i - 1)(j) :+ grid(i)(j)\n                   \
    \     if (lst < prev(i)(j)) {\n                            prev(i)(j) = lst\n\
    \                        }\n                    }\n                }\n       \
    \         if (j > 0) {\n                    if (dp(i)(j - 1) + grid(i)(j) < dp(i)(j))\
    \ {\n                        dp(i)(j) = dp(i)(j - 1) + grid(i)(j)\n          \
    \              prev(i)(j) = prev(i)(j - 1) :+ grid(i)(j)\n                   \
    \ }\n                    else if (dp(i)(j - 1) + grid(i)(j) == dp(i)(j)) {\n \
    \                       val lst = prev(i)(j - 1) :+ grid(i)(j)\n             \
    \           if (lst < prev(i)(j)) {\n                            prev(i)(j) =\
    \ lst\n                        }\n                    }\n                }\n \
    \           }\n        }\n        val lst = prev(n - 1)(n - 1)\n        lst.take(lst.length\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn_9_w64e.scala:42:32 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                        \e[33mif\e[0m (lst < prev(i)(j))\
    \ {\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue < is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn_9_w64e.scala:54:32\
    \ ------------------------\e[0m\e[0m\n\e[31m54 |\e[0m                        \e\
    [33mif\e[0m (lst < prev(i)(j)) {\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    if (up.length\
    \ == 0) dp(i)(j) = left :+ grid(i)(j)\n                    else if (left.length\
    \ == 0) dp(i)(j) = up :+ grid(i)(j)\n                    else if (up.length <\
    \ left.length) dp(i)(j) = up :+ grid(i)(j)\n                    else if (up.length\
    \ > left.length) dp(i)(j) = left :+ grid(i)(j)\n                    else if (up\
    \ < left) dp(i)(j) = up :+ grid(i)(j)\n                    else dp(i)(j) = left\
    \ :+ grid(i)(j)\n                }\n            }\n        }\n        val result\
    \ = dp(n - 1)(m - 1)\n        result.take(k.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpycom6ich.scala:41:32 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (up\
    \ < left) dp(i)(j) = up :+ grid(i)(j)\n\e[31m\e[31m   |\e[0m                 \
    \            ^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == 0 && j == 0) dp(i)(j) = List(grid(i)(j))\n  \
    \              else {\n                    var min = List[Long]()\n          \
    \          if (i > 0) {\n                        val lst = dp(i - 1)(j)\n    \
    \                    if (lst.length < k) min = lst :+ grid(i)(j)\n           \
    \             else if (lst.length == k) min = lst.updated(k - 1, min(k - 1) min\
    \ grid(i)(j))\n                    }\n                    if (j > 0) {\n     \
    \                   val lst = dp(i)(j - 1)\n                        if (lst.length\
    \ < k) {\n                            if (min.length == 0) min = lst :+ grid(i)(j)\n\
    \                            else if (lst.length < min.length) min = lst :+ grid(i)(j)\n\
    \                            else if (lst.length == min.length) min = (lst :+\
    \ grid(i)(j)).updated(k - 1, min(k - 1) min (lst :+ grid(i)(j))(k - 1))\n    \
    \                    }\n                        else if (lst.length == k) {\n\
    \                            if (min.length == 0) min = lst.updated(k - 1, min(k\
    \ - 1) min grid(i)(j))\n                            else if (lst.length < min.length)\
    \ min = lst.updated(k - 1, min(k - 1) min grid(i)(j))\n                      \
    \      else if (lst.length == min.length) min = min.updated(k - 1, min(k - 1)\
    \ min lst.updated(k - 1, min(k - 1) min grid(i)(j))(k - 1))\n                \
    \        }\n                    }\n                    dp(i)(j) = min\n      \
    \          }\n            }\n        }\n        dp(n - 1)(n - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxrrh_87.scala:38:68\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m                        \e[33melse\e\
    [0m \e[33mif\e[0m (lst.length == k) min = lst.updated(k - \e[31m1\e[0m, min(k\
    \ - \e[31m1\e[0m) min grid(i)(j))\n\e[31m\e[31m   |\e[0m                     \
    \                                               ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                                        Found:    Long\n\e[31m\
    \   |\e[0m                                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxrrh_87.scala:38:79\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m                        \e[33melse\e\
    [0m \e[33mif\e[0m (lst.length == k) min = lst.updated(k - \e[31m1\e[0m, min(k\
    \ - \e[31m1\e[0m) min grid(i)(j))\n\e[31m\e[31m   |\e[0m                     \
    \                                                          ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                          Found:   \
    \ Long\n\e[31m   |\e[0m                                                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxrrh_87.scala:45:97\
    \ --------------------\e[0m\e[0m\n\e[31m45 |\e[0m                            \e\
    [33melse\e[0m \e[33mif\e[0m (lst.length == min.length) min = (lst :+ grid(i)(j)).updated(k\
    \ - \e[31m1\e[0m, min(k - \e[31m1\e[0m) min (lst :+ grid(i)(j))(k - \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                                         Found:    Long\n\e[31m\
    \   |\e[0m                                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxrrh_87.scala:45:108\
    \ -------------------\e[0m\e[0m\n\e[31m45 |\e[0m                           "
  stdout: ''
  timestamp: 1659798719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        for (i <- 0 until n) {\n     \
    \       for (j <- 0 until m) {\n                pq.enqueue((grid(i)(j), i, j))\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until m) {\n                dp(i)(j) = pq.dequeue()._1\n            }\n\
    \        }\n        val result = Array.fill(k.toInt)(0L)\n        val visited\
    \ = Array.fill(n, m)(false)\n        val q = new Queue[(Int, Int)]()\n       \
    \ q.enqueue((0, 0))\n        visited(0)(0) = true\n        var count = 0\n   \
    \     while (count < k) {\n            val (i, j) = q.dequeue()\n            result(count)\
    \ = dp(i)(j)\n            count += 1\n            if (i + 1 < n && !visited(i\
    \ + 1)(j)) {\n                q.enqueue((i + 1, j))\n                visited(i\
    \ + 1)(j) = true\n            }\n            if (j + 1 < m && !visited(i)(j +\
    \ 1)) {\n                q.enqueue((i, j + 1))\n                visited(i)(j +\
    \ 1) = true\n            }\n            if (i - 1 >= 0 && !visited(i - 1)(j))\
    \ {\n                q.enqueue((i - 1, j))\n                visited(i - 1)(j)\
    \ = true\n            }\n            if (j - 1 >= 0 && !visited(i)(j - 1)) {\n\
    \                q.enqueue((i, j - 1))\n                visited(i)(j - 1) = true\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx341i4d6.scala:72)\n\tat Problem.main(tmpx341i4d6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val prev = Array.fill(n, n)(-1)\n        val next\
    \ = Array.fill(n, n)(-1)\n        val queue = new Queue[(Int, Int)]\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                dp(i)(j)\
    \ = grid(i)(j)\n                queue.enqueue((i, j))\n            }\n       \
    \ }\n        while (queue.nonEmpty) {\n            val (i, j) = queue.dequeue\n\
    \            for (d <- 0 until 4) {\n                val (ni, nj) = (i + \"2101\"\
    .charAt(d) - '1', j + \"1210\".charAt(d) - '1')\n                if (ni >= 0 &&\
    \ ni < n && nj >= 0 && nj < n) {\n                    if (dp(ni)(nj) > dp(i)(j)\
    \ + grid(ni)(nj)) {\n                        dp(ni)(nj) = dp(i)(j) + grid(ni)(nj)\n\
    \                        prev(ni)(nj) = i * n + j\n                        queue.enqueue((ni,\
    \ nj))\n                    }\n                }\n            }\n        }\n \
    \       var (i, j) = (0, 0)\n        for (i <- 0 until n; j <- 0 until n) {\n\
    \            if (dp(i)(j) == dp(0)(0)) {\n                break\n            }\n\
    \        }\n        var (ni, nj) = (i, j)\n        var count = 0\n        while\
    \ (count < k) {\n            count += 1\n            next(i)(j) = ni * n + nj\n\
    \            val (ti, tj) = (ni, nj)\n            ni = i\n            nj = j\n\
    \            i = ti\n            j = tj\n        }\n        val result = new ListBuffer[Long]\n\
    \        result += grid(i)(j)\n        while (count > 0) {\n            count\
    \ -= 1\n            val (ni, nj\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfi9vk5_7.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfi9vk5_7.scala:90:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m90 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpfi9vk5_7.scala:55:16 ------------------------\e[0m\e[0m\n\
    \e[31m55 |\e[0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfi9vk5_7.scala:89:1 ---------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpfi9vk5_7.scala:75:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m75 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659798727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ l = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val r = if\
    \ (j > 0) dp(i)(j - 1) else List[Long]()\n                    val lr = if (i >\
    \ 0 && j > 0) dp(i - 1)(j - 1) else List[Long]()\n                    val lr_\
    \ = if (i > 0 && j > 0) dp(i - 1)(j - 1) :+ grid(i)(j) else List[Long]()\n   \
    \                 val l_ = if (i > 0) dp(i - 1)(j) :+ grid(i)(j) else List[Long]()\n\
    \                    val r_ = if (j > 0) dp(i)(j - 1) :+ grid(i)(j) else List[Long]()\n\
    \                    val lr_l = if (i > 0 && j > 0) lr_.length else 0\n      \
    \              val l_l = if (i > 0) l_.length else 0\n                    val\
    \ r_l = if (j > 0) r_.length else 0\n                    val lr_l_ = if (i > 0\
    \ && j > 0) lr_.length else 0\n                    val l_l_ = if (i > 0) l_.length\
    \ else 0\n                    val r_l_ = if (j > 0) r_.length else 0\n       \
    \             if (lr_l > 0 && lr_l <= k) {\n                        if (l_l >\
    \ 0 && l_l <= k && l_ < lr_) dp(i)(j) = l_\n                        else if (r_l\
    \ > 0 && r_l <= k && r_ < lr_) dp(i)(j) = r_\n                        else dp(i)(j)\
    \ = lr_\n                   \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp69sxrwt8.scala:68:0 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp69sxrwt8.scala:48:54\
    \ ------------------------\e[0m\e[0m\n\e[31m48 |\e[0m                        \e\
    [33mif\e[0m (l_l > \e[31m0\e[0m && l_l <= k && l_ < lr_) dp(i)(j) = l_\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^\e[0m\n\e\
    [31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp69sxrwt8.scala:49:59 ------------------------\e[0m\e\
    [0m\n\e[31m49 |\e[0m                        \e[33melse\e[0m \e[33mif\e[0m (r_l\
    \ > \e[31m0\e[0m && r_l <= k && r_ < lr_) dp(i)(j) = r_\n\e[31m\e[31m   |\e[0m\
    \                                                        ^^^^\e[0m\n\e[31m   |\e\
    [0mvalue < is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[33m\e[33m-- Warning: /tmp/tmp69sxrwt8.scala:53:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m53 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        val visited = Array.fill(n, n)(false)\n        val\
    \ queue = Queue[(Int, Int)]()\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until n) {\n                dp(i)(j) = List(grid(i)(j))\n          \
    \      queue.enqueue((i, j))\n                visited(i)(j) = true\n         \
    \   }\n        }\n        while (!queue.isEmpty) {\n            val (i, j) = queue.dequeue\n\
    \            val lst = dp(i)(j)\n            if (lst.length == k) return lst\n\
    \            if (i > 0 && !visited(i - 1)(j)) {\n                val newLst =\
    \ lst :+ grid(i - 1)(j)\n                dp(i - 1)(j) = newLst\n             \
    \   visited(i - 1)(j) = true\n                queue.enqueue((i - 1, j))\n    \
    \        }\n            if (i < n - 1 && !visited(i + 1)(j)) {\n             \
    \   val newLst = lst :+ grid(i + 1)(j)\n                dp(i + 1)(j) = newLst\n\
    \                visited(i + 1)(j) = true\n                queue.enqueue((i +\
    \ 1, j))\n            }\n            if (j > 0 && !visited(i)(j - 1)) {\n    \
    \            val newLst = lst :+ grid(i)(j - 1)\n                dp(i)(j - 1)\
    \ = newLst\n                visited(i)(j - 1) = true\n                queue.enqueue((i,\
    \ j - 1))\n            }\n            if (j < n - 1 && !visited(i)(j + 1)) {\n\
    \                val newLst = lst :+ grid(i)(j + 1)\n                dp(i)(j +\
    \ 1) = newLst\n                visited(i)(j + 1) = true\n                queue.enqueue((i,\
    \ j + 1))\n            }\n        }\n        List[Long]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtx87e3u.scala:72)\n\tat Problem.main(tmpjtx87e3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n\
    \        pq.enqueue((0, 0, 0))\n        while (!pq.isEmpty) {\n            val\
    \ (cost, i, j) = pq.dequeue\n            if (dp(i)(j) > cost) {\n            \
    \    dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost + grid(i - 1)(j),\
    \ i - 1, j))\n                if (i < n - 1) pq.enqueue((cost + grid(i + 1)(j),\
    \ i + 1, j))\n                if (j > 0) pq.enqueue((cost + grid(i)(j - 1), i,\
    \ j - 1))\n                if (j < n - 1) pq.enqueue((cost + grid(i)(j + 1), i,\
    \ j + 1))\n            }\n        }\n        val ans = new ListBuffer[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (k > 0) {\n            ans\
    \ += grid(i)(j)\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n       \
    \         i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j))\
    \ {\n                i += 1\n            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j))\
    \ {\n                j -= 1\n            } else {\n                j += 1\n  \
    \          }\n            k -= 1\n        }\n        ans.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf9uhchxc.scala:56:14 ------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    path(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\n           \
    \             path(i)(j) = path(i - 1)(j)\n                    }\n           \
    \         if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1)\n                        path(i)(j) = path(i)(j - 1)\n      \
    \              }\n                    dp(i)(j) += grid(i)(j)\n               \
    \     path(i)(j) = path(i)(j) :+ grid(i)(j)\n                }\n            }\n\
    \        }\n        val result = path(n - 1)(m - 1)\n        if (result.length\
    \ > k) result.slice(0, k.toInt) else result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeqotfcg6.scala:56)\n\tat Problem.main(tmpeqotfcg6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val result =\
    \ new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        var cost\
    \ = 0L\n        while (result.length < k) {\n            result += grid(i)(j)\n\
    \            val next = List((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)).filter(x\
    \ => x._1 >= 0 && x._1 < n && x._2 >= 0 && x._2 < m).map(x => (dp(x._1)(x._2)\
    \ + grid(x._1)(x._2), x._1, x._2)).minBy(_._1)\n            i = next._2\n    \
    \        j = next._3\n            cost = next._1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpia4edyze.scala:58)\n\tat Problem.main(tmpia4edyze.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n\
    \                if (i == 0 && j == 0) {\n                    dp(i)(j) = grid(i)(j)\n\
    \                } else {\n                    if (i > 0) {\n                \
    \        if (dp(i - 1)(j) < dp(i)(j)) {\n                            dp(i)(j)\
    \ = dp(i - 1)(j)\n                            prev(i)(j) = 0\n               \
    \         }\n                    }\n                    if (j > 0) {\n       \
    \                 if (dp(i)(j - 1) < dp(i)(j)) {\n                           \
    \ dp(i)(j) = dp(i)(j - 1)\n                            prev(i)(j) = 1\n      \
    \                  }\n                    }\n                    dp(i)(j) += grid(i)(j)\n\
    \                }\n            }\n        }\n        val result = ListBuffer[Long]()\n\
    \        var i = n - 1\n        var j = m - 1\n        while (k > 0) {\n     \
    \       result += grid(i)(j)\n            k -= 1\n            if (prev(i)(j) ==\
    \ 0) {\n                i -= 1\n            } else if (prev(i)(j) == 1) {\n  \
    \              j -= 1\n            }\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkhywlsgx.scala:58:14 ------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                val lst = List[Long](grid(i)(j))\n\
    \                if (i == 0 && j == 0) dp(i)(j) = lst\n                else if\
    \ (i == 0) dp(i)(j) = lst ::: dp(i)(j - 1)\n                else if (j == 0) dp(i)(j)\
    \ = lst ::: dp(i - 1)(j)\n                else {\n                    val lst1\
    \ = lst ::: dp(i - 1)(j)\n                    val lst2 = lst ::: dp(i)(j - 1)\n\
    \                    if (lst1 < lst2) dp(i)(j) = lst1\n                    else\
    \ dp(i)(j) = lst2\n                }\n            }\n        }\n        dp(n -\
    \ 1)(m - 1).take(k.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp23_0kva0.scala:40:29 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    \e[33mif\e[0m (lst1 < lst2) dp(i)(j)\
    \ = lst1\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue < is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        // dp(i)(j)(k) = the minimum path of length\
    \ k starting from (i, j)\n        val dp = Array.fill(grid.length, grid.length,\
    \ k.toInt + 1)(Long.MaxValue)\n        for (i <- 0 until grid.length; j <- 0 until\
    \ grid.length) {\n            dp(i)(j)(1) = grid(i)(j)\n        }\n        for\
    \ (l <- 2 to k.toInt) {\n            for (i <- 0 until grid.length; j <- 0 until\
    \ grid.length) {\n                if (i > 0) dp(i)(j)(l) = min(dp(i)(j)(l), dp(i\
    \ - 1)(j)(l - 1))\n                if (i < grid.length - 1) dp(i)(j)(l) = min(dp(i)(j)(l),\
    \ dp(i + 1)(j)(l - 1))\n                if (j > 0) dp(i)(j)(l) = min(dp(i)(j)(l),\
    \ dp(i)(j - 1)(l - 1))\n                if (j < grid.length - 1) dp(i)(j)(l) =\
    \ min(dp(i)(j)(l), dp(i)(j + 1)(l - 1))\n            }\n        }\n        var\
    \ min = Long.MaxValue\n        var minI = -1\n        var minJ = -1\n        for\
    \ (i <- 0 until grid.length; j <- 0 until grid.length) {\n            if (dp(i)(j)(k.toInt)\
    \ < min) {\n                min = dp(i)(j)(k.toInt)\n                minI = i\n\
    \                minJ = j\n            }\n        }\n        var result = List[Long]()\n\
    \        var i = minI\n        var j = minJ\n        for (l <- k.toInt to 1 by\
    \ -1) {\n            result = grid(i)(j) :: result\n            if (i > 0 && dp(i)(j)(l)\
    \ == dp(i - 1)(j)(l - 1)) {\n                i -= 1\n            } else if (i\
    \ < grid.length -\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp570ot20n.scala:58:40 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (i < grid.length\
    \ -\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp570ot20n.scala:75:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp570ot20n.scala:35:41 -----------------------------\e[0m\e[0m\n\
    \e[31m35 |\e[0m                \e[33mif\e[0m (i > \e[31m0\e[0m) dp(i)(j)(l) =\
    \ min(dp(i)(j)(l), dp(i - \e[31m1\e[0m)(j)(l - \e[31m1\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                \e[33mvariable\e[0m \e[35mmin\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp570ot20n.scala:36:55\
    \ -----------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                \e[33mif\e\
    [0m (i < grid.length - \e[31m1\e[0m) dp(i)(j)(l) = min(dp(i)(j)(l), dp(i + \e\
    [31m1\e[0m)(j)(l - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^^^\e[0m\n\e[31m   |\e[0m                 \
    \                  \e[33mvariable\e[0m \e[35mmin\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp570ot20n.scala:37:41 -----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mif\e[0m (j > \e[31m0\e[0m) dp(i)(j)(l)\
    \ = min(dp(i)(j)(l), dp(i)(j - \e[31m1\e[0m)(l - \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0m \
    \                                  \e[33mvariable\e[0m \e[35mmin\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation availab"
  stdout: ''
  timestamp: 1659798730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until m) {\n                pq.enqueue((grid(i)(j), i, j))\n \
    \           }\n        }\n        while (pq.nonEmpty) {\n            val (v, i,\
    \ j) = pq.dequeue\n            if (dp(i)(j) > v) {\n                dp(i)(j) =\
    \ v\n                if (i > 0) pq.enqueue((v + grid(i - 1)(j), i - 1, j))\n \
    \               if (i < n - 1) pq.enqueue((v + grid(i + 1)(j), i + 1, j))\n  \
    \              if (j > 0) pq.enqueue((v + grid(i)(j - 1), i, j - 1))\n       \
    \         if (j < m - 1) pq.enqueue((v + grid(i)(j + 1), i, j + 1))\n        \
    \    }\n        }\n        val result = ArrayBuffer[Long]()\n        var i = 0\n\
    \        var j = 0\n        for (l <- 0 until k.toInt) {\n            result +=\
    \ grid(i)(j)\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n          \
    \      i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n\
    \                i += 1\n            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j))\
    \ {\n                j -= 1\n            } else if (j < m - 1 && dp(i)(j + 1)\
    \ < dp(i)(j)) {\n                j += 1\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_85ic5gl.scala:65)\n\tat Problem.main(tmp_85ic5gl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ (Int, Int))]()(Ordering.by(_._1))\n        pq.enqueue((0, (0, 0)))\n       \
    \ while (pq.nonEmpty) {\n            val (cost, (i, j)) = pq.dequeue\n       \
    \     if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n              \
    \  if (i > 0) pq.enqueue((cost + grid(i - 1)(j), (i - 1, j)))\n              \
    \  if (i < n - 1) pq.enqueue((cost + grid(i + 1)(j), (i + 1, j)))\n          \
    \      if (j > 0) pq.enqueue((cost + grid(i)(j - 1), (i, j - 1)))\n          \
    \      if (j < m - 1) pq.enqueue((cost + grid(i)(j + 1), (i, j + 1)))\n      \
    \      }\n        }\n        val path = new ArrayBuffer[Long]()\n        var (i,\
    \ j) = (0, 0)\n        while (path.length < k) {\n            path += grid(i)(j)\n\
    \            if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n\
    \            } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n            \
    \    i += 1\n            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n    \
    \            j -= 1\n            } else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j))\
    \ {\n                j += 1\n            }\n        }\n        path.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5qigiwen.scala:60)\n\tat Problem.main(tmp5qigiwen.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == 0 && j == 0) dp(i)(j) = List(grid(i)(j))\n  \
    \              else {\n                    if (i > 0) {\n                    \
    \    val lst = dp(i - 1)(j)\n                        if (lst.length < k) dp(i)(j)\
    \ = lst :+ grid(i)(j)\n                        else {\n                      \
    \      val lst2 = lst.drop(1) :+ grid(i)(j)\n                            if (lst2\
    \ < dp(i)(j)) dp(i)(j) = lst2\n                        }\n                   \
    \ }\n                    if (j > 0) {\n                        val lst = dp(i)(j\
    \ - 1)\n                        if (lst.length < k) dp(i)(j) = lst :+ grid(i)(j)\n\
    \                        else {\n                            val lst2 = lst.drop(1)\
    \ :+ grid(i)(j)\n                            if (lst2 < dp(i)(j)) dp(i)(j) = lst2\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        dp(n - 1)(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptwqebez9.scala:39:37 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptwqebez9.scala:47:37 ------------------------\e[0m\e\
    [0m\n\e[31m47 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    if (up.length\
    \ == 0 && left.length == 0) dp(i)(j) = List(grid(i)(j))\n                    else\
    \ if (up.length == 0) dp(i)(j) = left :+ grid(i)(j)\n                    else\
    \ if (left.length == 0) dp(i)(j) = up :+ grid(i)(j)\n                    else\
    \ {\n                        val up_comp = up.compare(left :+ grid(i)(j))\n  \
    \                      val left_comp = left.compare(up :+ grid(i)(j))\n      \
    \                  if (up_comp < 0) dp(i)(j) = up :+ grid(i)(j)\n            \
    \            else if (left_comp < 0) dp(i)(j) = left :+ grid(i)(j)\n         \
    \               else dp(i)(j) = if (up(0) < left(0)) up :+ grid(i)(j) else left\
    \ :+ grid(i)(j)\n                    }\n                }\n            }\n   \
    \     }\n        dp(n - 1)(m - 1).take(k.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_dm4vdvv.scala:41:41 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                        \e[33mval\e[0m \e[36mup_comp\e\
    [0m = up.compare(left :+ grid(i)(j))\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue compare is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_dm4vdvv.scala:42:45\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m                        \e\
    [33mval\e[0m \e[36mleft_comp\e[0m = left.compare(up :+ grid(i)(j))\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue compare is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n\
    \                if (i == 0 && j == 0) {\n                    dp(i)(j) = grid(i)(j)\n\
    \                } else {\n                    if (i > 0) {\n                \
    \        if (dp(i - 1)(j) < dp(i)(j)) {\n                            dp(i)(j)\
    \ = dp(i - 1)(j)\n                            prev(i)(j) = 0\n               \
    \         }\n                    }\n                    if (j > 0) {\n       \
    \                 if (dp(i)(j - 1) < dp(i)(j)) {\n                           \
    \ dp(i)(j) = dp(i)(j - 1)\n                            prev(i)(j) = 1\n      \
    \                  }\n                    }\n                    dp(i)(j) += grid(i)(j)\n\
    \                }\n            }\n        }\n        var i = n - 1\n        var\
    \ j = m - 1\n        val path = ListBuffer[Long]()\n        while (k > 0) {\n\
    \            path += grid(i)(j)\n            k -= 1\n            if (prev(i)(j)\
    \ == 0) {\n                i -= 1\n            } else if (prev(i)(j) == 1) {\n\
    \                j -= 1\n            }\n        }\n        path.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplnio8trj.scala:58:14 ------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                dp(i)(j) = List(grid(i)(j))\n\
    \                if (i > 0 && dp(i - 1)(j).length > 0 && dp(i - 1)(j).length <\
    \ k) {\n                    if (dp(i - 1)(j).length + 1 == k) {\n            \
    \            if (dp(i - 1)(j).last < grid(i)(j)) dp(i)(j) = dp(i - 1)(j) :+ grid(i)(j)\n\
    \                    } else {\n                        if (dp(i - 1)(j).last <\
    \ grid(i)(j)) dp(i)(j) = dp(i - 1)(j) :+ grid(i)(j)\n                        else\
    \ dp(i)(j) = dp(i - 1)(j)\n                    }\n                }\n        \
    \        if (j > 0 && dp(i)(j - 1).length > 0 && dp(i)(j - 1).length < k) {\n\
    \                    if (dp(i)(j - 1).length + 1 == k) {\n                   \
    \     if (dp(i)(j - 1).last < grid(i)(j)) dp(i)(j) = dp(i)(j - 1) :+ grid(i)(j)\n\
    \                    } else {\n                        if (dp(i)(j - 1).last <\
    \ grid(i)(j)) dp(i)(j) = dp(i)(j - 1) :+ grid(i)(j)\n                        else\
    \ dp(i)(j) = dp(i)(j - 1)\n                    }\n                }\n        \
    \    }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsd8bzwx2.scala:55)\n\tat Problem.main(tmpsd8bzwx2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ prev = ListBuffer[List[Long]]()\n                    if (i > 0) prev += dp(i\
    \ - 1)(j)\n                    if (j > 0) prev += dp(i)(j - 1)\n             \
    \       if (prev.isEmpty) dp(i)(j) = List(grid(i)(j))\n                    else\
    \ {\n                        val min = prev.minBy(x => (x :+ grid(i)(j)).mkString)\n\
    \                        dp(i)(j) = min :+ grid(i)(j)\n                    }\n\
    \                }\n            }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc0s4ccvo.scala:49)\n\tat Problem.main(tmpc0s4ccvo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        pq.enqueue((0, 0, 0))\n      \
    \  while (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n        \
    \    if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n               \
    \ if (i > 0) pq.enqueue((cost + grid(i - 1)(j), i - 1, j))\n                if\
    \ (i < n - 1) pq.enqueue((cost + grid(i + 1)(j), i + 1, j))\n                if\
    \ (j > 0) pq.enqueue((cost + grid(i)(j - 1), i, j - 1))\n                if (j\
    \ < m - 1) pq.enqueue((cost + grid(i)(j + 1), i, j + 1))\n            }\n    \
    \    }\n        val result = new ListBuffer[Long]()\n        var i = 0\n     \
    \   var j = 0\n        while (k > 0) {\n            result += grid(i)(j)\n   \
    \         k -= 1\n            if (i > 0 && dp(i - 1)(j) < dp(i + 1)(j) && dp(i\
    \ - 1)(j) < dp(i)(j - 1) && dp(i - 1)(j) < dp(i)(j + 1)) {\n                i\
    \ -= 1\n            } else if (i < n - 1 && dp(i + 1)(j) < dp(i - 1)(j) && dp(i\
    \ + 1)(j) < dp(i)(j - 1) && dp(i + 1)(j) < dp(i)(j + 1)) {\n                i\
    \ += 1\n            } else if (j > 0 && dp(i)(j - 1) < dp(i - 1)(j) && dp(i)(j\
    \ - 1) < dp(i + 1)(j) && d\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq0tkk1f8.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq0tkk1f8.scala:70:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpq0tkk1f8.scala:48:14 ------------------------\e[0m\e[0m\n\
    \e[31m48 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of Long - did\
    \ you mean k.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq0tkk1f8.scala:53:94\
    \ ------------------------\e[0m\e[0m\n\e[31m53 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (j > \e[31m0\e[0m && dp(i)(j - \e[31m1\e[0m) < dp(i - \e[31m1\e\
    [0m)(j) && dp(i)(j - \e[31m1\e[0m) < dp(i + \e[31m1\e[0m)(j) && d\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                                  Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq0tkk1f8.scala:69:1 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpq0tkk1f8.scala:55:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m55 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val queue = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n        \
    \        dp(i)(j) = grid(i)(j)\n                queue.enqueue((dp(i)(j), i, j))\n\
    \            }\n        }\n        for (i <- 0 until k - 1) {\n            val\
    \ (cost, x, y) = queue.dequeue\n            if (x - 1 >= 0) {\n              \
    \  if (dp(x - 1)(y) > cost + grid(x - 1)(y)) {\n                    dp(x - 1)(y)\
    \ = cost + grid(x - 1)(y)\n                    prev(x - 1)(y) = x * m + y\n  \
    \                  queue.enqueue((dp(x - 1)(y), x - 1, y))\n                }\n\
    \            }\n            if (x + 1 < n) {\n                if (dp(x + 1)(y)\
    \ > cost + grid(x + 1)(y)) {\n                    dp(x + 1)(y) = cost + grid(x\
    \ + 1)(y)\n                    prev(x + 1)(y) = x * m + y\n                  \
    \  queue.enqueue((dp(x + 1)(y), x + 1, y))\n                }\n            }\n\
    \            if (y - 1 >= 0) {\n                if (dp(x)(y - 1) > cost + grid(x)(y\
    \ - 1)) {\n                    dp(x)(y - 1) = cost + grid(x)(y - 1)\n        \
    \            prev(x)(y - 1) = x * m + y\n                    queue.enqueue((dp(x)(y\
    \ - 1), x, y - 1))\n                }\n            }\n            if (y + 1 <\
    \ m) {\n                if (dp(x)(y + 1) > cost + grid(x)(y + 1)) {\n        \
    \            dp(x)(y\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvkpm627d.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvkpm627d.scala:81:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m81 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpvkpm627d.scala:39:26 --------------------\e[0m\e[0m\n\
    \e[31m39 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k - \e[31m1\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    Long\n\e[31m   |\e[0m                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpvkpm627d.scala:66:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m66 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[List[Long]]()\n                    if (i > 0) lst += dp(i -\
    \ 1)(j)\n                    if (j > 0) lst += dp(i)(j - 1)\n                \
    \    if (lst.isEmpty) dp(i)(j) = List(grid(i)(j))\n                    else {\n\
    \                        val min = lst.minBy(x => (x :+ grid(i)(j)).mkString)\n\
    \                        dp(i)(j) = min :+ grid(i)(j)\n                    }\n\
    \                }\n            }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmt3y0vuh.scala:49)\n\tat Problem.main(tmpmt3y0vuh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[Long]()\n                    if (i > 0) lst ++= dp(i - 1)(j)\n\
    \                    if (j > 0) lst ++= dp(i)(j - 1)\n                    dp(i)(j)\
    \ = (lst.toList :+ grid(i)(j)).sorted.take(k.toInt)\n                }\n     \
    \       }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0v0x76f.scala:45)\n\tat Problem.main(tmpr0v0x76f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (d, i, j) = pq.dequeue\n            if (d <\
    \ dp(i)(j)) {\n                dp(i)(j) = d\n                if (i > 0) pq.enqueue((d\
    \ - grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((d -\
    \ grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((d - grid(i)(j\
    \ - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((d - grid(i)(j +\
    \ 1), i, j + 1))\n            }\n        }\n        val res = ArrayBuffer[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (res.length < k) {\n    \
    \        res += grid(i)(j)\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j))\
    \ {\n                i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j)\
    \ < dp(i)(j)) {\n                i += 1\n            } else if (j > 0 && dp(i)(j\
    \ - 1) < dp(i)(j)) {\n                j -= 1\n            } else if (j < m - 1\
    \ && dp(i)(j + 1) < dp(i)(j)) {\n                j += 1\n            }\n     \
    \   }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(0L)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n\
    \                dp(i)(j) = grid(i)(j)\n                if (i > 0) dp(i)(j) =\
    \ min(dp(i)(j), dp(i - 1)(j))\n                if (j > 0) dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(j - 1))\n            }\n        }\n        val result = ArrayBuffer[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (k > 0) {\n            result\
    \ += grid(i)(j)\n            k -= 1\n            if (i < n - 1 && dp(i + 1)(j)\
    \ < dp(i)(j)) {\n                i += 1\n            } else if (j < n - 1 && dp(i)(j\
    \ + 1) < dp(i)(j)) {\n                j += 1\n            } else {\n         \
    \       i += 1\n                j += 1\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5gb1s815.scala:42:14 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                dp(i)(j) = List(grid(i)(j))\n                if (i > 0\
    \ && dp(i - 1)(j).length <= k && dp(i - 1)(j).length + 1 <= k && dp(i - 1)(j).length\
    \ + 1 < dp(i)(j).length) {\n                    dp(i)(j) = dp(i - 1)(j) :+ grid(i)(j)\n\
    \                }\n                if (j > 0 && dp(i)(j - 1).length <= k && dp(i)(j\
    \ - 1).length + 1 <= k && dp(i)(j - 1).length + 1 < dp(i)(j).length) {\n     \
    \               dp(i)(j) = dp(i)(j - 1) :+ grid(i)(j)\n                }\n   \
    \         }\n        }\n        dp(n - 1)(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1imykxq9.scala:44)\n\tat Problem.main(tmp1imykxq9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    path(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\n           \
    \             path(i)(j) = path(i - 1)(j)\n                    }\n           \
    \         if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1)\n                        path(i)(j) = path(i)(j - 1)\n      \
    \              }\n                    dp(i)(j) += grid(i)(j)\n               \
    \     path(i)(j) = path(i)(j) :+ grid(i)(j)\n                }\n            }\n\
    \        }\n        var i = n - 1\n        var j = m - 1\n        while (k > 1)\
    \ {\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -=\
    \ 1\n            }\n            else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n\
    \                j -= 1\n            }\n            else {\n                i\
    \ -= 1\n                j -= 1\n            }\n            k -= 1\n        }\n\
    \        path(i)(j)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphmib4322.scala:65:14 ------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) for (j <- 0 until n) {\n    \
    \        if (i == 0 && j == 0) dp(i)(j) = List(grid(i)(j))\n            else if\
    \ (i == 0) dp(i)(j) = (dp(i)(j - 1) :+ grid(i)(j)).sorted\n            else if\
    \ (j == 0) dp(i)(j) = (dp(i - 1)(j) :+ grid(i)(j)).sorted\n            else {\n\
    \                val left = dp(i)(j - 1) :+ grid(i)(j)\n                val up\
    \ = dp(i - 1)(j) :+ grid(i)(j)\n                if (left.length > up.length) dp(i)(j)\
    \ = left.sorted\n                else if (left.length < up.length) dp(i)(j) =\
    \ up.sorted\n                else {\n                    var flag = false\n  \
    \                  for (i <- 0 until left.length) {\n                        if\
    \ (left(i) < up(i)) {\n                            dp(i)(j) = left\n         \
    \                   flag = true\n                            break\n         \
    \               }\n                        else if (left(i) > up(i)) {\n     \
    \                       dp(i)(j) = up\n                            flag = true\n\
    \                            break\n                        }\n              \
    \      }\n                    if (!flag) dp(i)(j) = left\n                }\n\
    \            }\n        }\n        dp(n - 1)(n - 1).take(k.toInt)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wcwvtii.scala:45:28 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                            break\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3wcwvtii.scala:50:28 ------------------------\e[0m\e[0m\n\e[31m50 |\e\
    [0m                            break\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798738
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == 0 && j == 0) dp(i)(j) = List(grid(i)(j))\n  \
    \              else {\n                    if (i > 0) {\n                    \
    \    val lst = dp(i - 1)(j)\n                        if (lst.length < k) dp(i)(j)\
    \ = lst :+ grid(i)(j)\n                        else if (lst.length == k) {\n \
    \                           if (lst.last > grid(i)(j)) dp(i)(j) = lst.init :+\
    \ grid(i)(j)\n                        }\n                    }\n             \
    \       if (j > 0) {\n                        val lst = dp(i)(j - 1)\n       \
    \                 if (lst.length < k) {\n                            if (dp(i)(j).length\
    \ < k) dp(i)(j) = lst :+ grid(i)(j)\n                            else if (dp(i)(j).length\
    \ == k) {\n                                if (dp(i)(j).last > grid(i)(j)) dp(i)(j)\
    \ = lst :+ grid(i)(j)\n                            }\n                       \
    \ }\n                        else if (lst.length == k) {\n                   \
    \         if (lst.last > grid(i)(j)) {\n                                if (dp(i)(j).length\
    \ < k) dp(i)(j) = lst.init :+ grid(i)(j)\n                                else\
    \ if (dp(i)(j).length == k) {\n                                    if (dp(i)(j).last\
    \ > grid(i)(j)) dp(i)(j) = lst.init :+ grid(i)(j)\n                          \
    \      }\n                            }\n                        }\n         \
    \           }\n                }\n            }\n        }\n        dp(n - 1)(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb4vxqjf0.scala:64)\n\tat Problem.main(tmpb4vxqjf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ <= cost) {\n                if (i == n - 1 && j == m - 1 && cost <= k) return\
    \ List(grid(i)(j))\n                if (i + 1 < n && dp(i + 1)(j) > cost + grid(i\
    \ + 1)(j)) {\n                    dp(i + 1)(j) = cost + grid(i + 1)(j)\n     \
    \               pq.enqueue((dp(i + 1)(j), i + 1, j))\n                }\n    \
    \            if (j + 1 < m && dp(i)(j + 1) > cost + grid(i)(j + 1)) {\n      \
    \              dp(i)(j + 1) = cost + grid(i)(j + 1)\n                    pq.enqueue((dp(i)(j\
    \ + 1), i, j + 1))\n                }\n            }\n        }\n        return\
    \ List()\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hh212sb.scala:50)\n\tat Problem.main(tmp6hh212sb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val result =\
    \ new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (k > 0) {\n            result += grid(i)(j)\n            k -= 1\n          \
    \  if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n         \
    \   } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n                i += 1\n\
    \            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                j\
    \ -= 1\n            } else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j)) {\n     \
    \           j += 1\n            }\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmriqwfb4.scala:48:14 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    val up_left\
    \ = if (i > 0 && j > 0) dp(i - 1)(j - 1) else List[Long]()\n                 \
    \   val up_left_up = if (i > 1 && j > 0) dp(i - 2)(j - 1) else List[Long]()\n\
    \                    val up_left_left = if (i > 0 && j > 1) dp(i - 1)(j - 2) else\
    \ List[Long]()\n                    val up_left_up_left = if (i > 1 && j > 1)\
    \ dp(i - 2)(j - 2) else List[Long]()\n                    val up_left_up_left_up\
    \ = if (i > 2 && j > 1) dp(i - 3)(j - 2) else List[Long]()\n                 \
    \   val up_left_up_left_left = if (i > 1 && j > 2) dp(i - 2)(j - 3) else List[Long]()\n\
    \                    val up_left_up_left_up_left = if (i > 2 && j > 2) dp(i -\
    \ 3)(j - 3) else List[Long]()\n                    val up_left_up_left_up_left_up\
    \ = if (i > 3 && j > 2) dp(i - 4)(j - 3) else List[Long]()\n                 \
    \   val up_left_up_left_up_left_left = if (i > 2 && j > 3) dp(i - 3)(j - 4) else\
    \ List[Long]()\n                    val up_left_up_left_up_left_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3wm7ul6d.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3wm7ul6d.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp3wm7ul6d.scala:48:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val result =\
    \ new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (k > 0) {\n            result += grid(i)(j)\n            k -= 1\n          \
    \  if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n         \
    \   } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n                i += 1\n\
    \            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                j\
    \ -= 1\n            } else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j)) {\n     \
    \           j += 1\n            }\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp1v6u289.scala:48:14 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ (Int, Int))]()(Ordering.by(-_._1))\n        pq.enqueue((0, (0, 0)))\n      \
    \  while (pq.nonEmpty) {\n            val (cost, (i, j)) = pq.dequeue\n      \
    \      if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n             \
    \   if (i > 0) pq.enqueue((cost + grid(i - 1)(j), (i - 1, j)))\n             \
    \   if (i < n - 1) pq.enqueue((cost + grid(i + 1)(j), (i + 1, j)))\n         \
    \       if (j > 0) pq.enqueue((cost + grid(i)(j - 1), (i, j - 1)))\n         \
    \       if (j < m - 1) pq.enqueue((cost + grid(i)(j + 1), (i, j + 1)))\n     \
    \       }\n        }\n        val result = new ListBuffer[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (k > 0) {\n            result += grid(i)(j)\n\
    \            k -= 1\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n   \
    \             i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j))\
    \ {\n                i += 1\n            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j))\
    \ {\n                j -= 1\n            } else if (j < m - 1 && dp(i)(j + 1)\
    \ < dp(i)(j)) {\n                j += 1\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu8fx0uq_.scala:48:14 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val result =\
    \ new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (k > 0) {\n            result += grid(i)(j)\n            k -= 1\n          \
    \  if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n         \
    \   } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n                i += 1\n\
    \            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                j\
    \ -= 1\n            } else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j)) {\n     \
    \           j += 1\n            }\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp1v6u289.scala:48:14 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[Long]()\n                    if (i > 0) lst ++= dp(i - 1)(j)\n\
    \                    if (j > 0) lst ++= dp(i)(j - 1)\n                    dp(i)(j)\
    \ = (lst.toList :+ grid(i)(j)).sorted.take(k.toInt)\n                }\n     \
    \       }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0v0x76f.scala:45)\n\tat Problem.main(tmpr0v0x76f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val visited = Array.fill(n,\
    \ m)(false)\n        val queue = new Queue[(Int, Int)]\n        queue.enqueue((0,\
    \ 0))\n        dp(0)(0) = 0\n        visited(0)(0) = true\n        while (!queue.isEmpty)\
    \ {\n            val (i, j) = queue.dequeue\n            for (d <- 0 until 4)\
    \ {\n                val (ni, nj) = (i + \"2101\".charAt(d) - '1', j + \"1210\"\
    .charAt(d) - '1')\n                if (ni >= 0 && ni < n && nj >= 0 && nj < m\
    \ && !visited(ni)(nj)) {\n                    dp(ni)(nj) = min(dp(ni)(nj), dp(i)(j)\
    \ + grid(ni)(nj))\n                    visited(ni)(nj) = true\n              \
    \      queue.enqueue((ni, nj))\n                }\n            }\n        }\n\
    \        val result = new ListBuffer[Long]\n        var (i, j) = (n - 1, m - 1)\n\
    \        while (k > 0) {\n            result += grid(i)(j)\n            k -= 1\n\
    \            var (ni, nj) = (i, j)\n            for (d <- 0 until 4) {\n     \
    \           val (ti, tj) = (i + \"2101\".charAt(d) - '1', j + \"1210\".charAt(d)\
    \ - '1')\n                if (ti >= 0 && ti < n && tj >= 0 && tj < m && dp(ti)(tj)\
    \ + grid(ti)(tj) == dp(i)(j)) {\n                    ni = ti\n               \
    \     nj = tj\n                }\n            }\n            i = ni\n        \
    \    j = nj\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuc2xeav5.scala:51:14 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                dp(i)(j) = List(grid(i)(j))\n                if (i > 0\
    \ && dp(i - 1)(j).length <= k && dp(i - 1)(j).length + 1 < dp(i)(j).length) {\n\
    \                    dp(i)(j) = grid(i)(j) :: dp(i - 1)(j)\n                }\n\
    \                if (j > 0 && dp(i)(j - 1).length <= k && dp(i)(j - 1).length\
    \ + 1 < dp(i)(j).length) {\n                    dp(i)(j) = grid(i)(j) :: dp(i)(j\
    \ - 1)\n                }\n            }\n        }\n        dp(n - 1)(n - 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp975urhl8.scala:44)\n\tat Problem.main(tmp975urhl8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n\
    \                if (i == 0 && j == 0) {\n                    dp(i)(j) = grid(i)(j)\n\
    \                } else {\n                    if (i > 0) {\n                \
    \        if (dp(i - 1)(j) + grid(i)(j) < dp(i)(j)) {\n                       \
    \     dp(i)(j) = dp(i - 1)(j) + grid(i)(j)\n                            prev(i)(j)\
    \ = 0\n                        }\n                    }\n                    if\
    \ (j > 0) {\n                        if (dp(i)(j - 1) + grid(i)(j) < dp(i)(j))\
    \ {\n                            dp(i)(j) = dp(i)(j - 1) + grid(i)(j)\n      \
    \                      prev(i)(j) = 1\n                        }\n           \
    \         }\n                }\n            }\n        }\n        val path = ListBuffer[Long]()\n\
    \        var i = n - 1\n        var j = m - 1\n        while (k > 0) {\n     \
    \       path += grid(i)(j)\n            if (prev(i)(j) == 0) {\n             \
    \   i -= 1\n            } else {\n                j -= 1\n            }\n    \
    \        k -= 1\n        }\n        path.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3j92eme.scala:62:14 ------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(_._1))\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        dp(i)(j) = grid(i)(j)\n                pq.enqueue((dp(i)(j), i, j))\n\
    \            }\n        }\n        for (i <- 1 until k.toInt) {\n            val\
    \ (v, x, y) = pq.dequeue\n            if (x > 0) {\n                dp(x - 1)(y)\
    \ = min(dp(x - 1)(y), v + grid(x - 1)(y))\n                pq.enqueue((dp(x -\
    \ 1)(y), x - 1, y))\n            }\n            if (x < n - 1) {\n           \
    \     dp(x + 1)(y) = min(dp(x + 1)(y), v + grid(x + 1)(y))\n                pq.enqueue((dp(x\
    \ + 1)(y), x + 1, y))\n            }\n            if (y > 0) {\n             \
    \   dp(x)(y - 1) = min(dp(x)(y - 1), v + grid(x)(y - 1))\n                pq.enqueue((dp(x)(y\
    \ - 1), x, y - 1))\n            }\n            if (y < n - 1) {\n            \
    \    dp(x)(y + 1) = min(dp(x)(y + 1), v + grid(x)(y + 1))\n                pq.enqueue((dp(x)(y\
    \ + 1), x, y + 1))\n            }\n        }\n        val (v, x, y) = pq.dequeue\n\
    \        val path = ListBuffer[Long]()\n        path += grid(x)(y)\n        for\
    \ (i <- 1 until k.toInt) {\n            if (x > 0 && dp(x - 1)(y) == v + grid(x\
    \ - 1)(y)) {\n                path += grid(x - 1)(y)\n                v\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgzd4a1cu.scala:79:0 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgzd4a1cu.scala:59:8\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m until k.toInt) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m \
    \  |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m60 |\e[0m            \e[33mif\e[0m (x > \e[31m0\e[0m && dp(x - \e[31m1\e\
    [0m)(y) == v + grid(x - \e[31m1\e[0m)(y)) {\n\e[31m61 |\e[0m                path\
    \ += grid(x - \e[31m1\e[0m)(y)\n\e[31m62 |\e[0m                v\n\e[31m63 |\e\
    [0m    }\n\e[31m64 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m65 |\e[0m    assert(minPath((List[\e\
    [35mList\e[0m[\e[35mLong\e[0m]](List[\e[35mLong\e[0m](\e[31m1l\e[0m.toLong, \e\
    [31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong), List[\e[35mLong\e[0m](\e[31m4l\e[0m.toLong,\
    \ \e[31m5l\e[0m.toLong, \e[31m6l\e[0m.toLong), List[\e[35mLong\e[0m](\e[31m7l\e\
    [0m.toLong, \e[31m8l\e[0m.toLong, \e[31m9l\e[0m.toLong))), (\e[31m3l\e[0m)).equals((List[\e\
    [35mLong\e[0m](\e[31m1l\e[0m.toLong, \e[31m2l\e[0m.toLong, \e[31m1l\e[0m.toLong))));\n\
    \e[31m66 |\e[0m    assert(minPath((List[\e[35mList\e[0m[\e[35mLong\e[0m]](List[\e\
    [35mLong\e[0m](\e[31m5l\e[0m.toLong, \e[31m9l\e[0m.toLong, \e[31m3l\e[0m.toLong),\
    \ List[\e[35mLong\e[0m](\e[31m4l\e[0m.toLong, \e[31m1l\e[0m.toLong, \e[31m6l\e\
    [0m.toLong), List[\e[35mLong\e[0m](\e[31m7l\e[0m.toLong, \e[31m8l\e[0m.toLong,\
    \ \e[31m2l\e[0m.toLong))), (\e[31m1l\e[0m)).equals((List[\e[35mLong\e[0m](\e[31m1l\e\
    [0m.toLong))));\n\e[31m67 |\e[0m    assert(minPath((List[\e[35mList\e[0m[\e[35mLong\e\
    [0m]](List[\e[35mLong\e[0m](\e[31m1l\e[0m.toLong, \e[31m2l\e[0m.toLong, \e[31m3l\e\
    [0m.toLong, \e[31m4l\e[0m.toLong), List[\e[35mLong\e[0m](\e[31m5l\e[0m.toLong,\
    \ \e[31m6l\e[0m.toLong, \e[31m7l\e[0m.toLong, \e[31m8l\e[0m.toLong), List[\e[35mLong\e\
    [0m](\e[31m9l\e[0m.toLong, \e[31m10l\e[0m.toLong, \e[31m11l\e[0m.toLong, \e[31m12l\e\
    [0m.toLong), List[\e[35mLong\e[0m](\e[31m13l\e[0m.toLong, \e[31m14l\e[0m.toLong,\
    \ \e[31m15l\e[0m.toLong, \e[31m16l\e[0m.toLo"
  stdout: ''
  timestamp: 1659798745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        pq.enqueue((0, 0, 0))\n      \
    \  while (!pq.isEmpty) {\n            val (d, i, j) = pq.dequeue\n           \
    \ if (dp(i)(j) > d) {\n                dp(i)(j) = d\n                if (i > 0)\
    \ pq.enqueue((d + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((d\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((d + grid(i)(j\
    \ - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((d + grid(i)(j +\
    \ 1), i, j + 1))\n            }\n        }\n        val pq2 = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        pq2.enqueue((0, 0, 0))\n     \
    \   val dp2 = Array.fill(n, m)(Long.MaxValue)\n        val parent = Array.fill(n,\
    \ m)((0, 0))\n        while (!pq2.isEmpty) {\n            val (d, i, j) = pq2.dequeue\n\
    \            if (dp2(i)(j) > d) {\n                dp2(i)(j) = d\n           \
    \     if (i > 0) {\n                    pq2.enqueue((d + grid(i - 1)(j), i - 1,\
    \ j))\n                    parent(i - 1)(j) = (i, j)\n                }\n    \
    \            if (i < n - 1) {\n                    pq2.enqueue((d + grid(i + 1)(j),\
    \ i + 1, j))\n                    parent(i + 1)(j) = (i, j)\n                }\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn7ys9eiv.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn7ys9eiv.scala:47:8\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mwhile\e[0m (!pq2.isEmpty)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m48 |\e[0m            \e[33mval\e\
    [0m (d, i, j) = pq2.dequeue\n\e[31m49 |\e[0m            \e[33mif\e[0m (dp2(i)(j)\
    \ > d) {\n\e[31m50 |\e[0m                dp2(i)(j) = d\n\e[31m51 |\e[0m      \
    \          \e[33mif\e[0m (i > \e[31m0\e[0m) {\n\e[31m52 |\e[0m               \
    \     pq2.enqueue((d + grid(i - \e[31m1\e[0m)(j), i - \e[31m1\e[0m, j))\n\e[31m53\
    \ |\e[0m                    parent(i - \e[31m1\e[0m)(j) = (i, j)\n\e[31m54 |\e\
    [0m                }\n\e[31m55 |\e[0m                \e[33mif\e[0m (i < n - \e\
    [31m1\e[0m) {\n\e[31m56 |\e[0m                    pq2.enqueue((d + grid(i + \e\
    [31m1\e[0m)(j), i + \e[31m1\e[0m, j))\n\e[31m57 |\e[0m                    parent(i\
    \ + \e[31m1\e[0m)(j) = (i, j)\n\e[31m58 |\e[0m                }\n\e[31m59 |\e\
    [0m    }\n\e[31m60 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m61 |\e[0m    assert(minPath((List[\e\
    [35mList\e[0m[\e[35mLong\e[0m]](List[\e[35mLong\e[0m](\e[31m1l\e[0m.toLong, \e\
    [31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong), List[\e[35mLong\e[0m](\e[31m4l\e[0m.toLong,\
    \ \e[31m5l\e[0m.toLong, \e[31m6l\e[0m.toLong), List[\e[35mLong\e[0m](\e[31m7l\e\
    [0m.toLong, \e[31m8l\e[0m.toLong, \e[31m9l\e[0m.toLong))), (\e[31m3l\e[0m)).equals((List[\e\
    [35mLong\e[0m](\e[31m1l\e[0m.toLong, \e[31m2l\e[0m.toLong, \e[31m1l\e[0m.toLong))));\n\
    \e[31m62 |\e[0m    assert(minPath((List[\e[35mList\e[0m[\e[35mLong\e[0m]](List[\e\
    [35mLong\e[0m](\e[31m5l\e[0m.toLong, \e[31m9l\e[0m.toLong, \e[31m3l\e[0m.toLong),\
    \ List[\e[35mLong\e[0m](\e[31m4l\e[0m.toLong, \e[31m1l\e[0m.toLong, \e[31m6l\e\
    [0m.toLong), List[\e[35mLong\e[0m](\e[31m7l\e[0m.toLong, \e[31m8l\e[0m.toLong,\
    \ \e[31m2l\e[0m.toLong))), (\e[31m1l\e[0m)).equals((List[\e[35mLong\e[0m](\e[31m1l\e\
    [0m.toLong))));\n\e[31m63 |\e[0m    asse"
  stdout: ''
  timestamp: 1659798745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == 0 && j == 0) dp(i)(j) = List(grid(i)(j))\n  \
    \              else {\n                    val lst = ListBuffer[List[Long]]()\n\
    \                    if (i > 0) lst += (grid(i)(j) :: dp(i - 1)(j))\n        \
    \            if (j > 0) lst += (grid(i)(j) :: dp(i)(j - 1))\n                \
    \    if (lst.isEmpty) dp(i)(j) = List(grid(i)(j))\n                    else dp(i)(j)\
    \ = lst.minBy(x => x)\n                }\n            }\n        }\n        dp(n\
    \ - 1)(n - 1).take(k.toInt)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwiv_qm2q.scala:38:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    \e[33melse\e[0m dp(i)(j) = lst.minBy(x\
    \ => x)\n\e[31m\e[31m   |\e[0m                                               \
    \      ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for List[Long]..\n\e\
    [31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mList[Long]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[List[Long]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[List[Long]].\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m   |\e[0m\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659798746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        // Solution 1:\n        // Let's say we\
    \ have a path of length k, and let's say the path is\n        // (x1, y1) -> (x2,\
    \ y2) -> ... -> (xk, yk).\n        // We can see that the path is uniquely determined\
    \ by the sequence\n        // (x1, y1, x2, y2, ..., xk, yk).\n        // Let's\
    \ say we have two paths (x1, y1, x2, y2, ..., xk, yk) and\n        // (x1', y1',\
    \ x2', y2', ..., xk', yk').\n        // If (x1, y1, x2, y2, ..., xk, yk) is lexicographically\
    \ less than\n        // (x1', y1', x2', y2', ..., xk', yk'), then the path\n \
    \       // (x1, y1) -> (x2, y2) -> ... -> (xk, yk) is less than the path\n   \
    \     // (x1', y1') -> (x2', y2') -> ... -> (xk', yk').\n        // So we can\
    \ use dynamic programming to find the minimum path.\n        // Let dp(i, j, k)\
    \ be the minimum path starting from (i, j) of length k.\n        // dp(i, j, k)\
    \ = min(dp(i - 1, j, k - 1), dp(i + 1, j, k - 1), dp(i, j - 1, k - 1), dp(i, j\
    \ + 1, k - 1))\n        // dp(i, j, 0) = (i, j)\n        // dp(i, j, k) = (i,\
    \ j) + dp(i - 1, j, k - 1) if dp(i - 1, j, k - 1) is lexicographically less than\n\
    \        // dp(i + 1, j, k - 1), dp(i, j - 1, k - 1), dp(i, j + 1, k - 1).\n \
    \       // dp(i, j, k) = (i, j) + dp(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpki6511hf.scala:27:66\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m    \e[33mdef\e[0m \e[36mminPath\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mk\e\
    [0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e[31m\e[31m  \
    \ |\e[0m                                                                  ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \ Required: List[Long]\n\e[31m28 |\e[0m        \e[34m// Solution 1:\e[0m\n\e[31m29\
    \ |\e[0m        \e[34m// Let's say we have a path of length k, and let's say the\
    \ path is\e[0m\n\e[31m30 |\e[0m        \e[34m// (x1, y1) -> (x2, y2) -> ... ->\
    \ (xk, yk).\e[0m\n\e[31m31 |\e[0m        \e[34m// We can see that the path is\
    \ uniquely determined by the sequence\e[0m\n\e[31m32 |\e[0m        \e[34m// (x1,\
    \ y1, x2, y2, ..., xk, yk).\e[0m\n\e[31m33 |\e[0m        \e[34m// Let's say we\
    \ have two paths (x1, y1, x2, y2, ..., xk, yk) and\e[0m\n\e[31m34 |\e[0m     \
    \   \e[34m// (x1', y1', x2', y2', ..., xk', yk').\e[0m\n\e[31m35 |\e[0m      \
    \  \e[34m// If (x1, y1, x2, y2, ..., xk, yk) is lexicographically less than\e\
    [0m\n\e[31m36 |\e[0m        \e[34m// (x1', y1', x2', y2', ..., xk', yk'), then\
    \ the path\e[0m\n\e[31m37 |\e[0m        \e[34m// (x1, y1) -> (x2, y2) -> ... ->\
    \ (xk, yk) is less than the path\e[0m\n\e[31m38 |\e[0m        \e[34m// (x1', y1')\
    \ -> (x2', y2') -> ... -> (xk', yk').\e[0m\n\e[31m39 |\e[0m        \e[34m// So\
    \ we can use dynamic programming to find the minimum path.\e[0m\n\e[31m40 |\e\
    [0m        \e[34m// Let dp(i, j, k) be the minimum path starting from (i, j) of\
    \ length k.\e[0m\n\e[31m41 |\e[0m        \e[34m// dp(i, j, k) = min(dp(i - 1,\
    \ j, k - 1), dp(i + 1, j, k - 1), dp(i, j - 1, k - 1), dp(i, j + 1, k - 1))\e\
    [0m\n\e[31m42 |\e[0m        \e[34m// dp(i, j, 0) = (i, j)\e[0m\n\e[31m43 |\e[0m\
    \        \e[34m// dp(i, j, k) = (i, j) + dp(i - 1, j, k - 1) if dp(i - 1, j, k\
    \ - 1) is lexicographically less than\e[0m\n\e[31m44 |\e[0m        \e[34m// dp(i\
    \ + 1, j, k - 1), dp(i, j - 1, k - 1), dp(i, j + 1, k - 1).\e[0m\n\e[31m45 |\e\
    [0m"
  stdout: ''
  timestamp: 1659798745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val prev = Array.fill(n, n)(-1)\n        for (i <-\
    \ 0 until n) {\n            for (j <- 0 until n) {\n                if (i == 0\
    \ && j == 0) {\n                    dp(i)(j) = grid(i)(j)\n                } else\
    \ {\n                    if (i > 0) {\n                        if (dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                            dp(i)(j) = dp(i - 1)(j)\n       \
    \                     prev(i)(j) = 0\n                        }\n            \
    \        }\n                    if (j > 0) {\n                        if (dp(i)(j\
    \ - 1) < dp(i)(j)) {\n                            dp(i)(j) = dp(i)(j - 1)\n  \
    \                          prev(i)(j) = 1\n                        }\n       \
    \             }\n                    dp(i)(j) += grid(i)(j)\n                }\n\
    \            }\n        }\n        var i = n - 1\n        var j = n - 1\n    \
    \    var path = List[Long]()\n        for (l <- 0 until k.toInt) {\n         \
    \   path = grid(i)(j) :: path\n            if (prev(i)(j) == 0) {\n          \
    \      i -= 1\n            } else if (prev(i)(j) == 1) {\n                j -=\
    \ 1\n            }\n        }\n        path\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphym5yjmp.scala:66)\n\tat Problem.main(tmphym5yjmp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val result =\
    \ ArrayBuffer[Long]()\n        var i = 0\n        var j = 0\n        while (k\
    \ > 0) {\n            result += grid(i)(j)\n            k -= 1\n            if\
    \ (i > 0 && dp(i - 1)(j) < dp(i + 1)(j) && dp(i - 1)(j) < dp(i)(j - 1) && dp(i\
    \ - 1)(j) < dp(i)(j + 1)) {\n                i -= 1\n            } else if (i\
    \ < n - 1 && dp(i + 1)(j) < dp(i - 1)(j) && dp(i + 1)(j) < dp(i)(j - 1) && dp(i\
    \ + 1)(j) < dp(i)(j + 1)) {\n                i += 1\n            } else if (j\
    \ > 0 && dp(i)(j - 1) < dp(i - 1)(j) && dp(i)(j - 1) < dp(i + 1)(j) && dp(i\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpukj_jx94.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpukj_jx94.scala:70:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpukj_jx94.scala:48:14 ------------------------\e[0m\e[0m\n\
    \e[31m48 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of Long - did\
    \ you mean k.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpukj_jx94.scala:53:96\
    \ --------------------\e[0m\e[0m\n\e[31m53 |\e[0m            } \e[33melse\e[0m\
    \ \e[33mif\e[0m (j > \e[31m0\e[0m && dp(i)(j - \e[31m1\e[0m) < dp(i - \e[31m1\e\
    [0m)(j) && dp(i)(j - \e[31m1\e[0m) < dp(i + \e[31m1\e[0m)(j) && dp(i\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                              ^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                               Found:    Array[Long]\n\e[31m   |\e[0m       \
    \                                            Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpukj_jx94.scala:69:1 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpukj_jx94.scala:55:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m55 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659798747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    if\
    \ (i > 0) {\n                        val lst = dp(i - 1)(j)\n                \
    \        if (lst.length < k) {\n                            dp(i)(j) = (grid(i)(j)\
    \ :: lst).sorted\n                        } else if (lst.length == k) {\n    \
    \                        val lst2 = (grid(i)(j) :: lst).sorted\n             \
    \               if (lst2 < dp(i)(j)) dp(i)(j) = lst2\n                       \
    \ }\n                    }\n                    if (j > 0) {\n               \
    \         val lst = dp(i)(j - 1)\n                        if (lst.length < k)\
    \ {\n                            dp(i)(j) = (grid(i)(j) :: lst).sorted\n     \
    \                   } else if (lst.length == k) {\n                          \
    \  val lst2 = (grid(i)(j) :: lst).sorted\n                            if (lst2\
    \ < dp(i)(j)) dp(i)(j) = lst2\n                        }\n                   \
    \ }\n                }\n            }\n        }\n        dp(n - 1)(m - 1)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1uu600p.scala:41:37 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc1uu600p.scala:50:37 ------------------------\e[0m\e\
    [0m\n\e[31m50 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    path(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\n           \
    \             path(i)(j) = path(i - 1)(j)\n                    }\n           \
    \         if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1)\n                        path(i)(j) = path(i)(j - 1)\n      \
    \              }\n                    dp(i)(j) += grid(i)(j)\n               \
    \     path(i)(j) = path(i)(j) :+ grid(i)(j)\n                }\n            }\n\
    \        }\n        path(n - 1)(m - 1).take(k.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9svtsq6_.scala:55)\n\tat Problem.main(tmp9svtsq6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val q = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        dp(i)(j) = grid(i)(j)\n                q.enqueue((grid(i)(j), i, j))\n\
    \            }\n        }\n        val dx = Array(-1, 1, 0, 0)\n        val dy\
    \ = Array(0, 0, -1, 1)\n        for (i <- 0 until k - 1) {\n            val (v,\
    \ x, y) = q.dequeue\n            for (j <- 0 until 4) {\n                val nx\
    \ = x + dx(j)\n                val ny = y + dy(j)\n                if (nx >= 0\
    \ && nx < n && ny >= 0 && ny < n) {\n                    if (dp(nx)(ny) > v +\
    \ grid(nx)(ny)) {\n                        dp(nx)(ny) = v + grid(nx)(ny)\n   \
    \                     q.enqueue((dp(nx)(ny), nx, ny))\n                    }\n\
    \                }\n            }\n        }\n        val (v, x, y) = q.dequeue\n\
    \        List(grid(x)(y))\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi4zuhjx.scala:39:26\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val q = Queue[(Int, Int)]()\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    dp(i)(j) = 0\n                    q.enqueue((i, j))\n   \
    \             }\n            }\n        }\n        val dx = Array(-1, 1, 0, 0)\n\
    \        val dy = Array(0, 0, -1, 1)\n        while (!q.isEmpty) {\n         \
    \   val (x, y) = q.dequeue\n            for (i <- 0 until 4) {\n             \
    \   val nx = x + dx(i)\n                val ny = y + dy(i)\n                if\
    \ (nx >= 0 && nx < n && ny >= 0 && ny < m && dp(nx)(ny) > dp(x)(y) + 1) {\n  \
    \                  dp(nx)(ny) = dp(x)(y) + 1\n                    prev(nx)(ny)\
    \ = i\n                    q.enqueue((nx, ny))\n                }\n          \
    \  }\n        }\n        val result = ListBuffer[Long]()\n        var x = 0\n\
    \        var y = 0\n        var p = prev(x)(y)\n        while (k > 0) {\n    \
    \        result += grid(x)(y)\n            k -= 1\n            x += dx(p)\n  \
    \          y += dy(p)\n            p = prev(x)(y)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_65n48ur.scala:61:14 ------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ l = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val u = if\
    \ (j > 0) dp(i)(j - 1) else List[Long]()\n                    if (l.length ==\
    \ 0 && u.length == 0) dp(i)(j) = List(grid(i)(j))\n                    else if\
    \ (l.length == 0) dp(i)(j) = (grid(i)(j) :: u).sorted\n                    else\
    \ if (u.length == 0) dp(i)(j) = (grid(i)(j) :: l).sorted\n                   \
    \ else {\n                        val lu = (grid(i)(j) :: l).sorted\n        \
    \                val ul = (grid(i)(j) :: u).sorted\n                        if\
    \ (lu.compare(ul) < 0) dp(i)(j) = lu\n                        else dp(i)(j) =\
    \ ul\n                    }\n                }\n            }\n        }\n   \
    \     dp(n - 1)(m - 1).take(k.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp954w3orx.scala:43:31 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                        \e[33mif\e[0m (lu.compare(ul)\
    \ < \e[31m0\e[0m) dp(i)(j) = lu\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue compare is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n          \
    \      pq.enqueue((dp(i)(j), i, j))\n            }\n        }\n        val dirs\
    \ = List((0, 1), (0, -1), (1, 0), (-1, 0))\n        val visited = Array.fill(n,\
    \ m)(false)\n        var result = List[Long]()\n        for (i <- 0 until k) {\n\
    \            while (visited(pq.head._2)(pq.head._3)) pq.dequeue\n            val\
    \ (x, y) = (pq.head._2, pq.head._3)\n            result = result :+ grid(x)(y)\n\
    \            visited(x)(y) = true\n            for (dir <- dirs) {\n         \
    \       val (dx, dy) = dir\n                val (nx, ny) = (x + dx, y + dy)\n\
    \                if (nx >= 0 && nx < n && ny >= 0 && ny < m && !visited(nx)(ny))\
    \ {\n                    dp(nx)(ny) = min(dp(nx)(ny), dp(x)(y) + grid(nx)(ny))\n\
    \                    pq.enqueue((dp(nx)(ny), nx, ny))\n                }\n   \
    \         }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp64_v5fkx.scala:41:26\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val prev = Array.fill(n, n)((0, 0))\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ == 0 && j == 0) {\n                    dp(i)(j) = grid(i)(j)\n             \
    \   } else {\n                    if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n  \
    \                      dp(i)(j) = dp(i - 1)(j)\n                        prev(i)(j)\
    \ = (i - 1, j)\n                    }\n                    if (j > 0 && dp(i)(j\
    \ - 1) < dp(i)(j)) {\n                        dp(i)(j) = dp(i)(j - 1)\n      \
    \                  prev(i)(j) = (i, j - 1)\n                    }\n          \
    \          dp(i)(j) += grid(i)(j)\n                }\n            }\n        }\n\
    \        val result = ListBuffer[Long]()\n        var cur = (n - 1, n - 1)\n \
    \       while (k > 0) {\n            result += grid(cur._1)(cur._2)\n        \
    \    cur = prev(cur._1)(cur._2)\n            k -= 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiv49_hhb.scala:53:14 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        pq.enqueue((0, 0, 0))\n      \
    \  while (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n        \
    \    if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n               \
    \ if (i > 0) pq.enqueue((cost + grid(i - 1)(j), i - 1, j))\n                if\
    \ (i < n - 1) pq.enqueue((cost + grid(i + 1)(j), i + 1, j))\n                if\
    \ (j > 0) pq.enqueue((cost + grid(i)(j - 1), i, j - 1))\n                if (j\
    \ < m - 1) pq.enqueue((cost + grid(i)(j + 1), i, j + 1))\n            }\n    \
    \    }\n        val result = new ListBuffer[Long]()\n        var i = 0\n     \
    \   var j = 0\n        for (k <- 1 to k.toInt) {\n            result += grid(i)(j)\n\
    \            if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n\
    \            } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n            \
    \    i += 1\n            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n    \
    \            j -= 1\n            } else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j))\
    \ {\n                j += 1\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpazw_jqlh.scala:61)\n\tat Problem.main(tmpazw_jqlh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                dp(i)(j) = List(grid(i)(j))\n\
    \                if (i > 0 && dp(i - 1)(j).length > 0 && dp(i - 1)(j).length <\
    \ k) {\n                    val newPath = dp(i - 1)(j) :+ grid(i)(j)\n       \
    \             if (dp(i)(j).length == 0 || newPath < dp(i)(j)) dp(i)(j) = newPath\n\
    \                }\n                if (j > 0 && dp(i)(j - 1).length > 0 && dp(i)(j\
    \ - 1).length < k) {\n                    val newPath = dp(i)(j - 1) :+ grid(i)(j)\n\
    \                    if (dp(i)(j).length == 0 || newPath < dp(i)(j)) dp(i)(j)\
    \ = newPath\n                }\n            }\n        }\n        dp(n - 1)(m\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoogrnvbi.scala:36:56 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    \e[33mif\e[0m (dp(i)(j).length ==\
    \ \e[31m0\e[0m || newPath < dp(i)(j)) dp(i)(j) = newPath\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue < is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoogrnvbi.scala:40:56\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m                    \e[33mif\e\
    [0m (dp(i)(j).length == \e[31m0\e[0m || newPath < dp(i)(j)) dp(i)(j) = newPath\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[Long]()\n                    if (i > 0) lst ++= dp(i - 1)(j)\n\
    \                    if (j > 0) lst ++= dp(i)(j - 1)\n                    dp(i)(j)\
    \ = (lst.toList :+ grid(i)(j)).sorted.take(k.toInt)\n                }\n     \
    \       }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0v0x76f.scala:45)\n\tat Problem.main(tmpr0v0x76f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val res = ArrayBuffer[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (res.length < k) {\n    \
    \        res += grid(i)(j)\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j))\
    \ {\n                i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j)\
    \ < dp(i)(j)) {\n                i += 1\n            } else if (j > 0 && dp(i)(j\
    \ - 1) < dp(i)(j)) {\n                j -= 1\n            } else if (j < m - 1\
    \ && dp(i)(j + 1) < dp(i)(j)) {\n                j += 1\n            }\n     \
    \   }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc8g15ln2.scala:61)\n\tat Problem.main(tmpc8g15ln2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                val v = grid(i)(j)\n                if (i == 0 && j ==\
    \ 0) dp(i)(j) = List(v)\n                else if (i == 0) {\n                \
    \    val lst = dp(i)(j - 1)\n                    if (lst.length < k) dp(i)(j)\
    \ = v :: lst\n                    else if (lst.head > v) dp(i)(j) = v :: lst.tail\n\
    \                    else dp(i)(j) = lst\n                }\n                else\
    \ if (j == 0) {\n                    val lst = dp(i - 1)(j)\n                \
    \    if (lst.length < k) dp(i)(j) = v :: lst\n                    else if (lst.head\
    \ > v) dp(i)(j) = v :: lst.tail\n                    else dp(i)(j) = lst\n   \
    \             }\n                else {\n                    val lst1 = dp(i -\
    \ 1)(j)\n                    val lst2 = dp(i)(j - 1)\n                    if (lst1.length\
    \ < k && lst2.length < k) {\n                        if (lst1.head < lst2.head)\
    \ dp(i)(j) = v :: lst1\n                        else dp(i)(j) = v :: lst2\n  \
    \                  }\n                    else if (lst1.length < k) {\n      \
    \                  if (lst1.head < lst2.head) dp(i)(j) = v :: lst1\n         \
    \               else dp(i)(j) = v :: lst2.tail\n                    }\n      \
    \              else if (lst2.length < k) {\n                        if (lst1.head\
    \ < lst2.head) dp(i)(j) = v :: lst1.tail\n                        else dp(i)(j)\
    \ = v :: lst2\n                    }\n                    else {\n           \
    \             if (lst1.head < l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfimczfzd.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfimczfzd.scala:79:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpfimczfzd.scala:62:40 ------------------------\e[0m\e[0m\n\
    \e[31m62 |\e[0m                        \e[33mif\e[0m (lst1.head < l\n\e[31m\e\
    [31m   |\e[0m                                        ^\e[0m\n\e[31m   |\e[0m \
    \                                       Not found: l\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpfimczfzd.scala:64:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m64 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)((Long.MaxValue, List[Long]()))\n        val\
    \ q = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(x => x._1))\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until m) {\n                dp(i)(j)\
    \ = (grid(i)(j), List(grid(i)(j)))\n                q.enqueue((grid(i)(j), i,\
    \ j))\n            }\n        }\n        while (q.nonEmpty) {\n            val\
    \ (v, i, j) = q.dequeue\n            if (v > dp(i)(j)._1) continue\n         \
    \   if (dp(i)(j)._2.length == k) return dp(i)(j)._2\n            for (d <- 0 until\
    \ 4) {\n                val (ni, nj) = (i + \"2101\".charAt(d) - '1', j + \"1210\"\
    .charAt(d) - '1')\n                if (ni >= 0 && ni < n && nj >= 0 && nj < m)\
    \ {\n                    val nv = dp(i)(j)._1 + grid(ni)(nj)\n               \
    \     if (nv < dp(ni)(nj)._1) {\n                        dp(ni)(nj) = (nv, dp(i)(j)._2\
    \ :+ grid(ni)(nj))\n                        q.enqueue((nv, ni, nj))\n        \
    \            }\n                }\n            }\n        }\n        List[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1iajw0u9.scala:40:33 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            \e[33mif\e[0m (v > dp(i)(j)._1) continue\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Not found: continue\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        // This problem is equivalent to finding\
    \ the minimum path of length k in\n        // the graph with N * N vertices, where\
    \ the vertices are the cells of the\n        // grid, and two vertices are connected\
    \ if and only if they share an edge.\n        // The value of a vertex is the\
    \ value of the corresponding cell.\n        // The problem can be solved using\
    \ Dijkstra's algorithm.\n        // The time complexity is O(N * N * log(N * N))\
    \ = O(N^2 * log(N)).\n        // The space complexity is O(N * N).\n        val\
    \ n = grid.length\n        val graph = Array.ofDim[List[(Int, Long)]](n * n)\n\
    \        for (i <- 0 until n; j <- 0 until n) {\n            val index = i * n\
    \ + j\n            graph(index) = List()\n            if (i > 0) graph(index)\
    \ = (index - n, grid(i - 1)(j)) :: graph(index)\n            if (i < n - 1) graph(index)\
    \ = (index + n, grid(i + 1)(j)) :: graph(index)\n            if (j > 0) graph(index)\
    \ = (index - 1, grid(i)(j - 1)) :: graph(index)\n            if (j < n - 1) graph(index)\
    \ = (index + 1, grid(i)(j + 1)) :: graph(index)\n        }\n        val dist =\
    \ Array.fill(n * n)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0))\n        dist(0) = 0\n\
    \        while (!pq.isEmpty) {\n            val (d, u) = pq.dequeue\n        \
    \    if (d > dist(u)) continue\n            for ((v, w) <- graph(u)) {\n     \
    \           val newDist = d + w\n                if (newDist < dist(v)) {\n  \
    \                  dist(v) = newDist\n                    pq.enqueue((newDist,\
    \ v))\n                }\n            }\n        }\n        val result = ArrayBuffer[Long]()\n\
    \        var index = n\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpye353l10.scala:51:29 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            \e[33mif\e[0m (d > dist(u)) continue\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpye353l10.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ candidates = ListBuffer[List[Long]]()\n                    if (i > 0) candidates\
    \ += dp(i - 1)(j)\n                    if (j > 0) candidates += dp(i)(j - 1)\n\
    \                    if (candidates.isEmpty) dp(i)(j) = List(grid(i)(j))\n   \
    \                 else dp(i)(j) = (grid(i)(j) :: candidates.minBy(_.mkString)).take(k.toInt)\n\
    \                }\n            }\n        }\n        dp(n - 1)(m - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc1rnkguf.scala:46)\n\tat Problem.main(tmpc1rnkguf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val q = new Queue[(Int, Int)]\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (grid(i)(j) == 1)\
    \ {\n                    dp(i)(j) = 0\n                    q.enqueue((i, j))\n\
    \                }\n            }\n        }\n        val dirs = List((-1, 0),\
    \ (1, 0), (0, -1), (0, 1))\n        while (!q.isEmpty) {\n            val (i,\
    \ j) = q.dequeue\n            for ((di, dj) <- dirs) {\n                val ii\
    \ = i + di\n                val jj = j + dj\n                if (ii >= 0 && ii\
    \ < n && jj >= 0 && jj < m && dp(ii)(jj) > dp(i)(j) + 1) {\n                 \
    \   dp(ii)(jj) = dp(i)(j) + 1\n                    prev(ii)(jj) = i * m + j\n\
    \                    q.enqueue((ii, jj))\n                }\n            }\n \
    \       }\n        var i = 0\n        var j = 0\n        var min = Long.MaxValue\n\
    \        for (ii <- 0 until n) {\n            for (jj <- 0 until m) {\n      \
    \          if (dp(ii)(jj) < min) {\n                    min = dp(ii)(jj)\n   \
    \                 i = ii\n                    j = jj\n                }\n    \
    \        }\n        }\n        val path = new ListBuffer[Long]\n        var cur\
    \ = i * m + j\n        while (cur != -1) {\n            path += grid(cur / m)(cur\
    \ % m)\n            cur = prev(cur / m)(cur % m)\n        }\n        path.reverse.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpinl5xhe3.scala:75)\n\tat Problem.main(tmpinl5xhe3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        // dp(i)(j)(k) = minimum path of length\
    \ k starting from (i, j)\n        val dp = Array.fill(grid.length, grid.length,\
    \ k.toInt + 1)(Long.MaxValue)\n        for (i <- 0 until grid.length; j <- 0 until\
    \ grid.length) {\n            dp(i)(j)(1) = grid(i)(j)\n        }\n        for\
    \ (l <- 2 to k.toInt) {\n            for (i <- 0 until grid.length; j <- 0 until\
    \ grid.length) {\n                if (i > 0) dp(i)(j)(l) = min(dp(i)(j)(l), dp(i\
    \ - 1)(j)(l - 1))\n                if (i < grid.length - 1) dp(i)(j)(l) = min(dp(i)(j)(l),\
    \ dp(i + 1)(j)(l - 1))\n                if (j > 0) dp(i)(j)(l) = min(dp(i)(j)(l),\
    \ dp(i)(j - 1)(l - 1))\n                if (j < grid.length - 1) dp(i)(j)(l) =\
    \ min(dp(i)(j)(l), dp(i)(j + 1)(l - 1))\n                dp(i)(j)(l) += grid(i)(j)\n\
    \            }\n        }\n        var min = Long.MaxValue\n        var min_i\
    \ = -1\n        var min_j = -1\n        for (i <- 0 until grid.length; j <- 0\
    \ until grid.length) {\n            if (dp(i)(j)(k.toInt) < min) {\n         \
    \       min = dp(i)(j)(k.toInt)\n                min_i = i\n                min_j\
    \ = j\n            }\n        }\n        var result = List[Long]()\n        var\
    \ cur_i = min_i\n        var cur_j = min_j\n        for (l <- k.toInt to 1 by\
    \ -1) {\n            result = grid(cur_i)(cur_j) :: result\n            if (cur_i\
    \ > 0 && dp(cur_i)(cur\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb35oggik.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb35oggik.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmpb35oggik.scala:35:41 -----------------------------\e[0m\e[0m\n\
    \e[31m35 |\e[0m                \e[33mif\e[0m (i > \e[31m0\e[0m) dp(i)(j)(l) =\
    \ min(dp(i)(j)(l), dp(i - \e[31m1\e[0m)(j)(l - \e[31m1\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                \e[33mvariable\e[0m \e[35mmin\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpb35oggik.scala:36:55\
    \ -----------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                \e[33mif\e\
    [0m (i < grid.length - \e[31m1\e[0m) dp(i)(j)(l) = min(dp(i)(j)(l), dp(i + \e\
    [31m1\e[0m)(j)(l - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^^^\e[0m\n\e[31m   |\e[0m                 \
    \                  \e[33mvariable\e[0m \e[35mmin\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpb35oggik.scala:37:41 -----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mif\e[0m (j > \e[31m0\e[0m) dp(i)(j)(l)\
    \ = min(dp(i)(j)(l), dp(i)(j - \e[31m1\e[0m)(l - \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0m \
    \                                  \e[33mvariable\e[0m \e[35mmin\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpb35oggik.scala:38:55\
    \ -----------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                \e[33mif\e\
    [0m (j < grid.length - \e[31m1\e[0m) dp(i)(j)(l) = min(dp(i"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        // dp(i)(j)(k) = the minimum path of length\
    \ k starting from (i, j)\n        val dp = Array.fill(grid.length, grid.length,\
    \ k.toInt + 1)(Long.MaxValue)\n        for (i <- 0 until grid.length; j <- 0 until\
    \ grid.length) {\n            dp(i)(j)(1) = grid(i)(j)\n        }\n        for\
    \ (i <- 0 until grid.length; j <- 0 until grid.length) {\n            for (l <-\
    \ 2 to k.toInt) {\n                if (i + 1 < grid.length) dp(i)(j)(l) = min(dp(i)(j)(l),\
    \ dp(i + 1)(j)(l - 1))\n                if (i - 1 >= 0) dp(i)(j)(l) = min(dp(i)(j)(l),\
    \ dp(i - 1)(j)(l - 1))\n                if (j + 1 < grid.length) dp(i)(j)(l) =\
    \ min(dp(i)(j)(l), dp(i)(j + 1)(l - 1))\n                if (j - 1 >= 0) dp(i)(j)(l)\
    \ = min(dp(i)(j)(l), dp(i)(j - 1)(l - 1))\n            }\n        }\n        var\
    \ min = Long.MaxValue\n        var minI = -1\n        var minJ = -1\n        for\
    \ (i <- 0 until grid.length; j <- 0 until grid.length) {\n            if (dp(i)(j)(k.toInt)\
    \ < min) {\n                min = dp(i)(j)(k.toInt)\n                minI = i\n\
    \                minJ = j\n            }\n        }\n        var result = List[Long]()\n\
    \        var i = minI\n        var j = minJ\n        for (l <- k.toInt to 1 by\
    \ -1) {\n            result = grid(i)(j) :: result\n            if (i + 1 < grid.length\
    \ && dp(i)(j)(l) == dp(i + 1)(j)(l - 1)) {\n                i += 1\n         \
    \   } else\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4a0wjyuq.scala:58:18 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            } \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m\
    \                  ^\e[0m\n\e[31m   |\e[0m                  expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp4a0wjyuq.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp4a0wjyuq.scala:35:55 -----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mif\e[0m (i + \e[31m1\e[0m < grid.length)\
    \ dp(i)(j)(l) = min(dp(i)(j)(l), dp(i + \e[31m1\e[0m)(j)(l - \e[31m1\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                       ^^^\e\
    [0m\n\e[31m   |\e[0m                                   \e[33mvariable\e[0m \e\
    [35mmin\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmp4a0wjyuq.scala:36:46 -----------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m                \e[33mif\e[0m (i - \e[31m1\e[0m >= \e[31m0\e\
    [0m) dp(i)(j)(l) = min(dp(i)(j)(l), dp(i - \e[31m1\e[0m)(j)(l - \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                              ^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvariable\e[0m \e[35mmin\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp4a0wjyuq.scala:37:55 -----------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m                \e[33mif\e[0m (j + \e[31m1\e[0m < grid.length) dp(i)(j)(l)\
    \ = min(dp(i)(j)(l), dp(i)(j + \e[31m1\e[0m)(l - \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                       ^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvariable\e[0m \e[35mmin\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-ex"
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    if\
    \ (i > 0) {\n                        val lst = dp(i - 1)(j)\n                \
    \        if (lst.length < k) dp(i)(j) = lst :+ grid(i)(j)\n                  \
    \      else if (lst.length == k) {\n                            if (lst.last >\
    \ grid(i)(j)) dp(i)(j) = lst.init :+ grid(i)(j)\n                        }\n \
    \                   }\n                    if (j > 0) {\n                    \
    \    val lst = dp(i)(j - 1)\n                        if (lst.length < k) {\n \
    \                           if (dp(i)(j).length < k) dp(i)(j) = lst :+ grid(i)(j)\n\
    \                            else if (dp(i)(j).length == k) {\n              \
    \                  if (dp(i)(j).last > grid(i)(j)) dp(i)(j) = lst :+ grid(i)(j)\n\
    \                            }\n                        }\n                  \
    \      else if (lst.length == k) {\n                            if (lst.last >\
    \ grid(i)(j)) {\n                                if (dp(i)(j).length < k) dp(i)(j)\
    \ = lst.init :+ grid(i)(j)\n                                else if (dp(i)(j).length\
    \ == k) {\n                                    if (dp(i)(j).last > grid(i)(j))\
    \ dp(i)(j) = lst.init :+ grid(i)(j)\n                                }\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        dp(n - 1)(m - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9aqycej.scala:65)\n\tat Problem.main(tmp_9aqycej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[Long]()\n                    if (i > 0) lst ++= dp(i - 1)(j)\n\
    \                    if (j > 0) lst ++= dp(i)(j - 1)\n                    dp(i)(j)\
    \ = (lst.toList :+ grid(i)(j)).sorted.take(k.toInt)\n                }\n     \
    \       }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0v0x76f.scala:45)\n\tat Problem.main(tmpr0v0x76f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val visited = Array.fill(n, n)(false)\n        val\
    \ queue = new Queue[(Int, Int)]\n        queue.enqueue((0, 0))\n        dp(0)(0)\
    \ = grid(0)(0)\n        visited(0)(0) = true\n        while (!queue.isEmpty) {\n\
    \            val (x, y) = queue.dequeue\n            for (i <- -1 to 1; j <- -1\
    \ to 1) {\n                if (i == 0 && j == 0) {\n                    if (x\
    \ == 0 && y == 0) {\n                        for (i <- -1 to 1; j <- -1 to 1)\
    \ {\n                            if (i == 0 && j == 0) {\n                   \
    \             if (x + i >= 0 && x + i < n && y + j >= 0 && y + j < n && !visited(x\
    \ + i)(y + j)) {\n                                    dp(x + i)(y + j) = min(dp(x\
    \ + i)(y + j), dp(x)(y) + grid(x + i)(y + j))\n                              \
    \      visited(x + i)(y + j) = true\n                                    queue.enqueue((x\
    \ + i, y + j))\n                                }\n                          \
    \  }\n                        }\n                    }\n                } else\
    \ {\n                    if (x + i >= 0 && x + i < n && y + j >= 0 && y + j <\
    \ n && !visited(x + i)(y + j)) {\n                        dp(x + i)(y + j) = min(dp(x\
    \ + i)(y + j), dp(x)(y) + grid(x + i)(y + j))\n                        visited(x\
    \ + i)(y + j) = true\n                        queue.enqueue((x + i, y + j))\n\
    \                    }\n                }\n            }\n        }\n        var\
    \ lst = List[Long]()\n        var x = 0\n        var y = 0\n        for (i <-\
    \ 0 until k.toInt) {\n            var min = Long.MaxValue\n            var minx\
    \ = 0\n           \n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpolsdb05c.scala:82:0 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpolsdb05c.scala:81:1\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpolsdb05c.scala:67:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m67 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        for (i <- 0 until n) {\n     \
    \       for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n      \
    \          pq.enqueue((dp(i)(j), i, j))\n            }\n        }\n        for\
    \ (i <- 0 until k - 1) {\n            val (v, x, y) = pq.dequeue\n           \
    \ if (x > 0) {\n                val newV = v + grid(x - 1)(y)\n              \
    \  if (newV < dp(x - 1)(y)) {\n                    dp(x - 1)(y) = newV\n     \
    \               pq.enqueue((newV, x - 1, y))\n                }\n            }\n\
    \            if (x < n - 1) {\n                val newV = v + grid(x + 1)(y)\n\
    \                if (newV < dp(x + 1)(y)) {\n                    dp(x + 1)(y)\
    \ = newV\n                    pq.enqueue((newV, x + 1, y))\n                }\n\
    \            }\n            if (y > 0) {\n                val newV = v + grid(x)(y\
    \ - 1)\n                if (newV < dp(x)(y - 1)) {\n                    dp(x)(y\
    \ - 1) = newV\n                    pq.enqueue((newV, x, y - 1))\n            \
    \    }\n            }\n            if (y < m - 1) {\n                val newV\
    \ = v + grid(x)(y + 1)\n                if (newV < dp(x)(y + 1)) {\n         \
    \           dp(x)(y + 1) = newV\n                    pq.enqueue((newV, x, y +\
    \ 1))\n                }\n            }\n        }\n        val (v, x, y) = pq.dequeue\n\
    \        val result = new ListBuffer[Long]()\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu4t2ol7f.scala:38:26\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpu4t2ol7f.scala:71:8 ---------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    if (up.length\
    \ == 0) dp(i)(j) = left :+ grid(i)(j)\n                    else if (left.length\
    \ == 0) dp(i)(j) = up :+ grid(i)(j)\n                    else {\n            \
    \            val up_min = up.min\n                        val left_min = left.min\n\
    \                        if (up_min < left_min) dp(i)(j) = up :+ grid(i)(j)\n\
    \                        else if (up_min > left_min) dp(i)(j) = left :+ grid(i)(j)\n\
    \                        else {\n                            val up_index = up.indexOf(up_min)\n\
    \                            val left_index = left.indexOf(left_min)\n       \
    \                     if (up_index < left_index) dp(i)(j) = up :+ grid(i)(j)\n\
    \                            else if (up_index > left_index) dp(i)(j) = left :+\
    \ grid(i)(j)\n                            else {\n                           \
    \     val up_list = up.slice(up_index, up.length)\n                          \
    \      val left_list = left.slice(left_index, left.length)\n                 \
    \               if (up_list < left_list) dp(i)(j) = up :+ grid(i)(j)\n       \
    \                         else dp(i)(j) = left :+ grid(i)(j)\n               \
    \             }\n                        }\n                    }\n          \
    \      }\n            }\n        }\n        dp(n - 1)(m - 1).slice(0,\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm7ycjh7l.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm7ycjh7l.scala:52:44\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m                        \
    \        \e[33mif\e[0m (up_list < left_list) dp(i)(j) = up :+ grid(i)(j)\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue < is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpm7ycjh7l.scala:60:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        dp(n - \e[31m1\e[0m)(m - \e[31m1\e[0m).slice(\e\
    [31m0\e[0m,\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmissing argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e\
    [0m in \e[33mclass\e[0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                dp(i)(j) = List(grid(i)(j))\n\
    \                if (i > 0 && dp(i - 1)(j).length < k) {\n                   \
    \ val lst = dp(i - 1)(j) :+ grid(i)(j)\n                    if (lst.length ==\
    \ k) {\n                        if (dp(i)(j).length == k) {\n                \
    \            if (lst < dp(i)(j)) dp(i)(j) = lst\n                        } else\
    \ dp(i)(j) = lst\n                    } else if (lst.length < k) dp(i)(j) = lst\n\
    \                }\n                if (j > 0 && dp(i)(j - 1).length < k) {\n\
    \                    val lst = dp(i)(j - 1) :+ grid(i)(j)\n                  \
    \  if (lst.length == k) {\n                        if (dp(i)(j).length == k) {\n\
    \                            if (lst < dp(i)(j)) dp(i)(j) = lst\n            \
    \            } else dp(i)(j) = lst\n                    } else if (lst.length\
    \ < k) dp(i)(j) = lst\n                }\n            }\n        }\n        dp(n\
    \ - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26dab24d.scala:38:36 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                            \e[33mif\e[0m (lst < dp(i)(j))\
    \ dp(i)(j) = lst\n\e[31m\e[31m   |\e[0m                                ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp26dab24d.scala:46:36 ------------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m                            \e[33mif\e[0m (lst < dp(i)(j))\
    \ dp(i)(j) = lst\n\e[31m\e[31m   |\e[0m                                ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ left = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    val up\
    \ = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    if (left.length\
    \ == 0 && up.length == 0) dp(i)(j) = List(grid(i)(j))\n                    else\
    \ if (left.length == 0) dp(i)(j) = up :+ grid(i)(j)\n                    else\
    \ if (up.length == 0) dp(i)(j) = left :+ grid(i)(j)\n                    else\
    \ if (left.length < up.length) dp(i)(j) = left :+ grid(i)(j)\n               \
    \     else if (left.length > up.length) dp(i)(j) = up :+ grid(i)(j)\n        \
    \            else {\n                        var flag = false\n              \
    \          for (l <- 0 until left.length) {\n                            if (left(l)\
    \ < up(l)) {\n                                dp(i)(j) = left :+ grid(i)(j)\n\
    \                                flag = true\n                               \
    \ break\n                            }\n                            else if (left(l)\
    \ > up(l)) {\n                                dp(i)(j) = up :+ grid(i)(j)\n  \
    \                              flag = true\n                                break\n\
    \                            }\n                        }\n                  \
    \      if (!flag) dp(i)(j) = left :+ grid(i)(j)\n                    }\n     \
    \           }\n            }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkvocp_6r.scala:48:32 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                                break\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkvocp_6r.scala:53:32 ------------------------\e[0m\e\
    [0m\n\e[31m53 |\e[0m                                break\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ <= cost) {\n                if (i > 0) pq.enqueue((cost + grid(i - 1)(j), i\
    \ - 1, j))\n                if (i < n - 1) pq.enqueue((cost + grid(i + 1)(j),\
    \ i + 1, j))\n                if (j > 0) pq.enqueue((cost + grid(i)(j - 1), i,\
    \ j - 1))\n                if (j < m - 1) pq.enqueue((cost + grid(i)(j + 1), i,\
    \ j + 1))\n            }\n        }\n        List()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv72scsln.scala:45)\n\tat Problem.main(tmpv72scsln.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (d, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > d) {\n                dp(i)(j) = d\n                if (i > 0) pq.enqueue((d\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((d +\
    \ grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((d + grid(i)(j\
    \ - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((d + grid(i)(j +\
    \ 1), i, j + 1))\n            }\n        }\n        val pq2 = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0, 0, 0))\n        val\
    \ visited = Array.fill(n, m)(false)\n        while (!pq2.isEmpty) {\n        \
    \    val (d, i, j) = pq2.dequeue\n            if (visited(i)(j)) {\n         \
    \       if (i > 0 && !visited(i - 1)(j)) pq2.enqueue((d + grid(i - 1)(j), i -\
    \ 1, j))\n                if (i < n - 1 && !visited(i + 1)(j)) pq2.enqueue((d\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0 && !visited(i)(j - 1))\
    \ pq2.enqueue((d + grid(i)(j - 1), i, j - 1))\n                if (j < m - 1 &&\
    \ !visited(i)(j + 1)) pq2.enqueue\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsp9vj7c4.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpsp9vj7c4.scala:52:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                \e[33mif\e[0m (j < m - \e[31m1\e[0m &&\
    \ !visited(i)(j + \e[31m1\e[0m)) pq2.enqueue\n\e[31m\e[31m   |\e[0m          \
    \                                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \       missing arguments for value of type Seq[(Long, Int, Int)] => Unit\n\e\
    [33m\e[33m-- Warning: /tmp/tmpsp9vj7c4.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                dp(i)(j) = List(grid(i)(j))\n                if (i > 0\
    \ && dp(i - 1)(j).length <= k && dp(i - 1)(j).length < dp(i)(j).length) dp(i)(j)\
    \ = dp(i - 1)(j)\n                if (j > 0 && dp(i)(j - 1).length <= k && dp(i)(j\
    \ - 1).length < dp(i)(j).length) dp(i)(j) = dp(i)(j - 1)\n                if (dp(i)(j).length\
    \ < k) dp(i)(j) = dp(i)(j) :+ grid(i)(j)\n            }\n        }\n        dp(n\
    \ - 1)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3akz7f3.scala:41)\n\tat Problem.main(tmpx3akz7f3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ (Int, Int))]()(Ordering.by(-_._1))\n        pq.enqueue((0, (0, 0)))\n      \
    \  while (!pq.isEmpty) {\n            val (cost, (i, j)) = pq.dequeue\n      \
    \      if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n             \
    \   if (i > 0) pq.enqueue((cost + grid(i - 1)(j), (i - 1, j)))\n             \
    \   if (i < n - 1) pq.enqueue((cost + grid(i + 1)(j), (i + 1, j)))\n         \
    \       if (j > 0) pq.enqueue((cost + grid(i)(j - 1), (i, j - 1)))\n         \
    \       if (j < m - 1) pq.enqueue((cost + grid(i)(j + 1), (i, j + 1)))\n     \
    \       }\n        }\n        val pq2 = new PriorityQueue[(Long, (Int, Int))]()(Ordering.by(-_._1))\n\
    \        pq2.enqueue((0, (0, 0)))\n        val visited = Array.fill(n, m)(false)\n\
    \        while (!pq2.isEmpty) {\n            val (cost, (i, j)) = pq2.dequeue\n\
    \            if (visited(i)(j)) {\n                if (cost == dp(i)(j)) {\n \
    \                   val res = ListBuffer[Long]()\n                    var (x,\
    \ y) = (i, j)\n                    for (l <- 0 until k.toInt) {\n            \
    \            res += grid(x)(y)\n                        if (x > 0 && dp(x - 1)(y)\
    \ == cost - grid(x)(y)) {\n                            x -= 1\n              \
    \          } else if (x < n - 1 && dp(x + 1)(y) == cost - grid(x)(y)) {\n    \
    \                        x += 1\n                        } else if (\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp004qlhyy.scala:58:35 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                        } \e[33melse\e[0m \e[33mif\e\
    [0m (\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp004qlhyy.scala:75:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp004qlhyy.scala:60:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m60 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (i\
    \ < 0 || i >= n || j < 0 || j >= m) {\n                //println(\"Out of bound\"\
    )\n                continue\n            }\n            if (dp(i)(j) <= cost)\
    \ {\n                //println(\"Not better\")\n                continue\n   \
    \         }\n            dp(i)(j) = cost\n            if (cost == k) {\n     \
    \           //println(\"Found\")\n                val result = new ListBuffer[Long]()\n\
    \                result += grid(i)(j)\n                var x = i\n           \
    \     var y = j\n                while (cost > 0) {\n                    if (x\
    \ > 0 && dp(x - 1)(y) == cost - 1) {\n                        x -= 1\n       \
    \                 result += grid(x)(y)\n                    } else if (x < n -\
    \ 1 && dp(x + 1)(y) == cost - 1) {\n                        x += 1\n         \
    \               result += grid(x)(y)\n                    } else if (y > 0 &&\
    \ dp(x)(y - 1) == cost - 1) {\n                        y -= 1\n              \
    \          result += grid(x)(y)\n                    } else if (y < m - 1 && dp(x)(y\
    \ + 1) == cost - 1) {\n                        y += 1\n                      \
    \  result += grid(x)(y)\n                    }\n                    cost -= 1\n\
    \                }\n                return result.toList\n            }\n    \
    \        pq.enqueue((cost + 1, i - 1, j))\n            pq.enqueue((cost + 1, i\
    \ + 1, j))\n            pq.enqueue((cost + 1, i, j - 1))\n            pq.enqueue((cost\
    \ + 1, i, j + 1))\n        }\n        return List()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyicz_wwr.scala:37:16 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyicz_wwr.scala:41:16\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m                continue\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpyicz_wwr.scala:64:25 ------------------------\e[0m\e[0m\n\e[31m64 |\e\
    [0m                    cost -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m           \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a member\
    \ of Long - did you mean cost.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        val queue = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n        \
    \        dp(i)(j) = grid(i)(j)\n                path(i)(j) = List(grid(i)(j))\n\
    \                queue.enqueue((dp(i)(j), i, j))\n            }\n        }\n \
    \       for (l <- 1 until k.toInt) {\n            val (min, i, j) = queue.dequeue\n\
    \            if (i > 0) {\n                if (dp(i - 1)(j) > min + grid(i - 1)(j))\
    \ {\n                    dp(i - 1)(j) = min + grid(i - 1)(j)\n               \
    \     path(i - 1)(j) = path(i)(j) :+ grid(i - 1)(j)\n                    queue.enqueue((dp(i\
    \ - 1)(j), i - 1, j))\n                }\n            }\n            if (i < n\
    \ - 1) {\n                if (dp(i + 1)(j) > min + grid(i + 1)(j)) {\n       \
    \             dp(i + 1)(j) = min + grid(i + 1)(j)\n                    path(i\
    \ + 1)(j) = path(i)(j) :+ grid(i + 1)(j)\n                    queue.enqueue((dp(i\
    \ + 1)(j), i + 1, j))\n                }\n            }\n            if (j > 0)\
    \ {\n                if (dp(i)(j - 1) > min + grid(i)(j - 1)) {\n            \
    \        dp(i)(j - 1) = min + grid(i)(j - 1)\n                    path(i)(j -\
    \ 1) = path(i)(j) :+ grid(i)(j - 1)\n                    queue.enqueue((dp(i)(j\
    \ - 1), i, j - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv0p3suop.scala:77:0 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv0p3suop.scala:40:8\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mfor\e[0m (l <-\
    \ \e[31m1\e[0m until k.toInt) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m \
    \  |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m41 |\e[0m            \e[33mval\e[0m (min, i, j) = queue.dequeue\n\e[31m42\
    \ |\e[0m            \e[33mif\e[0m (i > \e[31m0\e[0m) {\n\e[31m43 |\e[0m      \
    \          \e[33mif\e[0m (dp(i - \e[31m1\e[0m)(j) > min + grid(i - \e[31m1\e[0m)(j))\
    \ {\n\e[31m44 |\e[0m                    dp(i - \e[31m1\e[0m)(j) = min + grid(i\
    \ - \e[31m1\e[0m)(j)\n\e[31m45 |\e[0m                    path(i - \e[31m1\e[0m)(j)\
    \ = path(i)(j) :+ grid(i - \e[31m1\e[0m)(j)\n\e[31m46 |\e[0m                 \
    \   queue.enqueue((dp(i - \e[31m1\e[0m)(j), i - \e[31m1\e[0m, j))\n\e[31m47 |\e\
    [0m                }\n\e[31m48 |\e[0m            }\n\e[31m49 |\e[0m          \
    \  \e[33mif\e[0m (i < n - \e[31m1\e[0m) {\n\e[31m50 |\e[0m                \e[33mif\e\
    [0m (dp(i + \e[31m1\e[0m)(j) > min + grid(i + \e[31m1\e[0m)(j)) {\n\e[31m51 |\e\
    [0m                    dp(i + \e[31m1\e[0m)(j) = min + grid(i + \e[31m1\e[0m)(j)\n\
    \e[31m52 |\e[0m                    path(i + \e[31m1\e[0m)(j) = path(i)(j) :+ grid(i\
    \ + \e[31m1\e[0m)(j)\n\e[31m53 |\e[0m                    queue.enqueue((dp(i +\
    \ \e[31m1\e[0m)(j), i + \e[31m1\e[0m, j))\n\e[31m54 |\e[0m                }\n\e\
    [31m55 |\e[0m            }\n\e[31m56 |\e[0m            \e[33mif\e[0m (j > \e[31m0\e\
    [0m) {\n\e[31m57 |\e[0m                \e[33mif\e[0m (dp(i)(j - \e[31m1\e[0m)\
    \ > min + grid(i)(j - \e[31m1\e[0m)) {\n\e[31m58 |\e[0m                    dp(i)(j\
    \ - \e[31m1\e[0m) = min + grid(i)(j - \e[31m1\e[0m)\n\e[31m59 |\e[0m         \
    \           path(i)(j - \e[31m1\e[0m) = path(i)(j) :+ grid(i)(j - \e[31m1\e[0m)\n\
    \e[31m60 |\e[0m                    queue.enqueue((dp(i)(j - \e[31m1\e[0m), i,\
    \ j - \e[31m1\e[0m))\n\e[31m61 |\e[0m    }\n\e[31m62 |\e[0m    \e[33mdef\e[0m\
    \ \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e\
    ["
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ l = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val u = if\
    \ (j > 0) dp(i)(j - 1) else List[Long]()\n                    val lu = if (i >\
    \ 0 && j > 0) dp(i - 1)(j - 1) else List[Long]()\n                    val lu_\
    \ = if (i > 0 && j > 0) dp(i - 1)(j - 1) else List[Long]()\n                 \
    \   val l_ = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val\
    \ u_ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    val lu__\
    \ = if (i > 0 && j > 0) dp(i - 1)(j - 1) else List[Long]()\n                 \
    \   if (l.length < k) dp(i)(j) = l :+ grid(i)(j)\n                    if (u.length\
    \ < k) dp(i)(j) = min(dp(i)(j), u :+ grid(i)(j))\n                    if (lu.length\
    \ < k) dp(i)(j) = min(dp(i)(j), lu :+ grid(i)(j))\n                    if (lu_.length\
    \ < k) dp(i)(j) = min(dp(i)(j), lu_ :+ grid(i)(j))\n                    if (l_.length\
    \ < k) dp(i)(j) = min(dp(i)(j), l_ :+ grid(i)(j))\n                    if (u_.length\
    \ < k) dp(i)(j) = min(dp(i)(j), u_ :+ grid(i)(j))\n                    if (lu__.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0nlifn07.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp0nlifn07.scala:65:0 ----------------------------\e[0m\e[0m\n\e[31m65\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmp0nlifn07.scala:43:49 -----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    \e[33mif\e[0m (u.length < k) dp(i)(j)\
    \ = min(dp(i)(j), u :+ grid(i)(j))\n\e[31m\e[31m   |\e[0m                    \
    \                             ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (List[Long],\
    \ List[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0nlifn07.scala:44:50\
    \ -----------------------------\e[0m\e[0m\n\e[31m44 |\e[0m                   \
    \ \e[33mif\e[0m (lu.length < k) dp(i)(j) = min(dp(i)(j), lu :+ grid(i)(j))\n\e\
    [31m\e[31m   |\e[0m                                                  ^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e\
    [31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\
    \e[31m   |\e[0mmatch arguments (List[Long], List[Long])\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmp0nlifn07.scala:45:51 -----------------------------\e[0m\e\
    [0m\n\e[31m45 |\e[0m                    \e[33mif\e[0m (lu_.length < k) dp(i)(j)\
    \ = min(dp(i)(j), lu_ :+ grid(i)(j))\n\e[31m\e[31m   |\e[0m                  \
    \                                 ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (i\
    \ < 0 || i >= n || j < 0 || j >= m) continue\n            if (dp(i)(j) <= cost)\
    \ continue\n            dp(i)(j) = cost\n            if (i == n - 1 && j == m\
    \ - 1) {\n                val res = new ListBuffer[Long]()\n                var\
    \ i = n - 1\n                var j = m - 1\n                var cost = dp(i)(j)\n\
    \                while (cost > 0) {\n                    res += grid(i)(j)\n \
    \                   if (i > 0 && dp(i - 1)(j) < cost) {\n                    \
    \    i -= 1\n                        cost = dp(i)(j)\n                    } else\
    \ if (j > 0 && dp(i)(j - 1) < cost) {\n                        j -= 1\n      \
    \                  cost = dp(i)(j)\n                    } else {\n           \
    \             i += 1\n                        j += 1\n                       \
    \ cost = dp(i)(j)\n                    }\n                }\n                res\
    \ += grid(0)(0)\n                return res.toList\n            }\n          \
    \  pq.enqueue((cost + abs(grid(i)(j) - grid(i + 1)(j)), i + 1, j))\n         \
    \   pq.enqueue((cost + abs(grid(i)(j) - grid(i - 1)(j)), i - 1, j))\n        \
    \    pq.enqueue((cost + abs(grid(i)(j) - grid(i)(j + 1)), i, j + 1))\n       \
    \     pq.enqueue((cost + abs(grid(i)(j) - grid(i)(j - 1)), i, j - 1))\n      \
    \  }\n        return List()\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_kbq6gxw.scala:35:52 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mif\e[0m (i < \e[31m0\e[0m || i >= n\
    \ || j < \e[31m0\e[0m || j >= m) continue\n\e[31m\e[31m   |\e[0m             \
    \                                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                             Not found: continue\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_kbq6gxw.scala:36:34 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mif\e[0m (dp(i)(j) <= cost) continue\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                  Not found: continue\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ neighbors = List((i - 1, j), (i, j - 1)).filter(p => p._1 >= 0 && p._2 >= 0)\n\
    \                    if (neighbors.isEmpty) dp(i)(j) = List(grid(i)(j))\n    \
    \                else {\n                        val neighborDps = neighbors.map(p\
    \ => dp(p._1)(p._2))\n                        val minDp = neighborDps.minBy(lst\
    \ => lst :+ grid(i)(j))\n                        dp(i)(j) = minDp :+ grid(i)(j)\n\
    \                    }\n                }\n            }\n        }\n        dp(n\
    \ - 1)(m - 1).take(k.toInt)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe8cse8ts.scala:39:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                        \e[33mval\e[0m \e[36mminDp\e\
    [0m = neighborDps.minBy(\e[36mlst\e[0m => lst :+ grid(i)(j))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \     ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for List[Long]..\n\e\
    [31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e\
    [35mList[Long]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[List[Long]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[List[Long]].\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m\
    \   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val queue = new Queue[(Int, Int)]\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until m) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    dp(i)(j) = 0\n                    queue.enqueue((i,\
    \ j))\n                }\n            }\n        }\n        while (!queue.isEmpty)\
    \ {\n            val (i, j) = queue.dequeue\n            val v = dp(i)(j)\n  \
    \          if (i > 0 && dp(i - 1)(j) > v + 1) {\n                dp(i - 1)(j)\
    \ = v + 1\n                prev(i - 1)(j) = i * m + j\n                queue.enqueue((i\
    \ - 1, j))\n            }\n            if (i < n - 1 && dp(i + 1)(j) > v + 1)\
    \ {\n                dp(i + 1)(j) = v + 1\n                prev(i + 1)(j) = i\
    \ * m + j\n                queue.enqueue((i + 1, j))\n            }\n        \
    \    if (j > 0 && dp(i)(j - 1) > v + 1) {\n                dp(i)(j - 1) = v +\
    \ 1\n                prev(i)(j - 1) = i * m + j\n                queue.enqueue((i,\
    \ j - 1))\n            }\n            if (j < m - 1 && dp(i)(j + 1) > v + 1) {\n\
    \                dp(i)(j + 1) = v + 1\n                prev(i)(j + 1) = i * m\
    \ + j\n                queue.enqueue((i, j + 1))\n            }\n        }\n \
    \       var min = Long.MaxValue\n        var min_i = -1\n        var min_j = -1\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n        \
    \        if (dp(i\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0mxa1rga.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0mxa1rga.scala:87:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m87 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp0mxa1rga.scala:70:22 --------------------\e[0m\e[0m\n\
    \e[31m70 |\e[0m                \e[33mif\e[0m (dp(i\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^\e[0m\n\e[31m   |\e[0m                    Found:    Array[Long]\n\
    \e[31m   |\e[0m                    Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp0mxa1rga.scala:72:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m72 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i == 0) List[Long]() else dp(i - 1)(j)\n                    val left\
    \ = if (j == 0) List[Long]() else dp(i)(j - 1)\n                    if (up.length\
    \ == 0) dp(i)(j) = left :+ grid(i)(j)\n                    else if (left.length\
    \ == 0) dp(i)(j) = up :+ grid(i)(j)\n                    else if (up.length <\
    \ left.length) dp(i)(j) = up :+ grid(i)(j)\n                    else if (up.length\
    \ > left.length) dp(i)(j) = left :+ grid(i)(j)\n                    else {\n \
    \                       val up_last = up.last\n                        val left_last\
    \ = left.last\n                        if (up_last < left_last) dp(i)(j) = up\
    \ :+ grid(i)(j)\n                        else if (up_last > left_last) dp(i)(j)\
    \ = left :+ grid(i)(j)\n                        else {\n                     \
    \       val up_second_last = up(up.length - 2)\n                            val\
    \ left_second_last = left(left.length - 2)\n                            if (up_second_last\
    \ < left_second_last) dp(i)(j) = up :+ grid(i)(j)\n                          \
    \  else dp(i)(j) = left :+ grid(i)(j)\n                        }\n           \
    \         }\n                }\n            }\n        }\n        dp(n - 1)(m\
    \ - 1).take(k.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppiae6_pr.scala:59)\n\tat Problem.main(tmppiae6_pr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (i\
    \ < 0 || i >= n || j < 0 || j >= m) {\n                //println(\"out of bound\"\
    )\n                continue\n            }\n            if (dp(i)(j) <= cost)\
    \ {\n                //println(\"already visited\")\n                continue\n\
    \            }\n            dp(i)(j) = cost\n            //println(i + \" \" +\
    \ j + \" \" + cost)\n            if (cost == k) {\n                //println(\"\
    found\")\n                val result = new ListBuffer[Long]()\n              \
    \  var i = 0\n                var j = 0\n                for (k <- 0 until cost.toInt)\
    \ {\n                    result += grid(i)(j)\n                    if (i + 1 <\
    \ n && dp(i + 1)(j) == cost - k - 1) {\n                        i += 1\n     \
    \               } else if (j + 1 < m && dp(i)(j + 1) == cost - k - 1) {\n    \
    \                    j += 1\n                    } else if (i - 1 >= 0 && dp(i\
    \ - 1)(j) == cost - k - 1) {\n                        i -= 1\n               \
    \     } else if (j - 1 >= 0 && dp(i)(j - 1) == cost - k - 1) {\n             \
    \           j -= 1\n                    }\n                }\n               \
    \ return result.toList\n            }\n            pq.enqueue((cost + 1, i + 1,\
    \ j))\n            pq.enqueue((cost + 1, i - 1, j))\n            pq.enqueue((cost\
    \ + 1, i, j + 1))\n            pq.enqueue((cost + 1, i, j - 1))\n        }\n \
    \       return List()\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkhf2uc63.scala:37:16 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkhf2uc63.scala:41:16\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m                continue\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n          \
    \      pq.enqueue((dp(i)(j), i, j))\n            }\n        }\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until m) {\n                if (i >\
    \ 0) {\n                    dp(i)(j) = min(dp(i)(j), dp(i - 1)(j) + grid(i)(j))\n\
    \                    pq.enqueue((dp(i)(j), i, j))\n                }\n       \
    \         if (j > 0) {\n                    dp(i)(j) = min(dp(i)(j), dp(i)(j -\
    \ 1) + grid(i)(j))\n                    pq.enqueue((dp(i)(j), i, j))\n       \
    \         }\n            }\n        }\n        val result = ListBuffer[Long]()\n\
    \        for (i <- 0 until k.toInt) {\n            val (value, x, y) = pq.dequeue()\n\
    \            result += grid(x)(y)\n            if (x > 0) {\n                dp(x)(y)\
    \ = min(dp(x)(y), dp(x - 1)(y) + grid(x)(y))\n                pq.enqueue((dp(x)(y),\
    \ x, y))\n            }\n            if (y > 0) {\n                dp(x)(y) =\
    \ min(dp(x)(y), dp(x)(y - 1) + grid(x)(y))\n                pq.enqueue((dp(x)(y),\
    \ x, y))\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo3kcl0jx.scala:66)\n\tat Problem.main(tmpo3kcl0jx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val visited = Array.fill(n, m)(false)\n        visited(0)(0)\
    \ = true\n        var result = List[Long]()\n        while (!pq2.isEmpty) {\n\
    \            val (cost, i, j) = pq2.dequeue\n            result = grid(i)(j) ::\
    \ result\n            if (result.length == k) return result\n            if (i\
    \ > 0 && !visited(i - 1)(j) && dp(i - 1)(j) == cost + grid(i - 1)(j)) {\n    \
    \            pq2.enqueue((cost + grid(i - 1)(j), i - 1, j))\n                visited(i\
    \ - 1)(j) = true\n            }\n            if (i < n - 1 && !visited(i + 1)(j)\
    \ && dp(i + 1)(j) == cost + grid(i + 1)(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6o51la4j.scala:56:86 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m            \e[33mif\e[0m (i < n - \e[31m1\e[0m && !visited(i\
    \ + \e[31m1\e[0m)(j) && dp(i + \e[31m1\e[0m)(j) == cost + grid(i + \e[31m1\e[0m)(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp6o51la4j.scala:73:0 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6o51la4j.scala:72:1\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp6o51la4j.scala:58:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                val lst = List(grid(i)(j))\n\
    \                if (i == 0 && j == 0) dp(i)(j) = lst\n                else if\
    \ (i == 0) dp(i)(j) = (dp(i)(j - 1) :+ grid(i)(j)).sorted\n                else\
    \ if (j == 0) dp(i)(j) = (dp(i - 1)(j) :+ grid(i)(j)).sorted\n               \
    \ else {\n                    val lst1 = (dp(i)(j - 1) :+ grid(i)(j)).sorted\n\
    \                    val lst2 = (dp(i - 1)(j) :+ grid(i)(j)).sorted\n        \
    \            if (lst1 < lst2) dp(i)(j) = lst1\n                    else dp(i)(j)\
    \ = lst2\n                }\n            }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvd0n_8ej.scala:40:29 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    \e[33mif\e[0m (lst1 < lst2) dp(i)(j)\
    \ = lst1\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue < is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        pq.enqueue((0, 0, 0))\n      \
    \  while (!pq.isEmpty) {\n            val (d, i, j) = pq.dequeue\n           \
    \ if (dp(i)(j) > d) {\n                dp(i)(j) = d\n                if (i > 0)\
    \ pq.enqueue((d + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((d\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((d + grid(i)(j\
    \ - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((d + grid(i)(j +\
    \ 1), i, j + 1))\n            }\n        }\n        val pq2 = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        pq2.enqueue((0, 0, 0))\n     \
    \   val visited = Array.fill(n, m)(false)\n        while (!pq2.isEmpty) {\n  \
    \          val (d, i, j) = pq2.dequeue\n            if (!visited(i)(j)) {\n  \
    \              visited(i)(j) = true\n                if (i > 0 && dp(i - 1)(j)\
    \ == d + grid(i - 1)(j)) pq2.enqueue((d + grid(i - 1)(j), i - 1, j))\n       \
    \         if (i < n - 1 && dp(i + 1)(j) == d + grid(i + 1)(j)) pq2.enqueue((d\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0 && dp(i)(j - 1) == d\
    \ + grid(i)(j - 1)) pq2.en\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7fel1so1.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7fel1so1.scala:52:69\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m                \e[33mif\e\
    [0m (j > \e[31m0\e[0m && dp(i)(j - \e[31m1\e[0m) == d + grid(i)(j - \e[31m1\e\
    [0m)) pq2.en\n\e[31m\e[31m   |\e[0m                                          \
    \                       ^^^^^^\e[0m\n\e[31m   |\e[0mvalue en is not a member of\
    \ scala.collection.mutable.PriorityQueue[(Long, Int, Int)] - did you mean pq2.eq?\n\
    \e[33m\e[33m-- Warning: /tmp/tmp7fel1so1.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    path(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\n           \
    \             path(i)(j) = path(i - 1)(j)\n                    }\n           \
    \         if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1)\n                        path(i)(j) = path(i)(j - 1)\n      \
    \              }\n                    if (i > 0 && j > 0 && dp(i - 1)(j - 1) <\
    \ dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j - 1)\n         \
    \               path(i)(j) = path(i - 1)(j - 1)\n                    }\n     \
    \               dp(i)(j) += grid(i)(j)\n                    path(i)(j) = (path(i)(j)\
    \ :+ grid(i)(j)).sorted\n                }\n            }\n        }\n       \
    \ var i = n - 1\n        var j = m - 1\n        var cur = path(i)(j)\n       \
    \ while (cur.length < k) {\n            if (i > 0 && path(i - 1)(j).length < cur.length)\
    \ {\n                i -= 1\n                cur = path(i)(j)\n            }\n\
    \            else if (j > 0 && path(i)(j - 1).length < cur.length) {\n       \
    \         j -= 1\n                cur = path(i)(j)\n            }\n          \
    \  else if (\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpibv7h3k4.scala:68:21 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpibv7h3k4.scala:85:0 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpibv7h3k4.scala:84:1\
    \ ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpibv7h3k4.scala:70:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m70 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        pq.enqueue((0, 0, 0))\n      \
    \  while (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n        \
    \    if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n               \
    \ if (i > 0) pq.enqueue((cost + grid(i - 1)(j), i - 1, j))\n                if\
    \ (i < n - 1) pq.enqueue((cost + grid(i + 1)(j), i + 1, j))\n                if\
    \ (j > 0) pq.enqueue((cost + grid(i)(j - 1), i, j - 1))\n                if (j\
    \ < m - 1) pq.enqueue((cost + grid(i)(j + 1), i, j + 1))\n            }\n    \
    \    }\n        val q = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(x =>\
    \ x._1))\n        q.enqueue((0, 0, 0))\n        val visited = Array.fill(n, m)(false)\n\
    \        while (!q.isEmpty) {\n            val (cost, i, j) = q.dequeue\n    \
    \        if (!visited(i)(j)) {\n                visited(i)(j) = true\n       \
    \         if (i > 0 && dp(i - 1)(j) == cost + grid(i - 1)(j)) q.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1 && dp(i + 1)(j)\
    \ == cost + grid(i + 1)(j)) q.enqueue((cost + grid(i + 1)(j), i + 1, j))\n   \
    \             if (j > 0 && dp(i)(j - 1) == cost + grid(i)(j - 1)) q.enqueue((cost\
    \ + grid(i)(j - 1), i,\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ndac7pt.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ndac7pt.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp2ndac7pt.scala:52:78 --------------------\e[0m\e[0m\n\
    \e[31m52 |\e[0m                \e[33mif\e[0m (j > \e[31m0\e[0m && dp(i)(j - \e\
    [31m1\e[0m) == cost + grid(i)(j - \e[31m1\e[0m)) q.enqueue((cost + grid(i)(j -\
    \ \e[31m1\e[0m), i,\n\e[31m\e[31m   |\e[0m                                   \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (Long, Int)\n\
    \e[31m   |\e[0m                                              Required: (Long,\
    \ Int\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0m\e[1m\e[32mInt\e[0m)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmp2ndac7pt.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    if (up.length\
    \ == 0 && left.length == 0) dp(i)(j) = List(grid(i)(j))\n                    else\
    \ if (up.length == 0) dp(i)(j) = grid(i)(j) :: left\n                    else\
    \ if (left.length == 0) dp(i)(j) = grid(i)(j) :: up\n                    else\
    \ {\n                        val up_min = up.min\n                        val\
    \ left_min = left.min\n                        if (up_min < left_min) dp(i)(j)\
    \ = grid(i)(j) :: up\n                        else if (up_min > left_min) dp(i)(j)\
    \ = grid(i)(j) :: left\n                        else dp(i)(j) = grid(i)(j) ::\
    \ (if (up < left) up else left)\n                    }\n                }\n  \
    \          }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj01nx9no.scala:45:62 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                        \e[33melse\e[0m dp(i)(j) = grid(i)(j)\
    \ :: (\e[33mif\e[0m (up < left) up \e[33melse\e[0m left)\n\e[31m\e[31m   |\e[0m\
    \                                                           ^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue < is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    var\
    \ min = List[Long]()\n                    if (i > 0) {\n                     \
    \   val lst = dp(i - 1)(j)\n                        if (lst.length < k) min =\
    \ lst :+ grid(i)(j)\n                        else if (lst.length == k) min = lst\n\
    \                    }\n                    if (j > 0) {\n                   \
    \     val lst = dp(i)(j - 1)\n                        if (lst.length < k) {\n\
    \                            if (min.length == 0 || lst.length < min.length ||\
    \ (lst.length == min.length && lst < min)) min = lst :+ grid(i)(j)\n         \
    \               }\n                        else if (lst.length == k) {\n     \
    \                       if (min.length == 0 || lst < min) min = lst\n        \
    \                }\n                    }\n                    dp(i)(j) = min\n\
    \                }\n            }\n        }\n        dp(n - 1)(m - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpblavghfz.scala:44:111 -----------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                            \e[33mif\e[0m (min.length\
    \ == \e[31m0\e[0m || lst.length < min.length || (lst.length == min.length && lst\
    \ < min)) min = lst :+ grid(i)(j)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \          ^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpblavghfz.scala:47:55 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                            \e[33mif\e[0m (min.length\
    \ == \e[31m0\e[0m || lst < min) min = lst\n\e[31m\e[31m   |\e[0m             \
    \                                      ^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val pq = new mutable.PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n        \
    \        dp(i)(j) = grid(i)(j)\n                pq.enqueue((dp(i)(j), i, j))\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until m) {\n                if (i > 0) {\n                    if (dp(i\
    \ - 1)(j) > dp(i)(j) + grid(i - 1)(j)) {\n                        dp(i - 1)(j)\
    \ = dp(i)(j) + grid(i - 1)(j)\n                        prev(i - 1)(j) = i * m\
    \ + j\n                        pq.enqueue((dp(i - 1)(j), i - 1, j))\n        \
    \            }\n                }\n                if (i < n - 1) {\n        \
    \            if (dp(i + 1)(j) > dp(i)(j) + grid(i + 1)(j)) {\n               \
    \         dp(i + 1)(j) = dp(i)(j) + grid(i + 1)(j)\n                        prev(i\
    \ + 1)(j) = i * m + j\n                        pq.enqueue((dp(i + 1)(j), i + 1,\
    \ j))\n                    }\n                }\n                if (j > 0) {\n\
    \                    if (dp(i)(j - 1) > dp(i)(j) + grid(i)(j - 1)) {\n       \
    \                 dp(i)(j - 1) = dp(i)(j) + grid(i)(j - 1)\n                 \
    \       prev(i)(j - 1) = i * m + j\n                        pq.enqueue((dp(i)(j\
    \ - 1), i, j - 1))\n                    }\n                }\n               \
    \ if (j < m -\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb15jyvjb.scala:62:27 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m                \e[33mif\e[0m (j < m -\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                 \
    \          expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpb15jyvjb.scala:79:0 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb15jyvjb.scala:32:21\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mpq\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[(\e[35mLong\e[0m, \e[35mInt\e\
    [0m, \e[35mInt\e[0m)]()(Ordering.by(-_._1))\n\e[31m\e[31m   |\e[0m           \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb15jyvjb.scala:32:78\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mpq\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[(\e[35mLong\e[0m, \e[35mInt\e\
    [0m, \e[35mInt\e[0m)]()(Ordering.by(-_._1))\n\e[31m\e[31m   |\e[0m           \
    \                                                                 ^^^^\e[0m\n\e\
    [31m   |\e[0m                                         value _1 is not a member\
    \ of Any\n\e[31m\e[31m-- Error: /tmp/tmpb15jyvjb.scala:32:81 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mpq\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[(\e[35mLong\e[0m, \e[35mInt\e[0m, \e[35mInt\e[0m)]()(Ordering.by(-_._1))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match\
    \ type Ordering[S] of parameter ord of \e[33mmethod\e[0m \e[35mby\e[0m in \e[33mobjec"
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)((0, 0))\n        val q = Queue[(Int, Int)]()\n        q.enqueue((0, 0))\n\
    \        dp(0)(0) = grid(0)(0)\n        while (!q.isEmpty) {\n            val\
    \ (x, y) = q.dequeue\n            for (i <- 0 until 4) {\n                val\
    \ (nx, ny) = (x + dx(i), y + dy(i))\n                if (nx >= 0 && nx < n &&\
    \ ny >= 0 && ny < m && dp(nx)(ny) > dp(x)(y) + grid(nx)(ny)) {\n             \
    \       dp(nx)(ny) = dp(x)(y) + grid(nx)(ny)\n                    prev(nx)(ny)\
    \ = (x, y)\n                    q.enqueue((nx, ny))\n                }\n     \
    \       }\n        }\n        val path = ArrayBuffer[Long]()\n        var (x,\
    \ y) = (n - 1, m - 1)\n        while (k > 0) {\n            path += grid(x)(y)\n\
    \            val (px, py) = prev(x)(y)\n            x = px\n            y = py\n\
    \            k -= 1\n        }\n        path.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxzm2mspz.scala:38:36 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                \e[33mval\e[0m (nx, ny) = (x + dx(i),\
    \ y + dy(i))\n\e[31m\e[31m   |\e[0m                                    ^^\e[0m\n\
    \e[31m   |\e[0m                                    Not found: dx\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxzm2mspz.scala:38:47 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                \e[33mval\e[0m (nx, ny) = (x + dx(i),\
    \ y + dy(i))\n\e[31m\e[31m   |\e[0m                                          \
    \     ^^\e[0m\n\e[31m   |\e[0m                                               Not\
    \ found: dy\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxzm2mspz.scala:39:23\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                \e[33mif\e\
    [0m (nx >= \e[31m0\e[0m && nx < n && ny >= \e[31m0\e[0m && ny < m && dp(nx)(ny)\
    \ > dp(x)(y) + grid(nx)(ny)) {\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue >= is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import math.BigDecimal.RoundingMode.ValueOrdering.mkOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxzm2mspz.scala:53:14\
    \ ------------------------\e[0m\e[0m\n\e[31m53 |\e[0m            k -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean k.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659798776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => x._1))\n        for (i <- 0 until n) {\n     \
    \       for (j <- 0 until m) {\n                pq.enqueue((grid(i)(j), i, j))\n\
    \            }\n        }\n        while (pq.nonEmpty) {\n            val (v,\
    \ i, j) = pq.dequeue\n            if (dp(i)(j) > v) {\n                dp(i)(j)\
    \ = v\n                if (i > 0) pq.enqueue((dp(i - 1)(j) + v, i - 1, j))\n \
    \               if (i < n - 1) pq.enqueue((dp(i + 1)(j) + v, i + 1, j))\n    \
    \            if (j > 0) pq.enqueue((dp(i)(j - 1) + v, i, j - 1))\n           \
    \     if (j < m - 1) pq.enqueue((dp(i)(j + 1) + v, i, j + 1))\n            }\n\
    \        }\n        val result = ArrayBuffer[Long]()\n        var i = 0\n    \
    \    var j = 0\n        while (k > 0) {\n            result += grid(i)(j)\n  \
    \          k -= 1\n            if (i > 0 && dp(i - 1)(j) + grid(i)(j) == dp(i)(j))\
    \ i -= 1\n            else if (i < n - 1 && dp(i + 1)(j) + grid(i)(j) == dp(i)(j))\
    \ i += 1\n            else if (j > 0 && dp(i)(j - 1) + grid(i)(j) == dp(i)(j))\
    \ j -= 1\n            else if (j < m - 1 && dp(i)(j + 1) + grid(i)(j) == dp(i)(j))\
    \ j += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi41bbmvh.scala:52:14 ------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val visited = Array.fill(n, m)(false)\n        while (pq2.nonEmpty)\
    \ {\n            val (cost, i, j) = pq2.dequeue\n            if (!visited(i)(j))\
    \ {\n                visited(i)(j) = true\n                if (i > 0 && dp(i -\
    \ 1)(j) == cost + grid(i - 1)(j)) pq2.enqueue((cost + grid(i - 1)(j), i - 1, j))\n\
    \                if (i < n - 1 && dp(i + 1)(j) == cost + grid(i + 1)(j)) pq2.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0 && dp(i)(j - 1) == cost\
    \ + grid(i)(j - 1)) pq2.enqueue((cost +\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf19h633v.scala:52:87 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                \e[33mif\e[0m (j > \e[31m0\e[0m && dp(i)(j\
    \ - \e[31m1\e[0m) == cost + grid(i)(j - \e[31m1\e[0m)) pq2.enqueue((cost +\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpf19h633v.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[33m\e[33m-- Warning: /tmp/tmpf19h633v.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        val dp2 = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = List(grid(i)(j))\n                    dp2(i)(j) = List(grid(i)(j))\n     \
    \           } else if (i == 0) {\n                    dp(i)(j) = dp(i)(j - 1)\
    \ :+ grid(i)(j)\n                    dp2(i)(j) = dp2(i)(j - 1) :+ grid(i)(j)\n\
    \                } else if (j == 0) {\n                    dp(i)(j) = dp(i - 1)(j)\
    \ :+ grid(i)(j)\n                    dp2(i)(j) = dp2(i - 1)(j) :+ grid(i)(j)\n\
    \                } else {\n                    val l1 = dp(i - 1)(j) :+ grid(i)(j)\n\
    \                    val l2 = dp(i)(j - 1) :+ grid(i)(j)\n                   \
    \ if (l1 < l2) {\n                        dp(i)(j) = l1\n                    \
    \    dp2(i)(j) = l2\n                    } else {\n                        dp(i)(j)\
    \ = l2\n                        dp2(i)(j) = l1\n                    }\n      \
    \          }\n            }\n        }\n        if (k % 2 == 0) dp(n - 1)(m -\
    \ 1) else dp2(n - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3xc9w77l.scala:46:27 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                    \e[33mif\e[0m (l1 < l2) {\n\e[31m\e\
    [31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0mvalue < is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ (Int, Int))]()(Ordering.by(_._1))\n        pq.enqueue((0, (0, 0)))\n       \
    \ while (pq.nonEmpty) {\n            val (cost, (i, j)) = pq.dequeue\n       \
    \     if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n              \
    \  if (i > 0) pq.enqueue((cost + grid(i - 1)(j), (i - 1, j)))\n              \
    \  if (i < n - 1) pq.enqueue((cost + grid(i + 1)(j), (i + 1, j)))\n          \
    \      if (j > 0) pq.enqueue((cost + grid(i)(j - 1), (i, j - 1)))\n          \
    \      if (j < m - 1) pq.enqueue((cost + grid(i)(j + 1), (i, j + 1)))\n      \
    \      }\n        }\n        val pq2 = new PriorityQueue[(Long, (Int, Int))]()(Ordering.by(_._1))\n\
    \        pq2.enqueue((0, (0, 0)))\n        val visited = Array.fill(n, m)(false)\n\
    \        visited(0)(0) = true\n        var result = List[Long]()\n        while\
    \ (pq2.nonEmpty) {\n            val (cost, (i, j)) = pq2.dequeue\n           \
    \ result = result :+ grid(i)(j)\n            if (result.length == k) return result\n\
    \            if (i > 0 && !visited(i - 1)(j) && dp(i - 1)(j) == cost + grid(i\
    \ - 1)(j)) {\n                pq2.enqueue((cost + grid(i - 1)(j), (i - 1, j)))\n\
    \                visited(i - 1)(j) = true\n            }\n            if (i <\
    \ n - 1 && !visited(i + 1)(j) && dp(i + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_19fi4b8.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_19fi4b8.scala:73:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp_19fi4b8.scala:56:53 --------------------\e[0m\e[0m\n\
    \e[31m56 |\e[0m            \e[33mif\e[0m (i < n - \e[31m1\e[0m && !visited(i +\
    \ \e[31m1\e[0m)(j) && dp(i + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                           Found:    Array[Long]\n\e[31m   |\e\
    [0m                                                   Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_19fi4b8.scala:72:1 ---------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp_19fi4b8.scala:58:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659798775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val queue = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n        \
    \        dp(i)(j) = grid(i)(j)\n                queue.enqueue((dp(i)(j), i, j))\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until m) {\n                if (i > 0) {\n                    if (dp(i\
    \ - 1)(j) > dp(i)(j) + grid(i - 1)(j)) {\n                        dp(i - 1)(j)\
    \ = dp(i)(j) + grid(i - 1)(j)\n                        prev(i - 1)(j) = 1\n  \
    \                      queue.enqueue((dp(i - 1)(j), i - 1, j))\n             \
    \       }\n                }\n                if (i < n - 1) {\n             \
    \       if (dp(i + 1)(j) > dp(i)(j) + grid(i + 1)(j)) {\n                    \
    \    dp(i + 1)(j) = dp(i)(j) + grid(i + 1)(j)\n                        prev(i\
    \ + 1)(j) = 0\n                        queue.enqueue((dp(i + 1)(j), i + 1, j))\n\
    \                    }\n                }\n                if (j > 0) {\n    \
    \                if (dp(i)(j - 1) > dp(i)(j) + grid(i)(j - 1)) {\n           \
    \             dp(i)(j - 1) = dp(i)(j) + grid(i)(j - 1)\n                     \
    \   prev(i)(j - 1) = 3\n                        queue.enqueue((dp(i)(j - 1), i,\
    \ j - 1))\n                    }\n                }\n                if (j < m\
    \ - 1) {\n                    if (dp(i)(j + 1) > dp(i)(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx45by0je.scala:63:45 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m                    \e[33mif\e[0m (dp(i)(j + \e[31m1\e\
    [0m) > dp(i)(\n\e[31m\e[31m   |\e[0m                                         \
    \    ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpx45by0je.scala:80:0 ----------------------------\e[0m\e[0m\n\e[31m80\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[33m\e[33m-- Warning: /tmp/tmpx45by0je.scala:65:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m65 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    val up_left\
    \ = if (i > 0 && j > 0) dp(i - 1)(j - 1) else List[Long]()\n                 \
    \   val up_left_up = if (i > 1 && j > 0) dp(i - 2)(j - 1) else List[Long]()\n\
    \                    val up_left_left = if (i > 0 && j > 1) dp(i - 1)(j - 2) else\
    \ List[Long]()\n                    val up_left_up_left = if (i > 1 && j > 1)\
    \ dp(i - 2)(j - 2) else List[Long]()\n                    val up_left_up_left_up\
    \ = if (i > 2 && j > 1) dp(i - 3)(j - 2) else List[Long]()\n                 \
    \   val up_left_up_left_left = if (i > 1 && j > 2) dp(i - 2)(j - 3) else List[Long]()\n\
    \                    val up_left_up_left_up_left = if (i > 2 && j > 2) dp(i -\
    \ 3)(j - 3) else List[Long]()\n                    val up_left_up_left_up_left_up\
    \ = if (i > 3 && j > 2) dp(i - 4)(j - 2) else List[Long]()\n                 \
    \   val up_left_up_left_up_left_left = if (i > 2 && j > 3) dp(i - 3)(j - 4) else\
    \ List[Long]()\n                    val up_left_up_left_up_left_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp29wxvcpd.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp29wxvcpd.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp29wxvcpd.scala:48:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    val up_left\
    \ = if (i > 0 && j > 0) dp(i - 1)(j - 1) else List[Long]()\n                 \
    \   val up_left_up = if (i > 1 && j > 0) dp(i - 2)(j - 1) else List[Long]()\n\
    \                    val up_left_left = if (i > 0 && j > 1) dp(i - 1)(j - 2) else\
    \ List[Long]()\n                    val up_left_up_left = if (i > 1 && j > 1)\
    \ dp(i - 2)(j - 2) else List[Long]()\n                    val up_left_up_left_up\
    \ = if (i > 2 && j > 1) dp(i - 3)(j - 2) else List[Long]()\n                 \
    \   val up_left_up_left_left = if (i > 1 && j > 2) dp(i - 2)(j - 3) else List[Long]()\n\
    \                    val up_left_up_left_up_left = if (i > 2 && j > 2) dp(i -\
    \ 3)(j - 3) else List[Long]()\n                    val up_left_up_left_up_left_up\
    \ = if (i > 3 && j > 2) dp(i - 4)(j - 2) else List[Long]()\n                 \
    \   val up_left_up_left_up_left_left = if (i > 2 && j > 3) dp(i - 3)(j - 4) else\
    \ List[Long]()\n                    val up_left_up_left_up_left_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp29wxvcpd.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp29wxvcpd.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp29wxvcpd.scala:48:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val dp2 = Array.fill(n, m)(Long.MaxValue)\n        dp2(0)(0)\
    \ = 0\n        val path = ListBuffer[Long]()\n        while (pq2.nonEmpty) {\n\
    \            val (cost, i, j) = pq2.dequeue\n            if (dp2(i)(j) == cost)\
    \ {\n                path += grid(i)(j)\n                if (path.length == k)\
    \ return path.toList\n                if (i > 0 && dp2(i - 1)(j) > cost + dp(i\
    \ - 1)(j)) {\n                    dp2(i - 1)(j) = cost + dp(i - 1)(j)\n      \
    \              pq2.enqueue((dp2(i - 1)(j), i - 1, j))\n                }\n   \
    \             if (i < n - 1 && dp2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpznvtm80p.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpznvtm80p.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpznvtm80p.scala:57:33 --------------------\e[0m\e[0m\n\
    \e[31m57 |\e[0m                \e[33mif\e[0m (i < n - \e[31m1\e[0m && dp2\n\e\
    [31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (dp2 : Array[Array[Long]])\n\e[31m\
    \   |\e[0m                                 Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmpznvtm80p.scala:59:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i + 1 < n) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j + 1 < m) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n                if (i - 1 >= 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (j - 1 >= 0) pq.enqueue((cost\
    \ + grid(i)(j - 1), i, j - 1))\n            }\n        }\n        val res = new\
    \ ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        while (k >\
    \ 0) {\n            res += grid(i)(j)\n            k -= 1\n            if (i +\
    \ 1 < n && dp(i + 1)(j) < dp(i)(j)) {\n                i += 1\n            } else\
    \ if (j + 1 < m && dp(i)(j + 1) < dp(i)(j)) {\n                j += 1\n      \
    \      } else if (i - 1 >= 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i\
    \ -= 1\n            } else if (j - 1 >= 0 && dp(i)(j - 1) < dp(i)(j)) {\n    \
    \            j -= 1\n            }\n        }\n        res.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvo05g21g.scala:48:14 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (d, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ <= d) {\n                if (i == n - 1 && j == m - 1 && dp(i)(j) == d) {\n\
    \                    var result = List[Long]()\n                    var x = i\n\
    \                    var y = j\n                    while (x != 0 || y != 0) {\n\
    \                        result = grid(x)(y) :: result\n                     \
    \   val (x1, y1) = if (x == 0) (x, y - 1) else if (y == 0) (x - 1, y) else if\
    \ (dp(x - 1)(y) < dp(x)(y - 1)) (x - 1, y) else (x, y - 1)\n                 \
    \       x = x1\n                        y = y1\n                    }\n      \
    \              result = grid(0)(0) :: result\n                    return result\n\
    \                }\n                if (i < n - 1 && dp(i + 1)(j) > d + grid(i\
    \ + 1)(j)) {\n                    dp(i + 1)(j) = d + grid(i + 1)(j)\n        \
    \            pq.enqueue((dp(i + 1)(j), i + 1, j))\n                }\n       \
    \         if (j < m - 1 && dp(i)(j + 1) > d + grid(i)(j + 1)) {\n            \
    \        dp(i)(j + 1) = d + grid(i)(j + 1)\n                    pq.enqueue((dp(i)(j\
    \ + 1), i, j + 1))\n                }\n            }\n        }\n        return\
    \ List[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzk9jd64b.scala:62)\n\tat Problem.main(tmpzk9jd64b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == 0 && j == 0) dp(i)(j) = List(grid(i)(j))\n  \
    \              else {\n                    val up = if (i > 0) dp(i - 1)(j) else\
    \ List[Long]()\n                    val left = if (j > 0) dp(i)(j - 1) else List[Long]()\n\
    \                    val up_left = if (i > 0 && j > 0) dp(i - 1)(j - 1) else List[Long]()\n\
    \                    val up_left_up = if (i > 1 && j > 0) dp(i - 2)(j - 1) else\
    \ List[Long]()\n                    val up_left_left = if (i > 0 && j > 1) dp(i\
    \ - 1)(j - 2) else List[Long]()\n                    val up_left_up_left = if\
    \ (i > 1 && j > 1) dp(i - 2)(j - 2) else List[Long]()\n                    val\
    \ up_left_up_left_up = if (i > 2 && j > 1) dp(i - 3)(j - 2) else List[Long]()\n\
    \                    val up_left_up_left_left = if (i > 1 && j > 2) dp(i - 2)(j\
    \ - 3) else List[Long]()\n                    val up_left_up_left_up_left = if\
    \ (i > 2 && j > 2) dp(i - 3)(j - 3) else List[Long]()\n                    val\
    \ up_left_up_left_up_left_up = if (i > 3 && j > 2) dp(i - 4)(j - 3) else List[Long]()\n\
    \                    val up_left_up_left_up_left_left = if (i > 2 && j > 3) dp(i\
    \ - 3)(j - 4) else List[Long]()\n                    val up_left_up_left_up_left_up_left\
    \ = if (i > 3 &&\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3es555xv.scala:45:70 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                    \e[33mval\e[0m \e[36mup_left_up_left_up_left_up_left\e\
    [0m = \e[33mif\e[0m (i > \e[31m3\e[0m &&\n\e[31m\e[31m   |\e[0m              \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3es555xv.scala:62:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp3es555xv.scala:47:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ candidates = ListBuffer[List[Long]]()\n                    if (i > 0) candidates\
    \ += (grid(i)(j) :: dp(i - 1)(j))\n                    if (j > 0) candidates +=\
    \ (grid(i)(j) :: dp(i)(j - 1))\n                    if (candidates.isEmpty) dp(i)(j)\
    \ = List(grid(i)(j))\n                    else dp(i)(j) = candidates.minBy(x =>\
    \ x.reverse)\n                }\n            }\n        }\n        dp(n - 1)(m\
    \ - 1).take(k.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi4ibpm2z.scala:39:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                    \e[33melse\e[0m dp(i)(j) = candidates.minBy(x\
    \ => x.reverse)\n\e[31m\e[31m   |\e[0m                                       \
    \                             ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined\
    \ for List[Long]..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \    scala.math.Ordering.comparatorToOrdering[\e[35mList[Long]\e[0m](\n\e[31m\
    \   |\e[0m      /* missing */summon[java.util.Comparator[List[Long]]]\n\e[31m\
    \   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found\
    \ that match type java.util.Comparator[List[Long]].\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m   |\e[0m\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n\
    \        pq.enqueue((0, 0, 0))\n        while (pq.nonEmpty) {\n            val\
    \ (cost, i, j) = pq.dequeue\n            if (dp(i)(j) > cost) {\n            \
    \    dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost + grid(i - 1)(j),\
    \ i - 1, j))\n                if (i < n - 1) pq.enqueue((cost + grid(i + 1)(j),\
    \ i + 1, j))\n                if (j > 0) pq.enqueue((cost + grid(i)(j - 1), i,\
    \ j - 1))\n                if (j < n - 1) pq.enqueue((cost + grid(i)(j + 1), i,\
    \ j + 1))\n            }\n        }\n        val result = new ListBuffer[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (k > 0) {\n            result\
    \ += grid(i)(j)\n            k -= 1\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j))\
    \ {\n                i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j)\
    \ < dp(i)(j)) {\n                i += 1\n            } else if (j > 0 && dp(i)(j\
    \ - 1) < dp(i)(j)) {\n                j -= 1\n            } else if (j < n - 1\
    \ && dp(i)(j + 1) < dp(i)(j)) {\n                j += 1\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0e9vp62w.scala:47:14 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val visited = Array.fill(n, m)(false)\n        visited(0)(0)\
    \ = true\n        var ans = List[Long]()\n        while (!pq2.isEmpty) {\n   \
    \         val (cost, i, j) = pq2.dequeue\n            ans = ans :+ grid(i)(j)\n\
    \            if (ans.length == k) return ans\n            if (i > 0 && !visited(i\
    \ - 1)(j) && dp(i - 1)(j) == cost + grid(i - 1)(j)) {\n                pq2.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                visited(i - 1)(j) = true\n   \
    \         }\n            if (i < n - 1 && !visited(i + 1)(j) && dp(i + 1)(j) ==\
    \ cost + grid(i + 1)(j\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmltui4fl.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmltui4fl.scala:73:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpmltui4fl.scala:72:1 ---------------------\e[0m\e[0m\n\
    \e[31m72 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpmltui4fl.scala:58:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ neighbors = List((i - 1, j), (i, j - 1)).filter(p => p._1 >= 0 && p._2 >= 0)\n\
    \                    val paths = neighbors.map(p => dp(p._1)(p._2).map(grid(i)(j)\
    \ :: _)).filter(_.length == k)\n                    if (paths.length > 0) dp(i)(j)\
    \ = paths.minBy(_.reverse)\n                }\n            }\n        }\n    \
    \    dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp84d5nulm.scala:36:81 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    \e[33mval\e[0m \e[36mpaths\e[0m =\
    \ neighbors.map(\e[36mp\e[0m => dp(p._1)(p._2).map(grid(i)(j) :: _)).filter(_.length\
    \ == k)\n\e[31m\e[31m   |\e[0m                                               \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                        value :: is not a member of Long\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp84d5nulm.scala:37:75 -----------------------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m                    \e[33mif\e[0m (paths.length > \e[31m0\e\
    [0m) dp(i)(j) = paths.minBy(_.reverse)\n\e[31m\e[31m   |\e[0m                \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0mNo implicit Ordering defined for List[Any]..\n\e[31m   |\e[0mI found:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e[35mList[Any]\e[0m](\n\
    \e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[List[Any]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[List[Any]].\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val q = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n\
    \        q.enqueue((0, 0, 0))\n        while (!q.isEmpty) {\n            val (cost,\
    \ i, j) = q.dequeue\n            if (dp(i)(j) > cost) {\n                dp(i)(j)\
    \ = cost\n                if (i > 0) {\n                    val newCost = cost\
    \ + grid(i - 1)(j)\n                    if (newCost < dp(i - 1)(j)) {\n      \
    \                  prev(i - 1)(j) = i * m + j\n                        q.enqueue((newCost,\
    \ i - 1, j))\n                    }\n                }\n                if (i\
    \ < n - 1) {\n                    val newCost = cost + grid(i + 1)(j)\n      \
    \              if (newCost < dp(i + 1)(j)) {\n                        prev(i +\
    \ 1)(j) = i * m + j\n                        q.enqueue((newCost, i + 1, j))\n\
    \                    }\n                }\n                if (j > 0) {\n    \
    \                val newCost = cost + grid(i)(j - 1)\n                    if (newCost\
    \ < dp(i)(j - 1)) {\n                        prev(i)(j - 1) = i * m + j\n    \
    \                    q.enqueue((newCost, i, j - 1))\n                    }\n \
    \               }\n                if (j < m - 1) {\n                    val newCost\
    \ = cost + grid(i)(j + 1)\n                    if (newCost < dp(i)(j + 1)) {\n\
    \                        prev(i)(j + 1) = i * m + j\n                        q.enqueue((newCost,\
    \ i, j + 1))\n                    }\n                }\n            }\n      \
    \  }\n        val result = ListBuffer[Long]()\n        var cur = 0\n        for\
    \ (i <- 0 until k) {\n            result += grid(cur / m)(cur\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp1gtxzso.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp1gtxzso.scala:88:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m88 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpp1gtxzso.scala:70:26 --------------------\e[0m\e[0m\n\
    \e[31m70 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (k : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp1gtxzso.scala:87:1\
    \ ---------------------\e[0m\e[0m\n\e[31m87 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpp1gtxzso.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659798785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val queue = new Queue[(Int, Int)]\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until m) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    dp(i)(j) = 0\n                    queue.enqueue((i,\
    \ j))\n                }\n            }\n        }\n        val dirs = List((-1,\
    \ 0), (1, 0), (0, -1), (0, 1))\n        while (!queue.isEmpty) {\n           \
    \ val (i, j) = queue.dequeue\n            for ((di, dj) <- dirs) {\n         \
    \       val ni = i + di\n                val nj = j + dj\n                if (ni\
    \ >= 0 && ni < n && nj >= 0 && nj < m) {\n                    if (dp(ni)(nj) >\
    \ dp(i)(j) + 1) {\n                        dp(ni)(nj) = dp(i)(j) + 1\n       \
    \                 prev(ni)(nj) = i * m + j\n                        queue.enqueue((ni,\
    \ nj))\n                    }\n                }\n            }\n        }\n \
    \       var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until n) {\n            for (j <- 0 until m) {\n                if (dp(i)(j)\
    \ <= k && grid(i)(j) < min) {\n                    min = grid(i)(j)\n        \
    \            minIndex = i * m + j\n                }\n            }\n        }\n\
    \        val result = new ListBuffer[Long]\n        while (minIndex != -1) {\n\
    \            result += grid(minIndex / m)(minIndex % m)\n            minIndex\
    \ = prev(minIndex / m)(minIndex % m)\n        }\n        result.reverse.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps1al43lj.scala:74)\n\tat Problem.main(tmps1al43lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ neighbors = List((i - 1, j), (i, j - 1), (i + 1, j), (i, j + 1)).filter(x =>\
    \ x._1 >= 0 && x._1 < n && x._2 >= 0 && x._2 < m)\n                    dp(i)(j)\
    \ = neighbors.map(x => (grid(i)(j) :: dp(x._1)(x._2)).sorted).sortWith((x, y)\
    \ => x.compareTo(y) < 0).head\n                }\n            }\n        }\n \
    \       dp(n - 1)(m - 1).take(k.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv5mhcbs8.scala:36:110 -----------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    dp(i)(j) = neighbors.map(\e[36mx\e\
    [0m => (grid(i)(j) :: dp(x._1)(x._2)).sorted).sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x.compareTo(y) < \e[31m0\e[0m).head\n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue compareTo is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                dp(i)(j) = List(grid(i)(j))\n\
    \                if (i > 0 && dp(i - 1)(j).length + 1 <= k) {\n              \
    \      val lst = dp(i - 1)(j) :+ grid(i)(j)\n                    if (lst.length\
    \ == dp(i)(j).length) {\n                        if (lst < dp(i)(j)) dp(i)(j)\
    \ = lst\n                    } else if (lst.length < dp(i)(j).length) dp(i)(j)\
    \ = lst\n                }\n                if (j > 0 && dp(i)(j - 1).length +\
    \ 1 <= k) {\n                    val lst = dp(i)(j - 1) :+ grid(i)(j)\n      \
    \              if (lst.length == dp(i)(j).length) {\n                        if\
    \ (lst < dp(i)(j)) dp(i)(j) = lst\n                    } else if (lst.length <\
    \ dp(i)(j).length) dp(i)(j) = lst\n                }\n            }\n        }\n\
    \        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7cdcvq7a.scala:37:32 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                        \e[33mif\e[0m (lst < dp(i)(j))\
    \ dp(i)(j) = lst\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7cdcvq7a.scala:43:32 ------------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m                        \e[33mif\e[0m (lst < dp(i)(j)) dp(i)(j)\
    \ = lst\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue < is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        if (k == 1) {\n            var min = Long.MaxValue\n            var min_i\
    \ = 0\n            var min_j = 0\n            for (i <- 0 until n) {\n       \
    \         for (j <- 0 until m) {\n                    if (grid(i)(j) < min) {\n\
    \                        min = grid(i)(j)\n                        min_i = i\n\
    \                        min_j = j\n                    }\n                }\n\
    \            }\n            return List(grid(min_i)(min_j))\n        }\n     \
    \   val dp = Array.ofDim[Long](n, m, k + 1)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                dp(i)(j)(1) = grid(i)(j)\n\
    \            }\n        }\n        for (k_ <- 2 to k.toInt) {\n            for\
    \ (i <- 0 until n) {\n                for (j <- 0 until m) {\n               \
    \     var min = Long.MaxValue\n                    if (i > 0) {\n            \
    \            min = min min (dp(i - 1)(j)(k_ - 1) + grid(i)(j))\n             \
    \       }\n                    if (i < n - 1) {\n                        min =\
    \ min min (dp(i + 1)(j)(k_ - 1) + grid(i)(j))\n                    }\n       \
    \             if (j > 0) {\n                        min = min min (dp(i)(j - 1)(k_\
    \ - 1) + grid(i)(j))\n                    }\n                    if (j < m - 1)\
    \ {\n                        min = min min (dp(i)(j + 1)(k_ - 1) + grid(i)(j))\n\
    \                    }\n                    dp(i)(j)(k_) = min\n             \
    \   }\n            }\n        }\n        var min = Long.MaxValue\n        var\
    \ min_i = 0\n        var min_j = 0\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until m) {\n                if (dp(i)(j)(k.toInt) < min) {\n \
    \                   min = dp(i)(j)(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp72bggqqp.scala:77:35 ---------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m                    min = dp(i)(j)(\n\e[31m\e[31m   |\e\
    [0m                                   ^\e[0m\n\e[31m   |\e[0m                \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp72bggqqp.scala:94:0 ----------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp72bggqqp.scala:45:41\
    \ --------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n, m, k + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                         ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp72bggqqp.scala:79:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m79 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    path(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\n           \
    \             path(i)(j) = path(i - 1)(j)\n                    }\n           \
    \         if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1)\n                        path(i)(j) = path(i)(j - 1)\n      \
    \              }\n                    if (dp(i)(j) != Long.MaxValue) {\n     \
    \                   dp(i)(j) += grid(i)(j)\n                        path(i)(j)\
    \ = path(i)(j) :+ grid(i)(j)\n                    }\n                }\n     \
    \       }\n        }\n        var result = List[Long]()\n        var i = n - 1\n\
    \        var j = m - 1\n        while (k > 0) {\n            result = path(i)(j).head\
    \ :: result\n            k -= 1\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j\
    \ - 1)) {\n                i -= 1\n            }\n            else if (j > 0 &&\
    \ dp(i)(j - 1) < dp(i - 1)(j)) {\n                j -= 1\n            }\n    \
    \        else {\n                i -= 1\n                j -= 1\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpja73yss4.scala:59:14 ------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798786
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[Long]()\n                    if (i > 0) lst ++= dp(i - 1)(j)\n\
    \                    if (j > 0) lst ++= dp(i)(j - 1)\n                    dp(i)(j)\
    \ = (lst.toList :+ grid(i)(j)).sorted.take(k.toInt)\n                }\n     \
    \       }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0v0x76f.scala:45)\n\tat Problem.main(tmpr0v0x76f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (i\
    \ < 0 || i >= n || j < 0 || j >= m) {\n                // out of bounds\n    \
    \        } else if (dp(i)(j) <= cost) {\n                // already visited\n\
    \            } else {\n                dp(i)(j) = cost\n                if (cost\
    \ >= k) {\n                    // done\n                } else {\n           \
    \         pq.enqueue((cost + grid(i)(j), i - 1, j))\n                    pq.enqueue((cost\
    \ + grid(i)(j), i + 1, j))\n                    pq.enqueue((cost + grid(i)(j),\
    \ i, j - 1))\n                    pq.enqueue((cost + grid(i)(j), i, j + 1))\n\
    \                }\n            }\n        }\n        val result = new ListBuffer[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (k > 0) {\n            result\
    \ += grid(i)(j)\n            k -= 1\n            if (i > 0 && dp(i - 1)(j) < dp(i\
    \ + 1)(j) && dp(i - 1)(j) < dp(i)(j - 1) && dp(i - 1)(j) < dp(i)(j + 1)) {\n \
    \               i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j) < dp(i\
    \ - 1)(j) && dp(i + 1)(j) < dp(i)(j - 1) && dp(i + 1)(j) < dp(i)(j + 1)) {\n \
    \               i += 1\n            } else if (j > 0 && dp(i)(j - 1) < dp(i -\
    \ 1)(j) &&\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpna34stwt.scala:61:62 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (j > \e[31m0\e\
    [0m && dp(i)(j - \e[31m1\e[0m) < dp(i - \e[31m1\e[0m)(j) &&\n\e[31m\e[31m   |\e\
    [0m                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpna34stwt.scala:78:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpna34stwt.scala:56:14 ------------------------\e[0m\e[0m\n\
    \e[31m56 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of Long - did\
    \ you mean k.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpna34stwt.scala:77:1\
    \ ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpna34stwt.scala:63:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m63 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659798788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    if (up.length\
    \ == 0) dp(i)(j) = left :+ grid(i)(j)\n                    else if (left.length\
    \ == 0) dp(i)(j) = up :+ grid(i)(j)\n                    else if (up.length <\
    \ left.length) dp(i)(j) = up :+ grid(i)(j)\n                    else if (up.length\
    \ > left.length) dp(i)(j) = left :+ grid(i)(j)\n                    else {\n \
    \                       var flag = false\n                        for (t <- 0\
    \ until up.length) {\n                            if (up(t) < left(t)) {\n   \
    \                             dp(i)(j) = up :+ grid(i)(j)\n                  \
    \              flag = true\n                                break\n          \
    \                  }\n                            else if (up(t) > left(t)) {\n\
    \                                dp(i)(j) = left :+ grid(i)(j)\n             \
    \                   flag = true\n                                break\n     \
    \                       }\n                        }\n                       \
    \ if (!flag) dp(i)(j) = up :+ grid(i)(j)\n                    }\n            \
    \    }\n            }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzsbpt27d.scala:47:32 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                                break\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzsbpt27d.scala:52:32 ------------------------\e[0m\e\
    [0m\n\e[31m52 |\e[0m                                break\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    var\
    \ min = List[Long]()\n                    if (i > 0) {\n                     \
    \   val lst = dp(i - 1)(j)\n                        if (lst.length < k) min =\
    \ lst :+ grid(i)(j)\n                        else if (lst.length == k) min = lst\n\
    \                    }\n                    if (j > 0) {\n                   \
    \     val lst = dp(i)(j - 1)\n                        if (lst.length < k) {\n\
    \                            if (min.length == 0 || lst.length < min.length ||\
    \ (lst.length == min.length && lst.last < min.last)) min = lst :+ grid(i)(j)\n\
    \                        }\n                        else if (lst.length == k)\
    \ {\n                            if (min.length == 0 || (lst.length == min.length\
    \ && lst.last < min.last)) min = lst\n                        }\n            \
    \        }\n                    dp(i)(j) = min\n                }\n          \
    \  }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhhxamcd.scala:57)\n\tat Problem.main(tmpuhhxamcd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)((Long.MaxValue, List[Long]()))\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until m) {\n                if (i\
    \ == 0 && j == 0) dp(i)(j) = (0, List(grid(i)(j)))\n                else {\n \
    \                   if (i > 0) {\n                        val (x, lst) = dp(i\
    \ - 1)(j)\n                        if (x + 1 < dp(i)(j)._1) dp(i)(j) = (x + 1,\
    \ grid(i)(j) :: lst)\n                        else if (x + 1 == dp(i)(j)._1) {\n\
    \                            val lst2 = grid(i)(j) :: lst\n                  \
    \          if (lst2 < dp(i)(j)._2) dp(i)(j) = (x + 1, lst2)\n                \
    \        }\n                    }\n                    if (j > 0) {\n        \
    \                val (x, lst) = dp(i)(j - 1)\n                        if (x +\
    \ 1 < dp(i)(j)._1) dp(i)(j) = (x + 1, grid(i)(j) :: lst)\n                   \
    \     else if (x + 1 == dp(i)(j)._1) {\n                            val lst2 =\
    \ grid(i)(j) :: lst\n                            if (lst2 < dp(i)(j)._2) dp(i)(j)\
    \ = (x + 1, lst2)\n                        }\n                    }\n        \
    \        }\n            }\n        }\n        val (x, lst) = dp(n - 1)(m - 1)\n\
    \        if (x == k) lst\n        else {\n            val lst2 = ListBuffer[Long]()\n\
    \            var i = n - 1\n            var j = m - 1\n            while (i >\
    \ 0 || j > 0) {\n                if (i > 0 && dp(i - 1)(j)._1 + 1 == dp(i)(j).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqcxyxeof.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpqcxyxeof.scala:78:0 ----------------------------\e[0m\e[0m\n\e[31m78\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqcxyxeof.scala:40:37 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j)._2)\
    \ dp(i)(j) = (x + \e[31m1\e[0m, lst2)\n\e[31m\e[31m   |\e[0m                 \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqcxyxeof.scala:48:37 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j)._2)\
    \ dp(i)(j) = (x + \e[31m1\e[0m, lst2)\n\e[31m\e[31m   |\e[0m                 \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqcxyxeof.scala:77:1 ---------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpqcxyxeof.scala:63:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m63 |\e[0m    \e[33mdef\e[0m \e[36mmain"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == 0 && j == 0) dp(i)(j) = List(grid(i)(j))\n  \
    \              else {\n                    val neighbors = List((i - 1, j), (i,\
    \ j - 1), (i + 1, j), (i, j + 1)).filter(x => x._1 >= 0 && x._1 < n && x._2 >=\
    \ 0 && x._2 < n)\n                    val neighborPaths = neighbors.map(x => dp(x._1)(x._2)).filter(x\
    \ => x.length < k)\n                    val minPath = if (neighborPaths.isEmpty)\
    \ List[Long]() else neighborPaths.minBy(x => x :+ grid(i)(j))\n              \
    \      dp(i)(j) = minPath :+ grid(i)(j)\n                }\n            }\n  \
    \      }\n        dp(n - 1)(n - 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmu7rbxuy.scala:36:120 ----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    \e[33mval\e[0m \e[36mminPath\e[0m\
    \ = \e[33mif\e[0m (neighborPaths.isEmpty) List[\e[35mLong\e[0m]() \e[33melse\e\
    [0m neighborPaths.minBy(\e[36mx\e[0m => x :+ grid(i)(j))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0mNo implicit\
    \ Ordering defined for List[Long]..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e[35mList[Long]\e\
    [0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[List[Long]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[List[Long]].\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m   |\e[0m\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659798788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)((-1, -1))\n        val q = new Queue[(Int, Int)]\n        q.enqueue((0, 0))\n\
    \        dp(0)(0) = grid(0)(0)\n        while (!q.isEmpty) {\n            val\
    \ (i, j) = q.dequeue\n            if (i > 0 && dp(i - 1)(j) > dp(i)(j) + grid(i\
    \ - 1)(j)) {\n                dp(i - 1)(j) = dp(i)(j) + grid(i - 1)(j)\n     \
    \           prev(i - 1)(j) = (i, j)\n                q.enqueue((i - 1, j))\n \
    \           }\n            if (i < n - 1 && dp(i + 1)(j) > dp(i)(j) + grid(i +\
    \ 1)(j)) {\n                dp(i + 1)(j) = dp(i)(j) + grid(i + 1)(j)\n       \
    \         prev(i + 1)(j) = (i, j)\n                q.enqueue((i + 1, j))\n   \
    \         }\n            if (j > 0 && dp(i)(j - 1) > dp(i)(j) + grid(i)(j - 1))\
    \ {\n                dp(i)(j - 1) = dp(i)(j) + grid(i)(j - 1)\n              \
    \  prev(i)(j - 1) = (i, j)\n                q.enqueue((i, j - 1))\n          \
    \  }\n            if (j < m - 1 && dp(i)(j + 1) > dp(i)(j) + grid(i)(j + 1)) {\n\
    \                dp(i)(j + 1) = dp(i)(j) + grid(i)(j + 1)\n                prev(i)(j\
    \ + 1) = (i, j)\n                q.enqueue((i, j + 1))\n            }\n      \
    \  }\n        var (i\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmtz_qnn7.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmtz_qnn7.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val result =\
    \ new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (k > 0) {\n            result += grid(i)(j)\n            k -= 1\n          \
    \  if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n         \
    \   } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n                i += 1\n\
    \            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                j\
    \ -= 1\n            } else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j)) {\n     \
    \           j += 1\n            }\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8f4cy1kg.scala:48:14 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, x, y) = pq.dequeue\n            if (dp(x)(y)\
    \ > cost) {\n                dp(x)(y) = cost\n                if (x > 0) pq.enqueue((cost\
    \ + grid(x - 1)(y), x - 1, y))\n                if (x < n - 1) pq.enqueue((cost\
    \ + grid(x + 1)(y), x + 1, y))\n                if (y > 0) pq.enqueue((cost +\
    \ grid(x)(y - 1), x, y - 1))\n                if (y < m - 1) pq.enqueue((cost\
    \ + grid(x)(y + 1), x, y + 1))\n            }\n        }\n        val result =\
    \ new ListBuffer[Long]()\n        var x = 0\n        var y = 0\n        var cost\
    \ = 0L\n        for (i <- 0 until k.toInt) {\n            result += grid(x)(y)\n\
    \            if (x > 0 && dp(x - 1)(y) < dp(x)(y)) {\n                x -= 1\n\
    \                cost += grid(x)(y)\n            } else if (x < n - 1 && dp(x\
    \ + 1)(y) < dp(x)(y)) {\n                x += 1\n                cost += grid(x)(y)\n\
    \            } else if (y > 0 && dp(x)(y - 1) < dp(x)(y)) {\n                y\
    \ -= 1\n                cost += grid(x)(y)\n            } else if (y < m - 1 &&\
    \ dp(x)(y + 1) < dp(x)(y)) {\n                y += 1\n                cost +=\
    \ grid(x)(y)\n            }\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp60qy1c2x.scala:66)\n\tat Problem.main(tmp60qy1c2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ (Int, Int))]()(Ordering.by(x => x._1))\n        pq.enqueue((0, (0, 0)))\n  \
    \      while (pq.nonEmpty) {\n            val (cost, (i, j)) = pq.dequeue\n  \
    \          if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n         \
    \       if (i > 0) pq.enqueue((cost + grid(i - 1)(j), (i - 1, j)))\n         \
    \       if (i < n - 1) pq.enqueue((cost + grid(i + 1)(j), (i + 1, j)))\n     \
    \           if (j > 0) pq.enqueue((cost + grid(i)(j - 1), (i, j - 1)))\n     \
    \           if (j < m - 1) pq.enqueue((cost + grid(i)(j + 1), (i, j + 1)))\n \
    \           }\n        }\n        val path = Array.fill(k.toInt)(0)\n        var\
    \ i = 0\n        var j = 0\n        for (l <- 0 until k.toInt) {\n           \
    \ path(l) = grid(i)(j).toInt\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j))\
    \ {\n                i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j)\
    \ < dp(i)(j)) {\n                i += 1\n            } else if (j > 0 && dp(i)(j\
    \ - 1) < dp(i)(j)) {\n                j -= 1\n            } else {\n         \
    \       j += 1\n            }\n        }\n        path.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9ifj657.scala:58:13\
    \ --------------------\e[0m\e[0m\n\e[31m58 |\e[0m        path.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val dp2 = Array.fill(n, n)(List[Long]())\n      \
    \  for (i <- 0 until n) {\n            for (j <- 0 until n) {\n              \
    \  if (i == 0 && j == 0) {\n                    dp(i)(j) = grid(i)(j)\n      \
    \              dp2(i)(j) = List(grid(i)(j))\n                }\n             \
    \   else {\n                    if (i > 0) {\n                        if (dp(i\
    \ - 1)(j) < dp(i)(j)) {\n                            dp(i)(j) = dp(i - 1)(j)\n\
    \                            dp2(i)(j) = dp2(i - 1)(j)\n                     \
    \   }\n                        else if (dp(i - 1)(j) == dp(i)(j)) {\n        \
    \                    if (dp2(i - 1)(j) < dp2(i)(j)) {\n                      \
    \          dp2(i)(j) = dp2(i - 1)(j)\n                            }\n        \
    \                }\n                    }\n                    if (j > 0) {\n\
    \                        if (dp(i)(j - 1) < dp(i)(j)) {\n                    \
    \        dp(i)(j) = dp(i)(j - 1)\n                            dp2(i)(j) = dp2(i)(j\
    \ - 1)\n                        }\n                        else if (dp(i)(j -\
    \ 1) == dp(i)(j)) {\n                            if (dp2(i)(j - 1) < dp2(i)(j))\
    \ {\n                                dp2(i)(j) = dp2(i)(j - 1)\n             \
    \               }\n                        }\n                    }\n        \
    \            dp(i)(j) += grid(i)(j)\n                    dp2(i)(j) = dp2(i)(j)\
    \ :+ grid(i)(j)\n                }\n            }\n        }\n        var x =\
    \ n - 1\n        var y = n - 1\n        var ans = dp2(x)(y)\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkrsvtohm.scala:44:46 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                            \e[33mif\e[0m (dp2(i - \e\
    [31m1\e[0m)(j) < dp2(i)(j)) {\n\e[31m\e[31m   |\e[0m                         \
    \       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkrsvtohm.scala:55:46 ------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m                            \e[33mif\e[0m (dp2(i)(j -\
    \ \e[31m1\e[0m) < dp2(i)(j)) {\n\e[31m\e[31m   |\e[0m                        \
    \        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkrsvtohm.scala:69:5 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                val l = List(grid(i)(j))\n                dp(i)(j) = l\n\
    \                for (x <- 0 until n) {\n                    for (y <- 0 until\
    \ n) {\n                        if (x != i || y != j) {\n                    \
    \        val l2 = dp(x)(y)\n                            if (l2.length < k) {\n\
    \                                val l3 = l2 ::: l\n                         \
    \       if (l3.length <= k && (dp(i)(j).length > l3.length || l3 < dp(i)(j)))\
    \ {\n                                    dp(i)(j) = l3\n                     \
    \           }\n                            }\n                        }\n    \
    \                }\n                }\n            }\n        }\n        var ans\
    \ = List[Long]()\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (ans.length > dp(i)(j).length || dp(i)(j) < ans) {\n\
    \                    ans = dp(i)(j)\n                }\n            }\n      \
    \  }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe6cxjd6v.scala:40:89 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                                \e[33mif\e[0m (l3.length\
    \ <= k && (dp(i)(j).length > l3.length || l3 < dp(i)(j))) {\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \            ^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe6cxjd6v.scala:52:61 ------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                \e[33mif\e[0m (ans.length > dp(i)(j).length\
    \ || dp(i)(j) < ans) {\n\e[31m\e[31m   |\e[0m                                \
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of\
    \ List[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        def dfs(i : Int, j\
    \ : Int, k : Long, path : List[Long]) : Unit = {\n            if (i < 0 || i >=\
    \ n || j < 0 || j >= m) return\n            if (k < 0) return\n            if\
    \ (dp(i)(j) <= k) return\n            dp(i)(j) = k\n            dfs(i - 1, j,\
    \ k - 1, grid(i)(j) :: path)\n            dfs(i + 1, j, k - 1, grid(i)(j) :: path)\n\
    \            dfs(i, j - 1, k - 1, grid(i)(j) :: path)\n            dfs(i, j +\
    \ 1, k - 1, grid(i)(j) :: path)\n        }\n        dfs(0, 0, k, List(grid(0)(0)))\n\
    \        var minPath = List[Long]()\n        for (i <- 0 until n; j <- 0 until\
    \ m) {\n            if (dp(i)(j) <= k) {\n                val path = dfs2(i, j,\
    \ k, List(grid(i)(j)))\n                if (path < minPath) minPath = path\n \
    \           }\n        }\n        minPath\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp03jzo4xk.scala:45:27 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                \e[33mval\e[0m \e[36mpath\e[0m = dfs2(i,\
    \ j, k, List(grid(i)(j)))\n\e[31m\e[31m   |\e[0m                           ^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: dfs2\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    var\
    \ min = List[Long]()\n                    if (i > 0) {\n                     \
    \   val lst = dp(i - 1)(j)\n                        if (lst.length < k) min =\
    \ lst :+ grid(i)(j)\n                        else if (lst.length == k) min = if\
    \ (lst.last > grid(i)(j)) lst :+ grid(i)(j) else lst\n                    }\n\
    \                    if (j > 0) {\n                        val lst = dp(i)(j -\
    \ 1)\n                        if (lst.length < k) {\n                        \
    \    if (min.length == 0 || lst.length < min.length || (lst.length == min.length\
    \ && lst.last < min.last)) min = lst :+ grid(i)(j)\n                        }\n\
    \                        else if (lst.length == k) {\n                       \
    \     if (min.length == 0 || (lst.last < min.last)) min = if (lst.last > grid(i)(j))\
    \ lst :+ grid(i)(j) else lst\n                        }\n                    }\n\
    \                    dp(i)(j) = min\n                }\n            }\n      \
    \  }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp697uroxr.scala:57)\n\tat Problem.main(tmp697uroxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val result =\
    \ new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (k > 0) {\n            result += grid(i)(j)\n            k -= 1\n          \
    \  if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n         \
    \   } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n                i += 1\n\
    \            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                j\
    \ -= 1\n            } else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j)) {\n     \
    \           j += 1\n            }\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8f4cy1kg.scala:48:14 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n\
    \                if (i == 0 && j == 0) {\n                    dp(i)(j) = grid(i)(j)\n\
    \                } else {\n                    if (i > 0) {\n                \
    \        if (dp(i - 1)(j) < dp(i)(j)) {\n                            dp(i)(j)\
    \ = dp(i - 1)(j)\n                            prev(i)(j) = 0\n               \
    \         }\n                    }\n                    if (j > 0) {\n       \
    \                 if (dp(i)(j - 1) < dp(i)(j)) {\n                           \
    \ dp(i)(j) = dp(i)(j - 1)\n                            prev(i)(j) = 1\n      \
    \                  }\n                    }\n                    dp(i)(j) += grid(i)(j)\n\
    \                }\n            }\n        }\n        val result = ListBuffer[Long]()\n\
    \        var i = n - 1\n        var j = m - 1\n        while (k > 0) {\n     \
    \       result += grid(i)(j)\n            k -= 1\n            if (prev(i)(j) ==\
    \ 0) {\n                i -= 1\n            } else if (prev(i)(j) == 1) {\n  \
    \              j -= 1\n            }\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkhywlsgx.scala:58:14 ------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val result = Array.fill(k.toInt)(0L)\n        var index = 0\n\
    \        while (!pq2.isEmpty) {\n            val (cost, i, j) = pq2.dequeue\n\
    \            if (dp(i)(j) == cost) {\n                result(index) = grid(i)(j)\n\
    \                index += 1\n                if (index == k) return result.toList\n\
    \                if (i > 0) pq2.enqueue((cost + grid(i - 1)(j), i - 1, j))\n \
    \               if (i < n - 1) pq2.enqueue((cost + grid(i + 1)(j), i + 1, j))\n\
    \                if (j > 0) pq2.enqueue((cost + grid(i)(j - 1), i, j - 1))\n \
    \               if (j < m - 1) pq2.en\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_hstsx01.scala:73:0 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_hstsx01.scala:56:35\
    \ ------------------------\e[0m\e[0m\n\e[31m56 |\e[0m                \e[33mif\e\
    [0m (j < m - \e[31m1\e[0m) pq2.en\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue en is not a member of scala.collection.mutable.PriorityQueue[(Long,\
    \ Int, Int)] - did you mean pq2.eq?\n\e[33m\e[33m-- Warning: /tmp/tmp_hstsx01.scala:58:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m58 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == 0 && j == 0) dp(i)(j) = List(grid(i)(j))\n  \
    \              else {\n                    val lst = ListBuffer[List[Long]]()\n\
    \                    if (i > 0) lst += (grid(i)(j) :: dp(i - 1)(j))\n        \
    \            if (j > 0) lst += (grid(i)(j) :: dp(i)(j - 1))\n                \
    \    dp(i)(j) = lst.minBy(x => x)\n                }\n            }\n        }\n\
    \        dp(n - 1)(n - 1).take(k.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0oyvha61.scala:37:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    dp(i)(j) = lst.minBy(\e[36mx\e[0m\
    \ => x)\n\e[31m\e[31m   |\e[0m                                               \
    \ ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for List[Long]..\n\e[31m\
    \   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mList[Long]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[List[Long]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[List[Long]].\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m   |\e[0m\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659798795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until m) {\n                pq.enqueue((grid(i)(j), i, j))\n \
    \           }\n        }\n        while (pq.nonEmpty) {\n            val (v, i,\
    \ j) = pq.dequeue\n            if (dp(i)(j) > v) {\n                dp(i)(j) =\
    \ v\n                if (i > 0) pq.enqueue((v + grid(i - 1)(j), i - 1, j))\n \
    \               if (i < n - 1) pq.enqueue((v + grid(i + 1)(j), i + 1, j))\n  \
    \              if (j > 0) pq.enqueue((v + grid(i)(j - 1), i, j - 1))\n       \
    \         if (j < m - 1) pq.enqueue((v + grid(i)(j + 1), i, j + 1))\n        \
    \    }\n        }\n        val result = ArrayBuffer[Long]()\n        var i = 0\n\
    \        var j = 0\n        var c = 0L\n        while (c < k) {\n            result\
    \ += grid(i)(j)\n            c += 1\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j))\
    \ {\n                i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j)\
    \ < dp(i)(j)) {\n                i += 1\n            } else if (j > 0 && dp(i)(j\
    \ - 1) < dp(i)(j)) {\n                j -= 1\n            } else if (j < m - 1\
    \ && dp(i)(j + 1) < dp(i)(j)) {\n                j += 1\n            } else {\n\
    \                return result.toList\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpctjow9y4.scala:69)\n\tat Problem.main(tmpctjow9y4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    var\
    \ min = List[Long]()\n                    if (i > 0) {\n                     \
    \   val up = dp(i - 1)(j)\n                        if (up.length < k && (min.length\
    \ == 0 || up < min)) min = up\n                    }\n                    if (j\
    \ > 0) {\n                        val left = dp(i)(j - 1)\n                  \
    \      if (left.length < k && (min.length == 0 || left < min)) min = left\n  \
    \                  }\n                    dp(i)(j) = min :+ grid(i)(j)\n     \
    \           }\n            }\n        }\n        dp(n - 1)(m - 1)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf9u3bzsf.scala:38:68 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                        \e[33mif\e[0m (up.length < k\
    \ && (min.length == \e[31m0\e[0m || up < min)) min = up\n\e[31m\e[31m   |\e[0m\
    \                                                                 ^^^^\e[0m\n\e\
    [31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpf9u3bzsf.scala:42:72 ------------------------\e[0m\e\
    [0m\n\e[31m42 |\e[0m                        \e[33mif\e[0m (left.length < k &&\
    \ (min.length == \e[31m0\e[0m || left < min)) min = left\n\e[31m\e[31m   |\e[0m\
    \                                                                   ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    if\
    \ (i > 0) {\n                        val lst = dp(i - 1)(j)\n                \
    \        if (lst.length < k) dp(i)(j) = List(grid(i)(j)) ++ lst\n            \
    \            else if (lst.length == k) {\n                            val lst2\
    \ = List(grid(i)(j)) ++ lst\n                            if (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n                        }\n                    }\n        \
    \            if (j > 0) {\n                        val lst = dp(i)(j - 1)\n  \
    \                      if (lst.length < k) dp(i)(j) = List(grid(i)(j)) ++ lst\n\
    \                        else if (lst.length == k) {\n                       \
    \     val lst2 = List(grid(i)(j)) ++ lst\n                            if (lst2\
    \ < dp(i)(j)) dp(i)(j) = lst2\n                        }\n                   \
    \ }\n                }\n            }\n        }\n        dp(n - 1)(m - 1)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuuy3y62n.scala:40:37 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuuy3y62n.scala:48:37 ------------------------\e[0m\e\
    [0m\n\e[31m48 |\e[0m                            \e[33mif\e[0m (lst2 < dp(i)(j))\
    \ dp(i)(j) = lst2\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val dp2 = Array.fill(n, m)(Long.MaxValue)\n        dp2(0)(0)\
    \ = 0\n        val path = new ListBuffer[Long]()\n        while (pq2.nonEmpty)\
    \ {\n            val (cost, i, j) = pq2.dequeue\n            if (dp2(i)(j) ==\
    \ cost) {\n                path += grid(i)(j)\n                if (path.length\
    \ == k) return path.toList\n                if (i > 0 && dp2(i - 1)(j) > cost\
    \ + dp(i - 1)(j)) {\n                    dp2(i - 1)(j) = cost + dp(i - 1)(j)\n\
    \                    pq2.enqueue((dp2(i - 1)(j), i - 1, j))\n                }\n\
    \                if (i < n - 1 && dp\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp80jbajj2.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp80jbajj2.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp80jbajj2.scala:57:33 --------------------\e[0m\e[0m\n\
    \e[31m57 |\e[0m                \e[33mif\e[0m (i < n - \e[31m1\e[0m && dp\n\e[31m\e\
    [31m   |\e[0m                                 ^^\e[0m\n\e[31m   |\e[0m       \
    \                          Found:    (dp : Array[Array[Long]])\n\e[31m   |\e[0m\
    \                                 Required: Boolean\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp80jbajj2.scala:59:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        val queue = new Queue[(Int, Int)]\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until m) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    dp(i)(j) = 0\n                    queue.enqueue((i,\
    \ j))\n                }\n            }\n        }\n        val dx = Array(-1,\
    \ 0, 1, 0)\n        val dy = Array(0, 1, 0, -1)\n        while (!queue.isEmpty)\
    \ {\n            val (x, y) = queue.dequeue\n            for (i <- 0 until 4)\
    \ {\n                val nx = x + dx(i)\n                val ny = y + dy(i)\n\
    \                if (nx >= 0 && nx < n && ny >= 0 && ny < m && dp(nx)(ny) > dp(x)(y)\
    \ + 1) {\n                    dp(nx)(ny) = dp(x)(y) + 1\n                    prev(nx)(ny)\
    \ = i\n                    queue.enqueue((nx, ny))\n                }\n      \
    \      }\n        }\n        var x = 0\n        var y = 0\n        val result\
    \ = new ListBuffer[Long]\n        for (i <- 0 until k.toInt) {\n            result\
    \ += grid(x)(y)\n            val nx = x + dx(prev(x)(y))\n            val ny =\
    \ y + dy(prev(x)(y))\n            x = nx\n            y = ny\n        }\n    \
    \    result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length\
    \ 4\n\tat Problem$.minPath$$anonfun$3(tmpflqvxqg_.scala:60)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.minPath(tmpflqvxqg_.scala:64)\n\
    \tat Problem$.main(tmpflqvxqg_.scala:68)\n\tat Problem.main(tmpflqvxqg_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[Long]()\n                    if (i > 0) lst ++= dp(i - 1)(j)\n\
    \                    if (j > 0) lst ++= dp(i)(j - 1)\n                    dp(i)(j)\
    \ = (lst.toList :+ grid(i)(j)).sorted.take(k.toInt)\n                }\n     \
    \       }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0v0x76f.scala:45)\n\tat Problem.main(tmpr0v0x76f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    path(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ + grid(i)(j) < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\
    \ + grid(i)(j)\n                        path(i)(j) = path(i - 1)(j) :+ grid(i)(j)\n\
    \                    }\n                    if (j > 0 && dp(i)(j - 1) + grid(i)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i)(j - 1) + grid(i)(j)\n\
    \                        path(i)(j) = path(i)(j - 1) :+ grid(i)(j)\n         \
    \           }\n                }\n            }\n        }\n        path(n - 1)(m\
    \ - 1).take(k.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmchbr_94.scala:53)\n\tat Problem.main(tmpmchbr_94.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[List[Long]]()\n                    if (i > 0) lst += dp(i -\
    \ 1)(j)\n                    if (j > 0) lst += dp(i)(j - 1)\n                \
    \    if (lst.nonEmpty) {\n                        val min = lst.minBy(x => (x\
    \ :+ grid(i)(j)).mkString)\n                        dp(i)(j) = min :+ grid(i)(j)\n\
    \                    }\n                }\n            }\n        }\n        dp(n\
    \ - 1)(m - 1).take(k.toInt)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwwvfhfzp.scala:48)\n\tat Problem.main(tmpwwvfhfzp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(0)\n        val q = new Queue[(Int, Int)]\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    dp(i)(j) = 0\n                    q.enqueue((i, j))\n   \
    \             }\n            }\n        }\n        val dx = Array(-1, 0, 1, 0)\n\
    \        val dy = Array(0, 1, 0, -1)\n        while (!q.isEmpty) {\n         \
    \   val (x, y) = q.dequeue\n            for (i <- 0 until 4) {\n             \
    \   val nx = x + dx(i)\n                val ny = y + dy(i)\n                if\
    \ (nx >= 0 && nx < n && ny >= 0 && ny < m && dp(nx)(ny) > dp(x)(y) + 1) {\n  \
    \                  dp(nx)(ny) = dp(x)(y) + 1\n                    prev(nx)(ny)\
    \ = i\n                    q.enqueue((nx, ny))\n                }\n          \
    \  }\n        }\n        var x = 0\n        var y = 0\n        var min = Long.MaxValue\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n        \
    \        if (dp(i)(j) < min) {\n                    min = dp(i)(j)\n         \
    \           x = i\n                    y = j\n                }\n            }\n\
    \        }\n        val ans = new ListBuffer[Long]\n        for (i <- 0 until\
    \ k.toInt) {\n            ans += grid(x)(y)\n            val nx = x + dx(prev(x)(y))\n\
    \            val ny = y + dy(prev(x)(y))\n            x = nx\n            y =\
    \ ny\n        }\n        ans.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.minPath$$anonfun$4(tmpc2112vdn.scala:69)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.minPath(tmpc2112vdn.scala:74)\n\
    \tat Problem$.main(tmpc2112vdn.scala:78)\n\tat Problem.main(tmpc2112vdn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(x => -x._1))\n        pq.enqueue((0, 0, 0))\n     \
    \   while (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n       \
    \     if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n              \
    \  if (i > 0) pq.enqueue((cost + grid(i - 1)(j), i - 1, j))\n                if\
    \ (i < n - 1) pq.enqueue((cost + grid(i + 1)(j), i + 1, j))\n                if\
    \ (j > 0) pq.enqueue((cost + grid(i)(j - 1), i, j - 1))\n                if (j\
    \ < m - 1) pq.enqueue((cost + grid(i)(j + 1), i, j + 1))\n            }\n    \
    \    }\n        val pq2 = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(x\
    \ => -x._1))\n        pq2.enqueue((0, 0, 0))\n        val visited = Array.fill(n,\
    \ m)(false)\n        var result = List[Long]()\n        while (!pq2.isEmpty) {\n\
    \            val (cost, i, j) = pq2.dequeue\n            if (!visited(i)(j)) {\n\
    \                visited(i)(j) = true\n                result = result :+ grid(i)(j)\n\
    \                if (result.length == k) return result\n                if (i\
    \ > 0 && dp(i - 1)(j) == cost + grid(i)(j)) pq2.enqueue((cost + grid(i)(j), i\
    \ - 1, j))\n                if (i < n - 1 && dp(i + 1)(j) == cost + grid(i)(j))\
    \ pq2.enqueue((cost + grid(i)(j), i + 1, j))\n                if (\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcj_nru3v.scala:55:20 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m                \e[33mif\e[0m (\n\e[31m\e[31m   |\e[0m\
    \                    ^\e[0m\n\e[31m   |\e[0m                    expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpcj_nru3v.scala:72:0 ----------------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[33m\e[33m-- Warning: /tmp/tmpcj_nru3v.scala:57:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m57 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                dp(i)(j) = List(grid(i)(j))\n\
    \                if (i > 0 && dp(i - 1)(j).length <= k && dp(i - 1)(j).length\
    \ + 1 <= dp(i)(j).length) {\n                    if (dp(i - 1)(j).length + 1 <\
    \ dp(i)(j).length) dp(i)(j) = dp(i - 1)(j) :+ grid(i)(j)\n                   \
    \ else if (dp(i - 1)(j).last < dp(i)(j).last) dp(i)(j) = dp(i - 1)(j) :+ grid(i)(j)\n\
    \                }\n                if (j > 0 && dp(i)(j - 1).length <= k && dp(i)(j\
    \ - 1).length + 1 <= dp(i)(j).length) {\n                    if (dp(i)(j - 1).length\
    \ + 1 < dp(i)(j).length) dp(i)(j) = dp(i)(j - 1) :+ grid(i)(j)\n             \
    \       else if (dp(i)(j - 1).last < dp(i)(j).last) dp(i)(j) = dp(i)(j - 1) :+\
    \ grid(i)(j)\n                }\n            }\n        }\n        dp(n - 1)(m\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphp4caiem.scala:47)\n\tat Problem.main(tmphp4caiem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    if\
    \ (i > 0) {\n                        val lst = dp(i - 1)(j)\n                \
    \        if (lst.length < k) {\n                            val newLst = grid(i)(j)\
    \ :: lst\n                            if (dp(i)(j).length == 0 || newLst < dp(i)(j))\
    \ dp(i)(j) = newLst\n                        }\n                    }\n      \
    \              if (j > 0) {\n                        val lst = dp(i)(j - 1)\n\
    \                        if (lst.length < k) {\n                            val\
    \ newLst = grid(i)(j) :: lst\n                            if (dp(i)(j).length\
    \ == 0 || newLst < dp(i)(j)) dp(i)(j) = newLst\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        dp(n\
    \ - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcjibsovd.scala:39:63 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                            \e[33mif\e[0m (dp(i)(j).length\
    \ == \e[31m0\e[0m || newLst < dp(i)(j)) dp(i)(j) = newLst\n\e[31m\e[31m   |\e\
    [0m                                                        ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue < is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcjibsovd.scala:46:63\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m                        \
    \    \e[33mif\e[0m (dp(i)(j).length == \e[31m0\e[0m || newLst < dp(i)(j)) dp(i)(j)\
    \ = newLst\n\e[31m\e[31m   |\e[0m                                            \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                dp(i)(j) = List(grid(i)(j))\n                if (i > 0\
    \ && dp(i - 1)(j).length <= k && dp(i - 1)(j).length + 1 < dp(i)(j).length) {\n\
    \                    dp(i)(j) = grid(i)(j) :: dp(i - 1)(j)\n                }\n\
    \                if (j > 0 && dp(i)(j - 1).length <= k && dp(i)(j - 1).length\
    \ + 1 < dp(i)(j).length) {\n                    dp(i)(j) = grid(i)(j) :: dp(i)(j\
    \ - 1)\n                }\n            }\n        }\n        dp(n - 1)(n - 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp975urhl8.scala:44)\n\tat Problem.main(tmp975urhl8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val ans = Array.fill(n)(Array.fill(m)(List[Long]()))\n\
    \        for (i <- 0 until n; j <- 0 until m) {\n            if (i > 0 && dp(i\
    \ - 1)(j) < dp(i)(j)) ans(i)(j) = ans(i - 1)(j) :+ grid(i)(j)\n            else\
    \ if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) ans(i)(j) = ans(i + 1)(j) :+ grid(i)(j)\n\
    \            else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) ans(i)(j) = ans(i)(j -\
    \ 1) :+ grid(i)(j)\n            else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j))\
    \ ans(i)(j) = ans(i)(j + 1) :+ grid(i)(j)\n            else ans(i)(j) = List(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe5ywcc24.scala:49:34 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m            \e[33melse\e[0m ans(i)(j) = List(\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe5ywcc24.scala:66:0 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5ywcc24.scala:65:1\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpe5ywcc24.scala:51:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m51 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[List[Long]]()\n                    if (i > 0) lst += dp(i -\
    \ 1)(j)\n                    if (j > 0) lst += dp(i)(j - 1)\n                \
    \    val min = lst.minBy(x => (x :+ grid(i)(j)).mkString(\"\"))\n            \
    \        dp(i)(j) = min :+ grid(i)(j)\n                }\n            }\n    \
    \    }\n        dp(n - 1)(m - 1).take(k.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdfujt6j.scala:46)\n\tat Problem.main(tmphdfujt6j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n\
    \                if (i == 0 && j == 0) {\n                    dp(i)(j) = grid(i)(j)\n\
    \                } else {\n                    if (i > 0) {\n                \
    \        if (dp(i - 1)(j) < dp(i)(j)) {\n                            dp(i)(j)\
    \ = dp(i - 1)(j)\n                            prev(i)(j) = 0\n               \
    \         }\n                    }\n                    if (j > 0) {\n       \
    \                 if (dp(i)(j - 1) < dp(i)(j)) {\n                           \
    \ dp(i)(j) = dp(i)(j - 1)\n                            prev(i)(j) = 1\n      \
    \                  }\n                    }\n                    dp(i)(j) += grid(i)(j)\n\
    \                }\n            }\n        }\n        val path = ListBuffer[Long]()\n\
    \        var i = n - 1\n        var j = m - 1\n        while (k > 0) {\n     \
    \       path += grid(i)(j)\n            k -= 1\n            prev(i)(j) match {\n\
    \                case 0 => i -= 1\n                case 1 => j -= 1\n        \
    \    }\n        }\n        path.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpblqi5u00.scala:58:14 ------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val path = new\
    \ ListBuffer[Long]\n        var i = 0\n        var j = 0\n        while (path.length\
    \ < k) {\n            path += grid(i)(j)\n            if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                i -= 1\n            } else if (i < n - 1 && dp(i\
    \ + 1)(j) < dp(i)(j)) {\n                i += 1\n            } else if (j > 0\
    \ && dp(i)(j - 1) < dp(i)(j)) {\n                j -= 1\n            } else if\
    \ (j < m - 1 && dp(i)(j + 1) < dp(i)(j)) {\n                j += 1\n         \
    \   }\n        }\n        path.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_j9sni3b.scala:61)\n\tat Problem.main(tmp_j9sni3b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val result =\
    \ new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        for (k\
    \ <- 1 to k.toInt) {\n            result += grid(i)(j)\n            if (i > 0\
    \ && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n            } else if\
    \ (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n                i += 1\n         \
    \   } else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                j -= 1\n \
    \           } else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j)) {\n             \
    \   j += 1\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi2pk_qx5.scala:61)\n\tat Problem.main(tmpi2pk_qx5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, x, y) = pq.dequeue\n            if (dp(x)(y)\
    \ > cost) {\n                dp(x)(y) = cost\n                if (x > 0) pq.enqueue((cost\
    \ + grid(x - 1)(y), x - 1, y))\n                if (x < n - 1) pq.enqueue((cost\
    \ + grid(x + 1)(y), x + 1, y))\n                if (y > 0) pq.enqueue((cost +\
    \ grid(x)(y - 1), x, y - 1))\n                if (y < m - 1) pq.enqueue((cost\
    \ + grid(x)(y + 1), x, y + 1))\n            }\n        }\n        val result =\
    \ ArrayBuffer[Long]()\n        var x = 0\n        var y = 0\n        var cost\
    \ = 0L\n        for (i <- 0 until k.toInt) {\n            result += grid(x)(y)\n\
    \            if (x > 0 && dp(x - 1)(y) == cost + grid(x - 1)(y)) {\n         \
    \       x -= 1\n                cost += grid(x)(y)\n            } else if (x <\
    \ n - 1 && dp(x + 1)(y) == cost + grid(x + 1)(y)) {\n                x += 1\n\
    \                cost += grid(x)(y)\n            } else if (y > 0 && dp(x)(y -\
    \ 1) == cost + grid(x)(y - 1)) {\n                y -= 1\n                cost\
    \ += grid(x)(y)\n            } else if (y < m - 1 && dp(x)(y + 1) == cost + grid(x)(y\
    \ + 1)) {\n                y += 1\n                cost += grid(x)(y)\n      \
    \      }\n        }\n        result.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp10y36iqi.scala:63:8\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m        result.to\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.Factory[Long,\
    \ Any] => Any\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (i\
    \ == n - 1 && j == m - 1) {\n                val path = new ListBuffer[Long]\n\
    \                var x = i\n                var y = j\n                while (x\
    \ != 0 || y != 0) {\n                    path.append(grid(x)(y))\n           \
    \         val (px, py) = prev(x, y)\n                    x = px\n            \
    \        y = py\n                }\n                path.append(grid(0)(0))\n\
    \                path.reverse\n                return path.toList\n          \
    \  }\n            if (dp(i)(j) > cost) {\n                dp(i)(j) = cost\n  \
    \              for (d <- 0 until 4) {\n                    val (ni, nj) = next(i,\
    \ j, d)\n                    if (ni >= 0 && ni < n && nj >= 0 && nj < m) {\n \
    \                       val ncost = cost + grid(ni)(nj)\n                    \
    \    pq.enqueue((ncost, ni, nj))\n                    }\n                }\n \
    \           }\n        }\n        return List()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp90ntrlsm.scala:41:35 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mval\e[0m (px, py) = prev(x,\
    \ y)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Not found: prev\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp90ntrlsm.scala:41:25 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mval\e[0m (px, py) = prev(x,\
    \ y)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m  \
    \                       Recursive \e[33mvalue\e[0m \e[35m$2$\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp90ntrlsm.scala:41:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m                    \e\
    [33mval\e[0m (px, py) = prev(x, y)\n\e[31m\e[31m   |\e[0m                    \
    \         ^\e[0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e\
    [0m \e[35m$2$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp90ntrlsm.scala:52:35 ------------------------\e[0m\e[0m\n\e[31m52 |\e\
    [0m                    \e[33mval\e[0m (ni, nj) = next(i, j, d)\n\e[31m\e[31m \
    \  |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: next\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp90ntrlsm.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                    \e[33mval\e[0m (ni, nj) = next(i,\
    \ j, d)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m\
    \                         Recursive \e[33mvalue\e[0m \e[35m$3$\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp90ntrlsm.scala:52:29\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659798801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long, (Int, Int))]()(Ordering.by(-_._1))\n\
    \        pq.enqueue((0, (0, 0)))\n        while (pq.nonEmpty) {\n            val\
    \ (cost, (i, j)) = pq.dequeue\n            if (dp(i)(j) > cost) {\n          \
    \      dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost + grid(i -\
    \ 1)(j), (i - 1, j)))\n                if (i < n - 1) pq.enqueue((cost + grid(i\
    \ + 1)(j), (i + 1, j)))\n                if (j > 0) pq.enqueue((cost + grid(i)(j\
    \ - 1), (i, j - 1)))\n                if (j < n - 1) pq.enqueue((cost + grid(i)(j\
    \ + 1), (i, j + 1)))\n            }\n        }\n        val ans = ArrayBuffer[Long]()\n\
    \        var i = 0; var j = 0\n        while (ans.length < k) {\n            ans\
    \ += grid(i)(j)\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n       \
    \         i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j) < dp(i)(j))\
    \ {\n                i += 1\n            } else if (j > 0 && dp(i)(j - 1) < dp(i)(j))\
    \ {\n                j -= 1\n            } else if (j < n - 1 && dp(i)(j + 1)\
    \ < dp(i)(j)) {\n                j += 1\n            }\n        }\n        ans.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3y6ai8i.scala:59)\n\tat Problem.main(tmpx3y6ai8i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        dp(0)(0) = 0\n        path(0)(0) = List(grid(0)(0))\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n        \
    \        if (i > 0) {\n                    if (dp(i - 1)(j) + 1 < dp(i)(j)) {\n\
    \                        dp(i)(j) = dp(i - 1)(j) + 1\n                       \
    \ path(i)(j) = path(i - 1)(j) :+ grid(i)(j)\n                    } else if (dp(i\
    \ - 1)(j) + 1 == dp(i)(j)) {\n                        val newPath = path(i - 1)(j)\
    \ :+ grid(i)(j)\n                        if (newPath < path(i)(j)) {\n       \
    \                     path(i)(j) = newPath\n                        }\n      \
    \              }\n                }\n                if (j > 0) {\n          \
    \          if (dp(i)(j - 1) + 1 < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1) + 1\n                        path(i)(j) = path(i)(j - 1) :+ grid(i)(j)\n\
    \                    } else if (dp(i)(j - 1) + 1 == dp(i)(j)) {\n            \
    \            val newPath = path(i)(j - 1) :+ grid(i)(j)\n                    \
    \    if (newPath < path(i)(j)) {\n                            path(i)(j) = newPath\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        val result = path(n - 1)(m - 1)\n        if (result.length\
    \ > k) result.slice(0, k.toInt) else result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpee3roofu.scala:42:36 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                        \e[33mif\e[0m (newPath < path(i)(j))\
    \ {\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue < is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpee3roofu.scala:53:36\
    \ ------------------------\e[0m\e[0m\n\e[31m53 |\e[0m                        \e\
    [33mif\e[0m (newPath < path(i)(j)) {\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    val up_left\
    \ = if (i > 0 && j > 0) dp(i - 1)(j - 1) else List[Long]()\n                 \
    \   val up_left_up = if (i > 1 && j > 0) dp(i - 2)(j - 1) else List[Long]()\n\
    \                    val up_left_left = if (i > 0 && j > 1) dp(i - 1)(j - 2) else\
    \ List[Long]()\n                    val up_left_up_left = if (i > 1 && j > 1)\
    \ dp(i - 2)(j - 2) else List[Long]()\n                    val up_left_up_left_up\
    \ = if (i > 2 && j > 1) dp(i - 3)(j - 2) else List[Long]()\n                 \
    \   val up_left_up_left_left = if (i > 1 && j > 2) dp(i - 2)(j - 3) else List[Long]()\n\
    \                    val up_left_up_left_up_left = if (i > 2 && j > 2) dp(i -\
    \ 3)(j - 3) else List[Long]()\n                    val up_left_up_left_up_left_up\
    \ = if (i > 3 && j > 2) dp(i - 4)(j - 2) else List[Long]()\n                 \
    \   val up_left_up_left_up_left_left = if (i > 2 && j > 3) dp(i - 3)(j - 4) else\
    \ List[Long]()\n                    val up_left_up_left_up_left_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp29wxvcpd.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp29wxvcpd.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp29wxvcpd.scala:48:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)(-1)\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n\
    \                if (i == 0 && j == 0) {\n                    dp(i)(j) = grid(i)(j)\n\
    \                } else {\n                    if (i > 0) {\n                \
    \        if (dp(i - 1)(j) < dp(i)(j)) {\n                            dp(i)(j)\
    \ = dp(i - 1)(j)\n                            prev(i)(j) = 0\n               \
    \         }\n                    }\n                    if (j > 0) {\n       \
    \                 if (dp(i)(j - 1) < dp(i)(j)) {\n                           \
    \ dp(i)(j) = dp(i)(j - 1)\n                            prev(i)(j) = 1\n      \
    \                  }\n                    }\n                    dp(i)(j) += grid(i)(j)\n\
    \                }\n            }\n        }\n        val path = ListBuffer[Long]()\n\
    \        var i = n - 1\n        var j = m - 1\n        while (k > 0) {\n     \
    \       path += grid(i)(j)\n            k -= 1\n            prev(i)(j) match {\n\
    \                case 0 => i -= 1\n                case 1 => j -= 1\n        \
    \    }\n        }\n        path.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpblqi5u00.scala:58:14 ------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val visited = Array.fill(n, m)(false)\n        while (pq2.nonEmpty)\
    \ {\n            val (cost, i, j) = pq2.dequeue\n            if (!visited(i)(j))\
    \ {\n                visited(i)(j) = true\n                if (i > 0 && dp(i -\
    \ 1)(j) == cost + grid(i - 1)(j)) pq2.enqueue((cost + grid(i - 1)(j), i - 1, j))\n\
    \                if (i < n - 1 && dp(i + 1)(j) == cost + grid(i + 1)(j)) pq2.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0 && dp(i)(j - 1) == cost\
    \ + grid(i)(j - 1)) pq2.enqueue((cost +\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf19h633v.scala:52:87 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                \e[33mif\e[0m (j > \e[31m0\e[0m && dp(i)(j\
    \ - \e[31m1\e[0m) == cost + grid(i)(j - \e[31m1\e[0m)) pq2.enqueue((cost +\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpf19h633v.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[33m\e[33m-- Warning: /tmp/tmpf19h633v.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    path(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\n           \
    \             path(i)(j) = path(i - 1)(j)\n                    }\n           \
    \         if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1)\n                        path(i)(j) = path(i)(j - 1)\n      \
    \              }\n                    dp(i)(j) += grid(i)(j)\n               \
    \     path(i)(j) = (path(i)(j) :+ grid(i)(j)).sorted\n                }\n    \
    \        }\n        }\n        var i = n - 1\n        var j = m - 1\n        var\
    \ cur = path(i)(j)\n        while (k > 0) {\n            if (i > 0 && path(i -\
    \ 1)(j) < cur) {\n                i -= 1\n            }\n            else if (j\
    \ > 0 && path(i)(j - 1) < cur) {\n                j -= 1\n            }\n    \
    \        else {\n                throw new Exception(\"No solution\")\n      \
    \      }\n            cur = path(i)(j)\n            k -= 1\n        }\n      \
    \  cur\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5878ib7y.scala:56:40 ------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m            \e[33mif\e[0m (i > \e[31m0\e[0m && path(i\
    \ - \e[31m1\e[0m)(j) < cur) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5878ib7y.scala:59:45 ------------------------\e[0m\e\
    [0m\n\e[31m59 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (j > \e[31m0\e[0m\
    \ && path(i)(j - \e[31m1\e[0m) < cur) {\n\e[31m\e[31m   |\e[0m               \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5878ib7y.scala:66:14 ------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659798808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(0L)\n        for (i <- 0 until n) {\n     \
    \       for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n      \
    \          if (i > 0) dp(i)(j) = min(dp(i)(j), dp(i - 1)(j))\n               \
    \ if (j > 0) dp(i)(j) = min(dp(i)(j), dp(i)(j - 1))\n            }\n        }\n\
    \        var i = 0\n        var j = 0\n        var path = List[Long]()\n     \
    \   while (k > 0) {\n            path = grid(i)(j) :: path\n            if (i\
    \ == n - 1) j += 1\n            else if (j == m - 1) i += 1\n            else\
    \ if (dp(i + 1)(j) < dp(i)(j + 1)) i += 1\n            else j += 1\n         \
    \   k -= 1\n        }\n        path\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprdxmm10c.scala:47:14 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val dp2 = Array.fill(n, m)(Long.MaxValue)\n        dp2(0)(0)\
    \ = 0\n        val result = ListBuffer[Long]()\n        while (pq2.nonEmpty) {\n\
    \            val (cost, i, j) = pq2.dequeue\n            if (dp2(i)(j) == cost)\
    \ {\n                result += grid(i)(j)\n                if (result.length ==\
    \ k) return result.toList\n                if (i > 0 && dp2(i - 1)(j) > cost +\
    \ dp(i - 1)(j)) {\n                    dp2(i - 1)(j) = cost + dp(i - 1)(j)\n \
    \                   pq2.enqueue((dp2(i - 1)(j), i - 1, j))\n                }\n\
    \                if (i < n - 1 && dp2(i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzh6uyuma.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzh6uyuma.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpzh6uyuma.scala:57:36 --------------------\e[0m\e[0m\n\
    \e[31m57 |\e[0m                \e[33mif\e[0m (i < n - \e[31m1\e[0m && dp2(i\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    Array[Long]\n\e[31m   |\e[0m     \
    \                            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpzh6uyuma.scala:59:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    if\
    \ (i > 0) {\n                        val lst = dp(i - 1)(j)\n                \
    \        if (lst.length < k) dp(i)(j) = lst :+ grid(i)(j)\n                  \
    \      else if (lst.length == k) {\n                            if (lst.last >\
    \ grid(i)(j)) dp(i)(j) = lst.init :+ grid(i)(j)\n                        }\n \
    \                   }\n                    if (j > 0) {\n                    \
    \    val lst = dp(i)(j - 1)\n                        if (lst.length < k) {\n \
    \                           if (dp(i)(j).length < k) dp(i)(j) = lst :+ grid(i)(j)\n\
    \                            else if (dp(i)(j).length == k) {\n              \
    \                  if (dp(i)(j).last > grid(i)(j)) dp(i)(j) = lst :+ grid(i)(j)\n\
    \                            }\n                        }\n                  \
    \      else if (lst.length == k) {\n                            if (lst.last >\
    \ grid(i)(j)) {\n                                if (dp(i)(j).length < k) dp(i)(j)\
    \ = lst.init :+ grid(i)(j)\n                                else if (dp(i)(j).length\
    \ == k) {\n                                    if (dp(i)(j).last > grid(i)(j))\
    \ dp(i)(j) = lst.init :+ grid(i)(j)\n                                }\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        dp(n - 1)(m - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9aqycej.scala:65)\n\tat Problem.main(tmp_9aqycej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val path = Array.fill(n,\
    \ m)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i == 0 && j == 0) {\n                    dp(i)(j)\
    \ = grid(i)(j)\n                    path(i)(j) = List(grid(i)(j))\n          \
    \      }\n                else {\n                    if (i > 0 && dp(i - 1)(j)\
    \ < dp(i)(j)) {\n                        dp(i)(j) = dp(i - 1)(j)\n           \
    \             path(i)(j) = path(i - 1)(j)\n                    }\n           \
    \         if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                        dp(i)(j)\
    \ = dp(i)(j - 1)\n                        path(i)(j) = path(i)(j - 1)\n      \
    \              }\n                    dp(i)(j) += grid(i)(j)\n               \
    \     path(i)(j) = path(i)(j) :+ grid(i)(j)\n                }\n            }\n\
    \        }\n        var i = n - 1\n        var j = m - 1\n        while (k > 1)\
    \ {\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -=\
    \ 1\n            }\n            else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n\
    \                j -= 1\n            }\n            else {\n                i\
    \ -= 1\n                j -= 1\n            }\n            k -= 1\n        }\n\
    \        path(i)(j)\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphmib4322.scala:65:14 ------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (d, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > d) {\n                dp(i)(j) = d\n                if (i > 0) pq.enqueue((d\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((d +\
    \ grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((d + grid(i)(j\
    \ - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((d + grid(i)(j +\
    \ 1), i, j + 1))\n            }\n        }\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        var j = 0\n        while (result.length < k) {\n \
    \           result += grid(i)(j)\n            if (i > 0 && dp(i - 1)(j) < dp(i)(j))\
    \ {\n                i -= 1\n            } else if (i < n - 1 && dp(i + 1)(j)\
    \ < dp(i)(j)) {\n                i += 1\n            } else if (j > 0 && dp(i)(j\
    \ - 1) < dp(i)(j)) {\n                j -= 1\n            } else if (j < m - 1\
    \ && dp(i)(j + 1) < dp(i)(j)) {\n                j += 1\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9jmd_lq8.scala:61)\n\tat Problem.main(tmp9jmd_lq8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        // dp(i)(j)(k) = the minimum path of length\
    \ k starting from (i, j)\n        val dp = Array.fill(grid.length, grid.length,\
    \ k.toInt + 1)(Long.MaxValue)\n        for (i <- 0 until grid.length; j <- 0 until\
    \ grid.length) {\n            dp(i)(j)(1) = grid(i)(j)\n        }\n        for\
    \ (l <- 2 to k.toInt) {\n            for (i <- 0 until grid.length; j <- 0 until\
    \ grid.length) {\n                if (i > 0) dp(i)(j)(l) = min(dp(i)(j)(l), dp(i\
    \ - 1)(j)(l - 1))\n                if (i < grid.length - 1) dp(i)(j)(l) = min(dp(i)(j)(l),\
    \ dp(i + 1)(j)(l - 1))\n                if (j > 0) dp(i)(j)(l) = min(dp(i)(j)(l),\
    \ dp(i)(j - 1)(l - 1))\n                if (j < grid.length - 1) dp(i)(j)(l) =\
    \ min(dp(i)(j)(l), dp(i)(j + 1)(l - 1))\n            }\n        }\n        var\
    \ min = Long.MaxValue\n        var minI = -1\n        var minJ = -1\n        for\
    \ (i <- 0 until grid.length; j <- 0 until grid.length) {\n            if (dp(i)(j)(k.toInt)\
    \ < min) {\n                min = dp(i)(j)(k.toInt)\n                minI = i\n\
    \                minJ = j\n            }\n        }\n        var result = List[Long]()\n\
    \        var i = minI\n        var j = minJ\n        for (l <- k.toInt to 1 by\
    \ -1) {\n            result = grid(i)(j) :: result\n            if (i > 0 && dp(i)(j)(l)\
    \ == dp(i - 1)(j)(l - 1)) {\n                i -= 1\n            } else if (i\
    \ < grid.length -\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp570ot20n.scala:58:40 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (i < grid.length\
    \ -\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp570ot20n.scala:75:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp570ot20n.scala:35:41 -----------------------------\e[0m\e[0m\n\
    \e[31m35 |\e[0m                \e[33mif\e[0m (i > \e[31m0\e[0m) dp(i)(j)(l) =\
    \ min(dp(i)(j)(l), dp(i - \e[31m1\e[0m)(j)(l - \e[31m1\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                \e[33mvariable\e[0m \e[35mmin\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp570ot20n.scala:36:55\
    \ -----------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                \e[33mif\e\
    [0m (i < grid.length - \e[31m1\e[0m) dp(i)(j)(l) = min(dp(i)(j)(l), dp(i + \e\
    [31m1\e[0m)(j)(l - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^^^\e[0m\n\e[31m   |\e[0m                 \
    \                  \e[33mvariable\e[0m \e[35mmin\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp570ot20n.scala:37:41 -----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mif\e[0m (j > \e[31m0\e[0m) dp(i)(j)(l)\
    \ = min(dp(i)(j)(l), dp(i)(j - \e[31m1\e[0m)(l - \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0m \
    \                                  \e[33mvariable\e[0m \e[35mmin\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation availab"
  stdout: ''
  timestamp: 1659798730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(0)\n        for (i <- 0 until n) {\n      \
    \      for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n       \
    \     }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) dp(i)(j) = min(dp(i)(j), dp(i - 1)(j))\n  \
    \              if (j > 0) dp(i)(j) = min(dp(i)(j), dp(i)(j - 1))\n           \
    \ }\n        }\n        val result = new ListBuffer[Long]\n        var i = 0\n\
    \        var j = 0\n        for (x <- 0 until k.toInt) {\n            result +=\
    \ dp(i)(j)\n            if (i == n - 1 && j == m - 1) {\n                i = 0\n\
    \                j = 0\n            } else if (i == n - 1) {\n               \
    \ j += 1\n            } else if (j == m - 1) {\n                i += 1\n     \
    \       } else if (dp(i + 1)(j) < dp(i)(j + 1)) {\n                i += 1\n  \
    \          } else {\n                j += 1\n            }\n        }\n      \
    \  result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppskhdjrb.scala:33:34\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m                dp(i)(j) = grid(i)(j)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                dp(i)(j) = List(grid(i)(j))\n\
    \                if (i > 0 && dp(i - 1)(j).length + 1 <= k) {\n              \
    \      val tmp = dp(i - 1)(j) :+ grid(i)(j)\n                    if (tmp.length\
    \ == k) dp(i)(j) = tmp\n                    else if (tmp.length < k && tmp < dp(i)(j))\
    \ dp(i)(j) = tmp\n                }\n                if (j > 0 && dp(i)(j - 1).length\
    \ + 1 <= k) {\n                    val tmp = dp(i)(j - 1) :+ grid(i)(j)\n    \
    \                if (tmp.length == k) dp(i)(j) = tmp\n                    else\
    \ if (tmp.length < k && tmp < dp(i)(j)) dp(i)(j) = tmp\n                }\n  \
    \          }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu5xv9gic.scala:37:51 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (tmp.length\
    \ < k && tmp < dp(i)(j)) dp(i)(j) = tmp\n\e[31m\e[31m   |\e[0m               \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu5xv9gic.scala:42:51 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (tmp.length\
    \ < k && tmp < dp(i)(j)) dp(i)(j) = tmp\n\e[31m\e[31m   |\e[0m               \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659798812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[List[Long]]()\n                    if (i > 0) lst += dp(i -\
    \ 1)(j)\n                    if (j > 0) lst += dp(i)(j - 1)\n                \
    \    if (lst.isEmpty) dp(i)(j) = List(grid(i)(j))\n                    else {\n\
    \                        val min = lst.minBy(x => x :+ grid(i)(j))\n         \
    \               dp(i)(j) = min :+ grid(i)(j)\n                    }\n        \
    \        }\n            }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpthg4x7dn.scala:40:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                        \e[33mval\e[0m \e[36mmin\e[0m\
    \ = lst.minBy(\e[36mx\e[0m => x :+ grid(i)(j))\n\e[31m\e[31m   |\e[0m        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mNo implicit Ordering defined for List[Long]..\n\e[31m   |\e[0mI found:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mList[Long]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[List[Long]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[List[Long]].\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m   |\e[0m\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659798811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        // Let's use dynamic programming.\n    \
    \    // Let dp(i, j, l) be the minimum path of length l starting from cell (i,\
    \ j).\n        // dp(i, j, l) = min(dp(i + 1, j, l - 1), dp(i - 1, j, l - 1),\
    \ dp(i, j + 1, l - 1), dp(i, j - 1, l - 1))\n        // dp(i, j, l) = grid(i)(j)\
    \ + dp(i + 1, j, l - 1), dp(i - 1, j, l - 1), dp(i, j + 1, l - 1), dp(i, j - 1,\
    \ l - 1)\n        // dp(i, j, l) = grid(i)(j) + min(dp(i + 1, j, l - 1), dp(i\
    \ - 1, j, l - 1), dp(i, j + 1, l - 1), dp(i, j - 1, l - 1))\n        // dp(i,\
    \ j, l) = grid(i)(j) + min(dp(i + 1, j, l - 1), dp(i - 1, j, l - 1), dp(i, j +\
    \ 1, l - 1), dp(i, j - 1, l - 1))\n        // dp(i, j, l) = grid(i)(j) + min(dp(i\
    \ + 1, j, l - 1), dp(i - 1, j, l - 1), dp(i, j + 1, l - 1), dp(i, j - 1, l - 1))\n\
    \        // dp(i, j, l) = grid(i)(j) + min(dp(i + 1, j, l - 1), dp(i - 1, j, l\
    \ - 1), dp(i, j + 1, l - 1), dp(i, j - 1, l - 1))\n        // dp(i, j, l) = grid(i)(j)\
    \ + min(dp(i + 1, j, l - 1), dp(i - 1, j, l -\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptg7mvc4n.scala:27:66\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m    \e[33mdef\e[0m \e[36mminPath\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mk\e\
    [0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e[31m\e[31m  \
    \ |\e[0m                                                                  ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \ Required: List[Long]\n\e[31m28 |\e[0m        \e[34m// Let's use dynamic programming.\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// Let dp(i, j, l) be the minimum path of length\
    \ l starting from cell (i, j).\e[0m\n\e[31m30 |\e[0m        \e[34m// dp(i, j,\
    \ l) = min(dp(i + 1, j, l - 1), dp(i - 1, j, l - 1), dp(i, j + 1, l - 1), dp(i,\
    \ j - 1, l - 1))\e[0m\n\e[31m31 |\e[0m        \e[34m// dp(i, j, l) = grid(i)(j)\
    \ + dp(i + 1, j, l - 1), dp(i - 1, j, l - 1), dp(i, j + 1, l - 1), dp(i, j - 1,\
    \ l - 1)\e[0m\n\e[31m32 |\e[0m        \e[34m// dp(i, j, l) = grid(i)(j) + min(dp(i\
    \ + 1, j, l - 1), dp(i - 1, j, l - 1), dp(i, j + 1, l - 1), dp(i, j - 1, l - 1))\e\
    [0m\n\e[31m33 |\e[0m        \e[34m// dp(i, j, l) = grid(i)(j) + min(dp(i + 1,\
    \ j, l - 1), dp(i - 1, j, l - 1), dp(i, j + 1, l - 1), dp(i, j - 1, l - 1))\e\
    [0m\n\e[31m34 |\e[0m        \e[34m// dp(i, j, l) = grid(i)(j) + min(dp(i + 1,\
    \ j, l - 1), dp(i - 1, j, l - 1), dp(i, j + 1, l - 1), dp(i, j - 1, l - 1))\e\
    [0m\n\e[31m35 |\e[0m        \e[34m// dp(i, j, l) = grid(i)(j) + min(dp(i + 1,\
    \ j, l - 1), dp(i - 1, j, l - 1), dp(i, j + 1, l - 1), dp(i, j - 1, l - 1))\e\
    [0m\n\e[31m36 |\e[0m        \e[34m// dp(i, j, l) = grid(i)(j) + min(dp(i + 1,\
    \ j, l - 1), dp(i - 1, j, l -\e[0m\n\e[31m37 |\e[0m    }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(x\
    \ => x._1))\n        for (i <- 0 until n) {\n            for (j <- 0 until n)\
    \ {\n                dp(i)(j) = grid(i)(j)\n                pq.enqueue((dp(i)(j),\
    \ i, j))\n            }\n        }\n        val dirs = List((-1, 0), (1, 0), (0,\
    \ -1), (0, 1))\n        while (pq.nonEmpty) {\n            val (v, i, j) = pq.dequeue\n\
    \            for (dir <- dirs) {\n                val (di, dj) = dir\n       \
    \         val ni = i + di\n                val nj = j + dj\n                if\
    \ (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n                    val nv = v +\
    \ grid(ni)(nj)\n                    if (nv < dp(ni)(nj)) {\n                 \
    \       dp(ni)(nj) = nv\n                        pq.enqueue((nv, ni, nj))\n  \
    \                  }\n                }\n            }\n        }\n        val\
    \ ans = ArrayBuffer[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (ans.length < k) {\n            ans += grid(i)(j)\n            var min = Long.MaxValue\n\
    \            var minDir = (0, 0)\n            for (dir <- dirs) {\n          \
    \      val (di, dj) = dir\n                val ni = i + di\n                val\
    \ nj = j + dj\n                if (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n\
    \                    val nv = dp(ni)(nj)\n                    if (nv < min) {\n\
    \                        min = nv\n                        minDir = dir\n    \
    \                }\n                }\n            }\n            val (di, dj)\
    \ = minDir\n            i += di\n            j += dj\n        }\n        ans.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ww6gw80.scala:80)\n\tat Problem.main(tmp0ww6gw80.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ up = if (i > 0) dp(i - 1)(j) else List[Long]()\n                    val left\
    \ = if (j > 0) dp(i)(j - 1) else List[Long]()\n                    if (up.length\
    \ == 0 && left.length == 0) dp(i)(j) = List(grid(i)(j))\n                    else\
    \ if (up.length == 0) dp(i)(j) = grid(i)(j) :: left\n                    else\
    \ if (left.length == 0) dp(i)(j) = grid(i)(j) :: up\n                    else\
    \ {\n                        val up_min = up.min\n                        val\
    \ left_min = left.min\n                        if (up_min < left_min) dp(i)(j)\
    \ = grid(i)(j) :: up\n                        else if (up_min > left_min) dp(i)(j)\
    \ = grid(i)(j) :: left\n                        else dp(i)(j) = grid(i)(j) ::\
    \ (if (up < left) up else left)\n                    }\n                }\n  \
    \          }\n        }\n        dp(n - 1)(m - 1).take(k.toInt)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj01nx9no.scala:45:62 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                        \e[33melse\e[0m dp(i)(j) = grid(i)(j)\
    \ :: (\e[33mif\e[0m (up < left) up \e[33melse\e[0m left)\n\e[31m\e[31m   |\e[0m\
    \                                                           ^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue < is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659798774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val result =\
    \ new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        var cost\
    \ = dp(0)(0)\n        for (k <- 1 to k.toInt) {\n            result += grid(i)(j)\n\
    \            if (i > 0 && dp(i - 1)(j) + grid(i)(j) == cost) {\n             \
    \   i -= 1\n                cost -= grid(i)(j)\n            } else if (i < n -\
    \ 1 && dp(i + 1)(j) + grid(i)(j) == cost) {\n                i += 1\n        \
    \        cost -= grid(i)(j)\n            } else if (j > 0 && dp(i)(j - 1) + grid(i)(j)\
    \ == cost) {\n                j -= 1\n                cost -= grid(i)(j)\n   \
    \         } else if (j < m - 1 && dp(i)(j + 1) + grid(i)(j) == cost) {\n     \
    \           j += 1\n                cost -= grid(i)(j)\n            }\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8_kfe47v.scala:63:8\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val visited = Array.fill(n, m)(false)\n        while (!pq2.isEmpty)\
    \ {\n            val (cost, i, j) = pq2.dequeue\n            if (!visited(i)(j))\
    \ {\n                visited(i)(j) = true\n                if (i > 0 && dp(i -\
    \ 1)(j) == cost + grid(i - 1)(j)) pq2.enqueue((cost + grid(i - 1)(j), i - 1, j))\n\
    \                if (i < n - 1 && dp(i + 1)(j) == cost + grid(i + 1)(j)) pq2.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0 && dp(i)(j - 1) == cost\
    \ + grid(i)(j - 1)) pq2.enqueue((cost +\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp53qvkcsb.scala:52:87 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                \e[33mif\e[0m (j > \e[31m0\e[0m && dp(i)(j\
    \ - \e[31m1\e[0m) == cost + grid(i)(j - \e[31m1\e[0m)) pq2.enqueue((cost +\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp53qvkcsb.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[33m\e[33m-- Warning: /tmp/tmp53qvkcsb.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659798812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (pq.nonEmpty) {\n            val (cost, x, y) = pq.dequeue\n            if (dp(x)(y)\
    \ > cost) {\n                dp(x)(y) = cost\n                if (x > 0) pq.enqueue((cost\
    \ + grid(x - 1)(y), x - 1, y))\n                if (x < n - 1) pq.enqueue((cost\
    \ + grid(x + 1)(y), x + 1, y))\n                if (y > 0) pq.enqueue((cost +\
    \ grid(x)(y - 1), x, y - 1))\n                if (y < m - 1) pq.enqueue((cost\
    \ + grid(x)(y + 1), x, y + 1))\n            }\n        }\n        val result =\
    \ ArrayBuffer[Long]()\n        var x = 0\n        var y = 0\n        var cost\
    \ = dp(0)(0)\n        for (i <- 0 until k.toInt) {\n            result += grid(x)(y)\n\
    \            if (x > 0 && dp(x - 1)(y) < cost) {\n                cost = dp(x\
    \ - 1)(y)\n                x -= 1\n            } else if (x < n - 1 && dp(x +\
    \ 1)(y) < cost) {\n                cost = dp(x + 1)(y)\n                x += 1\n\
    \            } else if (y > 0 && dp(x)(y - 1) < cost) {\n                cost\
    \ = dp(x)(y - 1)\n                y -= 1\n            } else if (y < m - 1 &&\
    \ dp(x)(y + 1) < cost) {\n                cost = dp(x)(y + 1)\n              \
    \  y += 1\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3dq8a7n8.scala:66)\n\tat Problem.main(tmp3dq8a7n8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798814
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dist =\
    \ Array.fill(n, n)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long, Int,\
    \ Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while (pq.nonEmpty)\
    \ {\n            val (d, i, j) = pq.dequeue\n            if (dist(i)(j) > d) {\n\
    \                dist(i)(j) = d\n                if (i > 0) pq.enqueue((d + grid(i\
    \ - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((d + grid(i +\
    \ 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((d + grid(i)(j - 1),\
    \ i, j - 1))\n                if (j < n - 1) pq.enqueue((d + grid(i)(j + 1), i,\
    \ j + 1))\n            }\n        }\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        var j = 0\n        var d = 0L\n        while (result.length\
    \ < k) {\n            result += grid(i)(j)\n            if (i > 0 && dist(i -\
    \ 1)(j) < dist(i)(j)) {\n                i -= 1\n                d = dist(i)(j)\n\
    \            } else if (i < n - 1 && dist(i + 1)(j) < dist(i)(j)) {\n        \
    \        i += 1\n                d = dist(i)(j)\n            } else if (j > 0\
    \ && dist(i)(j - 1) < dist(i)(j)) {\n                j -= 1\n                d\
    \ = dist(i)(j)\n            } else if (j < n - 1 && dist(i)(j + 1) < dist(i)(j))\
    \ {\n                j += 1\n                d = dist(i)(j)\n            }\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt8nf6apx.scala:65)\n\tat Problem.main(tmpt8nf6apx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798814
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(List[Long]())\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0 && j == 0)\
    \ dp(i)(j) = List(grid(i)(j))\n                else {\n                    val\
    \ lst = ListBuffer[Long]()\n                    if (i > 0) lst ++= dp(i - 1)(j)\n\
    \                    if (j > 0) lst ++= dp(i)(j - 1)\n                    dp(i)(j)\
    \ = (lst.toList :+ grid(i)(j)).sorted.take(k.toInt)\n                }\n     \
    \       }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0v0x76f.scala:45)\n\tat Problem.main(tmpr0v0x76f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (d, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > d) {\n                dp(i)(j) = d\n                if (i > 0) pq.enqueue((d\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((d +\
    \ grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((d + grid(i)(j\
    \ - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((d + grid(i)(j +\
    \ 1), i, j + 1))\n            }\n        }\n        val result = new ListBuffer[Long]()\n\
    \        var i = 0\n        var j = 0\n        var d = 0L\n        while (d <\
    \ k) {\n            result += grid(i)(j)\n            d += 1\n            if (i\
    \ > 0 && dp(i - 1)(j) < dp(i)(j)) {\n                i -= 1\n            } else\
    \ if (i < n - 1 && dp(i + 1)(j) < dp(i)(j)) {\n                i += 1\n      \
    \      } else if (j > 0 && dp(i)(j - 1) < dp(i)(j)) {\n                j -= 1\n\
    \            } else if (j < m - 1 && dp(i)(j + 1) < dp(i)(j)) {\n            \
    \    j += 1\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ge2hg6v.scala:63)\n\tat Problem.main(tmp0ge2hg6v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n          \
    \      pq.enqueue((dp(i)(j), i, j))\n            }\n        }\n        val dirs\
    \ = List((-1, 0), (1, 0), (0, -1), (0, 1))\n        for (i <- 0 until k - 1) {\n\
    \            val (v, x, y) = pq.dequeue\n            for ((dx, dy) <- dirs) {\n\
    \                val nx = x + dx\n                val ny = y + dy\n          \
    \      if (nx >= 0 && nx < n && ny >= 0 && ny < m) {\n                    val\
    \ nv = v + grid(nx)(ny)\n                    if (nv < dp(nx)(ny)) {\n        \
    \                dp(nx)(ny) = nv\n                        pq.enqueue((nv, nx,\
    \ ny))\n                    }\n                }\n            }\n        }\n \
    \       val (v, x, y) = pq.dequeue\n        val result = ListBuffer[Long]()\n\
    \        result += grid(x)(y)\n        for (i <- 0 until k - 1) {\n          \
    \  var min = Long.MaxValue\n            var minx = -1\n            var miny =\
    \ -1\n            for ((dx, dy) <- dirs) {\n                val nx = x + dx\n\
    \                val ny = y + dy\n                if (nx >= 0 && nx < n && ny\
    \ >= 0 && ny < m) {\n                    val nv = v + grid(nx)(ny)\n         \
    \           if (nv < min) {\n                        min = nv\n              \
    \          minx = nx\n                        miny = ny\n                    }\n\
    \                }\n            }\n            v = min\n            x = minx\n\
    \            y = min\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsx6j10pn.scala:91:0 ----------------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsx6j10pn.scala:39:26\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsx6j10pn.scala:56:26 --------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k - \e\
    [31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    Long\n\e[31m   |\e[0m          \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpsx6j10pn.scala:72:14 -----------------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m            v = min\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Reassignment to val v\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpsx6j10pn.scala:73:14 -----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m            x = minx\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsx6j10pn.scala:74:16 --------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m            y = min\n\e[31m\e[31m   |\e[0m          \
    \      ^^^\e[0m\n\e[31m   |\e[0m                Found:    (min : Long)\n\e[31m\
    \   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/t"
  stdout: ''
  timestamp: 1659798814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ <= cost) {\n                if (i == n - 1 && j == m - 1 && cost <= k) return\
    \ getPath(dp, i, j, k)\n                if (i + 1 < n && dp(i + 1)(j) > cost +\
    \ grid(i + 1)(j)) {\n                    dp(i + 1)(j) = cost + grid(i + 1)(j)\n\
    \                    pq.enqueue((dp(i + 1)(j), i + 1, j))\n                }\n\
    \                if (j + 1 < m && dp(i)(j + 1) > cost + grid(i)(j + 1)) {\n  \
    \                  dp(i)(j + 1) = cost + grid(i)(j + 1)\n                    pq.enqueue((dp(i)(j\
    \ + 1), i, j + 1))\n                }\n            }\n        }\n        return\
    \ List()\n    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpayuc1l0f.scala:36:66 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                \e[33mif\e[0m (i == n - \e[31m1\e[0m\
    \ && j == m - \e[31m1\e[0m && cost <= k) \e[33mreturn\e[0m getPath(dp, i, j, k)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \                 Not found: getPath\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val prev = Array.fill(n,\
    \ m)((0, 0))\n        dp(0)(0) = 0\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until m) {\n                if (i > 0 && dp(i - 1)(j) + 1 < dp(i)(j))\
    \ {\n                    dp(i)(j) = dp(i - 1)(j) + 1\n                    prev(i)(j)\
    \ = (i - 1, j)\n                }\n                if (j > 0 && dp(i)(j - 1) +\
    \ 1 < dp(i)(j)) {\n                    dp(i)(j) = dp(i)(j - 1) + 1\n         \
    \           prev(i)(j) = (i, j - 1)\n                }\n            }\n      \
    \  }\n        val path = ListBuffer[Long]()\n        var cur = (n - 1, m - 1)\n\
    \        while (k > 0) {\n            path += grid(cur._1)(cur._2)\n         \
    \   cur = prev(cur._1)(cur._2)\n            k -= 1\n        }\n        path.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfyheiedl.scala:50:14 ------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean k.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.fill(n, m)(Long.MaxValue)\n        val pq = new PriorityQueue[(Long,\
    \ Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((0, 0, 0))\n        while\
    \ (!pq.isEmpty) {\n            val (cost, i, j) = pq.dequeue\n            if (dp(i)(j)\
    \ > cost) {\n                dp(i)(j) = cost\n                if (i > 0) pq.enqueue((cost\
    \ + grid(i - 1)(j), i - 1, j))\n                if (i < n - 1) pq.enqueue((cost\
    \ + grid(i + 1)(j), i + 1, j))\n                if (j > 0) pq.enqueue((cost +\
    \ grid(i)(j - 1), i, j - 1))\n                if (j < m - 1) pq.enqueue((cost\
    \ + grid(i)(j + 1), i, j + 1))\n            }\n        }\n        val pq2 = new\
    \ PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq2.enqueue((0,\
    \ 0, 0))\n        val dp2 = Array.fill(n, m)(Long.MaxValue)\n        dp2(0)(0)\
    \ = 0\n        val path = new ListBuffer[Long]\n        while (!pq2.isEmpty) {\n\
    \            val (cost, i, j) = pq2.dequeue\n            if (dp2(i)(j) == cost)\
    \ {\n                path += grid(i)(j)\n                if (path.length == k)\
    \ return path.toList\n                if (i > 0 && dp2(i - 1)(j) > cost + grid(i\
    \ - 1)(j)) {\n                    dp2(i - 1)(j) = cost + grid(i - 1)(j)\n    \
    \                pq2.enqueue((cost + grid(i - 1)(j), i - 1, j))\n            \
    \    }\n                if (i < n - 1 && dp2(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa3y1djsh.scala:57:37 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                \e[33mif\e[0m (i < n - \e[31m1\e[0m &&\
    \ dp2(\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa3y1djsh.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpa3y1djsh.scala:59:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \n    // each cell of the grid contains a value. Every integer in the range\
    \ [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
    \    // You have to find the minimum path of length k in the grid. You can start\n\
    \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
    \    // in other words, you can go to cells which share an edge with you current\n\
    \    // cell.\n    // Please note that a path of length k means visiting exactly\
    \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
    \    // A path A (of length k) is considered less than a path B (of length k)\
    \ if\n    // after making the ordered lists of the values on the cells that A\
    \ and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically\
    \ less\n    // than lst_B, in other words, there exist an integer index i (1 <=\
    \ i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we\
    \ have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is\
    \ unique.\n    // Return an ordered list of the values on the cells that the minimum\
    \ path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6],\
    \ [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6],\
    \ [7,8,2]], k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]],\
    \ k : Long) : List[Long] = {\n        val n = grid.length\n        val dp = Array.fill(n,\
    \ n)(List[Long]())\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == 0 && j == 0) dp(i)(j) = List(grid(i)(j))\n  \
    \              else {\n                    val lst = ListBuffer[Long]()\n    \
    \                if (i > 0) lst ++= dp(i - 1)(j)\n                    if (j >\
    \ 0) lst ++= dp(i)(j - 1)\n                    dp(i)(j) = (lst :+ grid(i)(j)).sorted.take(k.toInt)\n\
    \                }\n            }\n        }\n        dp(n - 1)(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
    \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
    \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
    \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
    \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
    \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
    \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
    \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
    \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
    \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
    \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
    \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
    \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
    \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
    \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
    \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
    \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
    \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong,\
    \ 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong,\
    \ 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong,\
    \ 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
    \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
    \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
    \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
    \ 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
    \ 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wf_djhc.scala:37:62\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m                    dp(i)(j)\
    \ = (lst :+ grid(i)(j)).sorted.take(k.toInt)\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798814
