name: HumanEval_70_strange_sort_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of integers, return list in strange order.\n    // Strange sorting,\
  \ is when you start with the minimum value,\n    // then maximum of the remaining\
  \ integers, then minimum and so on.\n    // Examples:\n    // strange_sort_list([1,\
  \ 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
  \ 5]\n    // strange_sort_list([]) == []\n    def strangeSortList(lst : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
  \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong,\
  \ 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
  \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong,\
  \ 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
  \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
  \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        if (lst.length == 0) return lst\n        val sorted = lst.sorted\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        var j =\
    \ sorted.length - 1\n        while (i <= j) {\n            result += sorted(i)\n\
    \            if (i != j) result += sorted(j)\n            i += 1\n           \
    \ j -= 1\n        }\n        result.toList", "        if (lst.length == 0) return\
    \ lst\n        var lst2 = lst.sorted\n        var result = ListBuffer[Long]()\n\
    \        var i = 0\n        while (lst2.length > 0) {\n            if (i % 2 ==\
    \ 0) {\n                result += lst2.head\n                lst2 = lst2.tail\n\
    \            } else {\n                result += lst2.last\n                lst2\
    \ = lst2.init\n            }\n            i += 1\n        }\n        result.toList",
  "        if (lst.isEmpty) return lst\n        val sorted = lst.sorted\n        val\
    \ min = sorted.head\n        val max = sorted.last\n        val mid = sorted.slice(1,\
    \ sorted.length - 1)\n        val mid_min = mid.head\n        val mid_max = mid.last\n\
    \        val mid_mid = mid.slice(1, mid.length - 1)\n        val mid_mid_min =\
    \ mid_mid.head\n        val mid_mid_max = mid_mid.last\n        val mid_mid_mid\
    \ = mid_mid.slice(1, mid_mid.length - 1)\n        val mid_mid_mid_min = mid_mid_mid.head\n\
    \        val mid_mid_mid_max = mid_mid_mid.last\n        val mid_mid_mid_mid =\
    \ mid_mid_mid.slice(1, mid_mid_mid.length - 1)\n        val mid_mid_mid_mid_min\
    \ = mid_mid_mid_mid.head\n        val mid_mid_mid_mid_max = mid_mid_mid_mid.last\n\
    \        val mid_mid_mid_mid_mid = mid_mid_mid_mid.slice(1, mid_mid_mid_mid.length\
    \ - 1)\n        val mid_mid_mid_mid_mid_min = mid_mid_mid_mid_mid.head\n     \
    \   val mid_mid_mid_mid_mid_max = mid_mid_mid_mid_mid.last\n        val mid_mid_mid_mid_mid_mid\
    \ = mid_mid_mid_mid_mid.slice(1, mid_mid_mid_mid_mid.length - 1)\n        val\
    \ mid_mid_mid_mid_mid_mid_min = mid_mid_mid_mid_mid_mid.head\n        val mid_mid_mid_mid_mid_mid_max\
    \ = mid_mid_mid_mid_mid_mid.last\n        val mid_mid_mid_mid_mid_mid_mid = mid_mid_mid_mid_mid_mid.slice(1,\
    \ mid_mid_mid_mid_mid_mid.length - 1)\n        val mid_mid_mid_mid_mid", "   \
    \     if (lst.isEmpty) return lst\n        val sorted = lst.sorted\n        val\
    \ result = new ListBuffer[Long]\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) result += sorted(i)\n            else result\
    \ += sorted(sorted.length - 1 - i)\n            i += 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n  \
    \      var i = 0\n        var j = sorted.length - 1\n        while (i <= j) {\n\
    \            result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       val sorted = lst.sorted\n        var result = List[Long]()\n        var\
    \ i = 0\n        while (i < sorted.length) {\n            if (i % 2 == 0) {\n\
    \                result = result :+ sorted(i)\n            } else {\n        \
    \        result = sorted(i) +: result\n            }\n            i += 1\n   \
    \     }\n        result", "        if (lst.length == 0) return lst\n        val\
    \ sorted = lst.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val (minLst, maxLst) = sorted.tail.partition(_ == min)\n        val minRest\
    \ = minLst.tail\n        val maxRest = maxLst.tail\n        val minRestSorted\
    \ = minRest.sorted\n        val maxRestSorted = maxRest.sorted\n        val minRestSortedReversed\
    \ = minRestSorted.reverse\n        val maxRestSortedReversed = maxRestSorted.reverse\n\
    \        val minRestSortedReversedTail = minRestSortedReversed.tail\n        val\
    \ maxRestSortedReversedTail = maxRestSortedReversed.tail\n        val minRestSortedReversedTailSorted\
    \ = minRestSortedReversedTail.sorted\n        val maxRestSortedReversedTailSorted\
    \ = maxRestSortedReversedTail.sorted\n        val minRestSortedReversedTailSortedReversed\
    \ = minRestSortedReversedTailSorted.reverse\n        val maxRestSortedReversedTailSortedReversed\
    \ = maxRestSortedReversedTailSorted.reverse\n        val minRestSortedReversedTailSortedReversedTail\
    \ = minRestSortedReversedTailSortedReversed.tail\n        val maxRestSortedReversedTailSortedReversedTail\
    \ = maxRestSortedReversedTailSortedReversed.tail\n        val minRestSortedReversedTailSortedReversedTailSorted\
    \ = minRestSortedReversedTailSortedReversedTail.sorted\n        val maxRestSortedReversedTailSortedReversedTailSorted\
    \ = maxRestSortedReversedTailSortedReversedTail.sorted\n        val minRestSortedReversedTailSortedReversedTailSortedReversed\
    \ = minRestSortedReversedTailSortedReversedTailSorted.reverse\n        val maxRestSortedRe",
  "        if (lst.isEmpty) return lst\n        val sorted = lst.sorted\n        val\
    \ min = sorted.head\n        val max = sorted.last\n        val (left, right)\
    \ = sorted.tail.span(_ != max)\n        val (left2, right2) = right.tail.span(_\
    \ != min)\n        List(min) ++ right ++ left ++ List(max) ++ right2 ++ left2",
  "        if (lst.length == 0) return lst\n        var lst2 = lst.sorted\n      \
    \  var lst3 = ListBuffer[Long]()\n        while (lst2.length > 0) {\n        \
    \    lst3 += lst2.head\n            lst2 = lst2.tail\n            if (lst2.length\
    \ > 0) {\n                lst3 += lst2.last\n                lst2 = lst2.dropRight(1)\n\
    \            }\n        }\n        lst3.toList", "        if (lst.isEmpty) return\
    \ lst\n        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        var j = sorted.length - 1\n        while (i <= j)\
    \ {\n            result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       if (lst.isEmpty) return lst\n        val sorted = lst.sorted\n       \
    \ val min = sorted.head\n        val max = sorted.last\n        val (left, right)\
    \ = sorted.tail.init.partition(_ <= min)\n        val left_sorted = left.sorted\n\
    \        val right_sorted = right.sorted\n        val left_sorted_reversed = left_sorted.reverse\n\
    \        val right_sorted_reversed = right_sorted.reverse\n        val result\
    \ = ListBuffer[Long]()\n        var i = 0\n        while (i < left_sorted.length)\
    \ {\n            result += left_sorted(i)\n            result += right_sorted_reversed(i)\n\
    \            i += 1\n        }\n        result += min\n        result += max\n\
    \        i = 0\n        while (i < right_sorted.length) {\n            result\
    \ += right_sorted(i)\n            result += left_sorted_reversed(i)\n        \
    \    i += 1\n        }\n        result.toList", "        if (lst.length == 0)\
    \ return List()\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (lst2.length > 0) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst2.head\n                lst2 = lst2.tail\n\
    \            } else {\n                lst3 += lst2.last\n                lst2\
    \ = lst2.dropRight(1)\n            }\n            i += 1\n        }\n        lst3.toList",
  "        if (lst.isEmpty) return lst\n        var lst2 = lst.sorted\n        var\
    \ result = ListBuffer[Long]()\n        var i = 0\n        while (lst2.nonEmpty)\
    \ {\n            if (i % 2 == 0) {\n                result += lst2.head\n    \
    \            lst2 = lst2.tail\n            } else {\n                result +=\
    \ lst2.last\n                lst2 = lst2.dropRight(1)\n            }\n       \
    \     i += 1\n        }\n        result.toList", "        if (lst.length == 0)\
    \ return lst\n        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        var j = sorted.length - 1\n        while (i <= j)\
    \ {\n            result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       if (lst.length == 0) return lst\n        var lst2 = lst.sorted\n     \
    \   var lst3 = ListBuffer[Long]()\n        var i = 0\n        while (lst2.length\
    \ > 0) {\n            if (i % 2 == 0) {\n                lst3 += lst2.head\n \
    \               lst2 = lst2.tail\n            } else {\n                lst3 +=\
    \ lst2.last\n                lst2 = lst2.dropRight(1)\n            }\n       \
    \     i += 1\n        }\n        lst3.toList", "        if (lst.length == 0) return\
    \ lst\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (lst2.length > 0) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst2.head\n                lst2 = lst2.tail\n\
    \            } else {\n                lst3 += lst2.last\n                lst2\
    \ = lst2.dropRight(1)\n            }\n            i += 1\n        }\n        lst3.toList",
  "        val sorted = lst.sorted\n        val min = sorted.head\n        val max\
    \ = sorted.last\n        val lst1 = sorted.filter(_ != min)\n        val lst2\
    \ = sorted.filter(_ != max)\n        val lst3 = lst1.filter(_ != max)\n      \
    \  val lst4 = lst2.filter(_ != min)\n        val lst5 = lst3.filter(_ != min)\n\
    \        val lst6 = lst4.filter(_ != max)\n        val lst7 = lst5.filter(_ !=\
    \ max)\n        val lst8 = lst6.filter(_ != min)\n        val lst9 = lst7.filter(_\
    \ != min)\n        val lst10 = lst8.filter(_ != max)\n        val lst11 = lst9.filter(_\
    \ != max)\n        val lst12 = lst10.filter(_ != min)\n        val lst13 = lst11.filter(_\
    \ != min)\n        val lst14 = lst12.filter(_ != max)\n        val lst15 = lst13.filter(_\
    \ != max)\n        val lst16 = lst14.filter(_ != min)\n        val lst17 = lst15.filter(_\
    \ != min)\n        val lst18 = lst16.filter(_ != max)\n        val lst19 = lst17.filter(_\
    \ != max)\n        val lst20 = lst18.filter(_ != min)\n        val lst21 = lst19.filter(_\
    \ != min)\n        val lst22 = lst20.filter(_ != max)\n        val lst23 = lst21.filter(_\
    \ != max)\n        val lst24 = lst22.filter(_ != min)\n        val lst25 = lst23.filter(_\
    \ != min)\n        val lst26 = lst24.filter(_ != max)\n        val lst27 = lst25.filter(_\
    \ != max)\n        val lst28 = lst26.filter(_ != min)\n        val lst29 = lst27.filter(_\
    \ != min)\n        val lst30 = lst28.filter(_ != max)\n        val lst31 = lst29",
  "        if (lst.length == 0) return lst\n        var sorted = lst.sorted\n    \
    \    var result = ListBuffer[Long]()\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) result += sorted(i)\n            else result\
    \ += sorted(sorted.length - 1 - i)\n            i += 1\n        }\n        return\
    \ result.toList", "        if (lst.length == 0) return lst\n        var min =\
    \ lst.min\n        var max = lst.max\n        var lst2 = lst.filter(x => x !=\
    \ min && x != max)\n        var lst3 = List[Long]()\n        var lst4 = List[Long]()\n\
    \        var lst5 = List[Long]()\n        var lst6 = List[Long]()\n        if\
    \ (lst.length % 2 == 0) {\n            lst3 = lst3 :+ min\n            lst3 =\
    \ lst3 :+ max\n            lst4 = strangeSortList(lst2)\n            lst5 = lst3\
    \ ++ lst4\n        } else {\n            lst3 = lst3 :+ min\n            lst4\
    \ = strangeSortList(lst2)\n            lst5 = lst3 ++ lst4\n            lst6 =\
    \ lst6 :+ max\n            lst5 = lst5 ++ lst6\n        }\n        return lst5",
  "        val sorted = lst.sorted\n        val n = sorted.length\n        val result\
    \ = new ListBuffer[Long]\n        var i = 0\n        while (i < n) {\n       \
    \     if (i % 2 == 0) result += sorted(i)\n            else result += sorted(n\
    \ - i / 2 - 1)\n            i += 1\n        }\n        result.toList"]
stop_tokens:
- "\n    }\n"
