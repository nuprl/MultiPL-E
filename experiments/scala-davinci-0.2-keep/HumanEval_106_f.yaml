name: HumanEval_106_f
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement the function f that takes n as a parameter,\n    // and returns\
  \ a list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    //\
  \ i starts from 1.\n    // the factorial of i is the multiplication of the numbers\
  \ from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // f(5) == [1, 2, 6, 24,\
  \ 15]\n    def f(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n \
  \   assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
completions: ["        val l = new ListBuffer[Long]\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n\
    \        }\n        l.toList", "        var list = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) list = list :+ factorial(i)\n\
    \            else list = list :+ sum(i)\n        }\n        list", "        def\
    \ factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else\
    \ n * factorial(n - 1)\n        }\n        def sum(n : Long) : Long = {\n    \
    \        if (n == 0) 0\n            else n + sum(n - 1)\n        }\n        def\
    \ helper(n : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0)\
    \ acc\n            else if (n % 2 == 0) helper(n - 1, factorial(n) :: acc)\n \
    \           else helper(n - 1, sum(n) :: acc)\n        }\n        helper(n, List())",
  "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) {\n                var factorial = 1\n                for\
    \ (j <- 1 to i) {\n                    factorial *= j\n                }\n   \
    \             result = result :+ factorial\n            } else {\n           \
    \     var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                result = result :+ sum\n          \
    \  }\n        }\n        return result", "        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) factorial *= j\n \
    \               result = result :+ factorial\n            } else {\n         \
    \       var sum = 0\n                for (j <- 1 to i) sum += j\n            \
    \    result = result :+ sum\n            }\n        }\n        result", "    \
    \    var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ factorial(i)\n            } else\
    \ {\n                list = list :+ sum(i)\n            }\n        }\n       \
    \ list", "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                result = result :+ factorial(i)\n\
    \            } else {\n                result = result :+ sum(i)\n           \
    \ }\n        }\n        result", "        var l = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var fact\
    \ = 1\n                for (j <- 1 to i) {\n                    fact *= j\n  \
    \              }\n                l = l :+ fact\n            } else {\n      \
    \          var sum = 0\n                for (j <- 1 to i) {\n                \
    \    sum += j\n                }\n                l = l :+ sum\n            }\n\
    \        }\n        return l", "        def factorial(n : Long) : Long = {\n \
    \           if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n\
    \        def sum(n : Long) : Long = {\n            if (n == 0) 0\n           \
    \ else n + sum(n - 1)\n        }\n        def f(n : Long, i : Long) : List[Long]\
    \ = {\n            if (i == n) Nil\n            else if (i % 2 == 0) factorial(i)\
    \ :: f(n, i + 1)\n            else sum(i) :: f(n, i + 1)\n        }\n        f(n,\
    \ 1)", "        var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                var factorial = 1\n           \
    \     for (j <- 1 to i) {\n                    factorial *= j\n              \
    \  }\n                list = list :+ factorial\n            } else {\n       \
    \         var sum = 0\n                for (j <- 1 to i) {\n                 \
    \   sum += j\n                }\n                list = list :+ sum\n        \
    \    }\n        }\n        return list", "        // Write your code here\n  \
    \      var result = List[Long]()\n        for (i <- 1L to n) {\n            if\
    \ (i % 2 == 0) {\n                var factorial = 1L\n                for (j <-\
    \ 1L to i) {\n                    factorial *= j\n                }\n        \
    \        result = result :+ factorial\n            } else {\n                var\
    \ sum = 0L\n                for (j <- 1L to i) {\n                    sum += j\n\
    \                }\n                result = result :+ sum\n            }\n  \
    \      }\n        result", "        // Write your code here\n        var result\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                result = result :+ factorial(i)\n            } else {\n\
    \                result = result :+ sum(i)\n            }\n        }\n       \
    \ result", "        var list = new ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList", "        var list = new ListBuffer[Long]()\n      \
    \  for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var\
    \ factorial = 1\n                for (j <- 1 to i) {\n                    factorial\
    \ *= j\n                }\n                list += factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                list += sum\n    \
    \        }\n        }\n        list.toList", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList", "        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n\
    \            else l = l :+ sum(i)\n        }\n        l", "        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        var result = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n      \
    \      else result += (1 to i).sum\n        }\n        result.toList", "     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l",
  "        // Write your code here\n        var result = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result\
    \ = result :+ factorial(i)\n            } else {\n                result = result\
    \ :+ sum(i)\n            }\n        }\n        result", "        var result =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                result = result :+ factorial(i)\n            } else {\n \
    \               result = result :+ sum(i)\n            }\n        }\n        result",
  "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n       \
    \     else n * factorial(n - 1)\n        }\n        def sum(n : Long) : Long =\
    \ {\n            if (n == 0) 0\n            else n + sum(n - 1)\n        }\n \
    \       var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n         \
    \   if (i % 2 == 0) list = list :+ factorial(i)\n            else list = list\
    \ :+ sum(i)\n        }\n        list", "        var result = List[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n            \
    \    result = result :+ factorial(i)\n            } else {\n                result\
    \ = result :+ sum(i)\n            }\n        }\n        result", "        val\
    \ l = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n  \
    \      l.toList", "        val l = new ListBuffer[Long]\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n            else\
    \ l += sum(i)\n        }\n        l.toList", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList", "     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1L to n) {\n            if (i\
    \ % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n     \
    \   l.toList", "        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ factorial(i)\n\
    \            } else {\n                list = list :+ sum(i)\n            }\n\
    \        }\n        list", "        def factorial(n : Long) : Long = {\n     \
    \       if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n    \
    \    def sum(n : Long) : Long = {\n            if (n == 0) 0\n            else\
    \ n + sum(n - 1)\n        }\n        if (n == 0) List()\n        else if (n ==\
    \ 1) List(1)\n        else if (n == 2) List(1, 2)\n        else if (n == 3) List(1,\
    \ 2, 6)\n        else if (n == 4) List(1, 2, 6, 24)\n        else if (n % 2 ==\
    \ 0) f(n - 1) :+ factorial(n - 1)\n        else f(n - 1) :+ sum(n - 1)", "   \
    \     var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n         \
    \   if (i % 2 == 0) result = result :+ factorial(i)\n            else result =\
    \ result :+ sum(i)\n        }\n        result", "        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        val l =\
    \ new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n       \
    \ l.toList", "        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ factorial(i)\n\
    \            } else {\n                list = list :+ sum(i)\n            }\n\
    \        }\n        list", "        var result = ListBuffer[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result\
    \ += factorial(i)\n            } else {\n                result += sum(i)\n  \
    \          }\n        }\n        result.toList", "        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList", "        var result\
    \ = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 2 == 0) {\n                var factorial = 1\n                for (j <- 1 to\
    \ i) {\n                    factorial *= j\n                }\n              \
    \  result += factorial\n            } else {\n                var sum = 0\n  \
    \              for (j <- 1 to i) {\n                    sum += j\n           \
    \     }\n                result += sum\n            }\n        }\n        result.toList",
  "        var result = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n  \
    \          if (i % 2 == 0) result += factorial(i)\n            else result +=\
    \ sum(i)\n        }\n        result.toList", "        val l = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        var result\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                result = result :+ factorial(i)\n            } else {\n\
    \                result = result :+ sum(i)\n            }\n        }\n       \
    \ result", "        var result = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) result = result :+ factorial(i)\n           \
    \ else result = result :+ sum(i)\n        }\n        result", "        var result\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                result = result :+ factorial(i)\n            } else {\n\
    \                result = result :+ sum(i)\n            }\n        }\n       \
    \ result", "        val l = new ListBuffer[Long]\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n\
    \        }\n        l.toList", "        var result = ListBuffer[Long]()\n    \
    \    for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList", "     \
    \   var list = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n       \
    \     if (i % 2 == 0) {\n                list += factorial(i)\n            } else\
    \ {\n                list += sum(i)\n            }\n        }\n        list.toList",
  "        // Write your code here\n        var list = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                list = list :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                list = list :+ sum\n\
    \            }\n        }\n        return list", "        def factorial(n : Long)\
    \ : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n\
    \        }\n        def sum(n : Long) : Long = {\n            if (n == 0) 0\n\
    \            else n + sum(n - 1)\n        }\n        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList", "     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) list = list :+ factorial(i)\n            else list = list :+ sum(i)\n\
    \        }\n        list", "        var result = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result = result :+ factorial\n           \
    \ } else {\n                var sum = 0\n                for (j <- 1 to i) {\n\
    \                    sum += j\n                }\n                result = result\
    \ :+ sum\n            }\n        }\n        return result", "        val list\
    \ = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) list += factorial(i)\n            else list += sum(i)\n        }\n\
    \        list.toList", "        var result = List[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result", "   \
    \     var list = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                list += factorial(i)\n        \
    \    } else {\n                list += (1 to i).sum\n            }\n        }\n\
    \        list.toList", "        val l = new ListBuffer[Long]\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n           \
    \ else l += sum(i)\n        }\n        l.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ factorial(i)\n            } else {\n               \
    \ result = result :+ sum(i)\n            }\n        }\n        result", "    \
    \    var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) {\n                result = result :+ factorial(i)\n      \
    \      } else {\n                result = result :+ sum(i)\n            }\n  \
    \      }\n        result", "        var list = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                list = list :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                list = list :+ sum\n\
    \            }\n        }\n        return list", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ (1 to i).product\n            } else {\n           \
    \     result = result :+ (1 to i).sum\n            }\n        }\n        result",
  "        var list = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                var factorial = 1\n          \
    \      for (j <- 1 to i) {\n                    factorial *= j\n             \
    \   }\n                list += factorial\n            } else {\n             \
    \   var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                list += sum\n            }\n      \
    \  }\n        list.toList", "        // Write your code here\n        var list\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                var factorial = 1\n                for (j <- 1 to i) {\n\
    \                    factorial *= j\n                }\n                list =\
    \ list :+ factorial\n            } else {\n                var sum = 0\n     \
    \           for (j <- 1 to i) {\n                    sum += j\n              \
    \  }\n                list = list :+ sum\n            }\n        }\n        return\
    \ list", "        // Write your code here\n        var list = List[Long]()\n \
    \       for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n           \
    \     list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list", "        var l =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                l = l :+ factorial(i)\n            } else {\n           \
    \     l = l :+ sum(i)\n            }\n        }\n        l", "        var l =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                var fact = 1\n                for (j <- 1 to i) {\n     \
    \               fact *= j\n                }\n                l = l :+ fact\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ l = l :+ sum\n            }\n        }\n        return l", "        val list\
    \ = new ListBuffer[Long]\n        for (i <- 1L to n) {\n            if (i % 2\
    \ == 0) {\n                list += factorial(i)\n            } else {\n      \
    \          list += sum(i)\n            }\n        }\n        list.toList", " \
    \       // Write your code here\n        val list = new ListBuffer[Long]\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n             \
    \   list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ factorial(i)\n            else result = result :+ sum(i)\n        }\n   \
    \     result", "        var result = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result += factorial\n            } else {\n \
    \               var sum = 0\n                for (j <- 1 to i) {\n           \
    \         sum += j\n                }\n                result += sum\n       \
    \     }\n        }\n        result.toList", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList", "        val list\
    \ = new ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list += factorial(i)\n            } else {\n\
    \                list += (1 to i).sum\n            }\n        }\n        list.toList",
  "        // Write your code here\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList", "        var result\
    \ = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += factorial(i)\n            } else {\n\
    \                result += sum(i)\n            }\n        }\n        result.toList",
  "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) {\n                var factorial = 1\n                for\
    \ (j <- 1 to i) {\n                    factorial *= j\n                }\n   \
    \             result = result :+ factorial\n            } else {\n           \
    \     var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                result = result :+ sum\n          \
    \  }\n        }\n        return result", "        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList", "        // Write\
    \ your code here\n        var l = new ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                l += factorial(i)\n\
    \            } else {\n                l += sum(i)\n            }\n        }\n\
    \        l.toList", "        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list", "        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list", "        var result\
    \ = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += factorial(i)\n            else result += sum(i)\n   \
    \     }\n        result.toList", "        var result = ListBuffer[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n            \
    \    var factorial = 1\n                for (j <- 1 to i) {\n                \
    \    factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList", "        var\
    \ result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ factorial(i)\n            else result = result\
    \ :+ sum(i)\n        }\n        result", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result = result :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result = result :+ sum\n            }\n        }\n        return result", " \
    \       // Write your code here\n        val l = new ListBuffer[Long]\n      \
    \  for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        var result\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                result = result :+ (1 to i).product\n            } else\
    \ {\n                result = result :+ (1 to i).sum\n            }\n        }\n\
    \        result", "        var result = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result += factorial(i)\n\
    \            } else {\n                result += sum(i)\n            }\n     \
    \   }\n        result.toList", "        def factorial(n : Long) : Long = {\n \
    \           if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n\
    \        def sum(n : Long) : Long = {\n            if (n == 0) 0\n           \
    \ else n + sum(n - 1)\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result", "   \
    \     var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var fact = 1\n                for (j <- 1 to\
    \ i) {\n                    fact *= j\n                }\n                l =\
    \ l :+ fact\n            } else {\n                var sum = 0\n             \
    \   for (j <- 1 to i) {\n                    sum += j\n                }\n   \
    \             l = l :+ sum\n            }\n        }\n        return l", "   \
    \     var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                l = l :+ factorial(i)\n            } else {\n\
    \                l = l :+ sum(i)\n            }\n        }\n        l", "    \
    \    var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) result = result :+ factorial(i)\n            else result =\
    \ result :+ sum(i)\n        }\n        result", "        val l = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        var list\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                list = list :+ factorial(i)\n            } else {\n  \
    \              list = list :+ sum(i)\n            }\n        }\n        list",
  "        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var f = 1\n                for (j <- 1 to i)\
    \ {\n                    f *= j\n                }\n                l = l :+ f\n\
    \            } else {\n                var s = 0\n                for (j <- 1\
    \ to i) {\n                    s += j\n                }\n                l =\
    \ l :+ s\n            }\n        }\n        return l", "        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList", "        val list\
    \ = new ListBuffer[Long]()\n        for (i <- 1L to n) {\n            if (i %\
    \ 2 == 0) {\n                list += (1L to i).product\n            } else {\n\
    \                list += (1L to i).sum\n            }\n        }\n        list.toList",
  "        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                l = l :+ factorial(i)\n            } else {\n\
    \                l = l :+ sum(i)\n            }\n        }\n        l", "    \
    \    var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ factorial(i)\n            } else\
    \ {\n                list = list :+ sum(i)\n            }\n        }\n       \
    \ list", "        // Write your code here\n        var l = List[Long]()\n    \
    \    for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n              \
    \  var fact = 1\n                for (j <- 1 to i) {\n                    fact\
    \ *= j\n                }\n                l = l :+ fact\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                l = l :+ sum\n       \
    \     }\n        }\n        return l", "        var result = List[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n            \
    \    var factorial = 1\n                for (j <- 1 to i) {\n                \
    \    factorial *= j\n                }\n                result = result :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result = result :+ sum\n            }\n        }\n        return result", " \
    \       var list = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                list += factorial(i)\n       \
    \     } else {\n                list += sum(i)\n            }\n        }\n   \
    \     list.toList", "        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result", "        val list = new\
    \ ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                list += factorial(i)\n            } else {\n         \
    \       list += sum(i)\n            }\n        }\n        list.toList", "    \
    \    def factorial(n : Long) : Long = {\n            if (n == 0) 1\n         \
    \   else n * factorial(n - 1)\n        }\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ factorial(i)\n            else result = result :+ (1 to i).sum\n        }\n\
    \        result", "        var result = new ListBuffer[Long]\n        for (i <-\
    \ 1L to n) {\n            if (i % 2 == 0) result += factorial(i)\n           \
    \ else result += sum(i)\n        }\n        result.toList", "        var result\
    \ = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                result += (1 to i).product\n            } else\
    \ {\n                result += (1 to i).sum\n            }\n        }\n      \
    \  result.toList", "        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                result = result :+\
    \ factorial(i)\n            } else {\n                result = result :+ sum(i)\n\
    \            }\n        }\n        result", "        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList", "        var list\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) list = list :+ factorial(i)\n            else list = list :+ sum(i)\n   \
    \     }\n        list", "        var l = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var f = 1\n     \
    \           for (j <- 1 to i) f *= j\n                l = l :+ f\n           \
    \ } else {\n                var s = 0\n                for (j <- 1 to i) s +=\
    \ j\n                l = l :+ s\n            }\n        }\n        return l",
  "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) {\n                var factorial = 1\n                for\
    \ (j <- 1 to i) {\n                    factorial *= j\n                }\n   \
    \             result = result :+ factorial\n            } else {\n           \
    \     var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                result = result :+ sum\n          \
    \  }\n        }\n        return result", "        var list = List[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n            \
    \    var factorial = 1\n                for (j <- 1 to i) {\n                \
    \    factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list", "      \
    \  var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result = result :+ factorial(i)\n          \
    \  } else {\n                result = result :+ sum(i)\n            }\n      \
    \  }\n        result", "        var result = List[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result", "   \
    \     var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n         \
    \   if (i % 2 == 0) {\n                result = result :+ factorial(i)\n     \
    \       } else {\n                result = result :+ sum(i)\n            }\n \
    \       }\n        result", "        var result = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result =\
    \ result :+ factorial(i)\n            } else {\n                result = result\
    \ :+ sum(i)\n            }\n        }\n        result", "        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list", "      \
    \  var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ factorial(i)\n            } else {\n \
    \               l = l :+ sum(i)\n            }\n        }\n        l", "     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var factorial = 1\n                for (j <-\
    \ 1 to i) {\n                    factorial *= j\n                }\n         \
    \       list = list :+ factorial\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                list = list :+ sum\n            }\n        }\n\
    \        return list", "        var result = new ListBuffer[Long]\n        for\
    \ (i <- 1L to n) {\n            if (i % 2 == 0) {\n                result += factorial(i)\n\
    \            } else {\n                result += sum(i)\n            }\n     \
    \   }\n        result.toList", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList", "        def factorial(n\
    \ : Long) : Long = {\n            def factorialHelper(n : Long, acc : Long) :\
    \ Long = {\n                if (n == 1) acc\n                else factorialHelper(n\
    \ - 1, acc * n)\n            }\n            factorialHelper(n, 1)\n        }\n\
    \        def sum(n : Long) : Long = {\n            def sumHelper(n : Long, acc\
    \ : Long) : Long = {\n                if (n == 1) acc\n                else sumHelper(n\
    \ - 1, acc + n)\n            }\n            sumHelper(n, 0)\n        }\n     \
    \   def fHelper(n : Long, acc : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) acc\n            else if (n % 2 == 0) fHelper(n - 1, factorial(n) :: acc)\n\
    \            else fHelper(n - 1, sum(n) :: acc)\n        }\n        fHelper(n,\
    \ List())", "        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                var fact = 1\n               \
    \ for (j <- 1 to i) fact *= j\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) sum += j\n\
    \                l = l :+ sum\n            }\n        }\n        return l", " \
    \       var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n     \
    \   }\n        l", "        var result = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result += factorial(i)\n\
    \            } else {\n                result += sum(i)\n            }\n     \
    \   }\n        result.toList", "        var result = ListBuffer[Long]()\n    \
    \    for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n              \
    \  result += factorial(i)\n            } else {\n                result += sum(i)\n\
    \            }\n        }\n        result.toList", "        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList", "        var result\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                var factorial = 1\n                for (j <- 1 to i) {\n\
    \                    factorial *= j\n                }\n                result\
    \ = result :+ factorial\n            } else {\n                var sum = 0\n \
    \               for (j <- 1 to i) {\n                    sum += j\n          \
    \      }\n                result = result :+ sum\n            }\n        }\n \
    \       return result", "        def factorial(n : Long) : Long = {\n        \
    \    if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n       \
    \ def sum(n : Long) : Long = {\n            if (n == 0) 0\n            else n\
    \ + sum(n - 1)\n        }\n        if (n == 0) List()\n        else if (n == 1)\
    \ List(1)\n        else if (n == 2) List(1, 2)\n        else if (n == 3) List(1,\
    \ 2, 6)\n        else if (n == 4) List(1, 2, 6, 24)\n        else if (n == 5)\
    \ List(1, 2, 6, 24, 120)\n        else if (n == 6) List(1, 2, 6, 24, 120, 720)\n\
    \        else if (n == 7) List(1, 2, 6, 24, 120, 720, 5040)\n        else if (n\
    \ == 8) List(1, 2, 6, 24, 120, 720, 5040, 40320)\n        else if (n == 9) List(1,\
    \ 2, 6, 24, 120, 720, 5040, 40320, 362880)\n        else if (n == 10) List(1,\
    \ 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800)\n        else if (n == 11)\
    \ List(1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800)\n      \
    \  else if (n == 12) List(1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800,\
    \ 39916800, 479001600)\n        else if (n == 13) List(1, 2, 6, 24, 120, 720,\
    \ 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800L)\n        else\
    \ if (n == 14) List(1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\
    \ 479001600, 6227020800L, 87178", "        val list = new ListBuffer[Long]\n \
    \       for (i <- 1L to n) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList", "        var\
    \ result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                result = result :+ factorial(i)\n            }\
    \ else {\n                result = result :+ sum(i)\n            }\n        }\n\
    \        result", "        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) l = l :+ factorial(i)\n            else l = l\
    \ :+ sum(i)\n        }\n        l", "        var result = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n               \
    \ result = result :+ (1 to i).product\n            } else {\n                result\
    \ = result :+ (1 to i).sum\n            }\n        }\n        result", "     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ factorial(i)\n            } else\
    \ {\n                list = list :+ sum(i)\n            }\n        }\n       \
    \ list", "        var result = new ListBuffer[Long]\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                result += factorial(i)\n \
    \           } else {\n                result += sum(i)\n            }\n      \
    \  }\n        result.toList", "        val l = new ListBuffer[Long]\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n     \
    \       else l += sum(i)\n        }\n        l.toList", "        var result =\
    \ ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                var factorial = 1\n                for (j <- 1 to i)\
    \ {\n                    factorial *= j\n                }\n                result\
    \ += factorial\n            } else {\n                var sum = 0\n          \
    \      for (j <- 1 to i) {\n                    sum += j\n                }\n\
    \                result += sum\n            }\n        }\n        result.toList",
  "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n\
    \            } else {\n                result = result :+ (1 to i).sum\n     \
    \       }\n        }\n        result", "        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList", "        var\
    \ list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 2 == 0) {\n                list = list :+ factorial(i)\n            } else {\n\
    \                list = list :+ sum(i)\n            }\n        }\n        list",
  "        var result = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                result += factorial(i)\n     \
    \       } else {\n                result += sum(i)\n            }\n        }\n\
    \        result.toList", "        var l = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var fact = 1\n\
    \                for (j <- 1 to i) {\n                    fact *= j\n        \
    \        }\n                l += fact\n            } else {\n                var\
    \ sum = 0\n                for (j <- 1 to i) {\n                    sum += j\n\
    \                }\n                l += sum\n            }\n        }\n     \
    \   l.toList", "        val list = new ListBuffer[Long]\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                list += factorial\n            } else {\n   \
    \             var sum = 0\n                for (j <- 1 to i) {\n             \
    \       sum += j\n                }\n                list += sum\n           \
    \ }\n        }\n        list.toList", "        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList", "        var result\
    \ = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 2 == 0) result += factorial(i)\n            else result += sum(i)\n        }\n\
    \        result.toList", "        var result = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result = result :+ factorial\n           \
    \ } else {\n                var sum = 0\n                for (j <- 1 to i) {\n\
    \                    sum += j\n                }\n                result = result\
    \ :+ sum\n            }\n        }\n        return result", "        var l = List[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n               \
    \ l = l :+ (1L to i).product\n            } else {\n                l = l :+ (1L\
    \ to i).sum\n            }\n        }\n        l", "        val l = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        var result\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) result = result :+ factorial(i)\n            else result = result :+ sum(i)\n\
    \        }\n        result", "        // Write your code here\n        val list\
    \ = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var factorial = 1\n                for (j <-\
    \ 1 to i) {\n                    factorial *= j\n                }\n         \
    \       list += factorial\n            } else {\n                var sum = 0\n\
    \                for (j <- 1 to i) {\n                    sum += j\n         \
    \       }\n                list += sum\n            }\n        }\n        list.toList",
  "        var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                result += factorial(i)\n     \
    \       } else {\n                result += sum(i)\n            }\n        }\n\
    \        result.toList", "        var result = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result", "   \
    \     val list = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n   \
    \         if (i % 2 == 0) {\n                list += (1 to i).product\n      \
    \      } else {\n                list += (1 to i).sum\n            }\n       \
    \ }\n        list.toList", "        var l = List[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                l = l :+ factorial(i)\n\
    \            } else {\n                l = l :+ sum(i)\n            }\n      \
    \  }\n        l", "        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ factorial(i)\n\
    \            } else {\n                list = list :+ sum(i)\n            }\n\
    \        }\n        list", "        def factorial(n : Long) : Long = {\n     \
    \       if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n    \
    \    def sum(n : Long) : Long = {\n            if (n == 0) 0\n            else\
    \ n + sum(n - 1)\n        }\n        def helper(n : Long, acc : List[Long]) :\
    \ List[Long] = {\n            if (n == 0) acc\n            else if (n % 2 == 0)\
    \ helper(n - 1, factorial(n) :: acc)\n            else helper(n - 1, sum(n) ::\
    \ acc)\n        }\n        helper(n, List()).reverse", "        // Write your\
    \ code here\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list", "        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += (1 to i).product\n            } else {\n                result\
    \ += (1 to i).sum\n            }\n        }\n        result.toList", "       \
    \ var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n  \
    \      l.toList", "        var list = new ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                list += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList", "        // Write your code here\n  \
    \      var list = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                list += factorial(i)\n       \
    \     } else {\n                list += sum(i)\n            }\n        }\n   \
    \     list.toList", "        def factorial(n : Long) : Long = {\n            if\
    \ (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def sum(n\
    \ : Long) : Long = {\n            if (n == 0) 0\n            else n + sum(n -\
    \ 1)\n        }\n        def f(n : Long, i : Long) : List[Long] = {\n        \
    \    if (i == n) List()\n            else if (i % 2 == 0) factorial(i) :: f(n,\
    \ i + 1)\n            else sum(i) :: f(n, i + 1)\n        }\n        f(n, 1)",
  "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) {\n                result = result :+ factorial(i)\n    \
    \        } else {\n                result = result :+ sum(i)\n            }\n\
    \        }\n        result", "        val list = new ListBuffer[Long]\n      \
    \  for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list\
    \ += (1 to i).product\n            } else {\n                list += (1 to i).sum\n\
    \            }\n        }\n        list.toList", "        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ factorial(i)\n            else result = result :+ sum(i)\n        }\n   \
    \     result", "        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list", "        var l = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l += fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l += sum\n       \
    \     }\n        }\n        l.toList", "        var result = List[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n            \
    \    result = result :+ factorial(i)\n            } else {\n                result\
    \ = result :+ sum(i)\n            }\n        }\n        result", "        var\
    \ result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                result = result :+ factorial(i)\n            }\
    \ else {\n                result = result :+ sum(i)\n            }\n        }\n\
    \        result", "        // Write your code here\n        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList", "        // Write\
    \ your code here\n        var result = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ factorial(i)\n\
    \            } else {\n                result = result :+ sum(i)\n           \
    \ }\n        }\n        result", "        var list = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list = list :+ factorial(i)\n\
    \            else list = list :+ sum(i)\n        }\n        list", "        var\
    \ l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                l = l :+ (1 to i).product\n            } else {\n    \
    \            l = l :+ (1 to i).sum\n            }\n        }\n        l", "  \
    \      var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n       \
    \     if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n      \
    \  }\n        l.toList", "        var result = ListBuffer[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result\
    \ += factorial(i)\n            } else {\n                result += sum(i)\n  \
    \          }\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ factorial(i)\n            else result = result :+ sum(i)\n        }\n   \
    \     result", "        var result = new ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result += factorial(i)\n\
    \            } else {\n                result += sum(i)\n            }\n     \
    \   }\n        result.toList", "        def factorial(n : Long) : Long = {\n \
    \           def factorialHelper(n : Long, acc : Long) : Long = {\n           \
    \     if (n == 1) acc\n                else factorialHelper(n - 1, acc * n)\n\
    \            }\n            factorialHelper(n, 1)\n        }\n        def sum(n\
    \ : Long) : Long = {\n            def sumHelper(n : Long, acc : Long) : Long =\
    \ {\n                if (n == 1) acc\n                else sumHelper(n - 1, acc\
    \ + n)\n            }\n            sumHelper(n, 0)\n        }\n        def fHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) fHelper(n - 1, factorial(n) :: acc)\n        \
    \    else fHelper(n - 1, sum(n) :: acc)\n        }\n        fHelper(n, List())",
  "        var list = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n  \
    \          if (i % 2 == 0) {\n                list += factorial(i)\n         \
    \   } else {\n                list += sum(i)\n            }\n        }\n     \
    \   list.toList", "        def factorial(n : Long) : Long = {\n            if\
    \ (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def sum(n\
    \ : Long) : Long = {\n            if (n == 0) 0\n            else n + sum(n -\
    \ 1)\n        }\n        def f(n : Long, i : Long) : List[Long] = {\n        \
    \    if (i == n) List()\n            else if (i % 2 == 0) factorial(i) :: f(n,\
    \ i + 1)\n            else sum(i) :: f(n, i + 1)\n        }\n        f(n, 1)",
  "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) {\n                result = result :+ factorial(i)\n    \
    \        } else {\n                result = result :+ sum(i)\n            }\n\
    \        }\n        result", "        var result = new ListBuffer[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n            \
    \    result += factorial(i)\n            } else {\n                result += sum(i)\n\
    \            }\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result = result :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result = result :+ sum\n            }\n        }\n        return result", " \
    \       var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n     \
    \   }\n        l", "        var result = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result +=\
    \ factorial(i)\n            } else {\n                result += sum(i)\n     \
    \       }\n        }\n        result.toList", "        // Write your code here\n\
    \        val l = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n   \
    \         if (i % 2 == 0) {\n                l += (1 to i).foldLeft(1L)(_ * _)\n\
    \            } else {\n                l += (1 to i).sum\n            }\n    \
    \    }\n        l.toList", "        var result = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result", "   \
    \     var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                var factorial = 1\n                for (j\
    \ <- 1 to i) {\n                    factorial *= j\n                }\n      \
    \          list = list :+ factorial\n            } else {\n                var\
    \ sum = 0\n                for (j <- 1 to i) {\n                    sum += j\n\
    \                }\n                list = list :+ sum\n            }\n      \
    \  }\n        return list", "        var result = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result", "   \
    \     var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n       \
    \ }\n        l.toList", "        var result = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result = result\
    \ :+ factorial(i)\n            } else {\n                result = result :+ sum(i)\n\
    \            }\n        }\n        result", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList", "        var\
    \ result = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result += factorial(i)\n            } else\
    \ {\n                result += sum(i)\n            }\n        }\n        result.toList",
  "        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                l = l :+ factorial(i)\n            } else {\n\
    \                l = l :+ sum(i)\n            }\n        }\n        l", "    \
    \    def factorial(n : Long) : Long = {\n            if (n == 0) 1\n         \
    \   else n * factorial(n - 1)\n        }\n        def sum(n : Long) : Long = {\n\
    \            if (n == 0) 0\n            else n + sum(n - 1)\n        }\n     \
    \   def f(n : Long, i : Long) : List[Long] = {\n            if (i == n) List()\n\
    \            else if (i % 2 == 0) factorial(i) :: f(n, i + 1)\n            else\
    \ sum(i) :: f(n, i + 1)\n        }\n        f(n, 1)", "        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def sum(n : Long) : Long = {\n            if (n ==\
    \ 0) 0\n            else n + sum(n - 1)\n        }\n        if (n == 0) List()\n\
    \        else if (n == 1) List(1)\n        else if (n == 2) List(1, 2)\n     \
    \   else if (n == 3) List(1, 2, 6)\n        else if (n == 4) List(1, 2, 6, 24)\n\
    \        else if (n == 5) List(1, 2, 6, 24, 15)\n        else if (n % 2 == 0)\
    \ f(n - 1) :+ factorial(n)\n        else f(n - 1) :+ sum(n)", "        var l =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                var fact = 1\n                for (j <- 1 to i) {\n     \
    \               fact *= j\n                }\n                l = l :+ fact\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ l = l :+ sum\n            }\n        }\n        return l", "        var list\
    \ = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 2 == 0) {\n                list += factorial(i)\n            } else {\n    \
    \            list += sum(i)\n            }\n        }\n        list.toList", " \
    \       var result = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                result += factorial(i)\n      \
    \      } else {\n                result += sum(i)\n            }\n        }\n\
    \        result.toList", "        var result = ListBuffer[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result\
    \ += factorial(i)\n            } else {\n                result += sum(i)\n  \
    \          }\n        }\n        result.toList", "        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list = list :+\
    \ factorial(i)\n            else list = list :+ sum(i)\n        }\n        list",
  "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) {\n                var factorial = 1\n                for\
    \ (j <- 1 to i) {\n                    factorial *= j\n                }\n   \
    \             result = result :+ factorial\n            } else {\n           \
    \     var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                result = result :+ sum\n          \
    \  }\n        }\n        return result", "        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList"]
stop_tokens:
- "\n    }\n"
