name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    // >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1, 5, 653]\n    // >>>\
  \ common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    def common(l1 : List[Long], l2\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 &\
    \ s2).toList.sorted", "        val l1s = l1.sorted\n        val l2s = l2.sorted\n\
    \        var l1i = 0\n        var l2i = 0\n        var result = List[Long]()\n\
    \        while (l1i < l1s.length && l2i < l2s.length) {\n            if (l1s(l1i)\
    \ == l2s(l2i)) {\n                result = l1s(l1i) :: result\n              \
    \  l1i += 1\n                l2i += 1\n            } else if (l1s(l1i) < l2s(l2i))\
    \ {\n                l1i += 1\n            } else {\n                l2i += 1\n\
    \            }\n        }\n        result.reverse", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val m1\
    \ = l1.groupBy(x => x).mapValues(_.size)\n        val m2 = l2.groupBy(x => x).mapValues(_.size)\n\
    \        val m = m1.filter(x => m2.contains(x._1)).map(x => (x._1, min(x._2, m2(x._1))))\n\
    \        m.toList.flatMap(x => List.fill(x._2)(x._1)).sorted", "        val m1\
    \ = l1.groupBy(x => x).mapValues(_.size)\n        val m2 = l2.groupBy(x => x).mapValues(_.size)\n\
    \        val m3 = m1.filter(x => m2.contains(x._1))\n        m3.map(x => List.fill(min(x._2,\
    \ m2(x._1)))(x._1)).flatten.sorted", "        val m1 = l1.groupBy(x => x).mapValues(_.size)\n\
    \        val m2 = l2.groupBy(x => x).mapValues(_.size)\n        val m = m1.filter(x\
    \ => m2.contains(x._1)).map(x => (x._1, min(x._2, m2(x._1))))\n        m.keys.toList.sorted",
  "        val m1 = l1.groupBy(x => x).mapValues(_.size)\n        val m2 = l2.groupBy(x\
    \ => x).mapValues(_.size)\n        val m = m1.filter(x => m2.contains(x._1)).map(x\
    \ => (x._1, min(x._2, m2(x._1))))\n        m.toList.sortBy(_._1).map(x => List.fill(x._2)(x._1)).flatten",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        (set1 & set2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        (set1 & set2).toList.sorted", "        val s1 = l1.toSet\n        val\
    \ s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val m1 = l1.groupBy(identity).mapValues(_.size)\n\
    \        val m2 = l2.groupBy(identity).mapValues(_.size)\n        val m = m1.keySet.intersect(m2.keySet).map(x\
    \ => (x, min(m1(x), m2(x)))).toMap\n        m.toList.flatMap(x => List.fill(x._2)(x._1)).sorted",
  "        val l = l1.intersect(l2)\n        l.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val m1\
    \ = l1.toSet\n        val m2 = l2.toSet\n        (m1 & m2).toList.sorted", " \
    \       val m1 = l1.groupBy(x => x).mapValues(_.size)\n        val m2 = l2.groupBy(x\
    \ => x).mapValues(_.size)\n        val m = m1.keySet.intersect(m2.keySet).map(x\
    \ => (x, min(m1(x), m2(x)))).toMap\n        m.flatMap(x => List.fill(x._2)(x._1)).toList.sorted",
  "        val m1 = l1.groupBy(identity).mapValues(_.size)\n        val m2 = l2.groupBy(identity).mapValues(_.size)\n\
    \        val m3 = m1.keySet.intersect(m2.keySet).map(x => (x, min(m1(x), m2(x)))).toMap\n\
    \        m3.flatMap(x => List.fill(x._2)(x._1)).toList.sorted", "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n \
    \       s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val m1 = l1.groupBy(identity).mapValues(_.size)\n\
    \        val m2 = l2.groupBy(identity).mapValues(_.size)\n        val m = m1.keySet.intersect(m2.keySet).map(x\
    \ => (x, min(m1(x), m2(x)))).toMap\n        m.keys.toList.sorted.flatMap(x =>\
    \ List.fill(m(x))(x))"]
stop_tokens:
- "\n    }\n"
