name: HumanEval_77_iscube
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an integer a and returns True \n    // if this\
  \ ingeger is a cube of some integer number.\n    // Note: you may assume the input\
  \ is always valid.\n    // Examples:\n    // iscube(1) ==> True\n    // iscube(2)\
  \ ==> False\n    // iscube(-1) ==> True\n    // iscube(64) ==> True\n    // iscube(0)\
  \ ==> True\n    // iscube(180) ==> False\n    def iscube(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
  \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
  \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n  \
  \  assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n   \
  \ assert(iscube((1729l)) == (false));\n    }\n\n}\n"
completions: ["        if (a < 0) return iscube(-a)\n        if (a == 0) return true\n\
    \        var b = 1L\n        while (b * b * b <= a) {\n            if (b * b *\
    \ b == a) return true\n            b += 1\n        }\n        return false", " \
    \       val b = pow(a, 1.0 / 3)\n        b == b.toInt", "        if (a < 0) return\
    \ iscube(-a)\n        if (a == 0) return true\n        var b = 1L\n        while\
    \ (b * b * b <= a) {\n            if (b * b * b == a) return true\n          \
    \  b += 1\n        }\n        return false", "        val b = pow(a, 1.0 / 3)\n\
    \        b == b.toInt", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt",
  "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = round(pow(a, 1.0 / 3))\n        b * b * b == a", "        var i = 0\n  \
    \      while (i * i * i <= a) {\n            if (i * i * i == a) return true\n\
    \            i += 1\n        }\n        return false", "        val b = pow(a,\
    \ 1.0 / 3)\n        b == b.toInt", "        if (a < 0) return iscube(-a)\n   \
    \     if (a == 0) return true\n        var b = 1L\n        while (b * b * b <=\
    \ a) {\n            if (b * b * b == a) return true\n            b += 1\n    \
    \    }\n        return false", "        val b = round(pow(a, 1.0 / 3.0))\n   \
    \     b * b * b == a", "        var b = 1\n        while (b * b * b <= a) {\n\
    \            if (b * b * b == a) return true\n            b += 1\n        }\n\
    \        return false", "        var b = 1\n        while (b * b * b <= a) {\n\
    \            if (b * b * b == a) return true\n            b += 1\n        }\n\
    \        return false", "        val b = round(pow(a, 1.0 / 3.0))\n        b *\
    \ b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        return b * b\
    \ * b == a", "        var i = 0\n        while (i * i * i <= a) {\n          \
    \  if (i * i * i == a) return true\n            i += 1\n        }\n        return\
    \ false", "        var b = 1\n        while (b * b * b <= a) {\n            if\
    \ (b * b * b == a) return true\n            b += 1\n        }\n        return\
    \ false", "        val b = pow(a, 1.0 / 3.0)\n        b % 1 == 0", "        val\
    \ b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a"]
stop_tokens:
- "\n    }\n"
