name: HumanEval_11_string_xor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform\
  \ binary XOR on these inputs and return result also as a string.\n    // >>> string_xor('010',\
  \ '110')\n    // '100'\n    def stringXor(a : String, b : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"\
  ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"\
  0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n   \
  \ }\n\n}\n"
completions: ["        val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val xor_int = a_int ^ b_int\n        val xor_string = Integer.toBinaryString(xor_int)\n\
    \        return xor_string", "        val result = new StringBuilder\n       \
    \ for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(i => i.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val cBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n\
    \        cBits.map(x => x.toString).mkString", "        var result = \"\"\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        val aa = a.toList.map(_.toString.toInt)\n        val bb = b.toList.map(_.toString.toInt)\n\
    \        val cc = aa.zip(bb).map(x => x._1 ^ x._2)\n        cc.map(_.toString).reduceLeft(_\
    \ + _)", "        val result = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            result += ((a(i) - '0') ^ (b(i) - '0') + '0').toChar\n      \
    \  }\n        result.toString", "        val result = new StringBuilder\n    \
    \    for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n  \
    \          sb.append((a(i) - '0') ^ (b(i) - '0'))\n        }\n        sb.toString",
  "        val a_array = a.toCharArray\n        val b_array = b.toCharArray\n    \
    \    var result = \"\"\n        for (i <- 0 until a_array.length) {\n        \
    \    if (a_array(i) == b_array(i)) result += \"0\"\n            else result +=\
    \ \"1\"\n        }\n        result", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ n = a.length\n        val m = b.length\n        if (n != m) throw new IllegalArgumentException\n\
    \        val sb = new StringBuilder\n        for (i <- 0 until n) {\n        \
    \    if (a(i) == b(i)) sb.append('0')\n            else sb.append('1')\n     \
    \   }\n        sb.toString", "        var result = \"\"\n        for (i <- 0 until\
    \ a.length) {\n            result += (if (a(i) == b(i)) \"0\" else \"1\")\n  \
    \      }\n        return result", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val result = aBits.zip(bBits).map(c\
    \ => c._1 ^ c._2)\n        result.map(c => c.toString).mkString", "        var\
    \ result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result += \"0\"\n            else result += \"1\"\n        }\n       \
    \ return result", "        val result = new StringBuilder\n        for (i <- 0\
    \ until a.length) {\n            if (a(i) == b(i)) result.append('0')\n      \
    \      else result.append('1')\n        }\n        result.toString", "       \
    \ var result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n    \
    \    return result", "        val aa = a.toCharArray\n        val bb = b.toCharArray\n\
    \        val cc = new Array[Char](aa.length)\n        for (i <- 0 until aa.length)\
    \ {\n            if (aa(i) == bb(i)) cc(i) = '0'\n            else cc(i) = '1'\n\
    \        }\n        return cc.mkString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(i => i.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(x => x.toString.toInt)\n        val bBits = b.map(x\
    \ => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x => x._1 ^\
    \ x._2)\n        xorBits.map(x => x.toString).mkString", "        var result =\
    \ \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result\
    \ += \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            result += (if (a(i) == b(i)) '0' else '1')\n        }\n        result.toString",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        val a_array = a.toCharArray\n        val b_array\
    \ = b.toCharArray\n        val result = new StringBuilder\n        for (i <- 0\
    \ until a_array.length) {\n            if (a_array(i) == b_array(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val c = new StringBuilder\n        for (i <- 0 until a.length) {\n    \
    \        if (a(i) == b(i)) c.append('0')\n            else c.append('1')\n   \
    \     }\n        c.toString", "        val c = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            c.append((a(i) - '0') ^ (b(i) - '0'))\n\
    \        }\n        c.toString", "        val c = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            c.append((a(i) - '0') ^ (b(i) - '0'))\n\
    \        }\n        c.toString", "        val a_bits = a.toList.map(_.toString.toInt)\n\
    \        val b_bits = b.toList.map(_.toString.toInt)\n        val c_bits = a_bits.zip(b_bits).map(x\
    \ => x._1 ^ x._2)\n        c_bits.map(_.toString).mkString", "        val a_int\
    \ = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b, 2)\n     \
    \   val xor_int = a_int ^ b_int\n        val xor_string = Integer.toBinaryString(xor_int)\n\
    \        return xor_string", "        val aBin = a.toInt(2)\n        val bBin\
    \ = b.toInt(2)\n        val xor = aBin ^ bBin\n        xor.toBinaryString", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        val a_int = Integer.parseInt(a, 2)\n  \
    \      val b_int = Integer.parseInt(b, 2)\n        val xor_int = a_int ^ b_int\n\
    \        val xor_string = Integer.toBinaryString(xor_int)\n        return xor_string",
  "        if (a.length != b.length) {\n            throw new IllegalArgumentException(\"\
    Input strings must be of equal length\")\n        }\n        var result = \"\"\
    \n        for (i <- 0 until a.length) {\n            result += (if (a(i) == b(i))\
    \ \"0\" else \"1\")\n        }\n        return result", "        val result =\
    \ new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result += '0'\n            else result += '1'\n        }\n        result.toString",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val cList = ListBuffer[Char]()\n        for (i <- 0 until\
    \ aList.length) {\n            if (aList(i) == bList(i)) cList += '0'\n      \
    \      else cList += '1'\n        }\n        cList.mkString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append('0')\n            else result.append('1')\n        }\n\
    \        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append('0')\n            else result.append('1')\n\
    \        }\n        result.toString", "        val a_int = a.toInt(2)\n      \
    \  val b_int = b.toInt(2)\n        val c_int = a_int ^ b_int\n        val c =\
    \ c_int.toBinaryString\n        c", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val result = aBits.zip(bBits).map(x\
    \ => x._1 ^ x._2)\n        result.map(x => x.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x => x._1 ^\
    \ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_ + _)", "        val\
    \ aa = a.toCharArray\n        val bb = b.toCharArray\n        val cc = new Array[Char](aa.length)\n\
    \        for (i <- 0 until aa.length) {\n            cc(i) = (aa(i) ^ bb(i)).toChar\n\
    \        }\n        return cc.mkString", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append('0')\n\
    \            else sb.append('1')\n        }\n        sb.toString", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append('0')\n            else result.append('1')\n\
    \        }\n        result.toString", "        val n = a.length\n        val m\
    \ = b.length\n        if (n != m) throw new Exception(\"Strings must be of equal\
    \ length\")\n        val sb = new StringBuilder\n        for (i <- 0 until n)\
    \ {\n            val x = a(i)\n            val y = b(i)\n            if (x ==\
    \ '0' && y == '0') sb.append('0')\n            else if (x == '1' && y == '1')\
    \ sb.append('0')\n            else sb.append('1')\n        }\n        sb.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append('0')\n            else result.append('1')\n\
    \        }\n        result.toString", "        var result = \"\"\n        for\
    \ (i <- 0 until a.length) {\n            result += (if (a(i) == b(i)) '0' else\
    \ '1')\n        }\n        return result", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append('0')\n\
    \            else sb.append('1')\n        }\n        sb.toString", "        val\
    \ aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x => x._1 ^\
    \ x._2)\n        xorBits.mkString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^\
    \ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append('0')\n            else result.append('1')\n\
    \        }\n        result.toString", "        val a_list = a.toList\n       \
    \ val b_list = b.toList\n        val result = for (i <- 0 until a_list.length)\
    \ yield {\n            if (a_list(i) == b_list(i)) \"0\" else \"1\"\n        }\n\
    \        result.mkString", "        var result = \"\"\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result += \"0\"\n            else\
    \ result += \"1\"\n        }\n        return result", "        var result = \"\
    \"\n        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result\
    \ += \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        val n = a.length\n        val m = b.length\n        if (n != m) throw new\
    \ IllegalArgumentException(\"Strings must be of equal length\")\n        val sb\
    \ = new StringBuilder\n        for (i <- 0 until n) {\n            if (a(i) ==\
    \ b(i)) sb.append('0')\n            else sb.append('1')\n        }\n        sb.toString",
  "        val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val result = a_int ^ b_int\n        Integer.toBinaryString(result)",
  "        val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val c_int = a_int ^ b_int\n        val c = Integer.toBinaryString(c_int)\n\
    \        return c", "        val a_int = a.toInt(2)\n        val b_int = b.toInt(2)\n\
    \        val c_int = a_int ^ b_int\n        val c = c_int.toBinaryString\n   \
    \     return c", "        require(a.length == b.length)\n        val sb = new\
    \ StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) sb.append('0')\n            else sb.append('1')\n        }\n        sb.toString",
  "        val a_arr = a.toCharArray()\n        val b_arr = b.toCharArray()\n    \
    \    val c_arr = new Array[Char](a_arr.length)\n        for (i <- 0 until a_arr.length)\
    \ {\n            if (a_arr(i) == b_arr(i)) c_arr(i) = '0'\n            else c_arr(i)\
    \ = '1'\n        }\n        return c_arr.mkString", "        var result = \"\"\
    \n        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result\
    \ += \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n  \
    \          if (a(i) == b(i)) sb.append('0')\n            else sb.append('1')\n\
    \        }\n        sb.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ '0'\n            else result += '1'\n        }\n        result.toString", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        var result = \"\"\n        for (i <- 0\
    \ until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n         \
    \   else result += \"1\"\n        }\n        return result", "        var result\
    \ = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) == b(i))\
    \ result += \"0\"\n            else result += \"1\"\n        }\n        return\
    \ result", "        val aBits = a.map(c => c.toString.toInt)\n        val bBits\
    \ = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ a_array = a.toCharArray\n        val b_array = b.toCharArray\n        val result\
    \ = new Array[Char](a_array.length)\n        for (i <- 0 until a_array.length)\
    \ {\n            if (a_array(i) == b_array(i)) result(i) = '0'\n            else\
    \ result(i) = '1'\n        }\n        result.mkString", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x\
    \ => x.toString).mkString", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val cBits =\
    \ aBits.zip(bBits).map(x => x._1 ^ x._2)\n        cBits.map(x => x.toString).reduceLeft(_\
    \ + _)", "        var result = \"\"\n        for (i <- 0 until a.length) {\n \
    \           if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\
    \n        }\n        return result", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aa = a.toCharArray\n        val bb = b.toCharArray\n        val cc\
    \ = new Array[Char](aa.length)\n        for (i <- 0 until aa.length) {\n     \
    \       cc(i) = (aa(i) ^ bb(i)).toChar\n        }\n        return cc.mkString",
  "        val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) sb.append('0')\n            else sb.append('1')\n\
    \        }\n        sb.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val result = (a_int ^ b_int).toBinaryString\n        return result",
  "        val a_array = a.toCharArray\n        val b_array = b.toCharArray\n    \
    \    val result = new Array[Char](a_array.length)\n        for (i <- 0 until a_array.length)\
    \ {\n            if (a_array(i) == b_array(i)) result(i) = '0'\n            else\
    \ result(i) = '1'\n        }\n        result.mkString", "        val n = a.length\n\
    \        val c = new Array[Char](n)\n        for (i <- 0 until n) {\n        \
    \    if (a(i) == b(i)) c(i) = '0'\n            else c(i) = '1'\n        }\n  \
    \      return c.mkString", "        val a_int = Integer.parseInt(a, 2)\n     \
    \   val b_int = Integer.parseInt(b, 2)\n        val xor_int = a_int ^ b_int\n\
    \        val xor_str = Integer.toBinaryString(xor_int)\n        return xor_str",
  "        val c = a.zip(b).map(x => (x._1.toInt ^ x._2.toInt).toString)\n       \
    \ c.mkString", "        val a_int = Integer.parseInt(a, 2)\n        val b_int\
    \ = Integer.parseInt(b, 2)\n        val c_int = a_int ^ b_int\n        val c =\
    \ Integer.toBinaryString(c_int)\n        return c", "        var result = \"\"\
    \n        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result\
    \ += \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        val n = a.length\n        val m = b.length\n        if (n != m) throw new\
    \ IllegalArgumentException(\"Length of strings must be equal.\")\n        val\
    \ sb = new StringBuilder\n        for (i <- 0 until n) {\n            val x =\
    \ a(i)\n            val y = b(i)\n            if (x == '0' && y == '0') sb.append('0')\n\
    \            else if (x == '1' && y == '1') sb.append('0')\n            else sb.append('1')\n\
    \        }\n        sb.toString", "        var result = \"\"\n        for (i <-\
    \ 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n       \
    \     else result += \"1\"\n        }\n        return result", "        val sb\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) sb.append('0')\n            else sb.append('1')\n        }\n      \
    \  sb.toString", "        val result = new StringBuilder\n        for (i <- 0\
    \ until a.length) {\n            if (a(i) == b(i)) result += '0'\n           \
    \ else result += '1'\n        }\n        result.toString", "        val n = a.length\n\
    \        val m = b.length\n        if (n != m) throw new Exception(\"Strings must\
    \ be of equal length\")\n        val c = new StringBuilder\n        for (i <-\
    \ 0 until n) {\n            if (a(i) == b(i)) c.append('0')\n            else\
    \ c.append('1')\n        }\n        c.toString", "        var result = \"\"\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        val a_list = a.toList\n        val b_list = b.toList\n        val c_list\
    \ = a_list.zip(b_list).map(x => (x._1, x._2, x._1 ^ x._2))\n        c_list.map(x\
    \ => x._3.toString).mkString", "        val aa = a.toCharArray\n        val bb\
    \ = b.toCharArray\n        val cc = new Array[Char](aa.length)\n        for (i\
    \ <- 0 until aa.length) {\n            if (aa(i) == bb(i)) cc(i) = '0'\n     \
    \       else cc(i) = '1'\n        }\n        return cc.mkString", "        var\
    \ result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result += \"0\"\n            else result += \"1\"\n        }\n       \
    \ return result", "        val result = new StringBuilder\n        for (i <- 0\
    \ until a.length) {\n            if (a(i) == b(i)) result.append('0')\n      \
    \      else result.append('1')\n        }\n        result.toString", "       \
    \ val c = new StringBuilder\n        for (i <- 0 until a.length) {\n         \
    \   c.append((a(i) - '0') ^ (b(i) - '0'))\n        }\n        c.toString", " \
    \       val a_arr = a.toCharArray\n        val b_arr = b.toCharArray\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until a_arr.length) {\n\
    \            if (a_arr(i) == b_arr(i)) {\n                result.append('0')\n\
    \            } else {\n                result.append('1')\n            }\n   \
    \     }\n        result.toString", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ c = new StringBuilder\n        for (i <- 0 until a.length) {\n            c.append((a(i)\
    \ - '0') ^ (b(i) - '0'))\n        }\n        c.toString", "        val a_int =\
    \ Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b, 2)\n       \
    \ val result = a_int ^ b_int\n        return Integer.toBinaryString(result)",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        val a_int = Integer.parseInt(a, 2)\n       \
    \ val b_int = Integer.parseInt(b, 2)\n        val result = a_int ^ b_int\n   \
    \     return result.toBinaryString", "        val a_int = Integer.parseInt(a,\
    \ 2)\n        val b_int = Integer.parseInt(b, 2)\n        val c_int = a_int ^\
    \ b_int\n        val c = Integer.toBinaryString(c_int)\n        return c", " \
    \       val c = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         c.append((a(i) - '0') ^ (b(i) - '0'))\n        }\n        c.toString",
  "        val aBits = a.toList.map(_.toString.toInt)\n        val bBits = b.toList.map(_.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(_.toString).reduce(_\
    \ + _)", "        var result = \"\"\n        for (i <- 0 until a.length) {\n \
    \           if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\
    \n        }\n        return result", "        val aInt = Integer.parseInt(a, 2)\n\
    \        val bInt = Integer.parseInt(b, 2)\n        val result = aInt ^ bInt\n\
    \        return Integer.toBinaryString(result)", "        val a_int = Integer.parseInt(a,\
    \ 2)\n        val b_int = Integer.parseInt(b, 2)\n        val c_int = a_int ^\
    \ b_int\n        return Integer.toBinaryString(c_int)", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(i\
    \ => i.toString).reduceLeft(_ + _)", "        val n = a.length\n        val m\
    \ = b.length\n        if (n != m) throw new Exception(\"Inputs must be of equal\
    \ length\")\n        val sb = new StringBuilder\n        for (i <- 0 until n)\
    \ {\n            val x = a(i)\n            val y = b(i)\n            if (x ==\
    \ '0' && y == '0') sb.append('0')\n            else if (x == '1' && y == '1')\
    \ sb.append('0')\n            else sb.append('1')\n        }\n        sb.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n\
    \        xorBits.map(i => i.toString).reduceLeft(_ + _)", "        val aBits =\
    \ a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(i\
    \ => i.toString).reduceLeft(_ + _)", "        val sb = new StringBuilder\n   \
    \     for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append('0')\n\
    \            else sb.append('1')\n        }\n        sb.toString", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append('0')\n            else result.append('1')\n\
    \        }\n        result.toString", "        if (a.length != b.length) throw\
    \ new Exception(\"Strings must be of equal length.\")\n        val result = new\
    \ StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result += '0'\n            else result += '1'\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        var result\
    \ = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) == b(i))\
    \ result += \"0\"\n            else result += \"1\"\n        }\n        return\
    \ result", "        val aBits = a.toList.map(_.toInt - 48)\n        val bBits\
    \ = b.toList.map(_.toInt - 48)\n        val cBits = aBits.zip(bBits).map(x =>\
    \ x._1 ^ x._2)\n        cBits.map(_.toString).reduce(_ + _)", "        val sb\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) sb.append('0')\n            else sb.append('1')\n        }\n      \
    \  sb.toString", "        val result = new StringBuilder\n        for (i <- 0\
    \ until a.length) {\n            if (a(i) == b(i)) result.append('0')\n      \
    \      else result.append('1')\n        }\n        result.toString", "       \
    \ var result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n    \
    \    return result", "        var result = \"\"\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result += \"0\"\n            else result +=\
    \ \"1\"\n        }\n        return result", "        var result = \"\"\n     \
    \   for (i <- 0 until a.length) {\n            result += (if (a(i) == b(i)) \"\
    0\" else \"1\")\n        }\n        return result", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).mkString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        val result = new StringBuilder\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val result = a_int ^ b_int\n        return Integer.toBinaryString(result)",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        val aBits = a.toList.map(_.toString.toInt)\n\
    \        val bBits = b.toList.map(_.toString.toInt)\n        val cBits = aBits.zip(bBits).map(x\
    \ => x._1 ^ x._2)\n        cBits.map(_.toString).mkString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result += '0'\n            else result += '1'\n        }\n        result.toString",
  "        val aBits = a.map(_.toString.toInt)\n        val bBits = b.map(_.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(_.toString).reduceLeft(_\
    \ + _)", "        val result = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result.append('0')\n            else result.append('1')\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       if (a.length != b.length) throw new IllegalArgumentException(\"Inputs\
    \ must be of equal length\")\n        val sb = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append('0')\n  \
    \          else sb.append('1')\n        }\n        sb.toString", "        val\
    \ n = a.length\n        val m = b.length\n        if (n != m) throw new IllegalArgumentException(\"\
    Strings must be of equal length\")\n        val sb = new StringBuilder\n     \
    \   for (i <- 0 until n) {\n            if (a(i) == b(i)) sb.append('0')\n   \
    \         else sb.append('1')\n        }\n        sb.toString", "        val a_int\
    \ = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b, 2)\n     \
    \   val result = a_int ^ b_int\n        Integer.toBinaryString(result)", "   \
    \     val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val aBits =\
    \ a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(i\
    \ => i.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n  \
    \          if (a(i) == b(i)) sb.append('0')\n            else sb.append('1')\n\
    \        }\n        sb.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       val a_bin = BigInt(a, 2)\n        val b_bin = BigInt(b, 2)\n        val\
    \ c_bin = a_bin ^ b_bin\n        c_bin.toString(2)", "        var result = \"\"\
    \n        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result\
    \ += \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val c_int = a_int ^ b_int\n        val c = Integer.toBinaryString(c_int)\n\
    \        return c", "        val a_int = Integer.parseInt(a, 2)\n        val b_int\
    \ = Integer.parseInt(b, 2)\n        val xor_int = a_int ^ b_int\n        val xor_str\
    \ = Integer.toBinaryString(xor_int)\n        return xor_str", "        var result\
    \ = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) == b(i))\
    \ result += \"0\"\n            else result += \"1\"\n        }\n        return\
    \ result", "        val aBits = a.map(c => if (c == '1') 1 else 0)\n        val\
    \ bBits = b.map(c => if (c == '1') 1 else 0)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(b => if (b == 1) '1' else '0').mkString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = (aBits zip bBits).map(t => t._1 ^ t._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val aBits =\
    \ a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val xorBits = (aBits zip bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        val sb = new StringBuilder\n   \
    \     for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append('0')\n\
    \            else sb.append('1')\n        }\n        sb.toString", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(i => i.toString).reduceLeft(_ + _)", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        val result = new StringBuilder\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^\
    \ t._2)\n        xorBits.map(i => i.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val cBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n\
    \        cBits.map(x => x.toString).reduceLeft(_ + _)", "        val result =\
    \ new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append('0')\n            else result.append('1')\n        }\n\
    \        result.toString", "        val a_int = Integer.parseInt(a, 2)\n     \
    \   val b_int = Integer.parseInt(b, 2)\n        val c_int = a_int ^ b_int\n  \
    \      val c = Integer.toBinaryString(c_int)\n        return c", "        var\
    \ result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result += \"0\"\n            else result += \"1\"\n        }\n       \
    \ return result", "        val aBits = a.map(c => c.toString.toInt)\n        val\
    \ bBits = b.map(c => c.toString.toInt)\n        val result = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        result.map(i => i.toString).reduceLeft(_ + _)", " \
    \       val c = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         c.append((a(i) - '0') ^ (b(i) - '0'))\n        }\n        c.toString",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        val n = a.length\n        val m = b.length\n\
    \        if (n != m) throw new Exception(\"Inputs must be of equal length\")\n\
    \        val result = new StringBuilder\n        for (i <- 0 until n) {\n    \
    \        if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.toList.map(x\
    \ => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x\
    \ => x.toString).mkString", "        if (a.length != b.length) {\n           \
    \ throw new IllegalArgumentException(\"Strings must be of equal length\")\n  \
    \      }\n        val aList = a.toList\n        val bList = b.toList\n       \
    \ val result = aList.zip(bList).map(x => (x._1, x._2)).map(x => if (x._1 == x._2)\
    \ '0' else '1').mkString\n        return result", "        val a_array = a.toCharArray\n\
    \        val b_array = b.toCharArray\n        val result = new Array[Char](a_array.length)\n\
    \        for (i <- 0 until a_array.length) {\n            if (a_array(i) == b_array(i))\
    \ result(i) = '0'\n            else result(i) = '1'\n        }\n        result.mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append('0')\n            else result.append('1')\n\
    \        }\n        result.toString", "        val sb = new StringBuilder\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append('0')\n\
    \            else sb.append('1')\n        }\n        sb.toString", "        val\
    \ a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b, 2)\n\
    \        val c_int = a_int ^ b_int\n        val c = Integer.toBinaryString(c_int)\n\
    \        return c", "        val a_array = a.toCharArray\n        val b_array\
    \ = b.toCharArray\n        val result = new StringBuilder\n        for (i <- 0\
    \ until a_array.length) {\n            if (a_array(i) == b_array(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val c_int = a_int ^ b_int\n        Integer.toBinaryString(c_int)",
  "        val aBits = a.map(_.toString.toInt)\n        val bBits = b.map(_.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(_.toString).reduceLeft(_\
    \ + _)", "        val aBits = a.map(c => c.toString.toInt)\n        val bBits\
    \ = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n\
    \        cBits.map(x => x.toString).reduceLeft(_ + _)", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append('0')\n            else result.append('1')\n\
    \        }\n        result.toString", "        var result = \"\"\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n \
    \           else result += \"1\"\n        }\n        return result", "       \
    \ val a_bin = Integer.parseInt(a, 2)\n        val b_bin = Integer.parseInt(b,\
    \ 2)\n        val result = a_bin ^ b_bin\n        return Integer.toBinaryString(result)",
  "        val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val result = aBits.zip(bBits).map(x => x._1 ^\
    \ x._2)\n        result.map(x => x.toString).reduceLeft(_ + _)", "        val\
    \ aBinary = a.toInt(2)\n        val bBinary = b.toInt(2)\n        val result =\
    \ aBinary ^ bBinary\n        result.toBinaryString", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            sb.append((a(i) - '0') ^ (b(i)\
    \ - '0'))\n        }\n        sb.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        cBits.map(c => c.toString).reduceLeft(_ + _)", "  \
    \      val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val result = a_int ^ b_int\n        return Integer.toBinaryString(result)",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val aBinary\
    \ = a.toInt(2)\n        val bBinary = b.toInt(2)\n        val xor = aBinary ^\
    \ bBinary\n        xor.toBinaryString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append('0')\n\
    \            else result.append('1')\n        }\n        result.toString", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        var result = \"\"\n        for (i <- 0\
    \ until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n         \
    \   else result += \"1\"\n        }\n        return result", "        val aBits\
    \ = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val result = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        result.map(i\
    \ => i.toString).reduceLeft(_ + _)"]
stop_tokens:
- "\n    }\n"
