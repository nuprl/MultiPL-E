language: scala
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val limit = sqrt(m).toLong\n        for\
    \ (i <- 2 to limit) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0fx_ana.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val sqrtm = sqrt(m).toLong\n        for\
    \ (i <- 2 to sqrtm) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9tzimebo.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to sqrtm) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (sqrtm : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 2 to sqrt) {\n            if (n % i == 0) {\n             \
    \   val j = n / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6v3kfum0.scala:10:19 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val max = n / 2\n        val min = n / 4\n        for (i <- min\
    \ to max) {\n            for (j <- i to max) {\n                for (k <- j to\
    \ max) {\n                    for (l <- k to max) {\n                        if\
    \ (i + j + k + l == n) return true\n                    }\n                }\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptorpl9mr.scala:25)\n\tat Problem.main(tmptorpl9mr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit) {\n            for (j <- i to limit) {\n      \
    \          for (k <- j to limit) {\n                    for (l <- k to limit)\
    \ {\n                        if (i + j + k + l == n) return true\n           \
    \         }\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_nq4fu7v.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_nq4fu7v.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- i to limit) {\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                 Found:    (limit : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_nq4fu7v.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m\
    \ (k <- j to limit) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (limit : Long)\n\e\
    [31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_nq4fu7v.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- k to limit)\
    \ {\n\e[31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (limit : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 0 to n / 2) {\n            for (j <- 0 to n / 2) {\n      \
    \          for (k <- 0 to n / 2) {\n                    for (l <- 0 to n / 2)\
    \ {\n                        if (i + j + k + l == n) result = true\n         \
    \           }\n                }\n            }\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbs39gpkt.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbs39gpkt.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to n /\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbs39gpkt.scala:13:31 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m0\e[0m to n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbs39gpkt.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m0\e[0m\
    \ to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Long\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        def isEqualToSumEven(n\
    \ : Long, count : Int) : Boolean = {\n            if (n == 0 && count == 4) true\n\
    \            else if (n < 0 || count == 4) false\n            else isEqualToSumEven(n\
    \ - 2, count + 1) || isEqualToSumEven(n, count)\n        }\n        isEqualToSumEven(n,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659799661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 0 to n / 2) {\n            for (j <- 0 to (n - 2 * i) / 2)\
    \ {\n                for (k <- 0 to (n - 2 * i - 2 * j) / 2) {\n             \
    \       val l = n - 2 * i - 2 * j - 2 * k\n                    if (l % 2 == 0)\
    \ {\n                        result = true\n                    }\n          \
    \      }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgyakqbms.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgyakqbms.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to (n -\
    \ \e[31m2\e[0m * i) / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgyakqbms.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m0\e[0m to\
    \ (n - \e[31m2\e[0m * i - \e[31m2\e[0m * j) / \e[31m2\e[0m) {\n\e[31m\e[31m  \
    \ |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               Found:    Long\n\e[31m   |\e[0m       \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (a <- 2 to n / 4) {\n            for (b <- a to n / 3) {\n\
    \                for (c <- b to n / 2) {\n                    val d = n - a -\
    \ b - c\n                    if (d >= c && d % 2 == 0) return true\n         \
    \       }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvidjs0w9.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to n / \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvidjs0w9.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- a to n / \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvidjs0w9.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (c <- b to n / \e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 2 to n / 2) {\n            for (j <- 2 to n / 2) {\n      \
    \          for (k <- 2 to n / 2) {\n                    for (l <- 2 to n / 2)\
    \ {\n                        if (i + j + k + l == n) {\n                     \
    \       result = true\n                        }\n                    }\n    \
    \            }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbfh4022p.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbfh4022p.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to n /\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbfh4022p.scala:13:31 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbfh4022p.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Long\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit by 2) {\n            for (j <- i to limit by 2)\
    \ {\n                for (k <- j to limit by 2) {\n                    for (l\
    \ <- k to limit by 2) {\n                        if (i + j + k + l == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- i to limit by \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (limit : Long)\n\e[31m   |\e[0m      \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp8ar7a60.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (k <- j to limit by \e[31m2\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    (limit : Long)\n\e[31m   |\e[0m    \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp8ar7a60.scala:14:35 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- k to limit by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                   ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (limit : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1L to n / 2) {\n            if (isEqualToSumEven(n\
    \ - i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn7r1pi2a.scala:12:33\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n\
    \ - i, i)) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Found:    (Long, Long)\n\e[31m   |\e[0m                           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val a = m / 2\n        val b = m - a\n        val c = b / 2\n        val\
    \ d = b - c\n        val e = d / 2\n        val f = d - e\n        val g = f /\
    \ 2\n        val h = f - g\n        val i = h / 2\n        val j = h - i\n   \
    \     val k = j / 2\n        val l = j - k\n        val o = l / 2\n        val\
    \ p = l - o\n        val q = p / 2\n        val r = p - q\n        val s = r /\
    \ 2\n        val t = r - s\n        val u = t / 2\n        val v = t - u\n   \
    \     val w = v / 2\n        val x = v - w\n        val y = x / 2\n        val\
    \ z = x - y\n        if (z == 0) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfjuropdo.scala:40)\n\tat Problem.main(tmpfjuropdo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit by 2) {\n            val remain = n - i\n      \
    \      val limit2 = remain / 2\n            for (j <- 2 to limit2 by 2) {\n  \
    \              val remain2 = remain - j\n                val limit3 = remain2\
    \ / 2\n                for (k <- 2 to limit3 by 2) {\n                    val\
    \ remain3 = remain2 - k\n                    val limit4 = remain3 / 2\n      \
    \              for (l <- 2 to limit4 by 2) {\n                        if (i +\
    \ j + k + l == n) return true\n                    }\n                }\n    \
    \        }\n        }\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkcj3eru3.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkcj3eru3.scala:14:27 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to limit2\
    \ by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (limit2 : Long)\n\e[31m\
    \   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkcj3eru3.scala:17:31 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to\
    \ limit3 by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (limit3\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkcj3eru3.scala:20:35 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to limit4 by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                        \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (limit4 : Long)\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val sqrt = sqrt(m).toLong\n        for\
    \ (i <- 2 to sqrt) {\n            if (m % i == 0) {\n                val j = m\
    \ / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n           \
    \ }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmz6vq04j.scala:12:19 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(m).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 2 to n / 2) {\n            if (n - i == i) {\n            \
    \    result = true\n                break\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptta98w0w.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptta98w0w.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit by 2) {\n            val remain = n - i\n      \
    \      if (remain % 2 == 0) {\n                val remainLimit = remain / 2\n\
    \                for (j <- 2 to remainLimit by 2) {\n                    val remain2\
    \ = remain - j\n                    if (remain2 % 2 == 0) {\n                \
    \        val remain2Limit = remain2 / 2\n                        for (k <- 2 to\
    \ remain2Limit by 2) {\n                            val remain3 = remain2 - k\n\
    \                            if (remain3 % 2 == 0) {\n                       \
    \         val remain3Limit = remain3 / 2\n                                for\
    \ (l <- 2 to remain3Limit by 2) {\n                                    val remain4\
    \ = remain3 - l\n                                    if (remain4 % 2 == 0) {\n\
    \                                        val remain4Limit = remain4 / 2\n    \
    \                                    for (m <- 2 to remain4Limit by 2) {\n   \
    \                                         val remain5 = remain4 - m\n        \
    \                                    if (remain5 % 2 == 0) {\n               \
    \                                 val remain5Limit = remain5 / 2\n           \
    \                                     for (o <- 2 to remain5Limit by 2) {\n  \
    \                                                  val remain6 = remain5 - o\n\
    \                                                    if (remain6 % 2 == 0) {\n\
    \                                                        val remain6Limit = remain6\
    \ / 2\n                                                        for (p <- 2 to\
    \ remain6Limit by 2) {\n                                                     \
    \       val remain7 = remain6 - p\n                                          \
    \                  if (remain7 % 2 == 0) {\n                                 \
    \                               val remain7Limit = remain7 / 2\n             \
    \                                                   for (q <- 2 to remain7Limit\
    \ by 2) {\n                                                                  \
    \  val remain8 = remain7 - q\n                                               \
    \                     if (remain8 % 2 == 0) {\n                              \
    \                                          val remain8Limit = remain8 / 2\n  \
    \                                                                      for (r\
    \ <- 2 to remain8Limit by 2) {\n                                             \
    \                               val remain9 = remain8 - r\n                  \
    \                                                          if (remain9 % 2 ==\
    \ 0) {\n                                                                     \
    \           val remain9Limit = remain9 / 2\n                                 \
    \                                               for (s <- 2 to\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpapeyh000.scala:47:94 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                                                    \
    \                            \e[33mfor\e[0m (s <- \e[31m2\e[0m to\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpapeyh000.scala:61:0 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapeyh000.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapeyh000.scala:15:31 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mfor\e[0m (j <- \e[31m2\e[0m to\
    \ remainLimit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    (remainLimit : Long)\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapeyh000.scala:19:39\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                        \e[33mfor\e\
    [0m (k <- \e[31m2\e[0m to remain2Limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                      Found:    (remain2Limit : Long)\n\e[31m\
    \   |\e[0m                                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1 to n / 2) {\n            if (n - i % 2 == 0) {\n\
    \                var j = n - i\n                if (j % 2 == 0) {\n          \
    \          var k = j / 2\n                    if (k % 2 == 0) {\n            \
    \            var l = k / 2\n                        if (l % 2 == 0) {\n      \
    \                      return true\n                        }\n              \
    \      }\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6t8o2xd8.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val max = (m - 1) / 2\n        for (i <- 1 to max) {\n            val j\
    \ = m - i\n            if (j % 2 == 0) {\n                val k = j / 2\n    \
    \            val l = m - k\n                if (l % 2 == 0) return true\n    \
    \        }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpppd0_ysw.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to max) {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (max : Long)\n\e[31m   |\e[0m\
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val limit = (sqrt(1 + 8 * m) - 1) / 2\n\
    \        for (i <- 1 to limit.toInt) {\n            val j = m - i * (i + 1) /\
    \ 2\n            if (j % (i + 1) == 0) return true\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp35u7jf3i.scala:21)\n\tat Problem.main(tmp35u7jf3i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit by 2) {\n            for (j <- i to limit by 2)\
    \ {\n                for (k <- j to limit by 2) {\n                    for (l\
    \ <- k to limit by 2) {\n                        if (i + j + k + l == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- i to limit by \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (limit : Long)\n\e[31m   |\e[0m      \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp8ar7a60.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (k <- j to limit by \e[31m2\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    (limit : Long)\n\e[31m   |\e[0m    \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp8ar7a60.scala:14:35 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- k to limit by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                   ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (limit : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 2 to m) {\n            if (isPrime(i)\
    \ && isPrime(n - i)) return false\n        }\n        return true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyj01qfqs.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyj01qfqs.scala:13:16 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m            \e[33mif\e[0m (isPrime(i) && isPrime(n - i)) \e[33mreturn\e[0m\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2 by 2) {\n            for (j <- 2 to n /\
    \ 2 by 2) {\n                for (k <- 2 to n / 2 by 2) {\n                  \
    \  for (l <- 2 to n / 2 by 2) {\n                        if (i + j + k + l ==\
    \ n) return true\n                    }\n                }\n            }\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to n /\
    \ \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Long\n\e\
    [31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to\
    \ n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    Long\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    Long\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit by 2) {\n            for (j <- 2 to limit by 2)\
    \ {\n                for (k <- 2 to limit by 2) {\n                    for (l\
    \ <- 2 to limit by 2) {\n                        if (i + j + k + l == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6u_vzx99.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6u_vzx99.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to limit\
    \ by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (limit : Long)\n\e[31m\
    \   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6u_vzx99.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to\
    \ limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6u_vzx99.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (limit : Long)\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val s = n / 2\n   \
    \     val r = n % 2\n        if (r == 1) return false\n        for (i <- 1 to\
    \ s) {\n            val j = s - i\n            if (i % 2 == 0 && j % 2 == 0) return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi4tvmvh6.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to s) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (s : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit by 2) {\n            for (j <- 2 to limit by 2)\
    \ {\n                for (k <- 2 to limit by 2) {\n                    for (l\
    \ <- 2 to limit by 2) {\n                        if (i + j + k + l == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6u_vzx99.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6u_vzx99.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to limit\
    \ by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (limit : Long)\n\e[31m\
    \   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6u_vzx99.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to\
    \ limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6u_vzx99.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (limit : Long)\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val limit = sqrt(m).toLong\n        for\
    \ (i <- 2 to limit) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0fx_ana.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (a <- 2 to n.toInt by 2; b <- 2 to n.toInt by 2; c <- 2 to n.toInt\
    \ by 2; d <- 2 to n.toInt by 2) {\n            if (a + b + c + d == n) {\n   \
    \             result = true\n                return result\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val limit = sqrt(m).toLong\n        for\
    \ (i <- 2L to limit) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpevkxkiyp.scala:25)\n\tat Problem.main(tmpevkxkiyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val sqrtm = sqrt(m).toLong\n        for\
    \ (i <- 2 to sqrtm) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyuk8c2pl.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to sqrtm) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (sqrtm : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val s = (1 to m).map(x => (x, m - x)).filter(x => x._1 % 2 == 0 && x._2\
    \ % 2 == 0).map(x => x._1 + x._2).toSet\n        s.contains(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xpk867c.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ms\e\
    [0m = (\e[31m1\e[0m to m).map(\e[36mx\e[0m => (x, m - x)).filter(\e[36mx\e[0m\
    \ => x._1 % \e[31m2\e[0m == \e[31m0\e[0m && x._2 % \e[31m2\e[0m == \e[31m0\e[0m).map(\e\
    [36mx\e[0m => x._1 + x._2).toSet\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (m : Long)\n\e[31m   |\e[0m\
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            val j = n - i\n            if (i % 2 ==\
    \ 0 && j % 2 == 0) return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapf0l1w7.scala:18)\n\tat Problem.main(tmpapf0l1w7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 0 to n / 2) {\n            for (j <- 0 to n / 2) {\n\
    \                for (k <- 0 to n / 2) {\n                    for (l <- 0 to n\
    \ / 2) {\n                        if (i + j + k + l == n) return true\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpezty_7n3.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpezty_7n3.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to n /\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpezty_7n3.scala:13:31 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m0\e[0m to n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpezty_7n3.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m0\e[0m\
    \ to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Long\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val x = (1 to m).find(x => (m - x) % 2 == 0)\n        x match {\n      \
    \      case Some(x) => true\n            case None => false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyyebv8tj.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mx\e\
    [0m = (\e[31m1\e[0m to m).find(\e[36mx\e[0m => (m - x) % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    (m : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val sqrtm = sqrt(m).toLong\n        for\
    \ (i <- 1L to sqrtm) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4x90fo1.scala:25)\n\tat Problem.main(tmpu4x90fo1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 2 to sqrt) {\n            if (n % i == 0) {\n             \
    \   val j = n / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6v3kfum0.scala:10:19 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2L to n / 2 by 2) {\n            for (j <- 2L to n\
    \ / 2 by 2) {\n                for (k <- 2L to n / 2 by 2) {\n               \
    \     for (l <- 2L to n / 2 by 2) {\n                        if (i + j + k + l\
    \ == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val l = (1 to m.toInt).toList\n        val s = l.combinations(4).filter(x\
    \ => x.sum == m).toList\n        s.length > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8po88c0.scala:18)\n\tat Problem.main(tmpe8po88c0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (a <- 2 to n / 4) {\n            for (b <- a to n / 3) {\n\
    \                for (c <- b to n / 2) {\n                    val d = n - a -\
    \ b - c\n                    if (d >= c && a + b + c + d == n) return true\n \
    \               }\n            }\n        }\n        return false\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk63_mrg7.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to n / \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk63_mrg7.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- a to n / \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk63_mrg7.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (c <- b to n / \e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val max = (m - 1) / 2\n        for (i\
    \ <- 1 to max) {\n            val j = m - i\n            if (j % 2 == 0) return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu3e3ph85.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to max) {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (max : Long)\n\e[31m   |\e[0m\
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit by 2) {\n            for (j <- i to limit by 2)\
    \ {\n                for (k <- j to limit by 2) {\n                    for (l\
    \ <- k to limit by 2) {\n                        if (i + j + k + l == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- i to limit by \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (limit : Long)\n\e[31m   |\e[0m      \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp8ar7a60.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (k <- j to limit by \e[31m2\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    (limit : Long)\n\e[31m   |\e[0m    \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp8ar7a60.scala:14:35 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- k to limit by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                   ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (limit : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     var result = false\n        for (a <- 1L to m) {\n            for (b <-\
    \ a to m) {\n                for (c <- b to m) {\n                    for (d <-\
    \ c to m) {\n                        if (a + b + c + d == m) {\n             \
    \               result = true\n                        }\n                   \
    \ }\n                }\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51nmljc2.scala:30)\n\tat Problem.main(tmp51nmljc2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val l = (1 to m.toInt).filter(x => x % 2 == 0).toList\n        val r = l.map(x\
    \ => n - x)\n        val rr = r.filter(x => x % 2 == 0)\n        rr.size == 4\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpofcwk6cg.scala:19)\n\tat Problem.main(tmpofcwk6cg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val a = m / 2\n        val b = m - a\n        val c = b / 2\n        val\
    \ d = b - c\n        val e = d / 2\n        val f = d - e\n        val g = f /\
    \ 2\n        val h = f - g\n        val i = h / 2\n        val j = h - i\n   \
    \     val k = j / 2\n        val l = j - k\n        val o = l / 2\n        val\
    \ p = l - o\n        val q = p / 2\n        val r = p - q\n        val s = r /\
    \ 2\n        val t = r - s\n        val u = t / 2\n        val v = t - u\n   \
    \     val w = v / 2\n        val x = v - w\n        val y = x / 2\n        val\
    \ z = x - y\n        val aa = z / 2\n        val bb = z - aa\n        val cc =\
    \ bb / 2\n        val dd = bb - cc\n        val ee = dd / 2\n        val ff =\
    \ dd - ee\n        val gg = ff / 2\n        val hh = ff - gg\n        val ii =\
    \ hh / 2\n        val jj = hh - ii\n        val kk = jj / 2\n        val ll =\
    \ jj - kk\n        val mm = ll / 2\n        val nn = ll - mm\n        val oo =\
    \ nn / 2\n        val pp = nn - oo\n        val qq = pp / 2\n        val rr =\
    \ pp - qq\n        val ss = rr / 2\n        val tt = rr - ss\n        val uu =\
    \ tt / 2\n        val vv = tt - uu\n        val ww = vv / 2\n        val xx =\
    \ vv - ww\n        val yy = xx / 2\n        val zz = xx - yy\n        val aaa\
    \ = zz / 2\n        val bbb = zz - aaa\n        val ccc = bbb / 2\n        val\
    \ ddd = bbb - ccc\n        val eee = ddd / 2\n        val fff = ddd - eee\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbg821apa.scala:68:5\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 2 to n.toInt / 2) {\n            if (i % 2 == 0) {\n      \
    \          var j = n - i\n                if (j % 2 == 0) {\n                \
    \    var k = j / 2\n                    if (k % 2 == 0) {\n                  \
    \      var l = k - 2\n                        if (l % 2 == 0) {\n            \
    \                result = true\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwm78530n.scala:29)\n\tat Problem.main(tmpwm78530n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit) {\n            val a = i\n            val b = n\
    \ - a\n            for (j <- 2 to limit) {\n                val c = j\n      \
    \          val d = b - c\n                if (d > 0 && d % 2 == 0) return true\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyym19kz8.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpyym19kz8.scala:14:27 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to limit)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (limit : Long)\n\e[31m   |\e[0m      \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var sum = 0L\n    \
    \    for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n              \
    \  sum += i\n                if (sum == n) return true\n            }\n      \
    \  }\n        return false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8eop4ofs.scala:21)\n\tat Problem.main(tmp8eop4ofs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val set = new HashSet[Long]\n\
    \        for (i <- 1 to n / 2) {\n            set.add(i)\n        }\n        for\
    \ (i <- 1 to n / 2) {\n            if (set.contains(n - i)) {\n              \
    \  return true\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3g5021cy.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3g5021cy.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n / \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799678
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (a <- 1 to m.toInt) {\n            for (b <- 1 to m.toInt) {\n     \
    \           for (c <- 1 to m.toInt) {\n                    for (d <- 1 to m.toInt)\
    \ {\n                        if (a + b + c + d == m && a % 2 == 0 && b % 2 ==\
    \ 0 && c % 2 == 0 && d % 2 == 0) return true\n                    }\n        \
    \        }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphe9ozc05.scala:25)\n\tat Problem.main(tmphe9ozc05.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val limit = sqrt(m).toLong\n        for\
    \ (i <- 2L to limit) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpevkxkiyp.scala:25)\n\tat Problem.main(tmpevkxkiyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 2 to max.toInt by 2) {\n            for (j <- 2 to max.toInt\
    \ by 2) {\n                for (k <- 2 to max.toInt by 2) {\n                \
    \    for (l <- 2 to max.toInt by 2) {\n                        if (i + j + k +\
    \ l == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lb4xetx.scala:26)\n\tat Problem.main(tmp6lb4xetx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (a <- 2 to limit by 2) {\n            for (b <- 2 to limit by 2)\
    \ {\n                for (c <- 2 to limit by 2) {\n                    for (d\
    \ <- 2 to limit by 2) {\n                        if (a + b + c + d == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q6uo619.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q6uo619.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- \e[31m2\e[0m to limit\
    \ by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (limit : Long)\n\e[31m\
    \   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0q6uo619.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (c <- \e[31m2\e[0m to\
    \ limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q6uo619.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (d <- \e[31m2\e[0m\
    \ to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (limit : Long)\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            for\
    \ (j <- 1L to m) {\n                for (k <- 1L to m) {\n                   \
    \ for (l <- 1L to m) {\n                        if (i + j + k + l == m) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2 by 2) {\n            if (isEqualToSumEven(n\
    \ - i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfvzj54cg.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfvzj54cg.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val limit = n / 2\n        for (i <- 2 to limit) {\n        \
    \    if (i % 2 == 1) return false\n            val j = n - i\n            if (j\
    \ % 2 == 1) return false\n            val k = j / 2\n            if (k % 2 ==\
    \ 1) return false\n            val l = k - i\n            if (l % 2 == 1) return\
    \ false\n            if (l > 0) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb7m_szfh.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        var result = false\n        for (i <- 2 to limit by 2) {\n          \
    \  for (j <- 2 to limit by 2) {\n                for (k <- 2 to limit by 2) {\n\
    \                    for (l <- 2 to limit by 2) {\n                        if\
    \ (i + j + k + l == n) {\n                            result = true\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1jif_6gn.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1jif_6gn.scala:13:27 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to limit\
    \ by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (limit : Long)\n\e[31m\
    \   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1jif_6gn.scala:14:31 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to\
    \ limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1jif_6gn.scala:15:35 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (limit : Long)\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1L to n / 2) {\n            if (i % 2 == 1) return\
    \ false\n            for (j <- i + 2L to n / 2) {\n                if (j % 2 ==\
    \ 1) return false\n                for (k <- j + 2L to n / 2) {\n            \
    \        if (k % 2 == 1) return false\n                    for (l <- k + 2L to\
    \ n / 2) {\n                        if (l % 2 == 1) return false\n           \
    \             if (i + j + k + l == n) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppciipw83.scala:29)\n\tat Problem.main(tmppciipw83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n\
    \        for (a <- 2 to sqrt) {\n            val b = n - a\n            val sqrtB\
    \ = sqrt(b).toLong\n            for (c <- 2 to sqrtB) {\n                val d\
    \ = b - c\n                if (d > 0 && d % 2 == 0) return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7gjols0k.scala:10:19 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        for (a <- 2 to n.toInt\
    \ / 4) {\n            for (b <- a to n.toInt / 3) {\n                for (c <-\
    \ b to n.toInt / 2) {\n                    val d = n - a - b - c\n           \
    \         if (d >= c && d % 2 == 0) return true\n                }\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07n7i3op.scala:25)\n\tat Problem.main(tmp07n7i3op.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val a = m / 2\n        val b = m - a\n        val c = a / 2\n        val\
    \ d = a - c\n        val e = b / 2\n        val f = b - e\n        val g = c /\
    \ 2\n        val h = c - g\n        val i = d / 2\n        val j = d - i\n   \
    \     val k = e / 2\n        val l = e - k\n        val o = f / 2\n        val\
    \ p = f - o\n        val q = g / 2\n        val r = g - q\n        val s = h /\
    \ 2\n        val t = h - s\n        val u = i / 2\n        val v = i - u\n   \
    \     val w = j / 2\n        val x = j - w\n        val y = k / 2\n        val\
    \ z = k - y\n        val A = l / 2\n        val B = l - A\n        val C = o /\
    \ 2\n        val D = o - C\n        val E = p / 2\n        val F = p - E\n   \
    \     val G = q / 2\n        val H = q - G\n        val I = r / 2\n        val\
    \ J = r - I\n        val K = s / 2\n        val L = s - K\n        val M = t /\
    \ 2\n        val N = t - M\n        val O = u / 2\n        val P = u - O\n   \
    \     val Q = v / 2\n        val R = v - Q\n        val S = w / 2\n        val\
    \ T = w - S\n        val U = x / 2\n        val V = x - U\n        val W = y /\
    \ 2\n        val X = y - W\n        val Y = z / 2\n        val Z = z - Y\n   \
    \     val AA = A / 2\n        val BB = A - AA\n        val CC = B / 2\n      \
    \  val DD = B - CC\n        val EE = C / 2\n        val FF = C - EE\n        val\
    \ GG = D / 2\n        val HH = D - GG\n        val II = E / 2\n        val JJ\
    \ = E - II\n        val KK = F / 2\n        val LL = F - KK\n        val MM =\
    \ G\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppumuvd4x.scala:74:5\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val max = (sqrt(1 + 8 * m) - 1) / 2\n\
    \        var i = 1\n        while (i <= max) {\n            val j = m - i * i\n\
    \            if (j % 2 == 0) {\n                val k = j / 2\n              \
    \  val l = sqrt(k).toLong\n                if (l * l == k) return true\n     \
    \       }\n            i += 1\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_a586cvm.scala:27)\n\tat Problem.main(tmp_a586cvm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            for (j\
    \ <- 1 to m) {\n                for (k <- 1 to m) {\n                    for (l\
    \ <- 1 to m) {\n                        if (i + j + k + l == m) return true\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl_nsljn0.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpl_nsljn0.scala:13:27 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mfor\e[0m (j <- \e[31m1\e[0m to m) {\n\e[31m\e[31m  \
    \ |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                   \
    \        Found:    (m : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl_nsljn0.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mfor\e[0m\
    \ (k <- \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                          \
    \     ^\e[0m\n\e[31m   |\e[0m                               Found:    (m : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl_nsljn0.scala:15:35 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m1\e[0m\
    \ to m) {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e\
    [31m   |\e[0m                                   Found:    (m : Long)\n\e[31m \
    \  |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val limit = n / 2\n        for (i <- 2 to limit by 2) {\n   \
    \         val remain = n - i\n            if (remain % 2 == 0) {\n           \
    \     val limit2 = remain / 2\n                for (j <- 2 to limit2 by 2) {\n\
    \                    val remain2 = remain - j\n                    if (remain2\
    \ % 2 == 0) {\n                        val limit3 = remain2 / 2\n            \
    \            for (k <- 2 to limit3 by 2) {\n                            val remain3\
    \ = remain2 - k\n                            if (remain3 % 2 == 0) {\n       \
    \                         val limit4 = remain3 / 2\n                         \
    \       for (l <- 2 to limit4 by 2) {\n                                    val\
    \ remain4 = remain3 - l\n                                    if (remain4 % 2 ==\
    \ 0) {\n                                        return true\n                \
    \                    }\n                                }\n                  \
    \          }\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm_fe0z3n.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm_fe0z3n.scala:16:31 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mfor\e[0m (j <- \e[31m2\e[0m to\
    \ limit2 by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (limit2\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm_fe0z3n.scala:20:39 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                        \e[33mfor\e[0m (k <- \e[31m2\e\
    [0m to limit3 by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Found:    (limit3 : Long)\n\e[31m   |\e[0m                          \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpm_fe0z3n.scala:24:47 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                                \e[33mfor\e[0m (l <- \e[31m2\e[0m to limit4\
    \ by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                  \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \            Found:    (limit4 : Long)\n\e[31m   |\e[0m                      \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 2 to max.toInt by 2) {\n            for (j <- 2 to max.toInt\
    \ by 2) {\n                for (k <- 2 to max.toInt by 2) {\n                \
    \    for (l <- 2 to max.toInt by 2) {\n                        if (i + j + k +\
    \ l == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lb4xetx.scala:26)\n\tat Problem.main(tmp6lb4xetx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (a <- 2 to n / 4) {\n            for (b <- a to n / 3) {\n\
    \                for (c <- b to n / 2) {\n                    for (d <- c to n)\
    \ {\n                        if (a + b + c + d == n) return true\n           \
    \         }\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbq9i_41c.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to n / \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbq9i_41c.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- a to n / \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbq9i_41c.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (c <- b to n / \e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbq9i_41c.scala:14:35 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                    \e[33mfor\e[0m (d <- c to n) {\n\e[31m\e[31m   |\e\
    [0m                                   ^\e[0m\n\e[31m   |\e[0m                \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            val j = m - i\n            if (i % 2 ==\
    \ 0 && j % 2 == 0) return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8h3437tb.scala:18)\n\tat Problem.main(tmp8h3437tb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val sqrtm = sqrt(m).toLong\n        for\
    \ (i <- 2 to sqrtm) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9tzimebo.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to sqrtm) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (sqrtm : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val a = m / 2\n        val b = m - a\n        val c = a - b\n        val\
    \ d = b - c\n        (a + b + c + d) == n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpugnda35v.scala:20)\n\tat Problem.main(tmpugnda35v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        var result = false\n        for (a <- 2 to limit by 2) {\n          \
    \  for (b <- a to limit by 2) {\n                for (c <- b to limit by 2) {\n\
    \                    for (d <- c to limit by 2) {\n                        if\
    \ (a + b + c + d == n) {\n                            result = true\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjndb6_0b.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjndb6_0b.scala:13:27 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m (b <- a to limit by \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (limit : Long)\n\e[31m   |\e[0m      \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjndb6_0b.scala:14:31 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                \e[33mfor\e[0m (c <- b to limit by \e[31m2\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    (limit : Long)\n\e[31m   |\e[0m    \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjndb6_0b.scala:15:35 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m                    \e[33mfor\e[0m (d <- c to limit by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                   ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (limit : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        var i = 2\n        while (i <= n / 4) {\n            var j =\
    \ i\n            while (j <= n / 3) {\n                var k = j\n           \
    \     while (k <= n / 2) {\n                    var l = k\n                  \
    \  while (l <= n) {\n                        if (i + j + k + l == n) return true\n\
    \                        l += 2\n                    }\n                    k\
    \ += 2\n                }\n                j += 2\n            }\n           \
    \ i += 2\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val m2 = m * m\n        val m3 = m2 * m\n        val m4 = m3 * m\n     \
    \   val m5 = m4 * m\n        val m6 = m5 * m\n        val m7 = m6 * m\n      \
    \  val m8 = m7 * m\n        val m9 = m8 * m\n        val m10 = m9 * m\n      \
    \  val m11 = m10 * m\n        val m12 = m11 * m\n        val m13 = m12 * m\n \
    \       val m14 = m13 * m\n        val m15 = m14 * m\n        val m16 = m15 *\
    \ m\n        val m17 = m16 * m\n        val m18 = m17 * m\n        val m19 = m18\
    \ * m\n        val m20 = m19 * m\n        val m21 = m20 * m\n        val m22 =\
    \ m21 * m\n        val m23 = m22 * m\n        val m24 = m23 * m\n        val m25\
    \ = m24 * m\n        val m26 = m25 * m\n        val m27 = m26 * m\n        val\
    \ m28 = m27 * m\n        val m29 = m28 * m\n        val m30 = m29 * m\n      \
    \  val m31 = m30 * m\n        val m32 = m31 * m\n        val m33 = m32 * m\n \
    \       val m34 = m33 * m\n        val m35 = m34 * m\n        val m36 = m35 *\
    \ m\n        val m37 = m36 * m\n        val m38 = m37 * m\n        val m39 = m38\
    \ * m\n        val m40 = m39 * m\n        val m41 = m40 * m\n        val m42 =\
    \ m41 * m\n        val m43 = m42 * m\n        val m44 = m43 * m\n        val m45\
    \ = m44 * m\n        val m46 = m45 * m\n        val m47 = m46 * m\n        val\
    \ m48 = m47 * m\n        val m49 = m48 * m\n        val m50 = m49 * m\n      \
    \  val m51 = m50 * m\n        val m52\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbq1mwmbo.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbq1mwmbo.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val limit = sqrt(m).toLong\n        for\
    \ (i <- 2 to limit) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0fx_ana.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (a <- 1 to m) {\n            for (b\
    \ <- 1 to m) {\n                for (c <- 1 to m) {\n                    for (d\
    \ <- 1 to m) {\n                        if (a + b + c + d == m) return true\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnx8mq0zv.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnx8mq0zv.scala:13:27 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mfor\e[0m (b <- \e[31m1\e[0m to m) {\n\e[31m\e[31m  \
    \ |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                   \
    \        Found:    (m : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnx8mq0zv.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mfor\e[0m\
    \ (c <- \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                          \
    \     ^\e[0m\n\e[31m   |\e[0m                               Found:    (m : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnx8mq0zv.scala:15:35 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mfor\e[0m (d <- \e[31m1\e[0m\
    \ to m) {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e\
    [31m   |\e[0m                                   Found:    (m : Long)\n\e[31m \
    \  |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            val j = m - i\n            if (i % 2 ==\
    \ 0 && j % 2 == 0) return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8h3437tb.scala:18)\n\tat Problem.main(tmp8h3437tb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        // Write your code\
    \ here\n        if (n % 2 != 0) return false\n        for (i <- 1 to n / 2) {\n\
    \            if (isEqualToSumEven(n - i, i)) return true\n        }\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv40noqe6.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpv40noqe6.scala:13:33 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val sqrt = sqrt(m).toLong\n        for\
    \ (i <- 2 to sqrt) {\n            if (m % i == 0) {\n                val j = m\
    \ / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8grq49qa.scala:12:19 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(m).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        var i = 2\n        while (i <= m) {\n\
    \            val j = m - i\n            if (j % 2 == 0) return true\n        \
    \    i += 2\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwlu88a4c.scala:21)\n\tat Problem.main(tmpwlu88a4c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val max = (m - 1) / 2\n        for (i <- 1 to max) {\n            val a\
    \ = i * 2\n            val b = (m - i) * 2\n            if (isEqualToSumEven(n,\
    \ a, b)) return true\n        }\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0528_0vq.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to max) {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (max : Long)\n\e[31m   |\e[0m\
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0528_0vq.scala:15:33 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n, a, b)) \e[33mreturn\e\
    [0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (Long, Int, Long)\n\
    \e[31m   |\e[0m                                 Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val dp = Array.fill(n.toInt\
    \ + 1)(false)\n        dp(0) = true\n        for (i <- 2 to n.toInt by 2) {\n\
    \            for (j <- i to n.toInt) {\n                dp(j) = dp(j) || dp(j\
    \ - i)\n            }\n        }\n        dp(n.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsbf2opdr.scala:20)\n\tat Problem.main(tmpsbf2opdr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val max = (m - 1) / 2\n        for (i <- 1 to max) {\n            val j\
    \ = m - i\n            val k = j - i\n            if (k > 0 && k % 2 == 0) return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeu_lpde8.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to max) {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (max : Long)\n\e[31m   |\e[0m\
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jhv9t1z.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5jhv9t1z.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1L to n / 2) {\n            if (isEqualToSumEven(n\
    \ - i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn7r1pi2a.scala:12:33\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n\
    \ - i, i)) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Found:    (Long, Long)\n\e[31m   |\e[0m                           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1 to m.toInt) {\n            for (j <- 1 to m.toInt) {\n     \
    \           for (k <- 1 to m.toInt) {\n                    for (l <- 1 to m.toInt)\
    \ {\n                        if (i + j + k + l == m) return true\n           \
    \         }\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg7prjuut.scala:27)\n\tat Problem.main(tmpg7prjuut.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var sum = 0L\n    \
    \    for (i <- 2 to n by 2) {\n            sum += i\n            if (sum == n)\
    \ return true\n        }\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4pp1591h.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                \
    \       ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\e\
    [31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 0 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ 2 * i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjjni0s4r.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjjni0s4r.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - \e[31m2\e\
    [0m * i, i)) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e\
    [0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                     \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val limit = sqrt(m).toLong\n        for (a <- 2 to limit) {\n          \
    \  val b = m / a\n            if (a * b == m && (a + b) % 2 == 0) return true\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0gupkf_m.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jhv9t1z.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5jhv9t1z.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val max = (m - 1) / 2\n        for (i <- 1 to max) {\n            val j\
    \ = m - i\n            val k = j - i\n            if (k > 0 && k % 2 == 0) return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeu_lpde8.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to max) {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (max : Long)\n\e[31m   |\e[0m\
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val sqrtm = sqrt(m).toLong\n        for\
    \ (i <- 2 to sqrtm) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9tzimebo.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to sqrtm) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (sqrtm : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2 by 2) {\n            for (j <- 2 to n /\
    \ 2 by 2) {\n                for (k <- 2 to n / 2 by 2) {\n                  \
    \  for (l <- 2 to n / 2 by 2) {\n                        if (i + j + k + l ==\
    \ n) return true\n                    }\n                }\n            }\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to n /\
    \ \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Long\n\e\
    [31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to\
    \ n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    Long\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    Long\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val sqrt = sqrt(n.toDouble).toLong\n\
    \        for (a <- 2 to sqrt by 2) {\n            val b = sqrt - a\n         \
    \   if (b % 2 == 0) {\n                val c = n - a - b\n                if (c\
    \ % 2 == 0) {\n                    val d = c - b\n                    if (d %\
    \ 2 == 0) {\n                        return true\n                    }\n    \
    \            }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg1j9sm8f.scala:10:19 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n.toDouble).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (a <- 2 to n / 4) {\n            for (b <- a to n / 3) {\n\
    \                for (c <- b to n / 2) {\n                    val d = n - a -\
    \ b - c\n                    if (d >= c && d % 2 == 0) return true\n         \
    \       }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvidjs0w9.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to n / \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvidjs0w9.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- a to n / \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvidjs0w9.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (c <- b to n / \e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (a <- 1 to m) {\n            for (b\
    \ <- 1 to m) {\n                for (c <- 1 to m) {\n                    for (d\
    \ <- 1 to m) {\n                        if (a + b + c + d == m) return true\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnx8mq0zv.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnx8mq0zv.scala:13:27 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mfor\e[0m (b <- \e[31m1\e[0m to m) {\n\e[31m\e[31m  \
    \ |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                   \
    \        Found:    (m : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnx8mq0zv.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mfor\e[0m\
    \ (c <- \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                          \
    \     ^\e[0m\n\e[31m   |\e[0m                               Found:    (m : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnx8mq0zv.scala:15:35 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mfor\e[0m (d <- \e[31m1\e[0m\
    \ to m) {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e\
    [31m   |\e[0m                                   Found:    (m : Long)\n\e[31m \
    \  |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val limit = sqrt(m).toLong\n        for\
    \ (i <- 2 to limit) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0fx_ana.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 2 to max.toInt by 2) {\n            for (j <- 2 to max.toInt\
    \ by 2) {\n                for (k <- 2 to max.toInt by 2) {\n                \
    \    for (l <- 2 to max.toInt by 2) {\n                        if (i + j + k +\
    \ l == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lb4xetx.scala:26)\n\tat Problem.main(tmp6lb4xetx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 2 to max.toInt by 2) {\n            for (j <- 2 to max.toInt\
    \ by 2) {\n                for (k <- 2 to max.toInt by 2) {\n                \
    \    for (l <- 2 to max.toInt by 2) {\n                        if (i + j + k +\
    \ l == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lb4xetx.scala:26)\n\tat Problem.main(tmp6lb4xetx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val sqrt = sqrt(m).toLong\n        for (i <- 2 to sqrt) {\n            val\
    \ j = m / i\n            if (i * j == m && isEqualToSumEven(i, j)) return true\n\
    \        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2z2wmnf9.scala:11:19 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(m).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2z2wmnf9.scala:14:47 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (i * j == m && isEqualToSumEven(i,\
    \ j)) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                                ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                             Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mInt\e[0m\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m       \
    \                                        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1L to n / 2) {\n            if (isEqualToSumEven(n\
    \ - i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn7r1pi2a.scala:12:33\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n\
    \ - i, i)) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Found:    (Long, Long)\n\e[31m   |\e[0m                           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 2 to n.toInt / 2) {\n            for (j <- 2 to n.toInt / 2)\
    \ {\n                for (k <- 2 to n.toInt / 2) {\n                    for (l\
    \ <- 2 to n.toInt / 2) {\n                        if (i + j + k + l == n) result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4yor93ix.scala:27)\n\tat Problem.main(tmp4yor93ix.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 2 to max.toInt by 2) {\n            for (j <- 2 to max.toInt\
    \ by 2) {\n                for (k <- 2 to max.toInt by 2) {\n                \
    \    for (l <- 2 to max.toInt by 2) {\n                        if (i + j + k +\
    \ l == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lb4xetx.scala:26)\n\tat Problem.main(tmp6lb4xetx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val limit = sqrt(m).toLong\n        for\
    \ (i <- 2 to limit) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0fx_ana.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = (n / 4)\
    \ + 1\n        for (i <- 2 to limit) {\n            for (j <- 2 to limit) {\n\
    \                for (k <- 2 to limit) {\n                    for (l <- 2 to limit)\
    \ {\n                        if (i + j + k + l == n) return true\n           \
    \         }\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4i0gx2sa.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4i0gx2sa.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to limit)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (limit : Long)\n\e[31m   |\e[0m      \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4i0gx2sa.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to limit) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    (limit : Long)\n\e[31m   |\e[0m          \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4i0gx2sa.scala:14:35 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m to limit) {\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    (limit : Long)\n\e[31m   |\e[0m\
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val s = (1 to m).map(i => (i, m - i)).filter(p => p._1 % 2 == 0 && p._2\
    \ % 2 == 0)\n        s.length > 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp25czg0j.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ms\e\
    [0m = (\e[31m1\e[0m to m).map(\e[36mi\e[0m => (i, m - i)).filter(\e[36mp\e[0m\
    \ => p._1 % \e[31m2\e[0m == \e[31m0\e[0m && p._2 % \e[31m2\e[0m == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    (m : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 0 to n / 2) {\n            for (j <- 0 to n / 2) {\n\
    \                for (k <- 0 to n / 2) {\n                    for (l <- 0 to n\
    \ / 2) {\n                        if (i + j + k + l == n) return true\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpezty_7n3.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpezty_7n3.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to n /\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpezty_7n3.scala:13:31 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m0\e[0m to n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpezty_7n3.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m0\e[0m\
    \ to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Long\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 0 to n / 2) {\n            for (j <- 0 to n / 2) {\n      \
    \          for (k <- 0 to n / 2) {\n                    for (l <- 0 to n / 2)\
    \ {\n                        if (i + j + k + l == n) result = true\n         \
    \           }\n                }\n            }\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbs39gpkt.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbs39gpkt.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to n /\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbs39gpkt.scala:13:31 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m0\e[0m to n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbs39gpkt.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m0\e[0m\
    \ to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Long\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 2 to max.toInt by 2) {\n            for (j <- 2 to max.toInt\
    \ by 2) {\n                for (k <- 2 to max.toInt by 2) {\n                \
    \    for (l <- 2 to max.toInt by 2) {\n                        if (i + j + k +\
    \ l == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lb4xetx.scala:26)\n\tat Problem.main(tmp6lb4xetx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val limit = sqrt(m).toLong\n        for\
    \ (i <- 2 to limit) {\n            if (m % i == 0) {\n                val j =\
    \ m / i\n                if (i % 2 == 0 && j % 2 == 0) return true\n         \
    \   }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0fx_ana.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        for (a <- 2L to n /\
    \ 4) {\n            for (b <- a to n / 3) {\n                for (c <- b to n\
    \ / 2) {\n                    for (d <- c to n) {\n                        if\
    \ (a + b + c + d == n) return true\n                    }\n                }\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4dh5zuwq.scala:26)\n\tat Problem.main(tmp4dh5zuwq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (a <- 2 to limit by 2) {\n            for (b <- 2 to limit by 2)\
    \ {\n                for (c <- 2 to limit by 2) {\n                    for (d\
    \ <- 2 to limit by 2) {\n                        if (a + b + c + d == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q6uo619.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q6uo619.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- \e[31m2\e[0m to limit\
    \ by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (limit : Long)\n\e[31m\
    \   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0q6uo619.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (c <- \e[31m2\e[0m to\
    \ limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q6uo619.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (d <- \e[31m2\e[0m\
    \ to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (limit : Long)\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val max = m / 2\n        for (i <- 2 to max) {\n            for (j <- 2\
    \ to max) {\n                for (k <- 2 to max) {\n                    for (l\
    \ <- 2 to max) {\n                        if (i + j + k + l == m) return true\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcszrhgu_.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to max) {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (max : Long)\n\e[31m   |\e[0m\
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcszrhgu_.scala:13:27 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to max) {\n\e\
    [31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (max : Long)\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcszrhgu_.scala:14:31 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to max) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m        \
    \                       Found:    (max : Long)\n\e[31m   |\e[0m              \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcszrhgu_.scala:15:35 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m to max) {\n\e[31m\e\
    [31m   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m    \
    \                               Found:    (max : Long)\n\e[31m   |\e[0m      \
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (a <- 2 to n / 4) {\n            for (b <- a to n / 3) {\n\
    \                for (c <- b to n / 2) {\n                    val d = n - a -\
    \ b - c\n                    if (d >= c && d % 2 == 0) return true\n         \
    \       }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvidjs0w9.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to n / \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvidjs0w9.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- a to n / \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvidjs0w9.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (c <- b to n / \e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        val s = (1 to m).toSet\n        for (i\
    \ <- 1 to m) {\n            for (j <- 1 to m) {\n                for (k <- 1 to\
    \ m) {\n                    if (s.contains(i) && s.contains(j) && s.contains(k)\
    \ && s.contains(m - i - j - k)) return true\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklrjh035.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ms\e\
    [0m = (\e[31m1\e[0m to m).toSet\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (m : Long)\n\e[31m   |\e[0m\
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpklrjh035.scala:13:23 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to m) {\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    (m : Long)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklrjh035.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (m : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpklrjh035.scala:15:31 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mfor\e[0m (k <- \e[31m1\e[0m to\
    \ m) {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               Found:    (m : Long)\n\e[31m   |\e[0m      \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpklrjh035.scala:16:86 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                    \e[33mif\e[0m (s.contains(i) && s.contains(j)\
    \ && s.contains(k) && s.contains(m - i - j - k)) \e[33mreturn\e[0m \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659799696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2 by 2) {\n            for (j <- 2 to n /\
    \ 2 by 2) {\n                for (k <- 2 to n / 2 by 2) {\n                  \
    \  for (l <- 2 to n / 2 by 2) {\n                        if (i + j + k + l ==\
    \ n) return true\n                    }\n                }\n            }\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to n /\
    \ \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Long\n\e\
    [31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to\
    \ n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    Long\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    Long\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val s = (1 to m).map(x => (x, m - x)).filter(x => x._1 % 2 == 0 && x._2\
    \ % 2 == 0)\n        s.length > 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaz3te361.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ms\e\
    [0m = (\e[31m1\e[0m to m).map(\e[36mx\e[0m => (x, m - x)).filter(\e[36mx\e[0m\
    \ => x._1 % \e[31m2\e[0m == \e[31m0\e[0m && x._2 % \e[31m2\e[0m == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    (m : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val sqrt = sqrt(m).toLong\n        for (i <- 2 to sqrt) {\n            val\
    \ j = m / i\n            if (i * j == m && (i + j) % 2 == 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg3q6zbdl.scala:11:19 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(m).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val limit = sqrt(m).toLong\n        for (i <- 2L to limit) {\n         \
    \   if (m % i == 0) {\n                val j = m / i\n                if (i %\
    \ 2 == 0 && j % 2 == 0) return true\n            }\n        }\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpue78ktji.scala:24)\n\tat Problem.main(tmpue78ktji.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val limit = n / 2\n        for (i <- 2 to limit) {\n        \
    \    if (isEqualToSumEven(n - i, i)) return true\n        }\n        false\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnllph98x.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnllph98x.scala:13:33 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit by 2) {\n            for (j <- i to limit by 2)\
    \ {\n                for (k <- j to limit by 2) {\n                    for (l\
    \ <- k to limit by 2) {\n                        if (i + j + k + l == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- i to limit by \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (limit : Long)\n\e[31m   |\e[0m      \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp8ar7a60.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (k <- j to limit by \e[31m2\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    (limit : Long)\n\e[31m   |\e[0m    \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp8ar7a60.scala:14:35 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- k to limit by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                   ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (limit : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val limit = n / 2\n        for (i <- 2 to limit) {\n        \
    \    if (i % 2 == 1) return false\n            for (j <- i + 2 to limit) {\n \
    \               if (j % 2 == 1) return false\n                for (k <- j + 2\
    \ to limit) {\n                    if (k % 2 == 1) return false\n            \
    \        for (l <- k + 2 to limit) {\n                        if (l % 2 == 1)\
    \ return false\n                        if (i + j + k + l == n) return true\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu0e490e2.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (limit : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpu0e490e2.scala:14:31 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m (j <- i + \e[31m2\e[0m to\
    \ limit) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e\
    [31m   |\e[0m                               Found:    (limit : Long)\n\e[31m \
    \  |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpu0e490e2.scala:16:35 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mfor\e[0m (k <- j + \e[31m2\e[0m\
    \ to limit) {\n\e[31m\e[31m   |\e[0m                                   ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (limit : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu0e490e2.scala:18:39 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    \e[33mfor\e[0m (l <- k + \e[31m2\e\
    [0m to limit) {\n\e[31m\e[31m   |\e[0m                                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    (limit :\
    \ Long)\n\e[31m   |\e[0m                                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 1 to max.toInt) {\n            val a = i * 2\n            for\
    \ (j <- 1 to max.toInt) {\n                val b = j * 2\n                for\
    \ (k <- 1 to max.toInt) {\n                    val c = k * 2\n               \
    \     for (l <- 1 to max.toInt) {\n                        val d = l * 2\n   \
    \                     if (a + b + c + d == n) return true\n                  \
    \  }\n                }\n            }\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val a = m / 2\n        val b = m - a\n        val c = b / 2\n        val\
    \ d = b - c\n        val e = d / 2\n        val f = d - e\n        val g = f /\
    \ 2\n        val h = f - g\n        val i = h / 2\n        val j = h - i\n   \
    \     val k = j / 2\n        val l = j - k\n        val o = l / 2\n        val\
    \ p = l - o\n        val q = p / 2\n        val r = p - q\n        val s = r /\
    \ 2\n        val t = r - s\n        val u = t / 2\n        val v = t - u\n   \
    \     val w = v / 2\n        val x = v - w\n        val y = x / 2\n        val\
    \ z = x - y\n        val aa = z / 2\n        val bb = z - aa\n        val cc =\
    \ bb / 2\n        val dd = bb - cc\n        val ee = dd / 2\n        val ff =\
    \ dd - ee\n        val gg = ff / 2\n        val hh = ff - gg\n        val ii =\
    \ hh / 2\n        val jj = hh - ii\n        val kk = jj / 2\n        val ll =\
    \ jj - kk\n        val mm = ll / 2\n        val nn = ll - mm\n        val oo =\
    \ nn / 2\n        val pp = nn - oo\n        val qq = pp / 2\n        val rr =\
    \ pp - qq\n        val ss = rr / 2\n        val tt = rr - ss\n        val uu =\
    \ tt / 2\n        val vv = tt - uu\n        val ww = vv / 2\n        val xx =\
    \ vv - ww\n        val yy = xx / 2\n        val zz = xx - yy\n        val aaa\
    \ = zz / 2\n        val bbb = zz - aaa\n        val ccc = bbb / 2\n        val\
    \ ddd = bbb - ccc\n        val eee = ddd / 2\n        val fff = ddd - eee\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbg821apa.scala:68:5\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val s = (1 to m).map(x => (x, m - x)).filter(x => x._1 % 2 == 0 && x._2\
    \ % 2 == 0)\n        s.exists(x => x._1 + x._2 == n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp35mxiz2.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ms\e\
    [0m = (\e[31m1\e[0m to m).map(\e[36mx\e[0m => (x, m - x)).filter(\e[36mx\e[0m\
    \ => x._1 % \e[31m2\e[0m == \e[31m0\e[0m && x._2 % \e[31m2\e[0m == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    (m : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2 by 2) {\n            for (j <- 2 to n /\
    \ 2 by 2) {\n                for (k <- 2 to n / 2 by 2) {\n                  \
    \  for (l <- 2 to n / 2 by 2) {\n                        if (i + j + k + l ==\
    \ n) return true\n                    }\n                }\n            }\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to n /\
    \ \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Long\n\e\
    [31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to\
    \ n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    Long\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx3ul5w.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    Long\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 2 to max.toInt by 2) {\n            for (j <- 2 to max.toInt\
    \ by 2) {\n                for (k <- 2 to max.toInt by 2) {\n                \
    \    for (l <- 2 to max.toInt by 2) {\n                        if (i + j + k +\
    \ l == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lb4xetx.scala:26)\n\tat Problem.main(tmp6lb4xetx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val n2 = n / 2\n  \
    \      val n2Sqrt = sqrt(n2).toLong\n        for (i <- 2 to n2Sqrt) {\n      \
    \      if (n2 % i == 0) {\n                val j = n2 / i\n                if\
    \ (i % 2 == 0 && j % 2 == 0) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbb40nlp4.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n2Sqrt) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (n2Sqrt : Long)\n\e[31m \
    \  |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            for\
    \ (j <- 1L to m) {\n                for (k <- 1L to m) {\n                   \
    \ for (l <- 1L to m) {\n                        if (i + j + k + l == m) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (a <- 2 to n / 4) {\n            for (b <- a to n / 3) {\n\
    \                for (c <- b to n / 2) {\n                    for (d <- c to n\
    \ - 1) {\n                        if (a + b + c + d == n) return true\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpra3xt18o.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to n / \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpra3xt18o.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- a to n / \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpra3xt18o.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (c <- b to n / \e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpra3xt18o.scala:14:35 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                    \e[33mfor\e[0m (d <- c to n - \e[31m1\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    Long\n\e[31m   |\e[0m        \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val a = m / 2\n        val b = m - a\n        val c = m - b\n        val\
    \ d = m - c\n        if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0)\
    \ {\n            if (a + b + c + d == n) return true\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj8lzu6m_.scala:24)\n\tat Problem.main(tmpj8lzu6m_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 0 to n / 2) {\n            for (j <- 0 to n / 2) {\n\
    \                for (k <- 0 to n / 2) {\n                    for (l <- 0 to n\
    \ / 2) {\n                        if (i + j + k + l == n) return true\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpezty_7n3.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpezty_7n3.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to n /\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpezty_7n3.scala:13:31 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m0\e[0m to n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpezty_7n3.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m0\e[0m\
    \ to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Long\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 2 to max.toInt by 2) {\n            for (j <- 2 to max.toInt\
    \ by 2) {\n                for (k <- 2 to max.toInt by 2) {\n                \
    \    for (l <- 2 to max.toInt by 2) {\n                        if (i + j + k +\
    \ l == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lb4xetx.scala:26)\n\tat Problem.main(tmp6lb4xetx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1L to n / 2) {\n            if (isEqualToSumEven(n\
    \ - i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn7r1pi2a.scala:12:33\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n\
    \ - i, i)) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Found:    (Long, Long)\n\e[31m   |\e[0m                           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2 by 2) {\n            val j = n - i\n   \
    \         if (j % 2 == 0) return true\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphbuoe76r.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 2 to n / 2) {\n            for (j <- 2 to n / 2) {\n      \
    \          for (k <- 2 to n / 2) {\n                    for (l <- 2 to n / 2)\
    \ {\n                        if (i + j + k + l == n) {\n                     \
    \       result = true\n                        }\n                    }\n    \
    \            }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbfh4022p.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbfh4022p.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to n /\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbfh4022p.scala:13:31 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbfh4022p.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Long\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 2 to sqrt) {\n            val j = n - i\n            if (j\
    \ % 2 == 0) {\n                val k = j / 2\n                if (k % 2 == 0)\
    \ {\n                    val l = k / 2\n                    if (l % 2 == 0) {\n\
    \                        val m = l / 2\n                        if (m % 2 == 0)\
    \ {\n                            return true\n                        }\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1na4nx4n.scala:10:19 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 2 to n / 2) {\n            for (j <- i to n / 2) {\n      \
    \          for (k <- j to n / 2) {\n                    for (l <- k to n / 2)\
    \ {\n                        if (i + j + k + l == n) {\n                     \
    \       result = true\n                        }\n                    }\n    \
    \            }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbgy5z36q.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbgy5z36q.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- i to n / \e[31m2\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbgy5z36q.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (k <- j to n / \e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbgy5z36q.scala:14:35 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                    \e[33mfor\e[0m (l <- k to n / \e[31m2\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    Long\n\e[31m   |\e[0m        \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1 to n/2) {\n            if (isEqualToSumEven(n - i,\
    \ i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbwflra0_.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n/\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbwflra0_.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val max = n / 4\n \
    \       for (i <- 2 to max.toInt by 2) {\n            for (j <- 2 to max.toInt\
    \ by 2) {\n                for (k <- 2 to max.toInt by 2) {\n                \
    \    for (l <- 2 to max.toInt by 2) {\n                        if (i + j + k +\
    \ l == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lb4xetx.scala:26)\n\tat Problem.main(tmp6lb4xetx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (i <- 2 to n / 2) {\n            for (j <- 2 to n / 2) {\n      \
    \          for (k <- 2 to n / 2) {\n                    for (l <- 2 to n / 2)\
    \ {\n                        if (i + j + k + l == n) {\n                     \
    \       result = true\n                        }\n                    }\n    \
    \            }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbfh4022p.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbfh4022p.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2\e[0m to n /\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbfh4022p.scala:13:31 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- \e[31m2\e[0m to n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbfh4022p.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- \e[31m2\e[0m\
    \ to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Long\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var result = false\n\
    \        for (a <- 0 to n / 2) {\n            for (b <- 0 to n / 2) {\n      \
    \          for (c <- 0 to n / 2) {\n                    for (d <- 0 to n / 2)\
    \ {\n                        if (a + b + c + d == n) {\n                     \
    \       if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0) {\n        \
    \                        result = true\n                            }\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplsiaeu15.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m0\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplsiaeu15.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- \e[31m0\e[0m to n /\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplsiaeu15.scala:13:31 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (c <- \e[31m0\e[0m to n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m\
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplsiaeu15.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (d <- \e[31m0\e[0m\
    \ to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ Long\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1 to m.toInt) {\n            for (j <- 1 to m.toInt) {\n     \
    \           for (k <- 1 to m.toInt) {\n                    for (l <- 1 to m.toInt)\
    \ {\n                        if (i + j + k + l == m) return true\n           \
    \         }\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg7prjuut.scala:27)\n\tat Problem.main(tmpg7prjuut.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val limit = n / 4\n\
    \        for (i <- 2 to limit by 2) {\n            for (j <- i to limit by 2)\
    \ {\n                for (k <- j to limit by 2) {\n                    for (l\
    \ <- k to limit by 2) {\n                        if (i + j + k + l == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ar7a60.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- i to limit by \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (limit : Long)\n\e[31m   |\e[0m      \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp8ar7a60.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (k <- j to limit by \e[31m2\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    (limit : Long)\n\e[31m   |\e[0m    \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp8ar7a60.scala:14:35 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- k to limit by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                   ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (limit : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (a <- 2 to n / 4) {\n            for (b <- a to n / 3) {\n\
    \                for (c <- b to n / 2) {\n                    val d = n - a -\
    \ b - c\n                    if (d >= c && a + b + c + d == n) return true\n \
    \               }\n            }\n        }\n        return false\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk63_mrg7.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to n / \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk63_mrg7.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- a to n / \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk63_mrg7.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (c <- b to n / \e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val limit = n / 2\n        for (a <- 2 to limit by 2) {\n   \
    \         for (b <- 2 to limit by 2) {\n                for (c <- 2 to limit by\
    \ 2) {\n                    for (d <- 2 to limit by 2) {\n                   \
    \     if (a + b + c + d == n) return true\n                    }\n           \
    \     }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp25ds5bt3.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp25ds5bt3.scala:13:27 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m (b <- \e[31m2\e[0m to limit\
    \ by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (limit : Long)\n\e[31m\
    \   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp25ds5bt3.scala:14:31 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mfor\e[0m (c <- \e[31m2\e[0m to\
    \ limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp25ds5bt3.scala:15:35 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mfor\e[0m (d <- \e[31m2\e[0m\
    \ to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (limit : Long)\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (a <- 0 to n / 2 by 2) {\n            for (b <- 0 to n /\
    \ 2 by 2) {\n                for (c <- 0 to n / 2 by 2) {\n                  \
    \  for (d <- 0 to n / 2 by 2) {\n                        if (a + b + c + d ==\
    \ n) return true\n                    }\n                }\n            }\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxs0bn14m.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m0\e[0m to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxs0bn14m.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- \e[31m0\e[0m to n /\
    \ \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Long\n\e\
    [31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxs0bn14m.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (c <- \e[31m0\e[0m to\
    \ n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    Long\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxs0bn14m.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (d <- \e[31m0\e[0m\
    \ to n / \e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    Long\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     val s = (1 to m).toSet\n        val t = s.subsets.filter(x => x.sum == m\
    \ && x.size == 4).toList\n        t.size > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ha7ivm5.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ms\e\
    [0m = (\e[31m1\e[0m to m).toSet\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (m : Long)\n\e[31m   |\e[0m\
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        def isEqualToSumEvenHelper(n\
    \ : Long, count : Int, sum : Long) : Boolean = {\n            if (count == 4)\
    \ {\n                if (sum == n) true else false\n            } else {\n   \
    \             if (sum > n) false else isEqualToSumEvenHelper(n, count + 1, sum\
    \ + 2)\n            }\n        }\n        isEqualToSumEvenHelper(n, 0, 0)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr6vv4wh6.scala:23)\n\tat Problem.main(tmpr6vv4wh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1 to m.toInt) {\n            for (j <- 1 to m.toInt) {\n     \
    \           for (k <- 1 to m.toInt) {\n                    for (l <- 1 to m.toInt)\
    \ {\n                        if (i + j + k + l == m) return true\n           \
    \         }\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg7prjuut.scala:27)\n\tat Problem.main(tmpg7prjuut.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1 to m) {\n            val j\
    \ = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj9mpnx.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (m : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (a <- 2 to n / 4) {\n            for (b <- a to n / 3) {\n\
    \                for (c <- b to n / 2) {\n                    for (d <- c to n\
    \ - 1) {\n                        if (a + b + c + d == n) return true\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpra3xt18o.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m2\e[0m to n / \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpra3xt18o.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (b <- a to n / \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpra3xt18o.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mfor\e[0m (c <- b to n / \e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpra3xt18o.scala:14:35 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                    \e[33mfor\e[0m (d <- c to n - \e[31m1\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    Long\n\e[31m   |\e[0m        \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 0 to m.toInt) {\n            for (j <- 0 to m.toInt) {\n     \
    \           for (k <- 0 to m.toInt) {\n                    for (l <- 0 to m.toInt)\
    \ {\n                        if (i + j + k + l == m && i % 2 == 0 && j % 2 ==\
    \ 0 && k % 2 == 0 && l % 2 == 0) return true\n                    }\n        \
    \        }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcbmbt99p.scala:23)\n\tat Problem.main(tmpcbmbt99p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 2 to n / 2) {\n            if (isEqualToSumEven(n -\
    \ i, i)) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcf6vdvcs.scala:12:33 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (isEqualToSumEven(n - i, i))\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val m = n / 2\n        for (i <- 1L to m) {\n            val\
    \ j = m - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmukxuv4p.scala:19)\n\tat Problem.main(tmpmukxuv4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val m = n / 2\n   \
    \     for (i <- 1L to m) {\n            for (j <- 1L to m) {\n               \
    \ for (k <- 1L to m) {\n                    for (l <- 1L to m) {\n           \
    \             if (i + j + k + l == m) return true\n                    }\n   \
    \             }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5_eqwgy.scala:27)\n\tat Problem.main(tmpb5_eqwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799660
