name: HumanEval_67_fruit_distribution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this task, you will be given a string that represents a number of apples\
  \ and oranges \n    // that are distributed in a basket of fruit this basket contains\
  \ \n    // apples, oranges, and mango fruits. Given the string that represents the\
  \ total number of \n    // the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    // in the basket return the number of the\
  \ mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
  5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0 apples\
  \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples and\
  \ 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
  \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
  \ n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
  \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
  \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100\
  \ oranges\"), (120l)) == (19l));\n    }\n\n}\n"
completions: ["        // Write your code here\n        val a = s.split(\" \")\n \
    \       val x = a(0).toLong\n        val y = a(2).toLong\n        n - x - y",
  "        val a = s.split(\" \")\n        val apples = a(0).toLong\n        val oranges\
    \ = a(3).toLong\n        n - apples - oranges", "        // Write your code here\n\
    \        val a = s.split(\" \")\n        val apple = a(0).toLong\n        val\
    \ orange = a(3).toLong\n        n - apple - orange", "        val arr = s.split(\"\
    \ \")\n        val apples = arr(0).toLong\n        val oranges = arr(3).toLong\n\
    \        n - apples - oranges", "        // Write your code here\n        val\
    \ arr = s.split(\" \")\n        val apple = arr(0).toLong\n        val orange\
    \ = arr(3).toLong\n        n - apple - orange", "        // Write your code here\n\
    \        val x = s.split(\" \")\n        val a = x(0).toLong\n        val b =\
    \ x(2).toLong\n        n - a - b", "        // Write your code here\n        val\
    \ a = s.split(\" \")\n        val b = a(0).toLong\n        val c = a(2).toLong\n\
    \        n - b - c", "        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(2).toLong\n        n - apples\
    \ - oranges", "        val s2 = s.replaceAll(\"[^0-9]\", \" \")\n        val s3\
    \ = s2.trim.split(\" \")\n        val s4 = s3.map(_.toLong)\n        val s5 =\
    \ s4.sum\n        n - s5", "        val pattern = \"(\\\\d+) apples and (\\\\\
    d+) oranges\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        // Write your code here\n        val pattern = \"\
    ([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples, oranges)\
    \ = s\n        n - apples.toLong - oranges.toLong", "        // Write your code\
    \ here\n        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) -\
    \ nums(2)", "        // Write your code here\n        val ss = s.split(\" \")\n\
    \        val a = ss(0).toLong\n        val o = ss(3).toLong\n        n - a - o",
  "        // Write your code here\n        val a = s.split(\" \")\n        val b\
    \ = a(0).toLong\n        val c = a(2).toLong\n        n - b - c", "        //\
    \ Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n    \
    \    n - nums(0) - nums(2)", "        // Write your code here\n        val nums\
    \ = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "        //\
    \ Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n    \
    \    n - nums(0) - nums(2)", "        // Write your code here\n        val a =\
    \ s.split(\" \")\n        val b = a(0).toLong\n        val c = a(2).toLong\n \
    \       n - b - c", "        // Write your code here\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        n - nums(0) - nums(2)", "        // Write your code\
    \ here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val a = s.split(\" \")\n        val b = a(0).toLong\n\
    \        val c = a(2).toLong\n        n - b - c", '        // Write your code
    here', "        val s1 = s.split(\" \")\n        val a = s1(0).toLong\n      \
    \  val o = s1(3).toLong\n        n - a - o", "        val s1 = s.split(\" \")\n\
    \        val a = s1(0).toLong\n        val o = s1(3).toLong\n        n - a - o",
  "        // Write your code here\n        val s1 = s.split(\" \")\n        val x\
    \ = s1(0).toLong\n        val y = s1(2).toLong\n        n - x - y", "        val\
    \ fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n        val\
    \ oranges = fruits(2).toLong\n        n - apples - oranges", "        // Write\
    \ your code here\n        val nums = s.split(\" \").map(_.toLong)\n        n -\
    \ nums(0) - nums(2)", "        // Write your code here\n        val x = s.split(\"\
    \ \")\n        val a = x(0).toLong\n        val b = x(2).toLong\n        n - a\
    \ - b", "        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0)\
    \ - nums(2)", "        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val a = s.split(\" \")\n        val b = a(0).toLong\n\
    \        val c = a(2).toLong\n        n - b - c", "        // Write your code\
    \ here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        val\
    \ pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples,\
    \ oranges) = s\n        n - apples.toLong - oranges.toLong", "        val fruits\
    \ = s.split(\" \")\n        val apples = fruits(0).toLong\n        val oranges\
    \ = fruits(2).toLong\n        n - apples - oranges", "        // Write your code\
    \ here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val x = s.split(\" \")\n        val a = x(0).toLong\n\
    \        val b = x(2).toLong\n        n - a - b", "        // Write your code\
    \ here\n        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) -\
    \ nums(2)", "        val fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n\
    \        val oranges = fruits(2).toLong\n        n - apples - oranges", "    \
    \    // Write your code here\n        val pattern = \"\"\"(\\d+) apples and (\\\
    d+) oranges\"\"\".r\n        s match {\n            case pattern(a, b) => n -\
    \ a.toLong - b.toLong\n        }", "        val a = s.split(\" \")\n        val\
    \ apple = a(0).toLong\n        val orange = a(2).toLong\n        n - apple - orange",
  "        val pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples,\
    \ oranges) = s\n        n - apples.toLong - oranges.toLong", "        val pattern\
    \ = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples, oranges)\
    \ = s\n        n - apples.toLong - oranges.toLong", "        // Write your code\
    \ here\n        val a = s.split(\" \")\n        val apples = a(0).toLong\n   \
    \     val oranges = a(3).toLong\n        n - apples - oranges", "        val pattern\
    \ = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(a, o) = s\n\
    \        n - a.toLong - o.toLong", "        // Write your code here\n        val\
    \ fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n        val\
    \ oranges = fruits(2).toLong\n        n - apples - oranges", "        val nums\
    \ = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "        //\
    \ Write your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+) oranges\"\
    .r\n        val pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong",
  "        // Write your code here\n        val a = s.split(\" \")\n        val b\
    \ = a(0).toLong\n        val c = a(2).toLong\n        n - b - c", "        var\
    \ nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "     \
    \   val a = s.split(\" \")\n        val apples = a(0).toLong\n        val oranges\
    \ = a(2).toLong\n        n - apples - oranges", "        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(2).toLong\n\
    \        n - apples - oranges", "        // Write your code here\n        val\
    \ a = s.split(\" \")\n        val apples = a(0).toLong\n        val oranges =\
    \ a(3).toLong\n        n - apples - oranges", "        // Write your code here\n\
    \        val pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val\
    \ pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong", " \
    \       // Write your code here\n        val fruit = s.split(\" \")\n        val\
    \ apple = fruit(0).toLong\n        val orange = fruit(2).toLong\n        n - apple\
    \ - orange", "        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\
    \".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong",
  "        val fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n  \
    \      val oranges = fruits(2).toLong\n        n - apples - oranges", "      \
    \  // Write your code here\n        val s1 = s.split(\" \")\n        val apple\
    \ = s1(0).toLong\n        val orange = s1(3).toLong\n        n - apple - orange",
  "        // Write your code here\n        val arr = s.split(\" \")\n        val\
    \ apple = arr(0).toLong\n        val orange = arr(3).toLong\n        n - apple\
    \ - orange", "        // Write your code here\n        val nums = s.split(\" \"\
    ).filter(x => x.matches(\"\\\\d+\")).map(x => x.toLong)\n        n - nums.sum",
  "        // Write your code here\n        val a = s.split(\" \")\n        val b\
    \ = a(0).toLong\n        val c = a(2).toLong\n        n - b - c", "        //\
    \ Write your code here\n        val arr = s.split(\" \")\n        val apple =\
    \ arr(0).toLong\n        val orange = arr(3).toLong\n        n - apple - orange",
  "        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n        val\
    \ oranges = arr(3).toLong\n        n - apples - oranges", "        val fruits\
    \ = s.split(\" \")\n        val apples = fruits(0).toLong\n        val oranges\
    \ = fruits(2).toLong\n        n - apples - oranges", "        val pattern = \"\
    ([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples, oranges)\
    \ = s\n        n - apples.toLong - oranges.toLong", "        // Write your code\
    \ here\n        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\".r\n\
    \        val pattern(a, o) = s\n        n - a.toLong - o.toLong", "        //\
    \ Write your code here\n        val l = s.split(\" \")\n        val a = l(0).toLong\n\
    \        val o = l(3).toLong\n        n - a - o", "        // Write your code\
    \ here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val a = s.split(\" \")\n        val b = a(0).toLong\n\
    \        val c = a(2).toLong\n        n - b - c", "        // Write your code\
    \ here\n        val fruits = s.split(\" \")\n        val apple = fruits(0).toLong\n\
    \        val orange = fruits(2).toLong\n        n - apple - orange", "       \
    \ val pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        s match {\n\
    \            case pattern(a, o) => n - a.toLong - o.toLong\n        }", "    \
    \    // Write your code here\n        val arr = s.split(\" \")\n        val apple\
    \ = arr(0).toLong\n        val orange = arr(3).toLong\n        n - apple - orange",
  "        val pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples,\
    \ oranges) = s\n        n - apples.toLong - oranges.toLong", "        // Write\
    \ your code here\n        val x = s.split(\" \")\n        val a = x(0).toLong\n\
    \        val b = x(2).toLong\n        n - a - b", "        // Write your code\
    \ here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(2).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val a = s.split(\" \")\n        n - a(0).toLong\
    \ - a(2).toLong", "        val a = s.split(\" \").map(_.toLong)\n        n - a(0)\
    \ - a(2)", "        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0)\
    \ - nums(2)", "        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\
    \".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong",
  "        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n        val\
    \ oranges = arr(3).toLong\n        n - apples - oranges", "        val arr = s.split(\"\
    \ \")\n        val apples = arr(0).toLong\n        val oranges = arr(3).toLong\n\
    \        n - apples - oranges", "        // Write your code here\n        val\
    \ nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "     \
    \   // Write your code here\n        val l = s.split(\" \")\n        val a = l(0).toLong\n\
    \        val o = l(3).toLong\n        n - a - o", "        val pattern = \"\"\"\
    (\\d+) apples and (\\d+) oranges\"\"\".r\n        val pattern(a, b) = s\n    \
    \    n - a.toLong - b.toLong", "        // Write your code here\n        val ss\
    \ = s.split(\" \")\n        val a = ss(0).toLong\n        val o = ss(3).toLong\n\
    \        n - a - o", "        val nums = s.split(\" \").map(_.toLong)\n      \
    \  n - nums(0) - nums(2)", "        // Write your code here\n        val nums\
    \ = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "        val\
    \ arr = s.split(\" \")\n        val apples = arr(0).toLong\n        val oranges\
    \ = arr(3).toLong\n        n - apples - oranges", "        // Write your code\
    \ here\n        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n\
    \        val oranges = arr(3).toLong\n        n - apples - oranges", "       \
    \ val arr = s.split(\" \")\n        val apple = arr(0).toLong\n        val orange\
    \ = arr(3).toLong\n        n - apple - orange", "        // Write your code here\n\
    \        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n       \
    \ val orange = arr(2).toLong\n        n - apple - orange", "        // Write your\
    \ code here\n        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0)\
    \ - nums(2)", "        // Write your code here\n        val (a, o) = s.split(\"\
    \ and \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Write your code here\n\
    \        var arr = s.split(\" \")\n        var apple = arr(0).toLong\n       \
    \ var orange = arr(2).toLong\n        n - apple - orange", "        val arr =\
    \ s.split(\" \")\n        val apple = arr(0).toLong\n        val orange = arr(2).toLong\n\
    \        n - apple - orange", "        val nums = s.split(\" \").map(_.toLong)\n\
    \        n - nums(0) - nums(2)", "        // Write your code here\n        val\
    \ (a, o) = s.split(\" and \").map(_.split(\" \").head.toLong).unzip\n        n\
    \ - a - o", "        val tokens = s.split(\" \")\n        val apples = tokens(0).toLong\n\
    \        val oranges = tokens(3).toLong\n        n - apples - oranges", "    \
    \    // Write your code here\n        var a = s.split(\" \")\n        var b =\
    \ a(0).toLong\n        var c = a(2).toLong\n        var d = n - b - c\n      \
    \  return d", "        // Write your code here\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        n - nums(0) - nums(2)", "        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(2)", "        // Write your code here\n\
    \        val arr = s.split(\" \")\n        val a = arr(0).toLong\n        val\
    \ o = arr(2).toLong\n        n - a - o", "        val arr = s.split(\" \")\n \
    \       val apple = arr(0).toLong\n        val orange = arr(3).toLong\n      \
    \  n - apple - orange", "        val a = s.split(\" \")\n        val apples =\
    \ a(0).toLong\n        val oranges = a(3).toLong\n        n - apples - oranges",
  "        // Write your code here\n        val x = s.split(\" \")\n        val y\
    \ = x(0).toLong\n        val z = x(2).toLong\n        n - y - z", "        val\
    \ fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n        val\
    \ oranges = fruits(2).toLong\n        n - apples - oranges", "        // Write\
    \ your code here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n    \
    \    n - nums(0) - nums(2)", "        // Write your code here\n        val arr\
    \ = s.split(\" \")\n        val apples = arr(0).toLong\n        val oranges =\
    \ arr(3).toLong\n        n - apples - oranges", "        // Write your code here\n\
    \        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n       \
    \ val orange = arr(2).toLong\n        n - apple - orange", "        val a = s.split(\"\
    \ \")\n        n - a(0).toLong - a(2).toLong", "        // Write your code here\n\
    \        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)",
  "        val pattern = \"(\\\\d+) apples and (\\\\d+) oranges\".r\n        val pattern(apples,\
    \ oranges) = s\n        n - apples.toLong - oranges.toLong", "        // Write\
    \ your code here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n    \
    \    n - nums(0) - nums(2)", "        val pattern = \"\"\"(\\d+) apples and (\\\
    d+) oranges\"\"\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        val a = s.split(\" \")\n        val apples = a(0).toLong\n\
    \        val oranges = a(2).toLong\n        n - apples - oranges", "        val\
    \ s1 = s.split(\" \")\n        val a = s1(0).toLong\n        val o = s1(3).toLong\n\
    \        n - a - o", "        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(2).toLong\n        n - apples\
    \ - oranges", "        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\
    \".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong",
  "        // Write your code here\n        val s1 = s.split(\" \")\n        val a\
    \ = s1(0).toLong\n        val o = s1(3).toLong\n        n - a - o", "        val\
    \ arr = s.split(\" \")\n        val apples = arr(0).toLong\n        val oranges\
    \ = arr(3).toLong\n        n - apples - oranges", "        val pattern = \"([0-9]+)\
    \ apples and ([0-9]+) oranges\".r\n        val pattern(apples, oranges) = s\n\
    \        n - apples.toLong - oranges.toLong", "        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(2).toLong\n\
    \        n - apples - oranges", "        val pattern = \"([0-9]+) apples and ([0-9]+)\
    \ oranges\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n\
    \        val oranges = arr(3).toLong\n        n - apples - oranges", "       \
    \ // Write your code here\n        val a = s.split(\" \")\n        val b = a(0).toLong\n\
    \        val c = a(2).toLong\n        n - b - c", "        val pattern = \"([0-9]+)\
    \ apples and ([0-9]+) oranges\".r\n        val pattern(a, o) = s\n        n -\
    \ a.toLong - o.toLong", "        // Write your code here\n        val arr = s.split(\"\
    \ \")\n        val apple = arr(0).toLong\n        val orange = arr(3).toLong\n\
    \        n - apple - orange", "        // Write your code here\n        val a\
    \ = s.split(\" \")\n        val apple = a(0).toLong\n        val orange = a(3).toLong\n\
    \        n - apple - orange", "        // Write your code here\n        val nums\
    \ = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "        //\
    \ Write your code here\n        val arr = s.split(\" \")\n        val apple =\
    \ arr(0).toLong\n        val orange = arr(3).toLong\n        n - apple - orange",
  "        // Write your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+)\
    \ oranges\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n    \
    \    n - nums(0) - nums(2)", "        // Write your code here\n        val nums\
    \ = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "        //\
    \ Write your code here\n        val arr = s.split(\" \")\n        val apple =\
    \ arr(0).toLong\n        val orange = arr(2).toLong\n        n - apple - orange",
  "        // Write your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+)\
    \ oranges\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        // Write your code here\n        val s1 = s.split(\"\
    \ \")\n        val a = s1(0).toLong\n        val o = s1(3).toLong\n        n -\
    \ a - o", "        // Write your code here\n        val arr = s.split(\" \")\n\
    \        val apple = arr(0).toLong\n        val orange = arr(2).toLong\n     \
    \   n - apple - orange", "        val nums = s.split(\" \").map(_.toLong)\n  \
    \      n - nums(0) - nums(2)", "        val a = s.split(\" \")\n        val apples\
    \ = a(0).toLong\n        val oranges = a(3).toLong\n        n - apples - oranges",
  "        // Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n\
    \        n - nums(0) - nums(2)", "        // Write your code here\n        val\
    \ pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples,\
    \ oranges) = s\n        n - apples.toLong - oranges.toLong", "        val fruits\
    \ = s.split(\" \")\n        val apples = fruits(0).toLong\n        val oranges\
    \ = fruits(2).toLong\n        n - apples - oranges", "        // Write your code\
    \ here\n        val x = s.split(\" \")\n        val y = x(0).toLong\n        val\
    \ z = x(2).toLong\n        n - y - z", "        // Write your code here\n    \
    \    val pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples,\
    \ oranges) = s\n        n - apples.toLong - oranges.toLong", "        // Write\
    \ your code here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val arr = s.split(\" \")\n        val apple =\
    \ arr(0).toLong\n        val orange = arr(3).toLong\n        n - apple - orange",
  "        // Write your code here\n        val l = s.split(\" \")\n        val a\
    \ = l(0).toLong\n        val o = l(3).toLong\n        n - a - o", "        val\
    \ pattern = \"(\\\\d+) apples and (\\\\d+) oranges\".r\n        val pattern(a,\
    \ o) = s\n        n - a.toLong - o.toLong", "        val a = s.split(\" \").map(_.toLong)\n\
    \        n - a(0) - a(2)", "        // Write your code here\n        val arr =\
    \ s.split(\" \")\n        val apple = arr(0).toLong\n        val orange = arr(2).toLong\n\
    \        n - apple - orange", "        val arr = s.split(\" \")\n        val apples\
    \ = arr(0).toLong\n        val oranges = arr(3).toLong\n        n - apples - oranges",
  "        // Write your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+)\
    \ oranges\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+) oranges\"\
    .r\n        val pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong",
  "        val pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(a,\
    \ o) = s\n        n - a.toLong - o.toLong", "        // Write your code here\n\
    \        val x = s.split(\" \")\n        val apples = x(0).toLong\n        val\
    \ oranges = x(3).toLong\n        n - apples - oranges", "        // Write your\
    \ code here\n        val fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n\
    \        val oranges = fruits(2).toLong\n        n - apples - oranges", "    \
    \    // Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n\
    \        n - nums(0) - nums(2)", "        val a = s.split(\" \").map(_.toLong)\n\
    \        n - a(0) - a(2)", "        // Write your code here\n        val fruits\
    \ = s.split(\" \")\n        val apples = fruits(0).toLong\n        val oranges\
    \ = fruits(2).toLong\n        n - apples - oranges", "        val a = s.split(\"\
    \ \")\n        val apples = a(0).toLong\n        val oranges = a(3).toLong\n \
    \       n - apples - oranges", "        val pattern = \"\"\"(\\d+) apples and\
    \ (\\d+) oranges\"\"\".r\n        val pattern(apples, oranges) = s\n        n\
    \ - apples.toLong - oranges.toLong", "        val l = s.split(\" \")\n       \
    \ n - l(0).toLong - l(2).toLong", "        val arr = s.split(\" \")\n        val\
    \ a = arr(0).toLong\n        val o = arr(2).toLong\n        n - a - o", "    \
    \    // Write your code here\n        val s1 = s.split(\" \")\n        val s2\
    \ = s1(0).toLong\n        val s3 = s1(2).toLong\n        n - s2 - s3", "     \
    \   val arr = s.split(\" \")\n        val apples = arr(0).toLong\n        val\
    \ oranges = arr(3).toLong\n        n - apples - oranges", "        val nums =\
    \ s.split(\" \").filter(x => x.matches(\"\\\\d+\")).map(x => x.toLong)\n     \
    \   n - nums(0) - nums(1)", "        // Write your code here\n        val nums\
    \ = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "        //\
    \ Write your code here\n        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\
    \"\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong -\
    \ oranges.toLong", "        val fruits = s.split(\" \")\n        val apples =\
    \ fruits(0).toLong\n        val oranges = fruits(2).toLong\n        n - apples\
    \ - oranges", "        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n\
    \        val oranges = arr(3).toLong\n        n - apples - oranges", "       \
    \ // Write your code here\n        val a = s.split(\" \")\n        val b = a(0).toLong\n\
    \        val c = a(2).toLong\n        n - b - c", "        // Write your code\
    \ here\n        val x = s.split(\" \").map(_.toLong)\n        n - x(0) - x(2)",
  "        // Write your code here\n        val l = s.split(\" \")\n        val a\
    \ = l(0).toLong\n        val o = l(3).toLong\n        n - a - o", "        //\
    \ Write your code here\n        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\
    \"\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong -\
    \ oranges.toLong", "        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\
    \"\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong -\
    \ oranges.toLong", "        // Write your code here\n        var arr = s.split(\"\
    \ \")\n        var apple = arr(0).toLong\n        var orange = arr(3).toLong\n\
    \        return n - apple - orange", "        // Write your code here\n      \
    \  val arr = s.split(\" \")\n        val a = arr(0).toLong\n        val o = arr(3).toLong\n\
    \        n - a - o", "        // Write your code here\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        n - nums(0) - nums(2)", "        // Write your code\
    \ here\n        val a = s.split(\" \")\n        val b = a(0).toLong\n        val\
    \ c = a(2).toLong\n        n - b - c", "        // Write your code here\n    \
    \    val tokens = s.split(\" \")\n        val apples = tokens(0).toLong\n    \
    \    val oranges = tokens(3).toLong\n        n - apples - oranges", "        val\
    \ split = s.split(\" \")\n        val apple = split(0).toLong\n        val orange\
    \ = split(3).toLong\n        n - apple - orange", "        val (a, o) = s.split(\"\
    \ \").map(_.toLong).partition(_ > 0)\n        n - a.sum - o.sum", "        val\
    \ a = s.split(\" \")\n        val apples = a(0).toLong\n        val oranges =\
    \ a(3).toLong\n        n - apples - oranges", "        // Write your code here\n\
    \        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)",
  "        // Write your code here\n        val arr = s.split(\" \")\n        val\
    \ apple = arr(0).toLong\n        val orange = arr(3).toLong\n        n - apple\
    \ - orange", "        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\
    \".r\n        val pattern(a, b) = s\n        n - a.toLong - b.toLong", "     \
    \   // Write your code here\n        val a = s.split(\" \")\n        val b = a(0).toLong\n\
    \        val c = a(2).toLong\n        n - b - c", "        val l = s.split(\"\
    \ \")\n        val a = l(0).toLong\n        val o = l(3).toLong\n        n - a\
    \ - o", "        // Write your code here\n        val pattern = \"\"\"(\\d+) apples\
    \ and (\\d+) oranges\"\"\".r\n        s match {\n            case pattern(a, o)\
    \ => n - a.toLong - o.toLong\n        }", "        val arr = s.split(\" \")\n\
    \        val apple = arr(0).toLong\n        val orange = arr(3).toLong\n     \
    \   n - apple - orange", "        // Write your code here\n        val fruits\
    \ = s.split(\" \")\n        val apple = fruits(0).toLong\n        val orange =\
    \ fruits(2).toLong\n        n - apple - orange", "        // Write your code here\n\
    \        val a = s.split(\" \")\n        val apples = a(0).toLong\n        val\
    \ oranges = a(3).toLong\n        n - apples - oranges", "        val fruits =\
    \ s.split(\" \")\n        n - fruits(0).toLong - fruits(2).toLong", "        //\
    \ Write your code here\n        val arr = s.split(\" \")\n        val apple =\
    \ arr(0).toLong\n        val orange = arr(2).toLong\n        n - apple - orange",
  "        // Write your code here\n        val split = s.split(\" \")\n        val\
    \ apple = split(0).toLong\n        val orange = split(3).toLong\n        n - apple\
    \ - orange", "        // Write your code here\n        val a = s.split(\" \")\n\
    \        val b = a(0).toLong\n        val c = a(2).toLong\n        n - b - c",
  "        // Write your code here\n        val arr = s.split(\" \")\n        val\
    \ apple = arr(0).toLong\n        val orange = arr(3).toLong\n        n - apple\
    \ - orange"]
stop_tokens:
- "\n    }\n"
