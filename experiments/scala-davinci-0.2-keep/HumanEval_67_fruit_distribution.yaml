name: HumanEval_67_fruit_distribution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this task, you will be given a string that represents a number of apples\
  \ and oranges \n    // that are distributed in a basket of fruit this basket contains\
  \ \n    // apples, oranges, and mango fruits. Given the string that represents the\
  \ total number of \n    // the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    // in the basket return the number of the\
  \ mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
  5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0 apples\
  \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples and\
  \ 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
  \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
  \ n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
  \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
  \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100\
  \ oranges\"), (120l)) == (19l));\n    }\n\n}\n"
completions: ["        // Write your code here\n        val a = s.split(\" \")\n \
    \       val x = a(0).toLong\n        val y = a(2).toLong\n        n - x - y",
  "        val a = s.split(\" \")\n        val apples = a(0).toLong\n        val oranges\
    \ = a(3).toLong\n        n - apples - oranges", "        // Write your code here\n\
    \        val a = s.split(\" \")\n        val apple = a(0).toLong\n        val\
    \ orange = a(3).toLong\n        n - apple - orange", "        val arr = s.split(\"\
    \ \")\n        val apples = arr(0).toLong\n        val oranges = arr(3).toLong\n\
    \        n - apples - oranges", "        // Write your code here\n        val\
    \ arr = s.split(\" \")\n        val apple = arr(0).toLong\n        val orange\
    \ = arr(3).toLong\n        n - apple - orange", "        // Write your code here\n\
    \        val x = s.split(\" \")\n        val a = x(0).toLong\n        val b =\
    \ x(2).toLong\n        n - a - b", "        // Write your code here\n        val\
    \ a = s.split(\" \")\n        val b = a(0).toLong\n        val c = a(2).toLong\n\
    \        n - b - c", "        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(2).toLong\n        n - apples\
    \ - oranges", "        val s2 = s.replaceAll(\"[^0-9]\", \" \")\n        val s3\
    \ = s2.trim.split(\" \")\n        val s4 = s3.map(_.toLong)\n        val s5 =\
    \ s4.sum\n        n - s5", "        val pattern = \"(\\\\d+) apples and (\\\\\
    d+) oranges\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        // Write your code here\n        val pattern = \"\
    ([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples, oranges)\
    \ = s\n        n - apples.toLong - oranges.toLong", "        // Write your code\
    \ here\n        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) -\
    \ nums(2)", "        // Write your code here\n        val ss = s.split(\" \")\n\
    \        val a = ss(0).toLong\n        val o = ss(3).toLong\n        n - a - o",
  "        // Write your code here\n        val a = s.split(\" \")\n        val b\
    \ = a(0).toLong\n        val c = a(2).toLong\n        n - b - c", "        //\
    \ Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n    \
    \    n - nums(0) - nums(2)", "        // Write your code here\n        val nums\
    \ = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "        //\
    \ Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n    \
    \    n - nums(0) - nums(2)", "        // Write your code here\n        val a =\
    \ s.split(\" \")\n        val b = a(0).toLong\n        val c = a(2).toLong\n \
    \       n - b - c", "        // Write your code here\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        n - nums(0) - nums(2)", "        // Write your code\
    \ here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange"]
stop_tokens:
- "\n    }\n"
