language: scala
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (value <- values)\
    \ {\n            if (value.isInstanceOf[Long]) {\n                result = result\
    \ :+ value.asInstanceOf[Long]\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        return values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    def filterIntegers(values : List[Any])\
    \ : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795308
