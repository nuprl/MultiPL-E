name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> unique_digits([15, 33, 1422,\
  \ 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n    //\
  \ []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        x.filter(y => y.toString.forall(z => (z - '0') % 2 == 1)).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(n =>
    n.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        def isUnique(n :\
    \ Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n  \
    \              if (m % 2 == 0) return false\n                m /= 10\n       \
    \     }\n            return true\n        }\n        x.filter(isUnique).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(i
    => i.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        x.filter(isUnique).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", '        x.filter(n => n.toString.forall(c => c.asDigit
    % 2 == 1)).sorted', "        x.filter(y => y.toString.forall(z => z == '1' ||\
    \ z == '3' || z == '5' || z == '7' || z == '9')).sorted", "        def hasEvenDigit(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return true\n                m /= 10\n      \
    \      }\n            return false\n        }\n        x.filter(!hasEvenDigit(_)).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(i =>
    i.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(i => i.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        def isUnique(n :\
    \ Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n  \
    \              if (m % 2 == 0) return false\n                m /= 10\n       \
    \     }\n            return true\n        }\n        return x.filter(isUnique).sorted"]
stop_tokens:
- "\n    }\n"
