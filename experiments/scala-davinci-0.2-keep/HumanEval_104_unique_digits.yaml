name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> unique_digits([15, 33, 1422,\
  \ 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n    //\
  \ []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        x.filter(y => y.toString.forall(z => (z - '0') % 2 == 1)).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(n =>
    n.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        def isUnique(n :\
    \ Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n  \
    \              if (m % 2 == 0) return false\n                m /= 10\n       \
    \     }\n            return true\n        }\n        x.filter(isUnique).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(i
    => i.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        x.filter(isUnique).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", '        x.filter(n => n.toString.forall(c => c.asDigit
    % 2 == 1)).sorted', "        x.filter(y => y.toString.forall(z => z == '1' ||\
    \ z == '3' || z == '5' || z == '7' || z == '9')).sorted", "        def hasEvenDigit(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return true\n                m /= 10\n      \
    \      }\n            return false\n        }\n        x.filter(!hasEvenDigit(_)).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(i =>
    i.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(i => i.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        def isUnique(n :\
    \ Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n  \
    \              if (m % 2 == 0) return false\n                m /= 10\n       \
    \     }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "  \
    \      def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted", '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        def isUnique(x\
    \ : Long) : Boolean = {\n            var s = x.toString\n            for (i <-\
    \ 0 until s.length) {\n                if (s(i) % 2 == 0) return false\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(n => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(n => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', "  \
    \      def hasEvenDigit(n : Long) : Boolean = {\n            var m = n\n     \
    \       while (m > 0) {\n                if (m % 2 == 0) return true\n       \
    \         m /= 10\n            }\n            return false\n        }\n      \
    \  return x.filter(!hasEvenDigit(_)).sorted", "        def isUnique(n : Long)\
    \ : Boolean = {\n            def isUniqueHelper(n : Long) : Boolean = {\n    \
    \            if (n == 0) true\n                else if (n % 2 == 0) false\n  \
    \              else isUniqueHelper(n / 10)\n            }\n            isUniqueHelper(n)\n\
    \        }\n        x.filter(isUnique).sorted", "        def isUnique(n : Long)\
    \ : Boolean = {\n            var m = n\n            while (m > 0) {\n        \
    \        if (m % 2 == 0) return false\n                m /= 10\n            }\n\
    \            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    !y.toString.exists(z => z % 2 == 0)).sorted', '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z =>
    z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z => z.asDigit
    % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n          \
    \  var m = n\n            while (m > 0) {\n                if (m % 2 == 0) return\
    \ false\n                m /= 10\n            }\n            return true\n   \
    \     }\n        return x.filter(isUnique).sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z =>
    z.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted", '        x.filter(x
    => x.toString.forall(x => x.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    !y.toString.exists(z => z % 2 == 0)).sorted', '        x.filter(n => n.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z =>
    z.asDigit % 2 == 1)).sorted', "        var result = new ListBuffer[Long]\n   \
    \     for (i <- x) {\n            var hasEven = false\n            var n = i\n\
    \            while (n > 0) {\n                if (n % 2 == 0) {\n            \
    \        hasEven = true\n                    n = 0\n                }\n      \
    \          else n /= 10\n            }\n            if (!hasEven) result += i\n\
    \        }\n        result.toList.sorted", '        x.filter(n => n.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', '        x.filter(n => n.toString.forall(c =>
    c.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted", "        x.filter(i\
    \ => i.toString.forall(c => (c - '0') % 2 == 1)).sorted", '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(n =>
    n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z =>
    z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z => z.asDigit
    % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z => z.asDigit %
    2 == 1)).sorted', "        def isUnique(x : Long) : Boolean = {\n            var\
    \ n = x\n            while (n > 0) {\n                if (n % 2 == 0) return false\n\
    \                n /= 10\n            }\n            return true\n        }\n\
    \        return x.filter(isUnique).sorted", "        def isUnique(n : Long) :\
    \ Boolean = {\n            var m = n\n            while (m > 0) {\n          \
    \      if (m % 2 == 0) return false\n                m /= 10\n            }\n\
    \            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(i => i.toString.forall(c => c.asDigit % 2 == 1)).sorted', "  \
    \      x.filter(n => n.toString.forall(c => (c - '0') % 2 == 1)).sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(i =>
    i.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(x => x.toString.forall(x =>
    x.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            def isUniqueHelper(n\
    \ : Long) : Boolean = {\n                if (n == 0) true\n                else\
    \ if (n % 2 == 0) false\n                else isUniqueHelper(n / 10)\n       \
    \     }\n            isUniqueHelper(n)\n        }\n        x.filter(isUnique).sorted",
  '        x.filter(n => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', "  \
    \      var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "  \
    \      var result = List[Long]()\n        for (i <- x) {\n            var flag\
    \ = true\n            for (j <- i.toString) {\n                if (j.asDigit %\
    \ 2 == 0) {\n                    flag = false\n                    break\n   \
    \             }\n            }\n            if (flag) result = result :+ i\n \
    \       }\n        result.sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(n => n.toString.forall(c =>
    c.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z => z.asDigit
    % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z => z.asDigit %
    2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n            var\
    \ m = n\n            while (m > 0) {\n                if (m % 2 == 0) return false\n\
    \                m /= 10\n            }\n            return true\n        }\n\
    \        x.filter(isUnique).sorted", "        var result = List[Long]()\n    \
    \    for (i <- x) {\n            var flag = true\n            var temp = i\n \
    \           while (temp > 0) {\n                if (temp % 2 == 0) {\n       \
    \             flag = false\n                    temp = 0\n                }\n\
    \                else temp /= 10\n            }\n            if (flag) result\
    \ = result :+ i\n        }\n        result.sorted", '        x.filter(n => n.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        x.filter(isUnique).sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        x.filter(isUnique).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "  \
    \      def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", "        var result = List[Long]()\n        for\
    \ (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 == 1)) result\
    \ = result :+ i\n        }\n        result.sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z =>
    z.asDigit % 2 == 1)).sorted', '        x.filter(x => x.toString.forall(x => x.asDigit
    % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n          \
    \  var m = n\n            while (m > 0) {\n                if (m % 2 == 0) return\
    \ false\n                m /= 10\n            }\n            return true\n   \
    \     }\n        return x.filter(isUnique).sorted", "        def isUnique(n :\
    \ Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n  \
    \              if (m % 2 == 0) return false\n                m /= 10\n       \
    \     }\n            return true\n        }\n        x.filter(isUnique).sorted",
  '        x.filter(i => !i.toString.exists(j => j.toString.toInt % 2 == 0)).sorted',
  '        x.filter(y => !y.toString.exists(z => z % 2 == 0)).sorted', '        x.filter(i
    => i.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.map(z => z.asDigit).forall(z => z % 2 == 1)).sorted', '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        def hasEvenDigit(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return true\n                m /= 10\n      \
    \      }\n            return false\n        }\n        return x.filter(!hasEvenDigit(_)).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        x.filter(isUnique).sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        x.filter(y => !y.toString.exists(z => z.isDigit && (z - '0') % 2 == 0)).sorted",
  "        def hasEvenDigit(n : Long) : Boolean = {\n            var m = n\n     \
    \       while (m > 0) {\n                if (m % 2 == 0) return true\n       \
    \         m /= 10\n            }\n            return false\n        }\n      \
    \  x.filter(hasEvenDigit(_) == false).sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z =>
    z.asDigit % 2 == 1)).sorted', '        x.filter(i => i.toString.forall(c => c.asDigit
    % 2 == 1)).sorted', '        x.filter(n => n.toString.forall(c => c.asDigit %
    2 == 1)).sorted', "        def hasEvenDigit(n : Long) : Boolean = {\n        \
    \    var m = n\n            while (m > 0) {\n                if (m % 2 == 0) return\
    \ true\n                m /= 10\n            }\n            return false\n   \
    \     }\n        x.filter(!hasEvenDigit(_)).sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z =>
    z.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        x.filter(isUnique).sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        x.filter(y => y.toString.forall(z => (z - '0') % 2 == 1)).sorted", '        x.filter(i
    => i.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(y => !y.toString.exists(z =>
    z.toString.toInt % 2 == 0)).sorted', "        def isUnique(n : Long) : Boolean\
    \ = {\n            var m = n\n            while (m > 0) {\n                if\
    \ (m % 2 == 0) return false\n                m /= 10\n            }\n        \
    \    return true\n        }\n        return x.filter(isUnique).sorted", "    \
    \    var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  '        x.filter(i => i.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(i => i.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted", '        x.filter(i
    => i.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        def isUnique(n\
    \ : Long) : Boolean = {\n            def helper(n : Long) : Boolean = {\n    \
    \            if (n == 0) true\n                else if (n % 2 == 0) false\n  \
    \              else helper(n / 10)\n            }\n            helper(n)\n   \
    \     }\n        x.filter(isUnique).sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', "        def hasEvenDigit(n : Long) : Boolean\
    \ = {\n            var m = n\n            while (m > 0) {\n                if\
    \ (m % 2 == 0) return true\n                m /= 10\n            }\n         \
    \   return false\n        }\n        return x.filter(!hasEvenDigit(_)).sorted",
  '        x.filter(n => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        def isUnique(n :\
    \ Long) : Boolean = {\n            var temp = n\n            while (temp > 0)\
    \ {\n                if (temp % 2 == 0) return false\n                temp /=\
    \ 10\n            }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", '        x.filter(x => x.toString.forall(c => c.asDigit
    % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z => z.asDigit %
    2 == 1)).sorted', "        val result = new ListBuffer[Long]\n        for (i <-\
    \ x) {\n            if (i.toString.forall(c => (c - '0') % 2 == 1)) result +=\
    \ i\n        }\n        result.toList.sorted", '        x.filter(n => n.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', '        x.filter(y => !y.toString.exists(z =>
    z.isDigit && z.asDigit % 2 == 0)).sorted', "        def isUnique(n : Long) : Boolean\
    \ = {\n            var m = n\n            while (m > 0) {\n                if\
    \ (m % 2 == 0) return false\n                m /= 10\n            }\n        \
    \    return true\n        }\n        return x.filter(isUnique).sorted", '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(x => x.toString.forall(c => c.asDigit % 2 == 1)).sorted', "  \
    \      def hasEvenDigit(n : Long) : Boolean = {\n            var m = n\n     \
    \       while (m > 0) {\n                if (m % 2 == 0) return true\n       \
    \         m /= 10\n            }\n            return false\n        }\n      \
    \  x.filter(!hasEvenDigit(_)).sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n\
    \            def isUniqueHelper(n : Long) : Boolean = {\n                if (n\
    \ == 0) true\n                else if (n % 2 == 0) false\n                else\
    \ isUniqueHelper(n / 10)\n            }\n            isUniqueHelper(n)\n     \
    \   }\n        x.filter(isUnique).sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(i => i.toString.forall(c =>
    c.asDigit % 2 == 1)).sorted', '        x.filter(n => n.toString.forall(c => c.asDigit
    % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z => z.asDigit %
    2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n            var\
    \ m = n\n            while (m > 0) {\n                if (m % 2 == 0) return false\n\
    \                m /= 10\n            }\n            return true\n        }\n\
    \        return x.filter(isUnique).sorted", "        var result = List[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2\
    \ == 1)) result = result :+ i\n        }\n        result.sorted", '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(x => x.toString.forall(c => c.asDigit % 2 == 1)).sorted', "  \
    \      def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", '        x.filter(i => i.toString.forall(c => c.asDigit
    % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z => z.asDigit %
    2 == 1)).sorted', '        x.filter(i => i.toString.forall(c => c.asDigit % 2
    == 1)).sorted', "        x.filter(i => i.toString.forall(c => (c - '0') % 2 ==\
    \ 1)).sorted", "        val evenDigits = Set(0, 2, 4, 6, 8)\n        x.filter(n\
    \ => n.toString.map(_.asDigit).forall(!evenDigits.contains(_))).sorted", "   \
    \     def isUnique(n : Long) : Boolean = {\n            var m = n\n          \
    \  while (m > 0) {\n                if (m % 2 == 0) return false\n           \
    \     m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", '        x.filter(y => y.toString.forall(z => z.asDigit
    % 2 == 1)).sorted', "        var result = new ListBuffer[Long]\n        for (i\
    \ <- x) {\n            var flag = true\n            var j = i\n            while\
    \ (j > 0) {\n                if (j % 2 == 0) {\n                    flag = false\n\
    \                    j = 0\n                }\n                j /= 10\n     \
    \       }\n            if (flag) result += i\n        }\n        result.toList.sorted",
  "        def hasEvenDigit(n : Long) : Boolean = {\n            var m = n\n     \
    \       while (m > 0) {\n                if (m % 2 == 0) return true\n       \
    \         m /= 10\n            }\n            return false\n        }\n      \
    \  return x.filter(n => !hasEvenDigit(n)).sorted", '        x.filter(x => x.toString.forall(x
    => x.asDigit % 2 == 1)).sorted', '        x.filter(y => !y.toString.exists(z =>
    z % 2 == 0)).sorted', "        def isUnique(n : Long) : Boolean = {\n        \
    \    var m = n\n            while (m > 0) {\n                if (m % 2 == 0) return\
    \ false\n                m /= 10\n            }\n            return true\n   \
    \     }\n        return x.filter(isUnique).sorted", "        def isUnique(n :\
    \ Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n  \
    \              if (m % 2 == 0) return false\n                m /= 10\n       \
    \     }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "  \
    \      var result = List[Long]()\n        for (i <- x) {\n            var flag\
    \ = true\n            var j = i\n            while (j > 0) {\n               \
    \ if (j % 2 == 0) {\n                    flag = false\n                    j =\
    \ 0\n                }\n                j /= 10\n            }\n            if\
    \ (flag) result = result :+ i\n        }\n        result.sorted", "        def\
    \ isUnique(n : Long) : Boolean = {\n            var m = n\n            while (m\
    \ > 0) {\n                if (m % 2 == 0) return false\n                m /= 10\n\
    \            }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", '        x.filter(n => n.toString.forall(c => c.asDigit
    % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z => z.asDigit %
    2 == 1)).sorted', '        x.filter(i => i.toString.forall(c => c.asDigit % 2
    == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n            var\
    \ m = n\n            while (m > 0) {\n                if (m % 2 == 0) return false\n\
    \                m /= 10\n            }\n            return true\n        }\n\
    \        x.filter(isUnique).sorted", "        def isUnique(n : Long) : Boolean\
    \ = {\n            var m = n\n            while (m > 0) {\n                if\
    \ (m % 2 == 0) return false\n                m /= 10\n            }\n        \
    \    return true\n        }\n        return x.filter(isUnique).sorted", "    \
    \    def hasEvenDigit(n : Long) : Boolean = {\n            var m = n\n       \
    \     while (m > 0) {\n                if (m % 2 == 0) return true\n         \
    \       m /= 10\n            }\n            return false\n        }\n        x.filter(!hasEvenDigit(_)).sorted",
  '        x.filter(y => !y.toString.exists(z => z % 2 == 0)).sorted', '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(x =>
    x.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(y => !y.toString.exists(z
    => z % 2 == 0)).sorted', "        def isUnique(n : Long) : Boolean = {\n     \
    \       var m = n\n            while (m > 0) {\n                if (m % 2 == 0)\
    \ return false\n                m /= 10\n            }\n            return true\n\
    \        }\n        return x.filter(isUnique).sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        x.filter(isUnique).sorted",
  '        x.filter(y => !y.toString.exists(z => z.toString.toInt % 2 == 0)).sorted',
  "        def isUnique(n : Long) : Boolean = {\n            def isUniqueHelper(n\
    \ : Long) : Boolean = {\n                if (n == 0) true\n                else\
    \ if (n % 2 == 0) false\n                else isUniqueHelper(n / 10)\n       \
    \     }\n            isUniqueHelper(n)\n        }\n        x.filter(isUnique).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", "        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        x.filter(isUnique).sorted", "        def hasEvenDigit(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return true\n                m /= 10\n      \
    \      }\n            return false\n        }\n        return x.filter(n => !hasEvenDigit(n)).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var m = n\n         \
    \   while (m > 0) {\n                if (m % 2 == 0) return false\n          \
    \      m /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", '        x.filter(y => y.toString.forall(z => z.asDigit
    % 2 == 1)).sorted', '        x.filter(i => i.toString.forall(j => j.asDigit %
    2 == 1)).sorted', "        def isUnique(n : Long) : Boolean = {\n            var\
    \ m = n\n            while (m > 0) {\n                if (m % 2 == 0) return false\n\
    \                m /= 10\n            }\n            return true\n        }\n\
    \        return x.filter(isUnique).sorted", "        x.filter(i => i.toString.forall(c\
    \ => (c - '0') % 2 == 1)).sorted", '        x.filter(y => !y.toString.exists(z
    => z % 2 == 0)).sorted', "        var result = List[Long]()\n        for (i <-\
    \ x) {\n            var flag = true\n            var num = i\n            while\
    \ (num > 0) {\n                if (num % 2 == 0) {\n                    flag =\
    \ false\n                    num = 0\n                }\n                else\
    \ num /= 10\n            }\n            if (flag) result = result :+ i\n     \
    \   }\n        result.sorted", '        x.filter(y => y.toString.forall(z => z.asDigit
    % 2 == 1)).sorted']
stop_tokens:
- "\n    }\n"
