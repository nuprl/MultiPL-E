name: HumanEval_126_is_sorted
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return whether or not they are sorted\n    // in\
  \ ascending order. If list has more than 1 duplicate of the same\n    // number,\
  \ return False. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
  \    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4, 5,\
  \ 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    // is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
  \    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    def isSorted(lst : List[Long])\
  \ : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
  \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
  \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        var sorted = true\n        for (i <- 0 until lst.length - 1)\
    \ {\n            if (lst(i) >= lst(i + 1)) sorted = false\n        }\n       \
    \ sorted", "        if (lst.length == 1) return true\n        for (i <- 0 until\
    \ lst.length - 1) {\n            if (lst(i) > lst(i + 1)) return false\n     \
    \   }\n        return true", "        var sorted = true\n        for (i <- 0 until\
    \ lst.length - 1) {\n            if (lst(i) >= lst(i + 1)) {\n               \
    \ sorted = false\n            }\n        }\n        sorted", "        if (lst.length\
    \ == 1) return true\n        for (i <- 0 until lst.length - 1) {\n           \
    \ if (lst(i) >= lst(i + 1)) return false\n        }\n        return true", " \
    \       if (lst.length <= 1) return true\n        for (i <- 0 until lst.length\
    \ - 1) {\n            if (lst(i) >= lst(i + 1)) return false\n        }\n    \
    \    return true", "        if (lst.length == 1) return true\n        var i =\
    \ 0\n        while (i < lst.length - 1) {\n            if (lst(i) >= lst(i + 1))\
    \ return false\n            i += 1\n        }\n        return true", "       \
    \ if (lst.length == 1) return true\n        var prev = lst(0)\n        for (i\
    \ <- 1 until lst.length) {\n            if (lst(i) <= prev) return false\n   \
    \         prev = lst(i)\n        }\n        return true", "        if (lst.length\
    \ == 1) return true\n        for (i <- 1 until lst.length) {\n            if (lst(i)\
    \ < lst(i - 1)) return false\n        }\n        return true", "        if (lst.length\
    \ == 1) return true\n        var prev = lst(0)\n        for (i <- 1 until lst.length)\
    \ {\n            if (lst(i) <= prev) return false\n            prev = lst(i)\n\
    \        }\n        return true", "        if (lst.length == 1) return true\n\
    \        for (i <- 0 until lst.length - 1) {\n            if (lst(i) >= lst(i\
    \ + 1)) return false\n        }\n        return true", "        var sorted = true\n\
    \        for (i <- 1 until lst.length) {\n            if (lst(i) < lst(i - 1))\
    \ sorted = false\n        }\n        sorted", "        if (lst.size == 1) return\
    \ true\n        for (i <- 1 until lst.size) {\n            if (lst(i - 1) >= lst(i))\
    \ return false\n        }\n        return true", "        if (lst.length == 1)\
    \ return true\n        var prev = lst(0)\n        for (i <- 1 until lst.length)\
    \ {\n            if (lst(i) <= prev) return false\n            prev = lst(i)\n\
    \        }\n        return true", "        val sortedLst = lst.sorted\n      \
    \  val distinctLst = lst.distinct\n        sortedLst == lst && distinctLst.length\
    \ == lst.length", "        if (lst.length == 1) return true\n        for (i <-\
    \ 1 until lst.length) {\n            if (lst(i) < lst(i - 1)) return false\n \
    \       }\n        return true", "        if (lst.length == 1) return true\n \
    \       var prev = lst(0)\n        for (i <- 1 until lst.length) {\n         \
    \   if (lst(i) < prev) return false\n            prev = lst(i)\n        }\n  \
    \      return true", "        if (lst.length == 1) return true\n        var prev\
    \ = lst(0)\n        for (i <- 1 until lst.length) {\n            if (lst(i) <\
    \ prev) return false\n            prev = lst(i)\n        }\n        return true",
  "        if (lst.length == 1) return true\n        for (i <- 1 until lst.length)\
    \ {\n            if (lst(i) < lst(i - 1)) return false\n        }\n        return\
    \ true", "        if (lst.length == 1) return true\n        for (i <- 0 until\
    \ lst.length - 1) {\n            if (lst(i) >= lst(i + 1)) return false\n    \
    \    }\n        return true", "        var sorted = true\n        var prev = lst(0)\n\
    \        for (i <- 1 until lst.length) {\n            if (lst(i) <= prev) {\n\
    \                sorted = false\n                return sorted\n            }\n\
    \            prev = lst(i)\n        }\n        sorted"]
stop_tokens:
- "\n    }\n"
