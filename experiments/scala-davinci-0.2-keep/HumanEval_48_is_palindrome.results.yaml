language: scala
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        isPalindrome(text.substring(1, text.length - 1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\"))\
    \ == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        var i = 0\n        var j = text.length - 1\n\
    \        while (i < j) {\n            if (text(i) != text(j)) return false\n \
    \           i += 1\n            j -= 1\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        isPalindrome(text.substring(1, text.length - 1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\"))\
    \ == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var left = 0\n        var right = text.length - 1\n        while (left < right)\
    \ {\n            if (text(left) != text(right)) return false\n            left\
    \ += 1\n            right -= 1\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val len = text.length\n        for (i <- 0\
    \ until len / 2) {\n            if (text(i) != text(len - i - 1)) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\"\
    )) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val length = text.length\n        for (i <-\
    \ 0 until length / 2) {\n            if (text(i) != text(length - i - 1)) return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        var i = 0\n        var j = text.length - 1\n\
    \        while (i < j) {\n            if (text(i) != text(j)) return false\n \
    \           i += 1\n            j -= 1\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val len = text.length\n        for (i <- 0\
    \ until len / 2) {\n            if (text(i) != text(len - i - 1)) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\"\
    )) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var left = 0\n        var right = text.length - 1\n        while (left < right)\
    \ {\n            if (text(left) != text(right)) return false\n            left\
    \ += 1\n            right -= 1\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        isPalindrome(text.substring(1, text.length - 1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\"))\
    \ == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        return text(0) == text(text.length - 1) && isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0)\n            return true\n\
    \        if (text.length == 1)\n            return true\n        if (text.length\
    \ == 2)\n            return text(0) == text(1)\n        if (text(0) != text(text.length\
    \ - 1))\n            return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        return text == text.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.head == text.last) return\
    \ isPalindrome(text.substring(1, text.length - 1))\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) ==\
    \ (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        var i = 0\n        var j = text.length - 1\n\
    \        while (i < j) {\n            if (text(i) != text(j)) return false\n \
    \           i += 1\n            j -= 1\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val len = text.length\n        for (i <- 0\
    \ until len / 2) {\n            if (text(i) != text(len - i - 1)) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\"\
    )) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val len = text.length\n        for (i <- 0\
    \ until len / 2) {\n            if (text(i) != text(len - i - 1)) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\"\
    )) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        var i = 0\n        var j = text.length - 1\n\
    \        while (i < j) {\n            if (text(i) != text(j)) return false\n \
    \           i += 1\n            j -= 1\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val length = text.length\n        for (i <-\
    \ 0 until length / 2) {\n            if (text(i) != text(length - i - 1)) return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val len = text.length\n        for (i <- 0\
    \ until len / 2) {\n            if (text(i) != text(len - i - 1)) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\"\
    )) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        var i = 0\n        var j = text.length - 1\n\
    \        while (i < j) {\n            if (text(i) != text(j)) return false\n \
    \           i += 1\n            j -= 1\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     isPalindrome(text.substring(1, text.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.charAt(0) != text.charAt(text.length\
    \ - 1)) return false\n        return isPalindrome(text.substring(1, text.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        val n = text.length\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ if (text.length == 1) return true\n        if (text.length == 2) return text(0)\
    \ == text(1)\n        if (text(0) != text(text.length - 1)) return false\n   \
    \     return isPalindrome(text.substring(1, text.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n\
    \    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\"\
    )) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length == 0) return true\n       \
    \ var i = 0\n        var j = text.length - 1\n        while (i < j) {\n      \
    \      if (text(i) != text(j)) return false\n            i += 1\n            j\
    \ -= 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"\
    aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"\
    zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"\
    xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
    \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
    \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
    \ : String) : Boolean = {\n        if (text.length <= 1) return true\n       \
    \ if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\
    \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
    aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
    xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n   \
    \ assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794589
