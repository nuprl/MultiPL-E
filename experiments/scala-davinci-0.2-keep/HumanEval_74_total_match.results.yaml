language: scala
name: HumanEval_74_total_match
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n \
    \       val lst2_total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n      \
    \  if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1_total = 0\n        var lst2_total = 0\n        for (i <-\
    \ lst1) lst1_total += i.length\n        for (i <- lst2) lst2_total += i.length\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total\
    \ = lst2.map(x => x.length).sum\n        if (lst1Total < lst2Total) lst1\n   \
    \     else if (lst1Total > lst2Total) lst2\n        else lst1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total\
    \ = lst2.map(x => x.length).sum\n        if (lst1Total < lst2Total) lst1\n   \
    \     else if (lst1Total > lst2Total) lst2\n        else lst1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_sum = lst1.map(_.length).sum\n        val lst2_sum = lst2.map(_.length).sum\n\
    \        if (lst1_sum < lst2_sum) lst1\n        else if (lst1_sum > lst2_sum)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val total1 = lst1.foldLeft(0)((acc, str) => acc + str.length)\n \
    \       val total2 = lst2.foldLeft(0)((acc, str) => acc + str.length)\n      \
    \  if (total1 < total2) lst1\n        else if (total1 > total2) lst2\n       \
    \ else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1 else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7vr5qn7_.scala:23)\n\tat Problem.main(tmp7vr5qn7_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1_sum = 0\n        var lst2_sum = 0\n        for (i <- lst1)\
    \ lst1_sum += i.length\n        for (i <- lst2) lst2_sum += i.length\n       \
    \ if (lst1_sum < lst2_sum) lst1\n        else if (lst1_sum > lst2_sum) lst2\n\
    \        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1_total = 0\n        var lst2_total = 0\n        for (i <-\
    \ lst1) {\n            lst1_total += i.length\n        }\n        for (i <- lst2)\
    \ {\n            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ lst1\n        else if (lst1_total > lst2_total) lst2\n        else lst1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.map(_.length).sum\n        val lst2_total =\
    \ lst2.map(_.length).sum\n        if (lst1_total < lst2_total) lst1\n        else\
    \ if (lst1_total > lst2_total) lst2\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1Total = 0\n        var lst2Total = 0\n        for (i <- lst1)\
    \ lst1Total += i.length\n        for (i <- lst2) lst2Total += i.length\n     \
    \   if (lst1Total < lst2Total) lst1\n        else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpnso5lm.scala:28)\n\tat Problem.main(tmphpnso5lm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len == lst2_len) lst1\n        else if (lst1_len < lst2_len)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((total, str) => total + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((total, str) => total + str.length)\n\
    \        if (lst1Total <= lst2Total) lst1 else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1Total = 0\n        var lst2Total = 0\n        for (str <-\
    \ lst1) {\n            lst1Total += str.length\n        }\n        for (str <-\
    \ lst2) {\n            lst2Total += str.length\n        }\n        if (lst1Total\
    \ < lst2Total) {\n            return lst1\n        } else if (lst1Total > lst2Total)\
    \ {\n            return lst2\n        } else {\n            return lst1\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) total1\
    \ += i.length\n        for (i <- lst2) total2 += i.length\n        if (total1\
    \ == total2) lst1\n        else if (total1 < total2) lst1\n        else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) total1\
    \ += i.length\n        for (i <- lst2) total2 += i.length\n        if (total1\
    \ < total2) lst1\n        else if (total1 > total2) lst2\n        else lst1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len == lst2_len) lst1\n        else if (lst1_len < lst2_len)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val sum1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n       \
    \ val sum2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (sum1 ==\
    \ sum2) lst1\n        else if (sum1 < sum2) lst1\n        else lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, s) => acc + s.length)\n  \
    \      val lst2Total = lst2.foldLeft(0)((acc, s) => acc + s.length)\n        if\
    \ (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbwjzrys6.scala:25)\n\tat Problem.main(tmpbwjzrys6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum > lst2.map(_.length).sum) lst2\n     \
    \   else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n \
    \       val lst2_total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n      \
    \  if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(x => x.length).sum\n        val lst2_len\
    \ = lst2.map(x => x.length).sum\n        if (lst1_len < lst2_len) lst1\n     \
    \   else if (lst1_len > lst2_len) lst2\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        // Write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1gsup57h.scala:13:78\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m14 |\e[0m        \e[34m//\
    \ Write your code here\e[0m\n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((a, b) => a + b.length)\n      \
    \  val lst2Total = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (lst1Total\
    \ < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7u7g8t8.scala:25)\n\tat Problem.main(tmpw7u7g8t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) total1\
    \ += i.length\n        for (i <- lst2) total2 += i.length\n        if (total1\
    \ == total2) lst1\n        else if (total1 < total2) lst1\n        else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total\
    \ = lst2.map(x => x.length).sum\n        if (lst1Total < lst2Total) lst1\n   \
    \     else if (lst1Total > lst2Total) lst2\n        else lst1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) total1\
    \ += i.length\n        for (i <- lst2) total2 += i.length\n        if (total1\
    \ < total2) lst1\n        else if (total1 > total2) lst2\n        else lst1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total\
    \ = lst2.map(x => x.length).sum\n        if (lst1Total < lst2Total) lst1\n   \
    \     else if (lst1Total > lst2Total) lst2\n        else lst1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) total1\
    \ += i.length\n        for (i <- lst2) total2 += i.length\n        if (total1\
    \ == total2) lst1\n        else if (total1 < total2) lst1\n        else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len == lst2_len) lst1\n        else if (lst1_len < lst2_len)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1_total = 0\n        var lst2_total = 0\n        for (i <-\
    \ lst1) {\n            lst1_total += i.length\n        }\n        for (i <- lst2)\
    \ {\n            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ lst1\n        else if (lst1_total > lst2_total) lst2\n        else lst1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(x => x.length).sum\n        val lst2_len\
    \ = lst2.map(x => x.length).sum\n        if (lst1_len < lst2_len) lst1\n     \
    \   else if (lst1_len > lst2_len) lst2\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1_total = 0\n        var lst2_total = 0\n        for (i <-\
    \ lst1) {\n            lst1_total += i.length\n        }\n        for (i <- lst2)\
    \ {\n            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ lst1\n        else if (lst1_total > lst2_total) lst2\n        else lst1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total\
    \ = lst2.map(x => x.length).sum\n        if (lst1Total < lst2Total) lst1\n   \
    \     else if (lst1Total > lst2Total) lst2\n        else lst1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.map(x => x.length).sum\n        val lst2_total\
    \ = lst2.map(x => x.length).sum\n        if (lst1_total < lst2_total) lst1\n \
    \       else if (lst1_total > lst2_total) lst2\n        else lst1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) total1\
    \ += i.length\n        for (i <- lst2) total2 += i.length\n        if (total1\
    \ < total2) lst1\n        else if (total1 > total2) lst2\n        else lst1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1 else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7vr5qn7_.scala:23)\n\tat Problem.main(tmp7vr5qn7_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1_total = 0\n        var lst2_total = 0\n        for (i <-\
    \ lst1) lst1_total += i.length\n        for (i <- lst2) lst2_total += i.length\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len == lst2_len) lst1\n        else if (lst1_len < lst2_len)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1CharCount = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val lst2CharCount = lst2.foldLeft(0)((acc, x) => acc + x.length)\n  \
    \      if (lst1CharCount < lst2CharCount) lst1\n        else if (lst1CharCount\
    \ > lst2CharCount) lst2\n        else lst1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.map(_.length).sum\n        val lst2_total =\
    \ lst2.map(_.length).sum\n        if (lst1_total < lst2_total) lst1\n        else\
    \ if (lst1_total > lst2_total) lst2\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1Total = 0\n        var lst2Total = 0\n        for (i <- lst1)\
    \ {\n            lst1Total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2Total += i.length\n        }\n        if (lst1Total < lst2Total)\
    \ {\n            return lst1\n        } else if (lst1Total > lst2Total) {\n  \
    \          return lst2\n        } else {\n            return lst1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n  \
    \      val lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkkujzfbl.scala:25)\n\tat Problem.main(tmpkkujzfbl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.map(_.length).sum\n        val lst2_total =\
    \ lst2.map(_.length).sum\n        if (lst1_total < lst2_total) lst1\n        else\
    \ if (lst1_total > lst2_total) lst2\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n  \
    \      val lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (lst1Total <= lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1Total = 0\n        var lst2Total = 0\n        for (i <- lst1)\
    \ {\n            lst1Total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2Total += i.length\n        }\n        if (lst1Total < lst2Total)\
    \ {\n            return lst1\n        } else if (lst1Total > lst2Total) {\n  \
    \          return lst2\n        } else {\n            return lst1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        for (i <- lst1) total1 += i.length\n    \
    \    var total2 = 0\n        for (i <- lst2) total2 += i.length\n        if (total1\
    \ < total2) lst1\n        else if (total1 > total2) lst2\n        else lst1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n \
    \       val lst2_total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n      \
    \  if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum > lst2.map(_.length).sum) lst2\n     \
    \   else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1Total = 0\n        var lst2Total = 0\n        for (i <- lst1)\
    \ {\n            lst1Total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2Total += i.length\n        }\n        if (lst1Total < lst2Total)\
    \ lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqeiovrnp.scala:31)\n\tat Problem.main(tmpqeiovrnp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len == lst2_len) lst1\n        else if (lst1_len < lst2_len)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum > lst2.map(_.length).sum) lst2\n     \
    \   else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1CharCount = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2CharCount = lst2.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        if (lst1CharCount < lst2CharCount) lst1\n        else if (lst1CharCount\
    \ > lst2CharCount) lst2\n        else lst1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        // Write your code here\n        var lst1_len = 0\n        var lst2_len\
    \ = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n        }\n\
    \        for (i <- lst2) {\n            lst2_len += i.length\n        }\n    \
    \    if (lst1_len == lst2_len) {\n            return lst1\n        } else if (lst1_len\
    \ < lst2_len) {\n            return lst1\n        } else {\n            return\
    \ lst2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n  \
    \      val lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkkujzfbl.scala:25)\n\tat Problem.main(tmpkkujzfbl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((total, str) => total + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((total, str) => total + str.length)\n\
    \        if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq44ks0gr.scala:25)\n\tat Problem.main(tmpq44ks0gr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n\
    \            total1 += i.length\n        }\n        for (i <- lst2) {\n      \
    \      total2 += i.length\n        }\n        if (total1 < total2) lst1\n    \
    \    else if (total1 > total2) lst2\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) total1\
    \ += i.length\n        for (i <- lst2) total2 += i.length\n        if (total1\
    \ < total2) lst1\n        else if (total1 > total2) lst2\n        else lst1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n  \
    \      val lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkkujzfbl.scala:25)\n\tat Problem.main(tmpkkujzfbl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1Total = 0\n        var lst2Total = 0\n        for (i <- lst1)\
    \ {\n            lst1Total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2Total += i.length\n        }\n        if (lst1Total < lst2Total)\
    \ lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqeiovrnp.scala:31)\n\tat Problem.main(tmpqeiovrnp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((total, str) => total + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((total, str) => total + str.length)\n\
    \        if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len == lst2_len) lst1\n        else if (lst1_len < lst2_len)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val sum1 = lst1.map(_.length).sum\n        val sum2 = lst2.map(_.length).sum\n\
    \        if (sum1 == sum2) lst1\n        else if (sum1 < sum2) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1_total = 0\n        var lst2_total = 0\n        for (i <-\
    \ lst1) {\n            lst1_total += i.length\n        }\n        for (i <- lst2)\
    \ {\n            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ lst1\n        else if (lst1_total > lst2_total) lst2\n        else lst1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val total1 = lst1.foldLeft(0)((a, b) => a + b.length)\n        val\
    \ total2 = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (total1 == total2)\
    \ lst1\n        else if (total1 < total2) lst1\n        else lst2\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val sum1 = lst1.map(_.length).sum\n        val sum2 = lst2.map(_.length).sum\n\
    \        if (sum1 < sum2) lst1 else if (sum1 > sum2) lst2 else lst1\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.map(x => x.length).sum\n        val lst2_total\
    \ = lst2.map(x => x.length).sum\n        if (lst1_total < lst2_total) lst1\n \
    \       else if (lst1_total > lst2_total) lst2\n        else lst1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val sum1 = lst1.map(x => x.length).sum\n        val sum2 = lst2.map(x\
    \ => x.length).sum\n        if (sum1 < sum2) lst1\n        else if (sum1 > sum2)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1 else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7vr5qn7_.scala:23)\n\tat Problem.main(tmp7vr5qn7_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1 else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7vr5qn7_.scala:23)\n\tat Problem.main(tmp7vr5qn7_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Chars = lst1.map(x => x.length).sum\n        val lst2Chars\
    \ = lst2.map(x => x.length).sum\n        if (lst1Chars < lst2Chars) lst1\n   \
    \     else if (lst1Chars > lst2Chars) lst2\n        else lst1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1CharCount = lst1.map(_.length).sum\n        val lst2CharCount\
    \ = lst2.map(_.length).sum\n        if (lst1CharCount < lst2CharCount) lst1\n\
    \        else if (lst1CharCount > lst2CharCount) lst2\n        else lst1\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_len = lst1.foldLeft(0)((acc, x) => acc + x.length)\n   \
    \     val lst2_len = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len) lst2\n   \
    \     else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.map(x => x.length).sum\n        val lst2_total\
    \ = lst2.map(x => x.length).sum\n        if (lst1_total < lst2_total) lst1\n \
    \       else if (lst1_total > lst2_total) lst2\n        else lst1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n\
    \            total1 += i.length\n        }\n        for (i <- lst2) {\n      \
    \      total2 += i.length\n        }\n        if (total1 < total2) lst1\n    \
    \    else if (total1 > total2) lst2\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val sum1 = lst1.foldLeft(0)((a, b) => a + b.length)\n        val\
    \ sum2 = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (sum1 == sum2) lst1\n\
    \        else if (sum1 < sum2) lst1\n        else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1_total = lst1.foldLeft(0)((total, str) => total + str.length)\n\
    \        val lst2_total = lst2.foldLeft(0)((total, str) => total + str.length)\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val sum1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n   \
    \     val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n        if\
    \ (sum1 == sum2) lst1\n        else if (sum1 < sum2) lst1\n        else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vvqgj86.scala:25)\n\tat Problem.main(tmp9vvqgj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var lst1_total = 0\n        var lst2_total = 0\n        for (i <-\
    \ lst1) {\n            lst1_total += i.length\n        }\n        for (i <- lst2)\
    \ {\n            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ lst1\n        else if (lst1_total > lst2_total) lst2\n        else lst1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) sum1\
    \ += i.length\n        for (i <- lst2) sum2 += i.length\n        if (sum1 == sum2)\
    \ lst1\n        else if (sum1 < sum2) lst1\n        else lst2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        val len1 = lst1.foldLeft(0)((acc, s) => acc + s.length)\n       \
    \ val len2 = lst2.foldLeft(0)((acc, s) => acc + s.length)\n        if (len1 <\
    \ len2) lst1 else if (len1 > len2) lst2 else lst1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n    \
    \    else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
    \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    //\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi',\
    \ 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI',\
    \ 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279E ['4']\n\
    \    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] =\
    \ {\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n     \
    \   else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt7hna4jh.scala:24)\n\tat Problem.main(tmpt7hna4jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799676
