language: scala
name: HumanEval_89_encrypt
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shift = 2 * 2\n        val shiftedAlphabet = alphabet.drop(shift) + alphabet.take(shift)\n\
    \        s.map(c => shiftedAlphabet(alphabet.indexOf(c)))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 4)\
    \ % 26)\n        }\n        encrypted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (c <- s) {\n            var index = alphabet.indexOf(c)\n\
    \            index = (index + 2) * 2\n            result += alphabet(index)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4kq1b5jg.scala:24)\n\tat Problem.main(tmp4kq1b5jg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        // TODO\n        \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2sb6_lg.scala:18)\n\tat Problem.main(tmpn2sb6_lg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i) + 2 * 2).toChar\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fxxhfpg.scala:25)\n\tat Problem.main(tmp7fxxhfpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c >= 'a' && c <= 'z') {\n     \
    \           c = ((c - 'a' + 2) % 26 + 'a').toChar\n            }\n           \
    \ result += c\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3svlg3_t.scala:25)\n\tat Problem.main(tmp3svlg3_t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            val index\
    \ = alphabet.indexOf(s(i))\n            val newIndex = (index + 2 * (index + 1))\
    \ % 26\n            result += alphabet(newIndex)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxu960c3_.scala:24)\n\tat Problem.main(tmpxu960c3_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (c <- s) {\n            val index = alphabet.indexOf(c)\n\
    \            val newIndex = (index + 2 * 2) % alphabet.length\n            encrypted\
    \ += alphabet(newIndex)\n        }\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        s.map(x => alphabetMap2((alphabetMap(x) + 2\
    \ * 2) % 26))\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetSize = alphabet.size\n\
    \        val encrypted = s.map(c => {\n            val index = alphabetMap(c)\n\
    \            val newIndex = (index + 2 * 2) % alphabetSize\n            alphabet(newIndex)\n\
    \        })\n        encrypted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap3 = alphabet.zipWithIndex.map(_.swap).toMap\n        val\
    \ alphabetMap4 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap5\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap6 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap7 = alphabet.zipWithIndex.map(_.swap).toMap\n        val\
    \ alphabetMap8 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap9\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap10 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap11 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap12 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap13\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap14 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap15 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap16 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap17\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap18 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap19 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap20 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap21\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap22 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap23 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap24 = alphabet.zipWithIndex.map(_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsa6sepoc.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsa6sepoc.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val map = alphabet.zipWithIndex.toMap\n        s.map(x => {\n            val\
    \ index = map(x)\n            val newIndex = (index + 4) % 26\n            alphabet(newIndex)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i).toInt + 2 * 2).toChar\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphojya5e7.scala:25)\n\tat Problem.main(tmphojya5e7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val map = alphabet.zipWithIndex.toMap\n        val map2 = alphabet.zipWithIndex.toMap\n\
    \        val map3 = alphabet.zipWithIndex.toMap\n        val map4 = alphabet.zipWithIndex.toMap\n\
    \        val map5 = alphabet.zipWithIndex.toMap\n        val map6 = alphabet.zipWithIndex.toMap\n\
    \        val map7 = alphabet.zipWithIndex.toMap\n        val map8 = alphabet.zipWithIndex.toMap\n\
    \        val map9 = alphabet.zipWithIndex.toMap\n        val map10 = alphabet.zipWithIndex.toMap\n\
    \        val map11 = alphabet.zipWithIndex.toMap\n        val map12 = alphabet.zipWithIndex.toMap\n\
    \        val map13 = alphabet.zipWithIndex.toMap\n        val map14 = alphabet.zipWithIndex.toMap\n\
    \        val map15 = alphabet.zipWithIndex.toMap\n        val map16 = alphabet.zipWithIndex.toMap\n\
    \        val map17 = alphabet.zipWithIndex.toMap\n        val map18 = alphabet.zipWithIndex.toMap\n\
    \        val map19 = alphabet.zipWithIndex.toMap\n        val map20 = alphabet.zipWithIndex.toMap\n\
    \        val map21 = alphabet.zipWithIndex.toMap\n        val map22 = alphabet.zipWithIndex.toMap\n\
    \        val map23 = alphabet.zipWithIndex.toMap\n        val map24 = alphabet.zipWithIndex.toMap\n\
    \        val map25 = alphabet.zipWithIndex.toMap\n        val map26 = alphabet.zipWithIndex.toMap\n\
    \        val map27 = alphabet.zipWithIndex.toMap\n        val map28 = alphabet.zipWithIndex.toMap\n\
    \        val map29 = alphabet.zipWithIndex.toMap\n        val map30 = alphabet.zipWithIndex.toMap\n\
    \        val map31 = alphabet.zipWithIndex.toMap\n        val map32 = alphabet.zipWithIndex.toMap\n\
    \        val map33 = alphabet.zipWithIndex.toMap\n        val map34 = alphabet.zipWithIndex.toMap\n\
    \        val map35 = alphabet.zipWithIndex.toMap\n       \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp__e42k1z.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c >= 'a' && c <= 'z') {\n     \
    \           var x = c - 'a'\n                x = (x + 2) % 26\n              \
    \  c = (x + 'a').toChar\n            }\n            result += c\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx1jn4snx.scala:27)\n\tat Problem.main(tmpx1jn4snx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(x => (x + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0iihtce.scala:21)\n\tat Problem.main(tmpa0iihtce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += ((c + 2 * 2).toChar)\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng215tcq.scala:25)\n\tat Problem.main(tmpng215tcq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            var index\
    \ = alphabet.indexOf(s(i))\n            index = (index + 2 * 2) % alphabet.length\n\
    \            result += alphabet(index)\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\"\
    )));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var res = \"\"\n        for (c <- s) {\n            res\
    \ += ((c + 2 * 2).toChar)\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn36p6360.scala:25)\n\tat Problem.main(tmpn36p6360.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val s2 = s.map(c => alphabetMap(c))\n        val s3 = s2.map(i => (i\
    \ + 2) * 2)\n        val s4 = s3.map(i => alphabetMap2(i % 26))\n        s4.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmdmr_1_h.scala:23)\n\tat Problem.main(tmpmdmr_1_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetSize = alphabet.size\n\
    \        val sSize = s.size\n        var encrypted = \"\"\n        for (i <- 0\
    \ until sSize) {\n            val c = s(i)\n            val index = alphabetMap(c)\n\
    \            val newIndex = (index + 2 * (i + 1)) % alphabetSize\n           \
    \ encrypted += alphabet(newIndex)\n        }\n        encrypted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgtxui12o.scala:28)\n\tat Problem.main(tmpgtxui12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shift = 2 * 2\n        val shiftedAlphabet = alphabet.drop(shift) + alphabet.take(shift)\n\
    \        s.map(c => shiftedAlphabet(alphabet.indexOf(c)))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            var\
    \ index = alphabet.indexOf(s(i))\n            var newIndex = (index + 2 * 2) %\
    \ 26\n            encrypted += alphabet(newIndex)\n        }\n        return encrypted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 4)\
    \ % 26)\n        }\n        encrypted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val newAlphabet = alphabet.drop(2) + alphabet.take(2)\n        var result =\
    \ \"\"\n        for (i <- 0 until s.length) {\n            val index = alphabet.indexOf(s(i))\n\
    \            result += newAlphabet(index)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1c9pfiua.scala:24)\n\tat Problem.main(tmp1c9pfiua.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(x => (x.toInt + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdpgegw9c.scala:21)\n\tat Problem.main(tmpdpgegw9c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetSize = alphabet.size\n\
    \        val encrypted = s.map(c => {\n            val shiftedIndex = (alphabetMap(c)\
    \ + 2 * 2) % alphabetSize\n            alphabet(shiftedIndex)\n        })\n  \
    \      encrypted\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shift = 2\n        val shiftedAlphabet = alphabet.drop(shift) + alphabet.take(shift)\n\
    \        val shiftedAlphabetMap = alphabet.zip(shiftedAlphabet).toMap\n      \
    \  s.map(c => shiftedAlphabetMap(c))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ztwgioh.scala:21)\n\tat Problem.main(tmp_ztwgioh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val encrypted = new StringBuilder()\n        for (c <- s) {\n            val\
    \ index = alphabet.indexOf(c)\n            val newIndex = (index + 2 * 2) % alphabet.length\n\
    \            encrypted.append(alphabet(newIndex))\n        }\n        encrypted.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val map = alphabet.zipWithIndex.toMap\n        val map2 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val s2 = s.map(x => map(x.toString)).map(x => (x + 2) * 2).map(x => map2(x\
    \ % 26)).mkString\n        s2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk6u7kpxu.scala:17:32\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ms2\e\
    [0m = s.map(\e[36mx\e[0m => map(x.toString)).map(\e[36mx\e[0m => (x + \e[31m2\e\
    [0m) * \e[31m2\e[0m).map(\e[36mx\e[0m => map2(x % \e[31m26\e[0m)).mkString\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Found:    String\n\e[31m   |\e[0m         \
    \                       Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            val index\
    \ = alphabet.indexOf(s(i))\n            result += alphabet((index + 4) % 26)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 2\
    \ * 2) % alphabet.length)\n        }\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shifted = alphabet.drop(2) + alphabet.take(2)\n        s.map(c => shifted(alphabet.indexOf(c)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaoazndi7.scala:19)\n\tat Problem.main(tmpaoazndi7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            encrypted\
    \ += alphabet((alphabet.indexOf(s(i)) + 2 * 2) % 26)\n        }\n        encrypted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 4)\
    \ % 26)\n        }\n        encrypted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabet_map = alphabet.zipWithIndex.toMap\n        val alphabet_map_reverse\
    \ = alphabet_map.map(_.swap)\n        val encrypted = s.map(x => alphabet_map_reverse((alphabet_map(x)\
    \ + 2 * 2) % 26))\n        encrypted.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shiftedAlphabet = alphabet.drop(2) + alphabet.take(2)\n        val alphabetMap\
    \ = alphabet.zip(shiftedAlphabet).toMap\n        s.map(c => alphabetMap(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcezvyreg.scala:20)\n\tat Problem.main(tmpcezvyreg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetLength =\
    \ alphabet.length\n        val encrypted = s.map(c => {\n            val index\
    \ = alphabetMap(c)\n            val newIndex = (index + 2 * 2) % alphabetLength\n\
    \            alphabet(newIndex)\n        })\n        encrypted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            result\
    \ += alphabet((alphabet.indexOf(s(i)) + 2 * 2) % alphabet.length)\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shift = alphabet.drop(2) + alphabet.take(2)\n        s.map(c => shift(alphabet.indexOf(c)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_q9p882k.scala:19)\n\tat Problem.main(tmp_q9p882k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shifted = alphabet.drop(2) + alphabet.take(2)\n        val mapping = (alphabet\
    \ zip shifted).toMap\n        s.map(c => mapping(c))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi0hzcapz.scala:20)\n\tat Problem.main(tmpi0hzcapz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        // Write your code here\n        return \"\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfe0z6491.scala:18)\n\tat Problem.main(tmpfe0z6491.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap3 = alphabet.zipWithIndex.map(_.swap).toMap\n        val\
    \ alphabetMap4 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap5\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap6 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap7 = alphabet.zipWithIndex.map(_.swap).toMap\n        val\
    \ alphabetMap8 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap9\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap10 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap11 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap12 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap13\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap14 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap15 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap16 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap17\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap18 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap19 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap20 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap21\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap22 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap23 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap24 = alphabet.zipWithIndex.map(_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsa6sepoc.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsa6sepoc.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i).toInt + 2 * 2).toChar\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphojya5e7.scala:25)\n\tat Problem.main(tmphojya5e7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2).toChar\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswn3an9n.scala:21)\n\tat Problem.main(tmpswn3an9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(x => (x + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0iihtce.scala:21)\n\tat Problem.main(tmpa0iihtce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shiftedAlphabet = alphabet.drop(2) + alphabet.take(2)\n        val shiftedAlphabetMap\
    \ = alphabet.zip(shiftedAlphabet).toMap\n        s.map(x => shiftedAlphabetMap(x.toString)).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9kfsnek.scala:17:38\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        s.map(\e[36mx\e[0m =>\
    \ shiftedAlphabetMap(x.toString)).mkString\n\e[31m\e[31m   |\e[0m            \
    \                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    Found:    String\n\e[31m   |\e[0m                       \
    \               Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shifted = alphabet.drop(2) + alphabet.take(2)\n        s.map(c => shifted(alphabet.indexOf(c)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaoazndi7.scala:19)\n\tat Problem.main(tmpaoazndi7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val newAlphabet = alphabet.substring(2) + alphabet.substring(0, 2)\n      \
    \  val map = alphabet.zip(newAlphabet).toMap\n        s.map(c => map(c.toString)).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqogzreac.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        s.map(\e[36mc\e[0m =>\
    \ map(c.toString)).mkString\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    String\n\e[31m   |\e[0m \
    \                      Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i) + 2 * 2).toChar\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fxxhfpg.scala:25)\n\tat Problem.main(tmp7fxxhfpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val newAlphabet = alphabet.drop(2) + alphabet.take(2)\n        val newAlphabetMap\
    \ = alphabet.zip(newAlphabet).toMap\n        s.map(newAlphabetMap(_))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpty9hiq6l.scala:20)\n\tat Problem.main(tmpty9hiq6l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += ((c.toInt + 2 * 2).toChar)\n        }\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfae4v2oh.scala:25)\n\tat Problem.main(tmpfae4v2oh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c >= 'a' && c <= 'z') {\n     \
    \           var d = c + 2 * 2\n                if (d > 'z') {\n              \
    \      d = 'a' + (d - 'z' - 1)\n                }\n                result += d\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                var d = c + 2\
    \ * 2\n                if (d > 'Z') {\n                    d = 'A' + (d - 'Z'\
    \ - 1)\n                }\n                result += d\n            } else {\n\
    \                result += c\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp32c5uyvr.scala:36)\n\tat Problem.main(tmp32c5uyvr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val map = alphabet.zipWithIndex.toMap\n        val newAlphabet = alphabet.drop(2)\
    \ + alphabet.take(2)\n        val newMap = newAlphabet.zipWithIndex.toMap\n  \
    \      s.map(x => newAlphabet(map(x.toString))).mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5qunjso.scala:18:35\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        s.map(\e[36mx\e[0m =>\
    \ newAlphabet(map(x.toString))).mkString\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \            Found:    String\n\e[31m   |\e[0m                               \
    \    Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i) + 2 * 2).toChar\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fxxhfpg.scala:25)\n\tat Problem.main(tmp7fxxhfpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (c <- s) {\n            val index = alphabet.indexOf(c)\n\
    \            result += alphabet((index + 2) % 26)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp928g_3p3.scala:23)\n\tat Problem.main(tmp928g_3p3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (c <- s) {\n            val index = alphabet.indexOf(c)\n\
    \            val newIndex = (index + 2 * 2) % alphabet.length\n            encrypted\
    \ += alphabet(newIndex)\n        }\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val a = s.toCharArray\n        val b = a.map(x => x +\
    \ 2 * 2)\n        b.map(x => x.toChar).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t39_lxn.scala:23)\n\tat Problem.main(tmp6t39_lxn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            var index\
    \ = alphabet.indexOf(s(i))\n            if (index == -1) result += s(i)\n    \
    \        else {\n                index = (index + 2 * 2) % alphabet.length\n \
    \               result += alphabet(index)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  var newChar = c + 2\n            if (newChar > 'z') {\n                newChar\
    \ = 'a' + (newChar - 'z') - 1\n            }\n            result += newChar\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo8klvzee.scala:25)\n\tat Problem.main(tmpo8klvzee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = Map() ++ alphabet.zipWithIndex\n        val encrypted = s.map(x\
    \ => alphabet((alphabetMap(x) + 2 * 2) % 26))\n        encrypted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i) + 2 * 2).toChar\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fxxhfpg.scala:25)\n\tat Problem.main(tmp7fxxhfpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  var newChar = c + 2 * 2\n            if (newChar > 'z') {\n               \
    \ newChar = 'a' + (newChar - 'z' - 1)\n            }\n            result += newChar\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ie00oah.scala:25)\n\tat Problem.main(tmp8ie00oah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val map = alphabet.zipWithIndex.toMap\n        val shift = 2 * 2\n        s.map(c\
    \ => {\n            val index = map(c)\n            val newIndex = (index + shift)\
    \ % alphabet.length\n            alphabet(newIndex)\n        })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(x => (x + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0iihtce.scala:21)\n\tat Problem.main(tmpa0iihtce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val encryptedAlphabet\
    \ = alphabet.drop(2) + alphabet.take(2)\n        val encryptedAlphabetMap = encryptedAlphabet.zipWithIndex.toMap\n\
    \        val encrypted = s.map(c => encryptedAlphabet(alphabetMap(c)))\n     \
    \   encrypted\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk2sc6086.scala:22)\n\tat Problem.main(tmpk2sc6086.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val sMap = s.map(c => alphabetMap(c))\n        val sMap2 = sMap.map(i\
    \ => alphabetMap2(i + 2 * (i + 1)))\n        sMap2.map(i => alphabet(i)).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 26\n\tat scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)\n\
    \tat scala.collection.immutable.HashMap.apply(HashMap.scala:132)\n\tat Problem$.$anonfun$3(tmp435blgvx.scala:18)\n\
    \tat Problem$.$anonfun$adapted$2(tmp435blgvx.scala:18)\n\tat scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)\n\
    \tat scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)\n\tat Problem$.encrypt(tmp435blgvx.scala:18)\n\
    \tat Problem$.main(tmp435blgvx.scala:22)\n\tat Problem.main(tmp435blgvx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += ((c.toInt - 97 + 2 * 2) % 26 + 97).toChar\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val map = alphabet.zipWithIndex.toMap\n        val newAlphabet = alphabet.drop(2)\
    \ + alphabet.take(2)\n        s.map(c => newAlphabet(map(c)))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvaxp9ljr.scala:20)\n\tat Problem.main(tmpvaxp9ljr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabet_map = alphabet.zipWithIndex.toMap\n        var result = \"\"\n\
    \        for (i <- 0 until s.length) {\n            val index = alphabet_map(s(i))\n\
    \            val new_index = (index + 2 * (index + 1)) % 26\n            result\
    \ += alphabet(new_index)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1jeuirfv.scala:25)\n\tat Problem.main(tmp1jeuirfv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetList = alphabet.toList\n\
    \        val alphabetSize = alphabet.size\n        val encrypted = for (c <- s)\
    \ yield {\n            val index = alphabetMap(c)\n            val newIndex =\
    \ (index + 2 * (index + 1)) % alphabetSize\n            alphabetList(newIndex)\n\
    \        }\n        encrypted.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6kk8djjl.scala:26)\n\tat Problem.main(tmp6kk8djjl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            encrypted\
    \ += alphabet((alphabet.indexOf(s(i)) + (2 * 2)) % 26)\n        }\n        encrypted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var newString = \"\"\n        for (i <- 0 until s.length) {\n            var\
    \ index = alphabet.indexOf(s(i))\n            index += 2 * 2\n            if (index\
    \ >= alphabet.length) {\n                index -= alphabet.length\n          \
    \  }\n            newString += alphabet(index)\n        }\n        return newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2).toChar\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswn3an9n.scala:21)\n\tat Problem.main(tmpswn3an9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 2\
    \ * 2) % alphabet.length)\n        }\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = ('a' to 'z').toList\n        val shifted\
    \ = alphabet.drop(2) ++ alphabet.take(2)\n        val map = alphabet.zip(shifted).toMap\n\
    \        s.map(c => map(c))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnnfkvsiz.scala:20)\n\tat Problem.main(tmpnnfkvsiz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (c <- s) {\n            val index = alphabet.indexOf(c)\n\
    \            val newIndex = (index + 4) % 26\n            encrypted += alphabet(newIndex)\n\
    \        }\n        encrypted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  var newChar = (c + 2 * 2).toChar\n            if (newChar > 'z') {\n      \
    \          newChar = (newChar - 'z' + 'a' - 1).toChar\n            }\n       \
    \     result += newChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 2\
    \ * 2) % alphabet.length)\n        }\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap3 = alphabet.zipWithIndex.map(_.swap).toMap\n        val\
    \ alphabetMap4 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap5\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap6 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap7 = alphabet.zipWithIndex.map(_.swap).toMap\n        val\
    \ alphabetMap8 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap9\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap10 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap11 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap12 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap13\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap14 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap15 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap16 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap17\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap18 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap19 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap20 = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap21\
    \ = alphabet.zipWithIndex.map(_.swap).toMap\n        val alphabetMap22 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val alphabetMap23 = alphabet.zipWithIndex.map(_.swap).toMap\n       \
    \ val alphabetMap24 = alphabet.zipWithIndex.map(_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsa6sepoc.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsa6sepoc.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.toMap.map(_.swap)\n\
    \        val encrypted = s.map(x => alphabetMap2(alphabetMap(x) + 2 * 2))\n  \
    \      encrypted.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 26\n\tat scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)\n\
    \tat scala.collection.immutable.HashMap.apply(HashMap.scala:132)\n\tat Problem$.$anonfun$2(tmp6wv3pih7.scala:17)\n\
    \tat Problem$.$anonfun$adapted$1(tmp6wv3pih7.scala:17)\n\tat scala.collection.StringOps$.map$extension(StringOps.scala:223)\n\
    \tat Problem$.encrypt(tmp6wv3pih7.scala:17)\n\tat Problem$.main(tmp6wv3pih7.scala:25)\n\
    \tat Problem.main(tmp6wv3pih7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c == 'z') {\n                c\
    \ = 'b'\n            } else if (c == 'y') {\n                c = 'a'\n       \
    \     } else {\n                c = (c + 2).toChar\n            }\n          \
    \  result += c\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw6dt_je_.scala:29)\n\tat Problem.main(tmpw6dt_je_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            val index\
    \ = alphabet.indexOf(s(i))\n            result += alphabet((index + 4) % 26)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(x => (x + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0iihtce.scala:21)\n\tat Problem.main(tmpa0iihtce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(c => (c + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6xoxjkx.scala:21)\n\tat Problem.main(tmpk6xoxjkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shifted = alphabet.drop(2) + alphabet.take(2)\n        s.map(c => shifted(alphabet.indexOf(c)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaoazndi7.scala:19)\n\tat Problem.main(tmpaoazndi7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shifted = alphabet.drop(2) + alphabet.take(2)\n        s.map(c => shifted(alphabet.indexOf(c)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaoazndi7.scala:19)\n\tat Problem.main(tmpaoazndi7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabet_map = alphabet.zipWithIndex.toMap\n        val alphabet_map_inverse\
    \ = alphabet_map.map(_.swap)\n        val s_list = s.toList\n        val s_list_index\
    \ = s_list.map(alphabet_map(_))\n        val s_list_index_shifted = s_list_index.map(x\
    \ => (x + 2 * 2) % 26)\n        val s_list_shifted = s_list_index_shifted.map(alphabet_map_inverse(_))\n\
    \        s_list_shifted.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 2\
    \ * (i + 1)) % alphabet.length)\n        }\n        encrypted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgnq_it8h.scala:23)\n\tat Problem.main(tmpgnq_it8h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 4)\
    \ % 26)\n        }\n        encrypted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.toMap.map(x\
    \ => (x._2, x._1))\n        val s2 = s.map(x => alphabetMap(x))\n        val s3\
    \ = s2.map(x => (x + 2) % 26)\n        val s4 = s3.map(x => alphabetMap2(x))\n\
    \        s4.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1atz8arn.scala:23)\n\tat Problem.main(tmp1atz8arn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2).toChar\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswn3an9n.scala:21)\n\tat Problem.main(tmpswn3an9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += ((c.toInt + 2 * 2).toChar)\n        }\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfae4v2oh.scala:25)\n\tat Problem.main(tmpfae4v2oh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val s2 = s.map(x => alphabetMap(x.toString)).map(x => (x + 4) % 26).map(x\
    \ => alphabetMap2(x))\n        s2.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4k6algh.scala:17:40\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ms2\e\
    [0m = s.map(\e[36mx\e[0m => alphabetMap(x.toString)).map(\e[36mx\e[0m => (x +\
    \ \e[31m4\e[0m) % \e[31m26\e[0m).map(\e[36mx\e[0m => alphabetMap2(x))\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                        Found:    String\n\e[31m   |\e\
    [0m                                        Required: Char\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.toMap.map(_.swap)\n\
    \        val s2 = s.map(x => alphabetMap(x) + 2)\n        val s3 = s2.map(x =>\
    \ alphabetMap2(x % 26))\n        s3.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkcg8ea8m.scala:22)\n\tat Problem.main(tmpkcg8ea8m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shift = 2 * 2\n        val shiftedAlphabet = alphabet.drop(shift) + alphabet.take(shift)\n\
    \        s.map(c => shiftedAlphabet(alphabet.indexOf(c)))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += ((c.toInt + 2 * 2).toChar)\n        }\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfae4v2oh.scala:25)\n\tat Problem.main(tmpfae4v2oh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val encrypted = new\
    \ StringBuilder\n        for (c <- s) {\n            val index = alphabetMap(c)\n\
    \            val newIndex = (index + 4) % 26\n            encrypted += alphabet(newIndex)\n\
    \        }\n        encrypted.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(c => (c + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6xoxjkx.scala:21)\n\tat Problem.main(tmpk6xoxjkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  var newChar = c + 2 * 2\n            if (newChar > 'z') {\n               \
    \ newChar = newChar - 26\n            }\n            result += newChar\n     \
    \   }\n        return result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfbfm966r.scala:25)\n\tat Problem.main(tmpfbfm966r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  s.map(x => alphabet((alphabet.indexOf(x) + 2 * 2) % alphabet.length))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val newAlphabet = alphabet.substring(2) + alphabet.substring(0, 2)\n      \
    \  val map = alphabet.zip(newAlphabet).toMap\n        s.map(c => map(c))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_a6g50w.scala:20)\n\tat Problem.main(tmpj_a6g50w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val encrypted = new StringBuilder\n        for (c <- s) {\n            val\
    \ index = alphabet.indexOf(c)\n            val newIndex = (index + 2 * 2) % alphabet.length\n\
    \            encrypted += alphabet(newIndex)\n        }\n        encrypted.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val encrypted = s.map(c\
    \ => alphabet((alphabetMap(c) + 4) % 26))\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (c <- s) {\n            val index = alphabet.indexOf(c)\n\
    \            val newIndex = (index + 2 * 2) % alphabet.length\n            encrypted\
    \ += alphabet(newIndex)\n        }\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        // Create a map of the alphabet\n        val alphabet\
    \ = ('a' to 'z').toList\n        val alphabetMap = alphabet.zipWithIndex.toMap\n\
    \        // Create a map of the encrypted alphabet\n        val encryptedAlphabet\
    \ = alphabet.map(x => {\n            if (alphabetMap(x) + 4 >= alphabet.length)\
    \ {\n                alphabet(alphabetMap(x) + 4 - alphabet.length)\n        \
    \    } else {\n                alphabet(alphabetMap(x) + 4)\n            }\n \
    \       })\n        // Create a map of the encrypted alphabet\n        val encryptedAlphabetMap\
    \ = encryptedAlphabet.zipWithIndex.toMap\n        // Encrypt the string\n    \
    \    s.map(x => {\n            if (alphabetMap(x) + 4 >= alphabet.length) {\n\
    \                encryptedAlphabet(alphabetMap(x) + 4 - alphabet.length)\n   \
    \         } else {\n                encryptedAlphabet(alphabetMap(x) + 4)\n  \
    \          }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxdv4qphw.scala:37)\n\tat Problem.main(tmpxdv4qphw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val encrypted = new StringBuilder\n        for (c <- s) {\n            val\
    \ index = alphabet.indexOf(c)\n            val newIndex = (index + 2 * 2) % alphabet.length\n\
    \            encrypted += alphabet(newIndex)\n        }\n        encrypted.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i).toInt + 2 * 2).toChar)\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahkycnds.scala:25)\n\tat Problem.main(tmpahkycnds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        // TODO: Implement me!\n        return \"\"\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hhwk8a6.scala:18)\n\tat Problem.main(tmp0hhwk8a6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += ((c + 2 * 2).toChar)\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng215tcq.scala:25)\n\tat Problem.main(tmpng215tcq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\".toList\n\
    \        val encrypted = s.toList.map(x => alphabet(alphabet.indexOf(x) + 2 *\
    \ 2))\n        encrypted.mkString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpg1r4ogps.scala:15)\n\tat Problem$.$anonfun$adapted$1(tmpg1r4ogps.scala:15)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpg1r4ogps.scala:15)\n\
    \tat Problem$.main(tmpg1r4ogps.scala:23)\n\tat Problem.main(tmpg1r4ogps.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabet2 = alphabet.drop(2) + alphabet.take(2)\n        val alphabet3\
    \ = alphabet2.drop(2) + alphabet2.take(2)\n        val alphabet4 = alphabet3.drop(2)\
    \ + alphabet3.take(2)\n        val alphabet5 = alphabet4.drop(2) + alphabet4.take(2)\n\
    \        val alphabet6 = alphabet5.drop(2) + alphabet5.take(2)\n        val alphabet7\
    \ = alphabet6.drop(2) + alphabet6.take(2)\n        val alphabet8 = alphabet7.drop(2)\
    \ + alphabet7.take(2)\n        val alphabet9 = alphabet8.drop(2) + alphabet8.take(2)\n\
    \        val alphabet10 = alphabet9.drop(2) + alphabet9.take(2)\n        val alphabet11\
    \ = alphabet10.drop(2) + alphabet10.take(2)\n        val alphabet12 = alphabet11.drop(2)\
    \ + alphabet11.take(2)\n        val alphabet13 = alphabet12.drop(2) + alphabet12.take(2)\n\
    \        val alphabet14 = alphabet13.drop(2) + alphabet13.take(2)\n        val\
    \ alphabet15 = alphabet14.drop(2) + alphabet14.take(2)\n        val alphabet16\
    \ = alphabet15.drop(2) + alphabet15.take(2)\n        val alphabet17 = alphabet16.drop(2)\
    \ + alphabet16.take(2)\n        val alphabet18 = alphabet17.drop(2) + alphabet17.take(2)\n\
    \        val alphabet19 = alphabet18.drop(2) + alphabet18.take(2)\n        val\
    \ alphabet20 = alphabet19.drop(2) + alphabet19.take(2)\n        val alphabet21\
    \ = alphabet20.drop(2) + alphabet20.take(2)\n        val alphabet22 = alphabet21.drop(2)\
    \ + alphabet21.take(2)\n        val alphabet23 = alphabet22.drop(2) + alphabet22.take(2)\n\
    \        val alphabet24 = alphabet23.drop(2) + alphabet23.take(2)\n        val\
    \ alphabet25 = alphabet24.drop\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppawwwqay.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        // Write your code here\n        return \"\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfe0z6491.scala:18)\n\tat Problem.main(tmpfe0z6491.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c >= 'a' && c <= 'z') {\n     \
    \           c = ((c - 'a' + 2) % 26 + 'a').toChar\n            }\n           \
    \ result += c\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3svlg3_t.scala:25)\n\tat Problem.main(tmp3svlg3_t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            val index\
    \ = alphabet.indexOf(s(i))\n            result += alphabet((index + 2 * 2) % alphabet.length)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += ((c.toInt + 2 * 2).toChar)\n        }\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfae4v2oh.scala:25)\n\tat Problem.main(tmpfae4v2oh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetLength =\
    \ alphabet.length\n        val encrypted = s.map(c => {\n            val index\
    \ = alphabetMap(c)\n            val newIndex = (index + 2 * 2) % alphabetLength\n\
    \            alphabet(newIndex)\n        })\n        encrypted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (c <- s) {\n            var index = alphabet.indexOf(c)\n\
    \            if (index == -1) {\n                result += c\n            } else\
    \ {\n                index = (index + 2) * 2\n                if (index >= alphabet.length)\
    \ {\n                    index -= alphabet.length\n                }\n       \
    \         result += alphabet(index)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch5c09qj.scala:31)\n\tat Problem.main(tmpch5c09qj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            val index\
    \ = alphabet.indexOf(s(i))\n            result += alphabet((index + 2 * (index\
    \ + 1)) % 26)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0whb5stt.scala:23)\n\tat Problem.main(tmp0whb5stt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMapReverse\
    \ = alphabetMap.map(_.swap)\n        val sArray = s.toCharArray\n        val sArrayEncrypted\
    \ = sArray.map(x => alphabetMapReverse((alphabetMap(x) + 4) % 26))\n        sArrayEncrypted.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        // Write your code here\n        return \"\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfe0z6491.scala:18)\n\tat Problem.main(tmpfe0z6491.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2*2).toChar\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfsne8cww.scala:25)\n\tat Problem.main(tmpfsne8cww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            val newIndex = (index + 2 * 2) %\
    \ alphabet.length\n            encrypted += alphabet(newIndex)\n        }\n  \
    \      encrypted\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val map = alphabet.zipWithIndex.toMap\n        val encrypted = for (c <- s)\
    \ yield {\n            val index = map(c)\n            val newIndex = (index +\
    \ 4) % 26\n            alphabet(newIndex)\n        }\n        encrypted.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(x => (x + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0iihtce.scala:21)\n\tat Problem.main(tmpa0iihtce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetSize = alphabet.size\n\
    \        val encrypted = new StringBuilder\n        for (c <- s) {\n         \
    \   val index = alphabetMap(c)\n            val newIndex = (index + 2 * 2) % alphabetSize\n\
    \            encrypted += alphabet(newIndex)\n        }\n        encrypted.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            val newIndex = (index + 2 * 2) %\
    \ alphabet.length\n            encrypted += alphabet(newIndex)\n        }\n  \
    \      encrypted\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i) + 2 * 2).toChar\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fxxhfpg.scala:25)\n\tat Problem.main(tmp7fxxhfpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c == 'z') {\n                c\
    \ = 'b'\n            } else if (c == 'y') {\n                c = 'a'\n       \
    \     } else {\n                c = (c + 2).toChar\n            }\n          \
    \  result += c\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw6dt_je_.scala:29)\n\tat Problem.main(tmpw6dt_je_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            encrypted\
    \ += alphabet((alphabet.indexOf(s(i)) + (2 * 2)) % 26)\n        }\n        encrypted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.map(_.swap).toMap\n\
    \        val s2 = s.map(x => alphabetMap(x.toString)).map(x => x + 2 * 2).map(x\
    \ => alphabetMap2(x % 26))\n        s2.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpit46yk4t.scala:17:40\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ms2\e\
    [0m = s.map(\e[36mx\e[0m => alphabetMap(x.toString)).map(\e[36mx\e[0m => x + \e\
    [31m2\e[0m * \e[31m2\e[0m).map(\e[36mx\e[0m => alphabetMap2(x % \e[31m26\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        Found:    String\n\e[31m\
    \   |\e[0m                                        Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val map = alphabet.zipWithIndex.toMap\n        val newAlphabet = alphabet.drop(2)\
    \ + alphabet.take(2)\n        val newMap = newAlphabet.zipWithIndex.toMap\n  \
    \      s.map(x => newAlphabet(map(x.toString))).mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5qunjso.scala:18:35\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        s.map(\e[36mx\e[0m =>\
    \ newAlphabet(map(x.toString))).mkString\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \            Found:    String\n\e[31m   |\e[0m                               \
    \    Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 2\
    \ * 2) % alphabet.length)\n        }\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            val c = s(i)\n            val d = c + 2 * 2\n            result\
    \ += d.toChar\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp24gy1an6.scala:27)\n\tat Problem.main(tmp24gy1an6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2).toChar\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswn3an9n.scala:21)\n\tat Problem.main(tmpswn3an9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2).toChar\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswn3an9n.scala:21)\n\tat Problem.main(tmpswn3an9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            val newIndex = (index + 2 * 2) %\
    \ alphabet.length\n            encrypted += alphabet(newIndex)\n        }\n  \
    \      encrypted\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            val index\
    \ = alphabet.indexOf(s(i))\n            result += alphabet((index + 4) % 26)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val encrypted = new StringBuilder\n        for (i <- 0 until s.length) {\n\
    \            val index = alphabet.indexOf(s(i))\n            encrypted.append(alphabet((index\
    \ + 2 * (index + 1)) % 26))\n        }\n        encrypted.toString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0rsu5n9.scala:23)\n\tat Problem.main(tmpw0rsu5n9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c >= 'a' && c <= 'z') {\n     \
    \           c = ((c - 'a' + 2) % 26 + 'a').toChar\n            }\n           \
    \ result += c\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3svlg3_t.scala:25)\n\tat Problem.main(tmp3svlg3_t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            val newIndex = (index + 2 * 2) %\
    \ alphabet.length\n            encrypted += alphabet(newIndex)\n        }\n  \
    \      encrypted\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += ((c + 2 * 2).toChar)\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng215tcq.scala:25)\n\tat Problem.main(tmpng215tcq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i) + 2 * 2).toChar\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fxxhfpg.scala:25)\n\tat Problem.main(tmp7fxxhfpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val n = alphabet.length\n        val shift = 2 * 2\n        val shiftedAlphabet\
    \ = alphabet.drop(shift) + alphabet.take(shift)\n        s.map(c => shiftedAlphabet(alphabet.indexOf(c)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2).toChar\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswn3an9n.scala:21)\n\tat Problem.main(tmpswn3an9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap3 = alphabet.zipWithIndex.toMap\n        val alphabetMap4\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap5 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap6 = alphabet.zipWithIndex.toMap\n        val alphabetMap7\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap8 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap9 = alphabet.zipWithIndex.toMap\n        val alphabetMap10\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap11 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap12 = alphabet.zipWithIndex.toMap\n        val alphabetMap13\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap14 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap15 = alphabet.zipWithIndex.toMap\n        val alphabetMap16\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap17 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap18 = alphabet.zipWithIndex.toMap\n        val alphabetMap19\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap20 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap21 = alphabet.zipWithIndex.toMap\n        val alphabetMap22\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap23 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap24 = alphabet.zipWithIndex.toMap\n        val alphabetMap25\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap26 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap27 = alphabet.zipWithIndex.toMap\n        val alphabetMap28\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap29 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap30 = alphabet.zipWithIndex.toMap\n        val alphabetMap31\
    \ = alphabet.zipWithIndex.toMap\n        val alphabetMap32 = alphabet.zipWithIndex.toMap\n\
    \        val alphabetMap33 = alphabet.zipWithIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwai3i8r.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += ((c + 2 * 2).toChar)\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng215tcq.scala:25)\n\tat Problem.main(tmpng215tcq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i).toInt + 2 * 2).toChar\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphojya5e7.scala:25)\n\tat Problem.main(tmphojya5e7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.toMap.map(_.swap)\n\
    \        val s2 = s.map(c => alphabetMap2(alphabetMap(c) + 2 * 2))\n        s2.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 26\n\tat scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)\n\
    \tat scala.collection.immutable.HashMap.apply(HashMap.scala:132)\n\tat Problem$.$anonfun$2(tmpuc74tuwj.scala:17)\n\
    \tat Problem$.$anonfun$adapted$1(tmpuc74tuwj.scala:17)\n\tat scala.collection.StringOps$.map$extension(StringOps.scala:223)\n\
    \tat Problem$.encrypt(tmpuc74tuwj.scala:17)\n\tat Problem$.main(tmpuc74tuwj.scala:25)\n\
    \tat Problem.main(tmpuc74tuwj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c >= 'a' && c <= 'z') {\n     \
    \           c = ((c - 'a' + 2) % 26 + 'a').toChar\n            }\n           \
    \ result += c\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3svlg3_t.scala:25)\n\tat Problem.main(tmp3svlg3_t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            encrypted\
    \ += alphabet((alphabet.indexOf(s(i)) + 2 * 2) % 26)\n        }\n        encrypted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val map = alphabet.zipWithIndex.toMap\n        val map2 = alphabet.zipWithIndex.toMap\n\
    \        var result = \"\"\n        for (i <- 0 until s.length) {\n          \
    \  val index = map(s(i))\n            val index2 = (index + 2 * (index + 1)) %\
    \ 26\n            result += map2.find(_._2 == index2).get._1\n        }\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1pjjjmoz.scala:26)\n\tat Problem.main(tmp1pjjjmoz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(x => (x.toInt + 2*2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmper6wwos0.scala:21)\n\tat Problem.main(tmper6wwos0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            val index\
    \ = alphabet.indexOf(s(i))\n            result += alphabet((index + 2 * (i + 1))\
    \ % alphabet.length)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprq6c0sv_.scala:23)\n\tat Problem.main(tmprq6c0sv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c >= 'a' && c <= 'z') {\n     \
    \           var n = (c - 'a' + 2) % 26\n                result += ('a' + n).toChar\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                var n = (c -\
    \ 'A' + 2) % 26\n                result += ('A' + n).toChar\n            } else\
    \ {\n                result += c\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbpvuypdp.scala:30)\n\tat Problem.main(tmpbpvuypdp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2).toChar\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswn3an9n.scala:21)\n\tat Problem.main(tmpswn3an9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            result\
    \ += alphabet((alphabet.indexOf(s(i)) + 2 * 2) % alphabet.length)\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2 * 2) % 26 + 'a').toChar\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += (s(i) + 2 * 2).toChar\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fxxhfpg.scala:25)\n\tat Problem.main(tmp7fxxhfpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val encrypted = new StringBuilder\n        for (c <- s) {\n            val\
    \ index = alphabet.indexOf(c)\n            val newIndex = (index + 2 * 2) % alphabet.length\n\
    \            encrypted += alphabet(newIndex)\n        }\n        encrypted.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val newAlphabet = alphabet.drop(2) + alphabet.take(2)\n        s.map(c => newAlphabet(alphabet.indexOf(c)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqee0s2_.scala:19)\n\tat Problem.main(tmpgqee0s2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.toMap.map(_.swap)\n\
    \        val alphabetMap3 = alphabet.zipWithIndex.toMap.map(_.swap).map(_.swap)\n\
    \        val alphabetMap4 = alphabet.zipWithIndex.toMap.map(_.swap).map(_.swap).map(_.swap)\n\
    \        val alphabetMap5 = alphabet.zipWithIndex.toMap.map(_.swap).map(_.swap).map(_.swap).map(_.swap)\n\
    \        val alphabetMap6 = alphabet.zipWithIndex.toMap.map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap)\n\
    \        val alphabetMap7 = alphabet.zipWithIndex.toMap.map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap)\n\
    \        val alphabetMap8 = alphabet.zipWithIndex.toMap.map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap)\n\
    \        val alphabetMap9 = alphabet.zipWithIndex.toMap.map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap)\n\
    \        val alphabetMap10 = alphabet.zipWithIndex.toMap.map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap)\n\
    \        val alphabetMap11 = alphabet.zipWithIndex.toMap.map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuenorty1.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpuenorty1.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 2\
    \ * 2) % alphabet.length)\n        }\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        // TODO: Implement this function\n        return \"\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcb9vqg54.scala:18)\n\tat Problem.main(tmpcb9vqg54.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        // Rotate the alphabet by two places\n        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val rotatedAlphabet = alphabet.drop(2)\
    \ + alphabet.take(2)\n        // Create a map of the alphabet to the rotated alphabet\n\
    \        val alphabetMap = alphabet.zip(rotatedAlphabet).toMap\n        // Map\
    \ each character in the string to the rotated alphabet\n        s.map(c => alphabetMap(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsakrjm2f.scala:23)\n\tat Problem.main(tmpsakrjm2f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (c <- s) {\n          \
    \  result += (c + 2 * 2).toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5rl788u.scala:25)\n\tat Problem.main(tmpw5rl788u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val newAlphabet = alphabet.substring(2, alphabet.length) + alphabet.substring(0,\
    \ 2)\n        val map = alphabet.zip(newAlphabet).toMap\n        s.map(x => map(x.toString)).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd21hsbx_.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        s.map(\e[36mx\e[0m =>\
    \ map(x.toString)).mkString\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    String\n\e[31m   |\e[0m \
    \                      Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            val newIndex = (index + 2 * 2) %\
    \ alphabet.length\n            encrypted += alphabet(newIndex)\n        }\n  \
    \      encrypted\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            result += ((s(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nwwtrmn.scala:21)\n\tat Problem.main(tmp0nwwtrmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var encrypted = \"\"\n        for (i <- 0 until s.length) {\n            val\
    \ index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index + 2\
    \ * 2) % alphabet.length)\n        }\n        encrypted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(x => (x + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0iihtce.scala:21)\n\tat Problem.main(tmpa0iihtce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797582
