name: HumanEval_105_by_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
  \    // reverse the resulting array, and then replace each digit by its corresponding\
  \ name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
  Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5,\
  \ 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse\
  \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty,\
  \ return an empty array:\n    // arr = []\n    // return []\n    // If the array\
  \ has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort\
  \ arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n\
  \    def byLength(arr : List[Long]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
  \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
  \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"\
  One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
  Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
completions: ["        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n\
    \        sorted.reverse.map(x => map(x))", "        val map = Map(1L -> \"One\"\
    , 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\"\
    , 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x\
    \ => x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x => map(x))", "   \
    \     val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list", "        val sorted = arr.sorted\n        val\
    \ reversed = sorted.reverse\n        val result = reversed.map(x => x.toString)\n\
    \        result", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list", "        val map = Map(1L -> \"One\", 2L ->\
    \ \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L\
    \ -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x\
    \ => x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x => map(x))", '        arr.map(x
    => x.toString).sortBy(x => x.length).reverse.map(x => x.toString)', "        val\
    \ sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n      \
    \  val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val result =\
    \ filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        return result", "        val sorted = arr.sorted\n     \
    \   val reversed = sorted.reverse\n        val filtered = reversed.filter(x =>\
    \ x >= 1 && x <= 9)\n        val result = filtered.map(x => x match {\n      \
    \      case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 =>\
    \ \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n\
    \            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n        return result",
  "        val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped\
    \ = filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        mapped", "        val sorted = arr.sortWith(_ < _)\n   \
    \     val reversed = sorted.reverse\n        reversed.map(x => x match {\n   \
    \         case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3\
    \ => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\
    \n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n           \
    \ case 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\
    \"\n        })", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt)).toList", "        val map = Map(1 -> \"One\", 2 -> \"Two\"\
    , 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\",\
    \ 8 -> \"Eight\", 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt)).toList", "        var result = List[String]()\n        for\
    \ (i <- arr) {\n            if (i >= 1 && i <= 9) {\n                result =\
    \ result :+ i.toString\n            }\n        }\n        result.sortWith(_.length\
    \ < _.length)", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"\
    Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L ->\
    \ \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x.toString)\n        result", "      \
    \  val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        val result = new ListBuffer[String]\n        for (i <- arr.reverse)\
    \ {\n            if (map.contains(i)) result += map(i)\n        }\n        result.toList",
  "        val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x match {\n            case 1 => \"One\"\
    \n            case 2 => \"Two\"\n            case 3 => \"Three\"\n           \
    \ case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"\
    Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n    \
    \        case 9 => \"Nine\"\n            case _ => \"\"\n        })\n        result.filter(x\
    \ => x != \"\")", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"\
    Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L ->\
    \ \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))"]
stop_tokens:
- "\n    }\n"
