name: HumanEval_105_by_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
  \    // reverse the resulting array, and then replace each digit by its corresponding\
  \ name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
  Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5,\
  \ 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse\
  \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty,\
  \ return an empty array:\n    // arr = []\n    // return []\n    // If the array\
  \ has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort\
  \ arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n\
  \    def byLength(arr : List[Long]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
  \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
  \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"\
  One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
  Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
completions: ["        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n\
    \        sorted.reverse.map(x => map(x))", "        val map = Map(1L -> \"One\"\
    , 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\"\
    , 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x\
    \ => x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x => map(x))", "   \
    \     val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list", "        val sorted = arr.sorted\n        val\
    \ reversed = sorted.reverse\n        val result = reversed.map(x => x.toString)\n\
    \        result", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list", "        val map = Map(1L -> \"One\", 2L ->\
    \ \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L\
    \ -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x\
    \ => x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x => map(x))", '        arr.map(x
    => x.toString).sortBy(x => x.length).reverse.map(x => x.toString)', "        val\
    \ sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n      \
    \  val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val result =\
    \ filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        return result", "        val sorted = arr.sorted\n     \
    \   val reversed = sorted.reverse\n        val filtered = reversed.filter(x =>\
    \ x >= 1 && x <= 9)\n        val result = filtered.map(x => x match {\n      \
    \      case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 =>\
    \ \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n\
    \            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n        return result",
  "        val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped\
    \ = filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        mapped", "        val sorted = arr.sortWith(_ < _)\n   \
    \     val reversed = sorted.reverse\n        reversed.map(x => x match {\n   \
    \         case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3\
    \ => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\
    \n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n           \
    \ case 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\
    \"\n        })", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt)).toList", "        val map = Map(1 -> \"One\", 2 -> \"Two\"\
    , 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\",\
    \ 8 -> \"Eight\", 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt)).toList", "        var result = List[String]()\n        for\
    \ (i <- arr) {\n            if (i >= 1 && i <= 9) {\n                result =\
    \ result :+ i.toString\n            }\n        }\n        result.sortWith(_.length\
    \ < _.length)", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"\
    Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L ->\
    \ \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x.toString)\n        result", "      \
    \  val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        val result = new ListBuffer[String]\n        for (i <- arr.reverse)\
    \ {\n            if (map.contains(i)) result += map(i)\n        }\n        result.toList",
  "        val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x match {\n            case 1 => \"One\"\
    \n            case 2 => \"Two\"\n            case 3 => \"Three\"\n           \
    \ case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"\
    Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n    \
    \        case 9 => \"Nine\"\n            case _ => \"\"\n        })\n        result.filter(x\
    \ => x != \"\")", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"\
    Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L ->\
    \ \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n\
    \        sorted.reverse.map(x => map(x))", "        val map = Map(1 -> \"One\"\
    , 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7\
    \ -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        val list = arr.filter(x\
    \ => x >= 1 && x <= 9).sorted.reverse.map(x => map(x.toInt))\n        list", " \
    \       val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"\
    Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x))", "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n\
    \        val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped\
    \ = filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        mapped", "        val map = Map(1L -> \"One\", 2L -> \"\
    Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"\
    Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x\
    \ <= 9).sortWith(_ < _).reverse.map(x => map(x))", "        val map = Map(1L ->\
    \ \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L\
    \ -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x\
    \ => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))", "        var map = Map[Long,\
    \ String]()\n        map += (1 -> \"One\")\n        map += (2 -> \"Two\")\n  \
    \      map += (3 -> \"Three\")\n        map += (4 -> \"Four\")\n        map +=\
    \ (5 -> \"Five\")\n        map += (6 -> \"Six\")\n        map += (7 -> \"Seven\"\
    )\n        map += (8 -> \"Eight\")\n        map += (9 -> \"Nine\")\n        var\
    \ result = List[String]()\n        for (i <- arr) {\n            if (map.contains(i))\
    \ {\n                result = map(i) :: result\n            }\n        }\n   \
    \     result", "        val sorted = arr.sortWith(_ < _)\n        val reversed\
    \ = sorted.reverse\n        val result = reversed.map(x => x match {\n       \
    \     case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 =>\
    \ \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n\
    \            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\"\n\
    \        })\n        result.filter(x => x != \"\")", "        val map = Map(1L\
    \ -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\",\
    \ 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x\
    \ => x > 0 && x < 10).sorted.reverse.map(x => map(x))", "        val sorted =\
    \ arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n        val result\
    \ = reversed.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"\"\n        })\n        result.filter(x => x != \"\"\
    )", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L ->\
    \ \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L\
    \ -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list", "        val sorted = arr.sorted\n        val\
    \ reversed = sorted.reverse\n        val filtered = reversed.filter(x => x >=\
    \ 1 && x <= 9)\n        val result = filtered.map(x => x match {\n           \
    \ case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\
    \n            case 4 => \"Four\"\n            case 5 => \"Five\"\n           \
    \ case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"\
    Eight\"\n            case 9 => \"Nine\"\n        })\n        return result", " \
    \       val m = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\"\
    , 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        val l = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n        l.map(x\
    \ => m(x.toInt))", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L ->\
    \ \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L\
    \ -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 &&\
    \ x <= 9).sorted\n        sorted.reverse.map(x => map(x))", "        val map =\
    \ Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"\
    Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n   \
    \     arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))", "  \
    \      val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x match {\n            case 1 => \"One\"\
    \n            case 2 => \"Two\"\n            case 3 => \"Three\"\n           \
    \ case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"\
    Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n    \
    \        case 9 => \"Nine\"\n            case _ => \"\"\n        })\n        result.filter(x\
    \ => x != \"\")", '        arr.sortWith(_.toString.length < _.toString.length).map(x
    => x.toString)', "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt)).toList", "        val map = Map(1 -> \"One\", 2 -> \"Two\"\
    , 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\",\
    \ 8 -> \"Eight\", 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt)).toList", "        val map = Map(1L -> \"One\", 2L -> \"Two\"\
    , 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\"\
    , 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list", "        val map = Map(1L -> \"One\", 2L ->\
    \ \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L\
    \ -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x\
    \ => x >= 1 && x <= 9).sorted\n        val reversed = sorted.reverse\n       \
    \ reversed.map(map(_))", '        arr.map(x => x.toString).sortBy(x => x.length).reverse.map(x
    => x.toString)', "        val sorted = arr.sortWith(_ < _)\n        val reversed\
    \ = sorted.reverse\n        val result = reversed.map(x => x match {\n       \
    \     case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 =>\
    \ \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n\
    \            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\"\n\
    \        })\n        result.filter(x => x != \"\")", "        val map = Map(1L\
    \ -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\",\
    \ 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val\
    \ result = new ListBuffer[String]\n        for (i <- arr) {\n            if (map.contains(i))\
    \ result += map(i)\n        }\n        result.toList", "        var result = List[String]()\n\
    \        for (i <- arr) {\n            var s = i.toString\n            var count\
    \ = 0\n            for (j <- s) {\n                count += 1\n            }\n\
    \            result = result :+ count.toString\n        }\n        result", " \
    \       val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x match {\n            case 1 => \"One\"\
    \n            case 2 => \"Two\"\n            case 3 => \"Three\"\n           \
    \ case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"\
    Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n    \
    \        case 9 => \"Nine\"\n            case _ => \"\"\n        })\n        result.filter(x\
    \ => x != \"\")", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"\
    Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L ->\
    \ \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n\
    \        val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped\
    \ = filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        mapped", "        val map = Map(1L -> \"One\", 2L -> \"\
    Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"\
    Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x =>\
    \ x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x => map(x))", "      \
    \  val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val\
    \ filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped = filtered.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n        mapped", "        val map = Map(1L -> \"One\", 2L -> \"Two\"\
    , 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\"\
    , 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x => x >=\
    \ 1 && x <= 9).sorted\n        sorted.reverse.map(x => map(x))", "        val\
    \ sorted = arr.sorted\n        val reversed = sorted.reverse\n        val filtered\
    \ = reversed.filter(x => x >= 1 && x <= 9)\n        val result = filtered.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n        return result", "        val map = Map(1 -> \"One\", 2 -> \"\
    Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\"\
    , 8 -> \"Eight\", 9 -> \"Nine\")\n        val result = new ListBuffer[String]\n\
    \        for (i <- arr) {\n            if (map.contains(i)) result += map(i)\n\
    \        }\n        result.toList", "        val map = Map(1 -> \"One\", 2 ->\
    \ \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"\
    Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        val list = arr.filter(x => x\
    \ >= 1 && x <= 9).sorted.reverse.map(x => map(x.toInt))\n        list", "    \
    \    val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\",\
    \ 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n        list", "        val map = Map(1L -> \"One\", 2L -> \"\
    Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"\
    Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x =>\
    \ x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x => map(x))", "      \
    \  val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val\
    \ result = reversed.map(x => x.toString)\n        result", "        val sorted\
    \ = arr.sorted\n        val reversed = sorted.reverse\n        val filtered =\
    \ reversed.filter(x => x >= 1 && x <= 9)\n        val result = filtered.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n        return result", "        val sorted = arr.sorted\n        val\
    \ reversed = sorted.reverse\n        val result = reversed.map(x => x.toString)\n\
    \        result", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list", "        val map = Map(1 -> \"One\", 2 -> \"\
    Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\"\
    , 8 -> \"Eight\", 9 -> \"Nine\")\n        var result = List[String]()\n      \
    \  for (i <- arr) {\n            if (map.contains(i)) result = map(i) :: result\n\
    \        }\n        result", "        val map = Map(1 -> \"One\", 2 -> \"Two\"\
    , 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\",\
    \ 8 -> \"Eight\", 9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 &&\
    \ x <= 9).sorted.reverse.map(x => map(x.toInt))\n        list", "        val map\
    \ = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"\
    Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n   \
    \     val result = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))\n\
    \        result", "        var result = List[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                result = i.toString\
    \ :: result\n            }\n        }\n        result", "        val sorted =\
    \ arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n        val filtered\
    \ = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped = filtered.map(x\
    \ => if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else\
    \ if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else\
    \ if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else\
    \ \"\")\n        mapped", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3\
    \ -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8\
    \ -> \"Eight\", 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt)).toList", "        val sorted = arr.sortWith(_ < _)\n      \
    \  val reversed = sorted.reverse\n        val result = reversed.map(x => x match\
    \ {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n          \
    \  case 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 =>\
    \ \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n \
    \           case 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case\
    \ _ => \"\"\n        })\n        result.filter(x => x != \"\")", "        val\
    \ map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"\
    Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n       \
    \ arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x.toInt)).toList",
  "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n      \
    \  val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped =\
    \ filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        mapped", "        val sorted = arr.sorted\n        val reversed\
    \ = sorted.reverse\n        val result = reversed.map(x => x.toString)\n     \
    \   result", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt)).toList", "        val sorted = arr.sorted\n        val reversed\
    \ = sorted.reverse\n        val filtered = reversed.filter(x => x >= 1 && x <=\
    \ 9)\n        val mapped = filtered.map(x => x match {\n            case 1 =>\
    \ \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n  \
    \          case 4 => \"Four\"\n            case 5 => \"Five\"\n            case\
    \ 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })\n        mapped", '        arr.sortWith(_.toString.length
    < _.toString.length).map(_.toString)', "        val sorted = arr.sorted\n    \
    \    val reversed = sorted.reverse\n        val filtered = reversed.filter(x =>\
    \ x >= 1 && x <= 9)\n        val result = filtered.map(x => x match {\n      \
    \      case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 =>\
    \ \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n\
    \            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n        return result",
  "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n      \
    \  val filtered = reversed.filter(x => x > 0 && x < 10)\n        val result =\
    \ filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        return result", "        val sorted = arr.sortWith(_ < _)\n\
    \        val reversed = sorted.reverse\n        val result = reversed.map(x =>\
    \ x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n  \
    \          case 3 => \"Three\"\n            case 4 => \"Four\"\n            case\
    \ 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\
    \n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n          \
    \  case _ => \"\"\n        })\n        result.filter(x => x != \"\")", "     \
    \   val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5\
    \ -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n        list", "        val sorted = arr.sortWith(_ < _)\n  \
    \      val reversed = sorted.reverse\n        val filtered = reversed.filter(x\
    \ => x >= 1 && x <= 9)\n        val result = filtered.map(x => x match {\n   \
    \         case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3\
    \ => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\
    \n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n           \
    \ case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n        return\
    \ result", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\",\
    \ 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n\
    \        val reversed = sorted.reverse\n        reversed.map(x => map(x.toInt))",
  "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n      \
    \  val mapped = reversed.map(x => x.toString)\n        val filtered = mapped.filter(x\
    \ => x.length == 1)\n        val result = filtered.map(x => x match {\n      \
    \      case \"1\" => \"One\"\n            case \"2\" => \"Two\"\n            case\
    \ \"3\" => \"Three\"\n            case \"4\" => \"Four\"\n            case \"\
    5\" => \"Five\"\n            case \"6\" => \"Six\"\n            case \"7\" =>\
    \ \"Seven\"\n            case \"8\" => \"Eight\"\n            case \"9\" => \"\
    Nine\"\n        })\n        result", '        arr.sortWith(_.toString.length <
    _.toString.length).map(_.toString)', '        arr.sortWith(_.toString.length <
    _.toString.length).map(x => x.toString)', "        var result = List[String]()\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n             \
    \   result = result :+ i.toString\n            }\n        }\n        result.sortBy(x\
    \ => x.length)", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt)).toList", "        val sorted = arr.sortWith(_ < _)\n      \
    \  val reversed = sorted.reverse\n        val result = reversed.map(x => x match\
    \ {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n          \
    \  case 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 =>\
    \ \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n \
    \           case 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case\
    \ _ => \"\"\n        })\n        result.filter(x => x != \"\")", "        val\
    \ map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L\
    \ -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  "        val sorted = arr.sortWith(_.toString.length < _.toString.length)\n    \
    \    sorted.map(x => x.toString)", '        arr.sortWith(_.toString.length < _.toString.length).map(_.toString)',
  "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n      \
    \  val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val result =\
    \ filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        return result", '        arr.sortWith((a, b) => a.toString.length
    < b.toString.length).reverse.map(x => x.toString)', "        val sorted = arr.sorted\n\
    \        val reversed = sorted.reverse\n        val filtered = reversed.filter(x\
    \ => x >= 1 && x <= 9)\n        val result = filtered.map(x => x match {\n   \
    \         case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3\
    \ => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\
    \n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n           \
    \ case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n        return\
    \ result", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\",\
    \ 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val newArr = arr.filter(x => x >= 1 && x <= 9).sortWith(_\
    \ < _).reverse\n        newArr.map(x => map(x.toInt))", "        val sorted =\
    \ arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n        val filtered\
    \ = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped = filtered.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n        mapped", "        val map = Map(1L -> \"One\", 2L -> \"Two\"\
    , 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\"\
    , 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sortWith(_\
    \ < _).reverse.map(x => map(x))", "        val map = new HashMap[Long, String]()\n\
    \        map.put(1, \"One\")\n        map.put(2, \"Two\")\n        map.put(3,\
    \ \"Three\")\n        map.put(4, \"Four\")\n        map.put(5, \"Five\")\n   \
    \     map.put(6, \"Six\")\n        map.put(7, \"Seven\")\n        map.put(8, \"\
    Eight\")\n        map.put(9, \"Nine\")\n        val result = new ListBuffer[String]()\n\
    \        for (i <- arr) {\n            if (map.contains(i)) result += map(i)\n\
    \        }\n        result.toList", "        val sorted = arr.sortWith(_ < _)\n\
    \        val reversed = sorted.reverse\n        val filtered = reversed.filter(x\
    \ => x >= 1 && x <= 9)\n        val result = filtered.map(x => x match {\n   \
    \         case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3\
    \ => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\
    \n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n           \
    \ case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n        return\
    \ result", "        var result = List[String]()\n        for (i <- arr) {\n  \
    \          result = result :+ i.toString\n        }\n        result.sortBy(_.length)",
  "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n      \
    \  val result = reversed.map(x => x.toString)\n        result", "        var result\
    \ = List[String]()\n        for (i <- arr) {\n            var str = i.toString\n\
    \            var count = 0\n            for (j <- str) {\n                if (j\
    \ == '0') count += 1\n            }\n            result = result :+ (str.length\
    \ - count).toString\n        }\n        result", "        val sorted = arr.sorted\n\
    \        val reversed = sorted.reverse\n        val filtered = reversed.filter(x\
    \ => x >= 1 && x <= 9)\n        val result = filtered.map(x => x match {\n   \
    \         case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3\
    \ => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\
    \n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n           \
    \ case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n        return\
    \ result", "        val nums = arr.filter(x => x > 0 && x < 10).sorted.reverse\n\
    \        nums.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x.toString)\n        result", "      \
    \  val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val\
    \ filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val result = filtered.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n        return result", "        val map = Map(1L -> \"One\", 2L ->\
    \ \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L\
    \ -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >=\
    \ 1 && x <= 9).sorted.reverse.map(x => map(x))", "        var result = List[String]()\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n             \
    \   result = result :+ i.toString\n            }\n        }\n        result.sorted.reverse.map(x\
    \ => x match {\n            case \"1\" => \"One\"\n            case \"2\" => \"\
    Two\"\n            case \"3\" => \"Three\"\n            case \"4\" => \"Four\"\
    \n            case \"5\" => \"Five\"\n            case \"6\" => \"Six\"\n    \
    \        case \"7\" => \"Seven\"\n            case \"8\" => \"Eight\"\n      \
    \      case \"9\" => \"Nine\"\n        })", "        val sorted = arr.sorted\n\
    \        val reversed = sorted.reverse\n        val result = reversed.map(x =>\
    \ x.toString)\n        result", "        val sorted = arr.sorted\n        val\
    \ reversed = sorted.reverse\n        val filtered = reversed.filter(x => x >=\
    \ 1 && x <= 9)\n        val mapped = filtered.map(x => x match {\n           \
    \ case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\
    \n            case 4 => \"Four\"\n            case 5 => \"Five\"\n           \
    \ case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"\
    Eight\"\n            case 9 => \"Nine\"\n        })\n        mapped", "      \
    \  val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n \
    \       reversed.map(x => x match {\n            case 1 => \"One\"\n         \
    \   case 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 =>\
    \ \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\n  \
    \          case 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case\
    \ 9 => \"Nine\"\n            case _ => \"\"\n        })", "        val map = Map(1L\
    \ -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\",\
    \ 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x\
    \ => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))", "        val sorted =\
    \ arr.filter(x => x > 0 && x < 10).sorted\n        val reversed = sorted.reverse\n\
    \        reversed.map(x => x match {\n            case 1 => \"One\"\n        \
    \    case 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 =>\
    \ \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\n  \
    \          case 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case\
    \ 9 => \"Nine\"\n            case _ => \"\"\n        })", "        val map = Map(1L\
    \ -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\",\
    \ 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x\
    \ => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))", "        val sorted =\
    \ arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n        val filtered\
    \ = reversed.filter(x => x >= 1 && x <= 9)\n        val result = filtered.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n        return result", "        val map = Map(1L -> \"One\", 2L ->\
    \ \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L\
    \ -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x\
    \ => x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x => map(x))", "   \
    \     val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        result", '        arr.map(x => x.toString).sortBy(x => x.length).reverse.map(x
    => x.toString)', "        def byLengthHelper(arr : List[Long], acc : List[String])\
    \ : List[String] = {\n            if (arr.isEmpty) acc\n            else {\n \
    \               val s = arr.head.toString\n                byLengthHelper(arr.tail,\
    \ acc :+ s)\n            }\n        }\n        byLengthHelper(arr, List())", " \
    \       val map = Map[Long, String](1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x.toString)\n        result", "      \
    \  val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n        val\
    \ reversed = sorted.reverse\n        reversed.map(x => map(x))", "        val\
    \ sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n      \
    \  val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped =\
    \ filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        mapped", "        var res = new ListBuffer[String]\n   \
    \     for (i <- arr) {\n            if (i == 1) res += \"One\"\n            else\
    \ if (i == 2) res += \"Two\"\n            else if (i == 3) res += \"Three\"\n\
    \            else if (i == 4) res += \"Four\"\n            else if (i == 5) res\
    \ += \"Five\"\n            else if (i == 6) res += \"Six\"\n            else if\
    \ (i == 7) res += \"Seven\"\n            else if (i == 8) res += \"Eight\"\n \
    \           else if (i == 9) res += \"Nine\"\n        }\n        res.toList",
  "        val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        reversed.map(x => {\n            if (x == 1) \"One\"\n            else\
    \ if (x == 2) \"Two\"\n            else if (x == 3) \"Three\"\n            else\
    \ if (x == 4) \"Four\"\n            else if (x == 5) \"Five\"\n            else\
    \ if (x == 6) \"Six\"\n            else if (x == 7) \"Seven\"\n            else\
    \ if (x == 8) \"Eight\"\n            else if (x == 9) \"Nine\"\n            else\
    \ \"\"\n        })", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L ->\
    \ \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L\
    \ -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sortWith(_\
    \ < _).reverse.map(x => map(x))", "        val sorted = arr.sortWith(_ < _)\n\
    \        val reversed = sorted.reverse\n        val result = reversed.map(x =>\
    \ x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n  \
    \          case 3 => \"Three\"\n            case 4 => \"Four\"\n            case\
    \ 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\
    \n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n          \
    \  case _ => \"\"\n        })\n        result.filter(_ != \"\")", "        val\
    \ sorted = arr.sorted\n        val reversed = sorted.reverse\n        val filtered\
    \ = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped = filtered.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n        mapped", "        val sorted = arr.sortWith(_ < _)\n       \
    \ val reversed = sorted.reverse\n        val filtered = reversed.filter(x => x\
    \ > 0 && x < 10)\n        val result = filtered.map(x => x match {\n         \
    \   case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"\
    Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n    \
    \        case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\"\n\
    \        })\n        result", '        arr.sortWith(_.toString.length < _.toString.length).map(_.toString)',
  "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  '        arr.map(x => x.toString).sortBy(x => x.length).reverse', '        arr.sortWith(_.toString.length
    < _.toString.length).map(_.toString)', "        var result = new ListBuffer[String]\n\
    \        for (i <- arr) {\n            if (i == 1) result += \"One\"\n       \
    \     else if (i == 2) result += \"Two\"\n            else if (i == 3) result\
    \ += \"Three\"\n            else if (i == 4) result += \"Four\"\n            else\
    \ if (i == 5) result += \"Five\"\n            else if (i == 6) result += \"Six\"\
    \n            else if (i == 7) result += \"Seven\"\n            else if (i ==\
    \ 8) result += \"Eight\"\n            else if (i == 9) result += \"Nine\"\n  \
    \      }\n        result.toList", "        val map = Map(1L -> \"One\", 2L ->\
    \ \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L\
    \ -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >=\
    \ 1 && x <= 9).sorted.reverse.map(x => map(x))", "        val map = Map(1L ->\
    \ \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L\
    \ -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val result\
    \ = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))\n      \
    \  result", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n\
    \        val reversed = sorted.reverse\n        reversed.map(x => map(x))", " \
    \       val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val result\
    \ = filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        return result", "        val map = Map(1L -> \"One\", 2L\
    \ -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\",\
    \ 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x\
    \ >= 1 && x <= 9).sorted.reverse.map(x => map(x))", "        val d = new HashMap[Long,\
    \ String]\n        d(1) = \"One\"\n        d(2) = \"Two\"\n        d(3) = \"Three\"\
    \n        d(4) = \"Four\"\n        d(5) = \"Five\"\n        d(6) = \"Six\"\n \
    \       d(7) = \"Seven\"\n        d(8) = \"Eight\"\n        d(9) = \"Nine\"\n\
    \        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => d(x))", " \
    \       val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        reversed.map(x => x match {\n            case 1 => \"One\"\n        \
    \    case 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 =>\
    \ \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\n  \
    \          case 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case\
    \ 9 => \"Nine\"\n            case _ => \"\"\n        })", "        val map = Map(1L\
    \ -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\",\
    \ 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x\
    \ => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))", "        val sorted =\
    \ arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n        val result\
    \ = reversed.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"\"\n        })\n        result.filter(x => x != \"\"\
    )", "        val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x match {\n            case 1 => \"One\"\
    \n            case 2 => \"Two\"\n            case 3 => \"Three\"\n           \
    \ case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"\
    Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n    \
    \        case 9 => \"Nine\"\n            case _ => \"\"\n        })\n        result.filter(x\
    \ => x != \"\")", "        val nums = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        nums.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", '        arr.sortWith(_.toString.length < _.toString.length).map(x
    => x.toString)', "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n\
    \        val reversed = sorted.reverse\n        reversed.map(x => map(x.toInt))",
  "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  "        val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x match {\n            case 1 => \"One\"\
    \n            case 2 => \"Two\"\n            case 3 => \"Three\"\n           \
    \ case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"\
    Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n    \
    \        case 9 => \"Nine\"\n            case _ => \"\"\n        })\n        result.filter(x\
    \ => x != \"\")", "        val result = new ListBuffer[String]\n        for (i\
    \ <- arr) {\n            if (i == 1) result += \"One\"\n            else if (i\
    \ == 2) result += \"Two\"\n            else if (i == 3) result += \"Three\"\n\
    \            else if (i == 4) result += \"Four\"\n            else if (i == 5)\
    \ result += \"Five\"\n            else if (i == 6) result += \"Six\"\n       \
    \     else if (i == 7) result += \"Seven\"\n            else if (i == 8) result\
    \ += \"Eight\"\n            else if (i == 9) result += \"Nine\"\n        }\n \
    \       result.toList", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L\
    \ -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\"\
    , 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\"\
    , 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = new ListBuffer[String]\n        for (i\
    \ <- arr.reverse) {\n            if (map.contains(i)) result += map(i)\n     \
    \   }\n        result.toList", "        val map = Map(1L -> \"One\", 2L -> \"\
    Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"\
    Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x\
    \ <= 9).sorted.reverse.map(x => map(x))", "        val result = new ListBuffer[String]\n\
    \        for (i <- arr) {\n            if (i == 1) result += \"One\"\n       \
    \     else if (i == 2) result += \"Two\"\n            else if (i == 3) result\
    \ += \"Three\"\n            else if (i == 4) result += \"Four\"\n            else\
    \ if (i == 5) result += \"Five\"\n            else if (i == 6) result += \"Six\"\
    \n            else if (i == 7) result += \"Seven\"\n            else if (i ==\
    \ 8) result += \"Eight\"\n            else if (i == 9) result += \"Nine\"\n  \
    \      }\n        result.toList", "        val map = Map(1 -> \"One\", 2 -> \"\
    Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\"\
    , 8 -> \"Eight\", 9 -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1\
    \ && x <= 9).sorted\n        sorted.reverse.map(x => map(x.toInt))", "       \
    \ var result = new ListBuffer[String]\n        for (i <- arr) {\n            if\
    \ (i == 1) result += \"One\"\n            else if (i == 2) result += \"Two\"\n\
    \            else if (i == 3) result += \"Three\"\n            else if (i == 4)\
    \ result += \"Four\"\n            else if (i == 5) result += \"Five\"\n      \
    \      else if (i == 6) result += \"Six\"\n            else if (i == 7) result\
    \ += \"Seven\"\n            else if (i == 8) result += \"Eight\"\n           \
    \ else if (i == 9) result += \"Nine\"\n        }\n        result.toList", "  \
    \      val sorted = arr.sorted\n        val reversed = sorted.reverse\n      \
    \  val result = reversed.map(x => x.toString)\n        result", "        val map\
    \ = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"\
    Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n   \
    \     arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))", "  \
    \      val sorted = arr.sorted\n        val reversed = sorted.reverse\n      \
    \  val result = reversed.map(x => x.toString)\n        result", "        val sorted\
    \ = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n        val filtered\
    \ = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped = filtered.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n        mapped", "        val map = Map(1 -> \"One\", 2 -> \"Two\",\
    \ 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\",\
    \ 8 -> \"Eight\", 9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 &&\
    \ x <= 9).sorted.reverse.map(x => map(x.toInt))\n        list", "        val sorted\
    \ = arr.sorted\n        val reversed = sorted.reverse\n        val result = reversed.map(x\
    \ => x.toString)\n        result", "        val sorted = arr.sorted\n        val\
    \ reversed = sorted.reverse\n        val filtered = reversed.filter(x => x >=\
    \ 1 && x <= 9)\n        val result = filtered.map(x => x match {\n           \
    \ case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\
    \n            case 4 => \"Four\"\n            case 5 => \"Five\"\n           \
    \ case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"\
    Eight\"\n            case 9 => \"Nine\"\n        })\n        return result", " \
    \       val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val result\
    \ = filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        return result", "        val sorted = arr.sorted\n     \
    \   val reversed = sorted.reverse\n        val result = reversed.map(x => {\n\
    \            if (x == 1) \"One\"\n            else if (x == 2) \"Two\"\n     \
    \       else if (x == 3) \"Three\"\n            else if (x == 4) \"Four\"\n  \
    \          else if (x == 5) \"Five\"\n            else if (x == 6) \"Six\"\n \
    \           else if (x == 7) \"Seven\"\n            else if (x == 8) \"Eight\"\
    \n            else if (x == 9) \"Nine\"\n            else \"\"\n        })\n \
    \       result.filter(x => x != \"\")", "        val sorted = arr.sortWith(_ <\
    \ _)\n        val reversed = sorted.reverse\n        val result = reversed.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \         case _ => \"\"\n        })\n        result.filter(x => x != \"\")",
  "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\"\
    , 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n        list", "        val sorted = arr.sorted\n        val\
    \ reversed = sorted.reverse\n        val result = reversed.map(x => {\n      \
    \      if (x == 1) \"One\"\n            else if (x == 2) \"Two\"\n           \
    \ else if (x == 3) \"Three\"\n            else if (x == 4) \"Four\"\n        \
    \    else if (x == 5) \"Five\"\n            else if (x == 6) \"Six\"\n       \
    \     else if (x == 7) \"Seven\"\n            else if (x == 8) \"Eight\"\n   \
    \         else if (x == 9) \"Nine\"\n            else \"\"\n        })\n     \
    \   result.filter(x => x != \"\")", "        if (arr.length == 0) return List[String]()\n\
    \        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n        val reversed\
    \ = sorted.reverse\n        val result = reversed.map(x => x match {\n       \
    \     case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 =>\
    \ \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n\
    \            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n        return result",
  "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\"\
    , 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val result = reversed.filter(x => x >= 1 && x <= 9).map(x => map(x.toInt))\n\
    \        result", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"\
    Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L ->\
    \ \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n\
    \        val reversed = sorted.reverse\n        reversed.map(x => map(x.toInt))",
  "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  "        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\"\
    , 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        val sorted = arr.filter(x => x > 0 && x < 10).sorted\n        sorted.reverse.map(x\
    \ => map(x.toInt))", "        val dict = Map(1L -> \"One\", 2L -> \"Two\", 3L\
    \ -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\"\
    , 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x => x > 0\
    \ && x < 10).sorted\n        sorted.reverse.map(x => dict(x))", "        val map\
    \ = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\"\
    , 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        val sorted\
    \ = arr.filter(x => x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x =>\
    \ map(x.toInt))", "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"\
    Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L ->\
    \ \"Eight\", 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))", "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n\
    \        val result = reversed.map(x => x.toString)\n        result", "      \
    \  val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5\
    \ -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n        list", "        val sorted = arr.sortWith(_ < _)\n  \
    \      val reversed = sorted.reverse\n        val result = reversed.map(x => x\
    \ match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n    \
    \        case 3 => \"Three\"\n            case 4 => \"Four\"\n            case\
    \ 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\
    \n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n          \
    \  case _ => \"\"\n        })\n        result.filter(x => x != \"\")", "     \
    \   val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5\
    \ -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        val result = new ListBuffer[String]\n        for (i <- arr) {\n     \
    \       if (map.contains(i)) result += map(i)\n        }\n        result.toList",
  "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n      \
    \  val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped =\
    \ filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        mapped", "        val sorted = arr.sortWith(_ < _)\n   \
    \     val reversed = sorted.reverse\n        val result = reversed.map(x => x\
    \ match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n    \
    \        case 3 => \"Three\"\n            case 4 => \"Four\"\n            case\
    \ 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\
    \n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n          \
    \  case _ => \"\"\n        })\n        result.filter(x => x != \"\")", "     \
    \   val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  "        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\"\
    , 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\"\
    )\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x => map(x))",
  "        val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n\
    \        val filtered = reversed.filter(x => x > 0 && x < 10)\n        val result\
    \ = filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"\"\n        })\n        result", "        val map =\
    \ Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\"\
    , 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        arr.filter(x\
    \ => x >= 1 && x <= 9).sorted.reverse.map(x => map(x.toInt)).toList", "      \
    \  val sorted = arr.sortWith(_ < _)\n        val reversed = sorted.reverse\n \
    \       val filtered = reversed.filter(x => x >= 1 && x <= 9)\n        val mapped\
    \ = filtered.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        mapped", "        val map = Map(1L -> \"One\", 2L -> \"\
    Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"\
    Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sorted = arr.filter(x =>\
    \ x >= 1 && x <= 9).sorted\n        sorted.reverse.map(x => map(x))"]
stop_tokens:
- "\n    }\n"
