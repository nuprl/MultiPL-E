name: HumanEval_42_incr_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list with elements incremented by 1.\n    // >>> incr_list([1, 2,\
  \ 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n \
  \   // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
  \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
  \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
  \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
  \ 124l.toLong))));\n    }\n\n}\n"
completions: ['        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', "      \
    \  var result = new ListBuffer[Long]\n        for (i <- l) {\n            result\
    \ += (i + 1)\n        }\n        return result.toList", '        l.map(x => x
    + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', "        var result = List[Long]()\n\
    \        for (i <- l) {\n            result = result :+ (i + 1)\n        }\n \
    \       return result", '        return l.map(x => x + 1)', '        l.map(x =>
    x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        return
    l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)',
  '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x
    + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        return
    l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)',
  '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x
    + 1)', "        var result = List[Long]()\n        for (i <- l) {\n          \
    \  result = result :+ (i + 1)\n        }\n        return result", "        var\
    \ result = new ListBuffer[Long]\n        for (x <- l) result += (x + 1)\n    \
    \    return result.toList", '        return l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', "        if (l.isEmpty) return List()\n\
    \        return (l.head + 1) :: incrList(l.tail)", '        l.map(x => x + 1)',
  '        return l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(_ + 1)', '        l.map(_ + 1)', '        l.map(x =>
    x + 1)', '        l.map(x => x + 1)', "        var result = List[Long]()\n   \
    \     for (x <- l) result = result :+ (x + 1)\n        return result", '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', "        var result = new ListBuffer[Long]()\n\
    \        for (x <- l) {\n            result += (x + 1)\n        }\n        return\
    \ result.toList", '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        return
    l.map(x => x + 1)', "        var result = List[Long]()\n        for (i <- l) result\
    \ = result :+ (i + 1)\n        return result", '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        return l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', "        var result = List[Long]()\n        for (i <- l) {\n     \
    \       result = result :+ (i + 1)\n        }\n        return result", '        l.map(x
    => x + 1)', "        var result = new ListBuffer[Long]\n        for (i <- l) {\n\
    \            result += (i + 1)\n        }\n        return result.toList", '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', "        var result = List[Long]()\n        for (i <- l) {\n     \
    \       result = result :+ (i + 1)\n        }\n        return result", '        l.map(_
    + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', "        var result = new ListBuffer[Long]()\n        for (i <- l)\
    \ result += (i + 1)\n        return result.toList", '        l.map(x => x + 1)',
  '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x
    + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(_ + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', "        var result = List[Long]()\n        for (i <- l) result =\
    \ result :+ (i + 1)\n        return result", '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(x
    => x + 1)', '        l.map(x => x + 1)', '        l.map(x => x + 1)', '        l.map(_
    + 1)']
stop_tokens:
- "\n    }\n"
