name: HumanEval_120_maximum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n\
  \    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3, 5]\n    // Example\
  \ 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output: [4, 4]\n    // Example\
  \ 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    // Output: [2]\n\
  \    // Note:\n    // 1. The length of the array will be in the range of [1, 1000].\n\
  \    // 2. The elements in the array will be in the range of [-1000, 1000].\n  \
  \  // 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
  \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
  \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
  \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
  \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
  \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
  \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
  \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong,\
  \ 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong,\
  \ -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
  \ -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong,\
  \ 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n     \
    \   for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size > k)\
    \ pq.dequeue\n        }\n        pq.toList", "        val heap = new PriorityQueue[Long]()(Ordering.Long.reverse)\n\
    \        for (x <- arr) {\n            heap.enqueue(x)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (x <- arr) {\n            pq.enqueue(x)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList", "        val maxHeap = new\
    \ MaxHeap(k)\n        for (i <- arr) {\n            maxHeap.insert(i)\n      \
    \  }\n        maxHeap.toList", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (x <- arr) {\n            pq.enqueue(x)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList", "        val n = arr.length\n\
    \        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <-\
    \ 0 until n) {\n            pq.enqueue(arr(i))\n            if (pq.size > k) pq.dequeue\n\
    \        }\n        pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(x\
    \ => -x))\n        for (x <- arr) {\n            pq.enqueue(x)\n            if\
    \ (pq.size > k) pq.dequeue\n        }\n        pq.toList", "        val heap =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n       \
    \ }\n        heap.toList", "        val heap = new PriorityQueue[Long]()(Ordering.Long.reverse)\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList"]
stop_tokens:
- "\n    }\n"
