name: HumanEval_20_find_closest_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n    // other and return them in order (smaller\
  \ number, larger number).\n    // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2])\n    // (2.0, 2.2)\n    // >>> find_closest_elements([1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.0])\n    // (2.0, 2.0)\n    def findClosestElements(numbers : List[Float])\
  \ : Tuple2[Float, Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
  \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
  \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
  \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
completions: ["        val sortedNumbers = numbers.sorted\n        var closest = (sortedNumbers(0),\
    \ sortedNumbers(1))\n        var closestDistance = abs(sortedNumbers(0) - sortedNumbers(1))\n\
    \        for (i <- 0 until sortedNumbers.length - 1) {\n            val distance\
    \ = abs(sortedNumbers(i) - sortedNumbers(i + 1))\n            if (distance < closestDistance)\
    \ {\n                closest = (sortedNumbers(i), sortedNumbers(i + 1))\n    \
    \            closestDistance = distance\n            }\n        }\n        closest",
  "        var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) -\
    \ numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        val sorted = numbers.sorted\n     \
    \   var min = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until sorted.length - 1) {\n            val diff = abs(sorted(i) - sorted(i\
    \ + 1))\n            if (diff < min) {\n                min = diff\n         \
    \       result = (sorted(i), sorted(i + 1))\n            }\n        }\n      \
    \  result", "        var min = Float.MaxValue\n        var result = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           result = (numbers(i), numbers(j))\n                }\n           \
    \ }\n        }\n        result", "        var min = Float.MaxValue\n        var\
    \ minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n  \
    \          for (j <- i + 1 until numbers.length) {\n                val diff =\
    \ abs(numbers(i) - numbers(j))\n                if (diff < min) {\n          \
    \          min = diff\n                    minPair = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var minDiff = abs(numbers(0) - numbers(1))\n       \
    \ var minPair = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var min = Float.MaxValue\n        var minTuple = (0.0f, 0.0f)\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minTuple\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minTuple", "        var min = Float.MaxValue\n        var result = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           result = (numbers(i), numbers(j))\n                }\n           \
    \ }\n        }\n        result", "        var minDiff = Float.MaxValue\n     \
    \   var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n\
    \            val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var min\
    \ = Float.MaxValue\n        var minTuple = Tuple2(0f, 0f)\n        for (i <- 0\
    \ until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minTuple\
    \ = Tuple2(numbers(i), numbers(j))\n                }\n            }\n       \
    \ }\n        minTuple", "        var minDiff = Float.MaxValue\n        var minPair\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var min = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n\
    \                    min = diff\n                    minPair = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minPair", "        val sorted\
    \ = numbers.sorted\n        var min = abs(sorted(0) - sorted(1))\n        var\
    \ result = (sorted(0), sorted(1))\n        for (i <- 1 until sorted.length - 1)\
    \ {\n            val diff = abs(sorted(i) - sorted(i + 1))\n            if (diff\
    \ < min) {\n                min = diff\n                result = (sorted(i), sorted(i\
    \ + 1))\n            }\n        }\n        result", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        val sortedNumbers = numbers.sorted\n        var closestPair\
    \ = (sortedNumbers(0), sortedNumbers(1))\n        var closestDifference = abs(sortedNumbers(0)\
    \ - sortedNumbers(1))\n        for (i <- 0 until sortedNumbers.length - 1) {\n\
    \            val difference = abs(sortedNumbers(i) - sortedNumbers(i + 1))\n \
    \           if (difference < closestDifference) {\n                closestDifference\
    \ = difference\n                closestPair = (sortedNumbers(i), sortedNumbers(i\
    \ + 1))\n            }\n        }\n        closestPair", "        var minDiff\
    \ = Float.MaxValue\n        var minTuple : Tuple2[Float, Float] = null\n     \
    \   for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minTuple = (numbers(i), numbers(i + 1))\n          \
    \  }\n        }\n        minTuple", "        var closest = (numbers(0), numbers(1))\n\
    \        var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) -\
    \ numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var min = Float.MaxValue\n        var\
    \ minTuple = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n \
    \           val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < min) {\n                min = diff\n                minTuple = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minTuple", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var min = Float.MaxValue\n        var minPair = (0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           minPair = (numbers(i), numbers(j))\n                }\n          \
    \  }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n   \
    \     var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var min = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    result\
    \ = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n             \
    \   }\n            }\n        }\n        result", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var min = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    result\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      result", "        var minDiff = Float.MaxValue\n        var minPair = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        val sorted\
    \ = numbers.sorted\n        var minDiff = Float.MaxValue\n        var minPair\
    \ = (sorted(0), sorted(1))\n        for (i <- 0 until sorted.length - 1) {\n \
    \           val diff = abs(sorted(i) - sorted(i + 1))\n            if (diff <\
    \ minDiff) {\n                minDiff = diff\n                minPair = (sorted(i),\
    \ sorted(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var\
    \ closestDiff : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < closestDiff) {\n                    closest = (numbers(i), numbers(j))\n \
    \                   closestDiff = diff\n                }\n            }\n   \
    \     }\n        closest", "        var min = Float.MaxValue\n        var result\
    \ : Tuple2[Float, Float] = null\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        minPair", "        var min = Float.MaxValue\n\
    \        var result : Tuple2[Float, Float] = null\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n\
    \                    min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        return minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    minDiffElements", "        var min = Float.MaxValue\n        var result =\
    \ (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < min) {\n                    min =\
    \ diff\n                    result = (numbers(i), numbers(j))\n              \
    \  }\n            }\n        }\n        result", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    minDiffElements", "        var minDiff = Float.MaxValue\n        var minPair\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var min = Float.MaxValue\n        var\
    \ result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n   \
    \         val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff <\
    \ min) {\n                min = diff\n                result = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        result", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        val sorted = numbers.sorted\n     \
    \   var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n       \
    \ for (i <- 0 until sorted.length - 1) {\n            val diff = abs(sorted(i)\
    \ - sorted(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (sorted(i), sorted(i + 1))\n            }\n\
    \        }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n  \
    \          for (j <- i + 1 until numbers.length) {\n                val diff =\
    \ abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n      \
    \              minDiff = diff\n                    minPair = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (numbers(0), numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) -\
    \ numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n    \
    \    var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var minDiff = Float.MaxValue\n        var minPair = (0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        minPair", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var min\
    \ = Float.MaxValue\n        var minTuple = (0f, 0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    minTuple = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minTuple",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDiff\
    \ = Float.MaxValue\n        var minTuple : Tuple2[Float, Float] = null\n     \
    \   for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minTuple = (numbers(i), numbers(i + 1))\n          \
    \  }\n        }\n        minTuple", "        var minDiff = Float.MaxValue\n  \
    \      var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    minDiffElements", "        var minDistance = Float.MaxValue\n        var\
    \ minPair = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minPair = (numbers(i), numbers(j))\n                }\n            }\n \
    \       }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n  \
    \          val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff <\
    \ minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       result = (numbers(i), numbers(i + 1))\n            }\n        }\n    \
    \    result", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var min = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        val sorted = numbers.sorted\n        var min = Float.MaxValue\n\
    \        var result = (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until\
    \ sorted.length - 1) {\n            val diff = abs(sorted(i) - sorted(i + 1))\n\
    \            if (diff < min) {\n                min = diff\n                result\
    \ = (sorted(i), sorted(i + 1))\n            }\n        }\n        result", " \
    \       var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minDiffElements = (numbers(i), numbers(i + 1))\n   \
    \         }\n        }\n        minDiffElements", "        val sorted = numbers.sorted\n\
    \        val diffs = sorted.zip(sorted.tail).map(x => abs(x._1 - x._2))\n    \
    \    val minDiff = diffs.min\n        val minDiffIndex = diffs.indexOf(minDiff)\n\
    \        (sorted(minDiffIndex), sorted(minDiffIndex + 1))", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var minDiff = Float.MaxValue\n        var minPair = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var minDiff = Float.MaxValue\n        var minPair = (0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        minPair", "        var min = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    minPair = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var min = Float.MaxValue\n        var result = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           result = (numbers(i), numbers(j))\n                }\n           \
    \ }\n        }\n        result", "        var minDiff = Float.MaxValue\n     \
    \   var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var minDiff = Float.MaxValue\n        var minPair = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var min = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var minDiff = Float.MaxValue\n        var minPair =\
    \ (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var min = Float.MaxValue\n        var result = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < min) {\n        \
    \        min = diff\n                result = (numbers(i), numbers(i + 1))\n \
    \           }\n        }\n        result", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var min = Float.MaxValue\n        var minTuple = (0.0f, 0.0f)\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < min) {\n                min = diff\n\
    \                minTuple = (numbers(i), numbers(i + 1))\n            }\n    \
    \    }\n        minTuple", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n  \
    \          val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff <\
    \ minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var min = Float.MaxValue\n        var minTuple = (0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           minTuple = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        minTuple", "        val sorted = numbers.sorted\n  \
    \      var min = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until sorted.length - 1) {\n            val diff = abs(sorted(i) - sorted(i\
    \ + 1))\n            if (diff < min) {\n                min = diff\n         \
    \       result = (sorted(i), sorted(i + 1))\n            }\n        }\n      \
    \  result", "        var minDiff = Float.MaxValue\n        var minPair = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var min\
    \ = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    result = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        result", " \
    \       var min = abs(numbers(0) - numbers(1))\n        var minIndex = 0\n   \
    \     for (i <- 1 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < min) {\n                min = diff\n\
    \                minIndex = i\n            }\n        }\n        (numbers(minIndex),\
    \ numbers(minIndex + 1))", "        var closest = (numbers(0), numbers(1))\n \
    \       var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if\
    \ (diff < min) {\n                min = diff\n                result = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        result", "        var min\
    \ = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    result = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        result", " \
    \       val sorted = numbers.sorted\n        var min = Float.MaxValue\n      \
    \  var minPair = (0f, 0f)\n        for (i <- 0 until sorted.length - 1) {\n  \
    \          val diff = abs(sorted(i) - sorted(i + 1))\n            if (diff < min)\
    \ {\n                min = diff\n                minPair = (sorted(i), sorted(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var closest = (numbers(0), numbers(1))\n        var closestDiff = abs(closest._1\
    \ - closest._2)\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < closestDiff) {\n                 \
    \   closest = (numbers(i), numbers(j))\n                    closestDiff = diff\n\
    \                }\n            }\n        }\n        closest", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var minDiff = Float.MaxValue\n        var minPair = (numbers(0),\
    \ numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n            val\
    \ diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n\
    \                minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n      \
    \      val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDistance\
    \ = Float.MaxValue\n        var result : Tuple2[Float, Float] = null\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            val distance = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (distance < minDistance) {\n             \
    \   minDistance = distance\n                result = (numbers(i), numbers(i +\
    \ 1))\n            }\n        }\n        result", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var closest = (numbers(0), numbers(1))\n        var minDiff = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    closest = (numbers(i), numbers(j))\n           \
    \     }\n            }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n    \
    \    var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n    \
    \    var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n\
    \            for (j <- i + 1 until numbers.length) {\n                val diff\
    \ = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n    \
    \                minDiff = diff\n                    minPair = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minPair", "        var closest\
    \ = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var min\
    \ = Float.MaxValue\n        var min1 = 0.0f\n        var min2 = 0.0f\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    min1\
    \ = numbers(i)\n                    min2 = numbers(j)\n                }\n   \
    \         }\n        }\n        if (min1 < min2) (min1, min2) else (min2, min1)",
  "        val sortedNumbers = numbers.sorted\n        var minDiff = abs(sortedNumbers(0)\
    \ - sortedNumbers(1))\n        var minDiffElements = (sortedNumbers(0), sortedNumbers(1))\n\
    \        for (i <- 1 until sortedNumbers.length - 1) {\n            val diff =\
    \ abs(sortedNumbers(i) - sortedNumbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (sortedNumbers(i),\
    \ sortedNumbers(i + 1))\n            }\n        }\n        minDiffElements", " \
    \       var min = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n       \
    \ for (i <- 0 until numbers.length) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var min = Float.MaxValue\n        var result = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           result = (numbers(i), numbers(j))\n                }\n           \
    \ }\n        }\n        result", "        var minDistance = Float.MaxValue\n \
    \       var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            val distance = abs(numbers(i) - numbers(i + 1))\n        \
    \    if (distance < minDistance) {\n                minDistance = distance\n \
    \               result = (numbers(i), numbers(i + 1))\n            }\n       \
    \ }\n        result", "        var closest = (numbers(0), numbers(1))\n      \
    \  var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val distance = abs(numbers(i) - numbers(j))\n               \
    \ if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minDiffElements = (numbers(i), numbers(i + 1))\n   \
    \         }\n        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n    \
    \    var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) -\
    \ numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var min = Float.MaxValue\n        var\
    \ result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n   \
    \         val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff <\
    \ min) {\n                min = diff\n                result = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        result", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var min = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    result\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      result", "        var minDiff = Float.MaxValue\n        var minPair = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = Tuple2(0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minDiffElements = Tuple2(numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var min = Float.MaxValue\n        var result : Tuple2[Float, Float] = null\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           result = if (numbers(i) < numbers(j)) (numbers(i), numbers(j)) else\
    \ (numbers(j), numbers(i))\n                }\n            }\n        }\n    \
    \    result", "        // TODO: Implement this function.\n        null", "   \
    \     var closest = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var min = Float.MaxValue\n        var\
    \ result : Tuple2[Float, Float] = null\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n\
    \                    min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var min = Float.MaxValue\n        var minPair = (0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           minPair = (numbers(i), numbers(j))\n                }\n          \
    \  }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n   \
    \     var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n\
    \        var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var min\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var min = Float.MaxValue\n        var result : Tuple2[Float, Float] = null\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           result = if (numbers(i) < numbers(j)) (numbers(i), numbers(j)) else\
    \ (numbers(j), numbers(i))\n                }\n            }\n        }\n    \
    \    result", "        var minDiff = Float.MaxValue\n        var minPair = (0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff =\
    \ abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n      \
    \          minDiff = diff\n                minPair = (numbers(i), numbers(i +\
    \ 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var min = Float.MaxValue\n        var result : Tuple2[Float, Float] = null\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           result = (numbers(i), numbers(j))\n                }\n           \
    \ }\n        }\n        result", "        var minDiff = Float.MaxValue\n     \
    \   var minElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if\
    \ (diff < minDiff) {\n                minDiff = diff\n                minElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minElements",
  "        var min = Float.MaxValue\n        var result = (numbers(0), numbers(1))\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           result = (numbers(i), numbers(j))\n                }\n           \
    \ }\n        }\n        result", "        var minDiff = Float.MaxValue\n     \
    \   var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        var minDistance = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minPair = (numbers(i), numbers(j))\n       \
    \         }\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var minDiff = Float.MaxValue\n        var minPair =\
    \ (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val\
    \ diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n\
    \                minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var min\
    \ = Float.MaxValue\n        var result : Tuple2[Float, Float] = null\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    result\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      result", "        var minDiff = Float.MaxValue\n        var minPair = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minTuple : Tuple2[Float, Float] = null\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minTuple = (numbers(i), numbers(i + 1))\n            }\n        }\n  \
    \      minTuple", "        var minDiff = Float.MaxValue\n        var minPair =\
    \ (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            val\
    \ diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n\
    \                minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        return minDiffElements",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        minPair", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if\
    \ (diff < min) {\n                min = diff\n                result = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        result", "        val sorted\
    \ = numbers.sorted\n        var minDiff = Float.MaxValue\n        var minPair\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until sorted.length - 1) {\n           \
    \ val diff = abs(sorted(i) - sorted(i + 1))\n            if (diff < minDiff) {\n\
    \                minDiff = diff\n                minPair = (sorted(i), sorted(i\
    \ + 1))\n            }\n        }\n        minPair", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var closest\
    \ = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n\
    \        for (i <- 0 until numbers.length) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var minDiff = Float.MaxValue\n        var minPair = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        minPair", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var min\
    \ = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    result = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        result", " \
    \       var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n   \
    \     for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var min = Float.MaxValue\n        var\
    \ minElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n\
    \            for (j <- i + 1 until numbers.length) {\n                val diff\
    \ = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n        \
    \            min = diff\n                    minElements = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minElements", "        var\
    \ minDiff = Float.MaxValue\n        var minDiffElements = (0f, 0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        val sorted = numbers.sorted\n        var closest = (sorted(0), sorted(1))\n\
    \        for (i <- 0 until sorted.length - 1) {\n            val diff = abs(sorted(i)\
    \ - sorted(i + 1))\n            if (diff < abs(closest._1 - closest._2)) closest\
    \ = (sorted(i), sorted(i + 1))\n        }\n        closest", "        var min\
    \ = Float.MaxValue\n        var min_pair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    min_pair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        min_pair",
  "        var min = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) -\
    \ numbers(i + 1))\n            if (diff < min) {\n                min = diff\n\
    \                result = (numbers(i), numbers(i + 1))\n            }\n      \
    \  }\n        result", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) -\
    \ numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var min = Float.MaxValue\n        var\
    \ result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n   \
    \         for (j <- i + 1 until numbers.length) {\n                val diff =\
    \ abs(numbers(i) - numbers(j))\n                if (diff < min) {\n          \
    \          min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var minDiff\
    \ = Float.MaxValue\n        var minTuple : Tuple2[Float, Float] = null\n     \
    \   for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minTuple = (numbers(i), numbers(i + 1))\n          \
    \  }\n        }\n        minTuple", "        var minDiff = Float.MaxValue\n  \
    \      var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if\
    \ (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n    \
    \    var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length) {\n\
    \            for (j <- i + 1 until numbers.length) {\n                val diff\
    \ = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n    \
    \                minDiff = diff\n                    minPair = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        return minPair", "     \
    \   var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n    \
    \    var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var minDiff = Float.MaxValue\n        var minPair = (0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff =\
    \ abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n      \
    \          minDiff = diff\n                minPair = (numbers(i), numbers(i +\
    \ 1))\n            }\n        }\n        minPair", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        if (numbers.length\
    \ < 2) throw new IllegalArgumentException(\"List must have at least two elements\"\
    )\n        var closest = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  if (abs(numbers(i) - numbers(j)) < abs(closest._1 - closest._2)) closest =\
    \ (numbers(i), numbers(j))\n            }\n        }\n        closest", "    \
    \    var closest = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = Float.MaxValue\n        var minDiffPair = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffPair = (numbers(i), numbers(j))\n                }\n\
    \            }\n        }\n        minDiffPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n  \
    \          val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff <\
    \ minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair"]
stop_tokens:
- "\n    }\n"
