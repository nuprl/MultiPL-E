name: HumanEval_35_max_element
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return maximum element in the list.\n    // >>> max_element([1, 2, 3])\n\
  \    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n   \
  \ // 123\n    def maxElement(l : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
completions: ["        var max = l(0)\n        for (i <- 1 until l.length) {\n   \
    \         if (l(i) > max) max = l(i)\n        }\n        return max", "      \
    \  var max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) max = l(i)\n        }\n        return max", "        var max = Long.MinValue\n\
    \        for (x <- l) {\n            if (x > max) max = x\n        }\n       \
    \ return max", '        l.foldLeft(Long.MinValue)((a, b) => max(a, b))', "   \
    \     var max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) max = l(i)\n        }\n        return max", "        var max = l(0)\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n\
    \        }\n        return max", '        l.reduceLeft((a, b) => if (a > b) a
    else b)', "        var max = l(0)\n        for (i <- 1 until l.length) {\n   \
    \         if (l(i) > max) max = l(i)\n        }\n        return max", "      \
    \  var max = Long.MinValue\n        for (i <- l) {\n            if (i > max) max\
    \ = i\n        }\n        return max", "        var max = Long.MinValue\n    \
    \    for (i <- l) {\n            if (i > max) max = i\n        }\n        return\
    \ max", "        var max = l(0)\n        for (i <- 1 until l.length) {\n     \
    \       if (l(i) > max) max = l(i)\n        }\n        return max", "        var\
    \ max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max)\
    \ max = l(i)\n        }\n        return max", "        var max = l(0)\n      \
    \  for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n   \
    \     }\n        return max", "        var max = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > max) max = l(i)\n        }\n        return\
    \ max", '        l.reduceLeft((x, y) => max(x, y))', "        var max = l(0)\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n\
    \        }\n        return max", "        var max = l(0)\n        for (i <- 1\
    \ until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n     \
    \   return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', "        var max = Long.MinValue\n        for (i <- l) {\n\
    \            if (i > max) max = i\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', "        var max = Long.MinValue\n        for (i <- l) {\n\
    \            if (i > max) max = i\n        }\n        return max", "        var\
    \ max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max)\
    \ max = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', '        l.max', "        var max = l(0)\n        for (i <-\
    \ 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n   \
    \     return max", "        var max = Long.MinValue\n        for (i <- l) {\n\
    \            if (i > max) max = i\n        }\n        return max", "        var\
    \ max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max)\
    \ max = l(i)\n        }\n        return max", "        var max = l(0)\n      \
    \  for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n   \
    \     }\n        return max", "        var max = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > max) max = l(i)\n        }\n        return\
    \ max", '        l.foldLeft(Long.MinValue)((x, y) => max(x, y))', "        var\
    \ max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max)\
    \ max = l(i)\n        }\n        return max", "        var max = l(0)\n      \
    \  for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n   \
    \     }\n        return max", "        var max = Long.MinValue\n        for (i\
    \ <- l) {\n            if (i > max) max = i\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,
    b) => a max b)', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = Long.MinValue\n        for (i <- l) {\n            if (i > max)\
    \ max = i\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", '        l.max', " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((x,
    y) => if (x > y) x else y)', "        var max = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > max) max = l(i)\n        }\n        return\
    \ max", "        var max = l(0)\n        for (i <- 1 until l.length) {\n     \
    \       if (l(i) > max) max = l(i)\n        }\n        return max", '        l.max',
  '        l.reduceLeft((a, b) => if (a > b) a else b)', '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.reduceLeft((a,
    b) => if (a > b) a else b)', "        var max = Long.MinValue\n        for (i\
    \ <- l) {\n            if (i > max) max = i\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((x,
    y) => max(x, y))', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((x,
    y) => max(x, y))', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", '        l.max', "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var m = l(0)\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) > m) m = l(i)\n        }\n    \
    \    return m", "        var max = l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       if (l.length == 1) l(0)\n        else max(l(0), maxElement(l.tail))",
  "        var max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) max = l(i)\n        }\n        return max", "        var max = l(0)\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n\
    \        }\n        return max", "        var m = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > m) m = l(i)\n        }\n        return m",
  "        var max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) max = l(i)\n        }\n        return max", '        l.reduceLeft((x,
    y) => if (x > y) x else y)', "        var max = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > max) max = l(i)\n        }\n        return\
    \ max", '        l.max', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.max',
  "        var max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) {\n                max = l(i)\n            }\n        }\n        return\
    \ max", '        l.max', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.reduceLeft((a,
    b) => if (a > b) a else b)', '        l.max', "        var max = l(0)\n      \
    \  for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n   \
    \     }\n        return max", "        var max = Long.MinValue\n        for (i\
    \ <- l) {\n            if (i > max) max = i\n        }\n        return max", " \
    \       var max = Long.MinValue\n        for (i <- l) {\n            if (i > max)\
    \ max = i\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', "        var max = Long.MinValue\n        for (x <- l) {\n\
    \            if (x > max) max = x\n        }\n        return max", "        var\
    \ max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max)\
    \ max = l(i)\n        }\n        return max", "        var max = Long.MinValue\n\
    \        for (x <- l) {\n            if (x > max) max = x\n        }\n       \
    \ return max", "        var max = l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > max) max = l(i)\n        }\n        return max", "   \
    \     var max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) max = l(i)\n        }\n        return max", "        var max = l(0)\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n\
    \        }\n        return max", "        var max = Long.MinValue\n        for\
    \ (i <- l) {\n            if (i > max) max = i\n        }\n        return max",
  '        l.max', "        var max = l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > max) max = l(i)\n        }\n        return max", "   \
    \     var max = Long.MinValue\n        for (i <- l) {\n            if (i > max)\
    \ max = i\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', '        l.foldLeft(Long.MinValue)((a, b) => max(a, b))', " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = Long.MinValue\n \
    \       for (i <- l) {\n            if (i > max) max = i\n        }\n        return\
    \ max", "        var max = l(0)\n        for (i <- 1 until l.length) {\n     \
    \       if (l(i) > max) max = l(i)\n        }\n        return max", "        var\
    \ max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max)\
    \ max = l(i)\n        }\n        return max", "        if (l.length == 1) return\
    \ l(0)\n        else return max(l(0), maxElement(l.tail))", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", '        l.max', "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", '        l.reduceLeft((a, b) => if (a
    > b) a else b)', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.foldLeft(l.head)((a,
    b) => if (a > b) a else b)', "        var max = Long.MinValue\n        for (i\
    \ <- l) {\n            if (i > max) max = i\n        }\n        return max", " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", '        l.max', '        l.reduceLeft((a, b) => if (a >
    b) a else b)', '        l.foldLeft(Long.MinValue)((a, b) => max(a, b))', "   \
    \     var max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) max = l(i)\n        }\n        return max", "        var max = Long.MinValue\n\
    \        for (i <- l) {\n            if (i > max) max = i\n        }\n       \
    \ return max", "        var max = l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > max) max = l(i)\n        }\n        return max", "   \
    \     var max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) max = l(i)\n        }\n        return max", '        l.max', "      \
    \  var m = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) >\
    \ m) m = l(i)\n        }\n        return m", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.max',
  "        var max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) max = l(i)\n        }\n        return max", "        var max = l(0)\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n\
    \        }\n        return max", "        var max = Long.MinValue\n        for\
    \ (i <- l) {\n            if (i > max) max = i\n        }\n        return max",
  '        l.foldLeft(Long.MinValue)((a, b) => max(a, b))', '        l.max', '        l.foldLeft(l.head)((a,
    b) => if (a > b) a else b)', "        var max = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > max) max = l(i)\n        }\n        return\
    \ max", "        var max = Long.MinValue\n        for (i <- l) {\n           \
    \ if (i > max) max = i\n        }\n        return max", "        var max = l(0)\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n\
    \        }\n        return max", '        l.max', "        var max = l(0)\n  \
    \      for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n\
    \        }\n        return max", "        var max = l(0)\n        for (i <- 1\
    \ until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n     \
    \   return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = Long.MinValue\n        for (i <- l) {\n            if (i > max)\
    \ max = i\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", " \
    \       var max = Long.MinValue\n        for (i <- l) {\n            if (i > max)\
    \ max = i\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) max = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((x,
    y) => max(x, y))', '        l.foldLeft(Long.MinValue)((x, y) => max(x, y))', " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", '        l.reduceLeft((x, y) => if (x > y) x else y)', " \
    \       var max = l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > max) max = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((x,
    y) => if (x > y) x else y)', '        l.foldLeft(Long.MinValue)((a, b) => max(a,
    b))', "        var max = l(0)\n        for (i <- 1 until l.length) {\n       \
    \     if (l(i) > max) max = l(i)\n        }\n        return max", "        var\
    \ max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max)\
    \ max = l(i)\n        }\n        return max", "        var max = l(0)\n      \
    \  for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n   \
    \     }\n        return max", "        var max = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > max) max = l(i)\n        }\n        return\
    \ max", "        var max = l(0)\n        for (i <- 1 until l.length) {\n     \
    \       if (l(i) > max) max = l(i)\n        }\n        return max", "        var\
    \ max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max)\
    \ max = l(i)\n        }\n        return max", "        var max = l(0)\n      \
    \  for (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n   \
    \     }\n        return max", "        var max = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > max) max = l(i)\n        }\n        return\
    \ max", '        l.foldLeft(Long.MinValue)((a, b) => max(a, b))', "        var\
    \ max = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max)\
    \ max = l(i)\n        }\n        return max"]
stop_tokens:
- "\n    }\n"
