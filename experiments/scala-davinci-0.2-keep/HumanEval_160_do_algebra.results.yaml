language: scala
name: HumanEval_160_do_algebra
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq8qjun.scala:37)\n\tat Problem.main(tmpgjq8qjun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmppr_sqzkw.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmppr_sqzkw.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmppr_sqzkw.scala:34)\n\tat Problem$.main(tmppr_sqzkw.scala:38)\n\
    \tat Problem.main(tmppr_sqzkw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = stack.pop\n            val y = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(x + y)\n     \
    \           case \"-\" => stack.push(x - y)\n                case \"*\" => stack.push(x\
    \ * y)\n                case \"//\" => stack.push(x / y)\n                case\
    \ \"**\" => stack.push(pow(x, y).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp02gtbqve.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp02gtbqve.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp02gtbqve.scala:34)\n\tat Problem$.main(tmp02gtbqve.scala:38)\n\
    \tat Problem.main(tmp02gtbqve.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var res = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => res += operand(i\
    \ + 1)\n                case \"-\" => res -= operand(i + 1)\n                case\
    \ \"*\" => res *= operand(i + 1)\n                case \"//\" => res /= operand(i\
    \ + 1)\n                case \"**\" => res = pow(res, operand(i + 1)).toLong\n\
    \            }\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgripq7cs.scala:37)\n\tat Problem.main(tmpgripq7cs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            stack.push(operand(i))\n            stack.push(operand(i + 1))\n\
    \            val b = stack.pop\n            val a = stack.pop\n            op(i)\
    \ match {\n                case \"+\" => stack.push(a + b)\n                case\
    \ \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n\
    \                case \"//\" => stack.push(a / b)\n                case \"**\"\
    \ => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoq2i6fui.scala:40)\n\tat Problem.main(tmpoq2i6fui.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq8qjun.scala:37)\n\tat Problem.main(tmpgjq8qjun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq8qjun.scala:37)\n\tat Problem.main(tmpgjq8qjun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         val r = op(i) match {\n                case \"+\" => o1 + o2\n     \
    \           case \"-\" => o1 - o2\n                case \"*\" => o1 * o2\n   \
    \             case \"//\" => o1 / o2\n                case \"**\" => pow(o1, o2).toLong\n\
    \            }\n            stack.push(r)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpyy5xjvp2.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpyy5xjvp2.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpyy5xjvp2.scala:35)\n\tat Problem$.main(tmpyy5xjvp2.scala:39)\n\
    \tat Problem.main(tmpyy5xjvp2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = operand(i)\n            val y = operand(i + 1)\n    \
    \        op(i) match {\n                case \"+\" => stack.push(x + y)\n    \
    \            case \"-\" => stack.push(x - y)\n                case \"*\" => stack.push(x\
    \ * y)\n                case \"//\" => stack.push(x / y)\n                case\
    \ \"**\" => stack.push(pow(x, y).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkaks9on3.scala:38)\n\tat Problem.main(tmpkaks9on3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq8qjun.scala:37)\n\tat Problem.main(tmpgjq8qjun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmppr_sqzkw.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmppr_sqzkw.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmppr_sqzkw.scala:34)\n\tat Problem$.main(tmppr_sqzkw.scala:38)\n\
    \tat Problem.main(tmppr_sqzkw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.length != operand.length - 1) throw new IllegalArgumentException(\"\
    Invalid input\")\n        var stack = new Stack[Long]\n        for (i <- 0 until\
    \ operand.length) {\n            stack.push(operand(i))\n            if (i < op.length)\
    \ {\n                val b = stack.pop\n                val a = stack.pop\n  \
    \              op(i) match {\n                    case \"+\" => stack.push(a +\
    \ b)\n                    case \"-\" => stack.push(a - b)\n                  \
    \  case \"*\" => stack.push(a * b)\n                    case \"//\" => stack.push(a\
    \ / b)\n                    case \"**\" => stack.push(pow(a, b).toLong)\n    \
    \            }\n            }\n        }\n        stack.pop\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp27_1dzd5.scala:29)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.doAlgebra(tmp27_1dzd5.scala:38)\n\
    \tat Problem$.main(tmp27_1dzd5.scala:42)\n\tat Problem.main(tmp27_1dzd5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            if (op(i) == \"+\") result += operand(i + 1)\n            else\
    \ if (op(i) == \"-\") result -= operand(i + 1)\n            else if (op(i) ==\
    \ \"*\") result *= operand(i + 1)\n            else if (op(i) == \"//\") result\
    \ /= operand(i + 1)\n            else if (op(i) == \"**\") result = pow(result,\
    \ operand(i + 1)).toLong\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn3cpgb4h.scala:35)\n\tat Problem.main(tmpn3cpgb4h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            val o = op(i)\n            val a = operand(i)\n            val\
    \ b = operand(i + 1)\n            o match {\n                case \"+\" => result\
    \ += b\n                case \"-\" => result -= b\n                case \"*\"\
    \ => result *= b\n                case \"//\" => result /= b\n               \
    \ case \"**\" => result = pow(result, b).toLong\n            }\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqikgnxed.scala:40)\n\tat Problem.main(tmpqikgnxed.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val num1 = stack.pop\n            val num2 = operand(i + 1)\n\
    \            op(i) match {\n                case \"+\" => stack.push(num1 + num2)\n\
    \                case \"-\" => stack.push(num1 - num2)\n                case \"\
    *\" => stack.push(num1 * num2)\n                case \"//\" => stack.push(num1\
    \ / num2)\n                case \"**\" => stack.push(pow(num1, num2).toLong)\n\
    \            }\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpvaw84k68.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpvaw84k68.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpvaw84k68.scala:34)\n\tat Problem$.main(tmpvaw84k68.scala:38)\n\
    \tat Problem.main(tmpvaw84k68.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        stack.push(operand(0))\n\
    \        for (i <- 1 until operand.length) {\n            val x = stack.pop\n\
    \            val y = operand(i)\n            stack.push(op(i - 1) match {\n  \
    \              case \"+\" => x + y\n                case \"-\" => x - y\n    \
    \            case \"*\" => x * y\n                case \"//\" => x / y\n     \
    \           case \"**\" => pow(x, y).toLong\n            })\n        }\n     \
    \   stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkl4metwc.scala:40)\n\tat Problem.main(tmpkl4metwc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       stack.push(op(i) match {\n                case \"+\" => a + b\n      \
    \          case \"-\" => a - b\n                case \"*\" => a * b\n        \
    \        case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            })\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpsubnou7y.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpsubnou7y.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpsubnou7y.scala:34)\n\tat Problem$.main(tmpsubnou7y.scala:38)\n\
    \tat Problem.main(tmpsubnou7y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         val result = op(i) match {\n                case \"+\" => o1 + o2\n\
    \                case \"-\" => o1 - o2\n                case \"*\" => o1 * o2\n\
    \                case \"//\" => o1 / o2\n                case \"**\" => pow(o1,\
    \ o2).toLong\n            }\n            stack.push(result)\n        }\n     \
    \   stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpz57xewz5.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpz57xewz5.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpz57xewz5.scala:35)\n\tat Problem$.main(tmpz57xewz5.scala:39)\n\
    \tat Problem.main(tmpz57xewz5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq8qjun.scala:37)\n\tat Problem.main(tmpgjq8qjun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.length != operand.length - 1) throw new Exception(\"\
    Invalid input\")\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n                case _ => throw new Exception(\"Invalid operator\"\
    )\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppsu_66i9.scala:39)\n\tat Problem.main(tmppsu_66i9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmppr_sqzkw.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmppr_sqzkw.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmppr_sqzkw.scala:34)\n\tat Problem$.main(tmppr_sqzkw.scala:38)\n\
    \tat Problem.main(tmppr_sqzkw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       stack.push(op(i) match {\n                case \"+\" => a + b\n      \
    \          case \"-\" => a - b\n                case \"*\" => a * b\n        \
    \        case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            })\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpn2bj51bn.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpn2bj51bn.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpn2bj51bn.scala:34)\n\tat Problem$.main(tmpn2bj51bn.scala:38)\n\
    \tat Problem.main(tmpn2bj51bn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            if (op(i - 1) == \"+\") result += operand(i)\n            else\
    \ if (op(i - 1) == \"-\") result -= operand(i)\n            else if (op(i - 1)\
    \ == \"*\") result *= operand(i)\n            else if (op(i - 1) == \"//\") result\
    \ /= operand(i)\n            else if (op(i - 1) == \"**\") result = pow(result,\
    \ operand(i)).toLong\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpps68gtkb.scala:35)\n\tat Problem.main(tmpps68gtkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.length == 0 || operand.length == 0) return 0\n  \
    \      var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"\
    *\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n\
    \    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwjrx04zj.scala:38)\n\tat Problem.main(tmpwjrx04zj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpjbv6dl21.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpjbv6dl21.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpjbv6dl21.scala:35)\n\tat Problem$.main(tmpjbv6dl21.scala:39)\n\
    \tat Problem.main(tmpjbv6dl21.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpjbv6dl21.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpjbv6dl21.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpjbv6dl21.scala:35)\n\tat Problem$.main(tmpjbv6dl21.scala:39)\n\
    \tat Problem.main(tmpjbv6dl21.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            if (op(i) == \"+\") result += operand(i + 1)\n            else\
    \ if (op(i) == \"-\") result -= operand(i + 1)\n            else if (op(i) ==\
    \ \"*\") result *= operand(i + 1)\n            else if (op(i) == \"//\") result\
    \ /= operand(i + 1)\n            else if (op(i) == \"**\") result = pow(result,\
    \ operand(i + 1)).toLong\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn3cpgb4h.scala:35)\n\tat Problem.main(tmpn3cpgb4h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = Stack[Long]()\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmptsaz5yp4.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmptsaz5yp4.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmptsaz5yp4.scala:35)\n\tat Problem$.main(tmptsaz5yp4.scala:39)\n\
    \tat Problem.main(tmptsaz5yp4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.length != operand.length - 1) throw new IllegalArgumentException\n\
    \        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \                case _ => throw new IllegalArgumentException\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppmm4a4d6.scala:39)\n\tat Problem.main(tmppmm4a4d6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         val o = op(i)\n            o match {\n                case \"+\" =>\
    \ stack.push(o1 + o2)\n                case \"-\" => stack.push(o1 - o2)\n   \
    \             case \"*\" => stack.push(o1 * o2)\n                case \"//\" =>\
    \ stack.push(o1 / o2)\n                case \"**\" => stack.push(pow(o1, o2).toLong)\n\
    \            }\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmphfmr7ff8.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmphfmr7ff8.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmphfmr7ff8.scala:35)\n\tat Problem$.main(tmphfmr7ff8.scala:39)\n\
    \tat Problem.main(tmphfmr7ff8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = operand(i)\n            val y = operand(i + 1)\n    \
    \        val result = op(i) match {\n                case \"+\" => x + y\n   \
    \             case \"-\" => x - y\n                case \"*\" => x * y\n     \
    \           case \"//\" => x / y\n                case \"**\" => pow(x, y).toLong\n\
    \            }\n            stack.push(result)\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6b0b8l04.scala:39)\n\tat Problem.main(tmp6b0b8l04.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         val result = op(i) match {\n                case \"+\" => o1 + o2\n\
    \                case \"-\" => o1 - o2\n                case \"*\" => o1 * o2\n\
    \                case \"//\" => o1 / o2\n                case \"**\" => pow(o1,\
    \ o2).toLong\n            }\n            stack.push(result)\n        }\n     \
    \   stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpz57xewz5.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpz57xewz5.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpz57xewz5.scala:35)\n\tat Problem$.main(tmpz57xewz5.scala:39)\n\
    \tat Problem.main(tmpz57xewz5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         op(i) match {\n                case \"+\" => stack.push(o1 + o2)\n \
    \               case \"-\" => stack.push(o1 - o2)\n                case \"*\"\
    \ => stack.push(o1 * o2)\n                case \"//\" => stack.push(o1 / o2)\n\
    \                case \"**\" => stack.push(pow(o1, o2).toLong)\n            }\n\
    \        }\n        stack.pop\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp3hkzmr2s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp3hkzmr2s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp3hkzmr2s.scala:34)\n\tat Problem$.main(tmp3hkzmr2s.scala:38)\n\
    \tat Problem.main(tmp3hkzmr2s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq8qjun.scala:37)\n\tat Problem.main(tmpgjq8qjun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpjbv6dl21.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpjbv6dl21.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpjbv6dl21.scala:35)\n\tat Problem$.main(tmpjbv6dl21.scala:39)\n\
    \tat Problem.main(tmpjbv6dl21.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       if (op(i) == \"+\") stack.push(a + b)\n            else if (op(i) == \"\
    -\") stack.push(a - b)\n            else if (op(i) == \"*\") stack.push(a * b)\n\
    \            else if (op(i) == \"//\") stack.push(a / b)\n            else if\
    \ (op(i) == \"**\") stack.push(pow(a, b).toLong)\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmptm3ywwud.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmptm3ywwud.scala:32)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmptm3ywwud.scala:32)\n\tat Problem$.main(tmptm3ywwud.scala:36)\n\
    \tat Problem.main(tmptm3ywwud.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        stack.push(operand(0))\n\
    \        for (i <- 1 until operand.length) {\n            val a = stack.pop\n\
    \            val b = operand(i)\n            val c = op(i - 1) match {\n     \
    \           case \"+\" => a + b\n                case \"-\" => a - b\n       \
    \         case \"*\" => a * b\n                case \"//\" => a / b\n        \
    \        case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5idxktqr.scala:41)\n\tat Problem.main(tmp5idxktqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = stack.pop\n            val y = operand(i + 1)\n     \
    \       val z = op(i) match {\n                case \"+\" => x + y\n         \
    \       case \"-\" => x - y\n                case \"*\" => x * y\n           \
    \     case \"//\" => x / y\n                case \"**\" => pow(x, y).toLong\n\
    \            }\n            stack.push(z)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp5g7et43x.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp5g7et43x.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp5g7et43x.scala:35)\n\tat Problem$.main(tmp5g7et43x.scala:39)\n\
    \tat Problem.main(tmp5g7et43x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val op1 = stack.pop\n            val op2 = operand(i + 1)\n \
    \           val result = op(i) match {\n                case \"+\" => op1 + op2\n\
    \                case \"-\" => op1 - op2\n                case \"*\" => op1 *\
    \ op2\n                case \"//\" => op1 / op2\n                case \"**\" =>\
    \ pow(op1, op2).toLong\n            }\n            stack.push(result)\n      \
    \  }\n        stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpq3iaxeub.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpq3iaxeub.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpq3iaxeub.scala:35)\n\tat Problem$.main(tmpq3iaxeub.scala:39)\n\
    \tat Problem.main(tmpq3iaxeub.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val result = op(i) match {\n                case \"+\" => a + b\n    \
    \            case \"-\" => a - b\n                case \"*\" => a * b\n      \
    \          case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(result)\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpngfwk1wa.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpngfwk1wa.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpngfwk1wa.scala:35)\n\tat Problem$.main(tmpngfwk1wa.scala:39)\n\
    \tat Problem.main(tmpngfwk1wa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpjbv6dl21.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpjbv6dl21.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpjbv6dl21.scala:35)\n\tat Problem$.main(tmpjbv6dl21.scala:39)\n\
    \tat Problem.main(tmpjbv6dl21.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq8qjun.scala:37)\n\tat Problem.main(tmpgjq8qjun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o = op(i)\n            val a = operand(i)\n            val\
    \ b = operand(i + 1)\n            if (o == \"+\") stack.push(a + b)\n        \
    \    else if (o == \"-\") stack.push(a - b)\n            else if (o == \"*\")\
    \ stack.push(a * b)\n            else if (o == \"//\") stack.push(a / b)\n   \
    \         else if (o == \"**\") stack.push(pow(a, b).toLong)\n        }\n    \
    \    stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnzx39qq8.scala:37)\n\tat Problem.main(tmpnzx39qq8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = stack.pop\n            val y = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(x + y)\n     \
    \           case \"-\" => stack.push(x - y)\n                case \"*\" => stack.push(x\
    \ * y)\n                case \"//\" => stack.push(x / y)\n                case\
    \ \"**\" => stack.push(pow(x, y).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpuqi7467x.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpuqi7467x.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpuqi7467x.scala:34)\n\tat Problem$.main(tmpuqi7467x.scala:38)\n\
    \tat Problem.main(tmpuqi7467x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = operand(i)\n            val y = operand(i + 1)\n    \
    \        val z = op(i) match {\n                case \"+\" => x + y\n        \
    \        case \"-\" => x - y\n                case \"*\" => x * y\n          \
    \      case \"//\" => x / y\n                case \"**\" => pow(x, y).toLong\n\
    \            }\n            stack.push(z)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdu5v673r.scala:39)\n\tat Problem.main(tmpdu5v673r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         val o = op(i)\n            stack.push(o match {\n                case\
    \ \"+\" => o1 + o2\n                case \"-\" => o1 - o2\n                case\
    \ \"*\" => o1 * o2\n                case \"//\" => o1 / o2\n                case\
    \ \"**\" => pow(o1, o2).toLong\n            })\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp9j1wv391.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp9j1wv391.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp9j1wv391.scala:35)\n\tat Problem$.main(tmp9j1wv391.scala:39)\n\
    \tat Problem.main(tmp9j1wv391.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp2ewbhrqr.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp2ewbhrqr.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp2ewbhrqr.scala:35)\n\tat Problem$.main(tmp2ewbhrqr.scala:39)\n\
    \tat Problem.main(tmp2ewbhrqr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq8qjun.scala:37)\n\tat Problem.main(tmpgjq8qjun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmppr_sqzkw.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmppr_sqzkw.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmppr_sqzkw.scala:34)\n\tat Problem$.main(tmppr_sqzkw.scala:38)\n\
    \tat Problem.main(tmppr_sqzkw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       stack.push(op(i) match {\n                case \"+\" => a + b\n      \
    \          case \"-\" => a - b\n                case \"*\" => a * b\n        \
    \        case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            })\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpsubnou7y.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpsubnou7y.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpsubnou7y.scala:34)\n\tat Problem$.main(tmpsubnou7y.scala:38)\n\
    \tat Problem.main(tmpsubnou7y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp7ayl9ryo.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp7ayl9ryo.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp7ayl9ryo.scala:34)\n\tat Problem$.main(tmp7ayl9ryo.scala:38)\n\
    \tat Problem.main(tmp7ayl9ryo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq8qjun.scala:37)\n\tat Problem.main(tmpgjq8qjun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         val result = op(i) match {\n                case \"+\" => o1 + o2\n\
    \                case \"-\" => o1 - o2\n                case \"*\" => o1 * o2\n\
    \                case \"//\" => o1 / o2\n                case \"**\" => pow(o1,\
    \ o2).toLong\n            }\n            stack.push(result)\n        }\n     \
    \   stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpz57xewz5.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpz57xewz5.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpz57xewz5.scala:35)\n\tat Problem$.main(tmpz57xewz5.scala:39)\n\
    \tat Problem.main(tmpz57xewz5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbcronqa.scala:37)\n\tat Problem.main(tmpzbcronqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        stack.push(operand(0))\n\
    \        for (i <- 1 until operand.length) {\n            val o = op(i - 1)\n\
    \            val n = operand(i)\n            if (o == \"+\") stack.push(stack.pop\
    \ + n)\n            else if (o == \"-\") stack.push(stack.pop - n)\n         \
    \   else if (o == \"*\") stack.push(stack.pop * n)\n            else if (o ==\
    \ \"//\") stack.push(stack.pop / n)\n            else if (o == \"**\") stack.push(pow(stack.pop,\
    \ n).toLong)\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptg27sq90.scala:38)\n\tat Problem.main(tmptg27sq90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83xnjc1d.scala:37)\n\tat Problem.main(tmp83xnjc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
