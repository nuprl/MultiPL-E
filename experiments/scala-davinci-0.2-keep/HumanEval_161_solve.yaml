name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    // solve(\"1234\") = \"4321\"\
  \n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    def solve(s\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c\
    \ => if (c.isLetter) c.toUpper ^ c.toLower else c)", "        if (s.forall(!_.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.length ==\
    \ 0) s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toUpper ^ c.toLower else c).mkString\n        } else {\n            s.reverse\n\
    \        }", "        var str = \"\"\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                if (c.isUpper) str += c.toLower\n                else str\
    \ += c.toUpper\n            }\n            else str += c\n        }\n        if\
    \ (str.length == s.length) str.reverse\n        else str", "        // Write your\
    \ code here\n        s.reverse.map(c => if (c.isLetter) c.toLower else c.toUpper)",
  "        if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ if (c.isUpper) c.toLower else c.toUpper else c)", "        var result = \"\"\
    \n        for (c <- s) {\n            if (c.isLetter) {\n                if (c.isUpper)\
    \ result += c.toLower\n                else result += c.toUpper\n            }\n\
    \            else result += c\n        }\n        if (result.length == s.length)\
    \ result.reverse\n        else result", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        if (s.isEmpty) return s\n    \
    \    val sb = new StringBuilder\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                if (c.isUpper) sb.append(c.toLower)\n                else\
    \ sb.append(c.toUpper)\n            } else sb.append(c)\n        }\n        if\
    \ (sb.forall(!_.isLetter)) sb.reverse.toString\n        else sb.toString", " \
    \       val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        if (s.exists(_.isLetter)) {\n            s.map(c => if (c.isLetter) c.toUpper\
    \ ^ c.toLower else c)\n        } else {\n            s.reverse\n        }", " \
    \       if (s.exists(c => c.isLetter)) {\n            val sb = new StringBuilder\n\
    \            for (c <- s) {\n                if (c.isLetter) {\n             \
    \       if (c.isUpper) sb.append(c.toLower)\n                    else sb.append(c.toUpper)\n\
    \                }\n                else sb.append(c)\n            }\n       \
    \     sb.toString\n        }\n        else s.reverse", "        if (s.isEmpty)\
    \ return s\n        var result = \"\"\n        for (i <- 0 until s.length) {\n\
    \            if (s(i).isLetter) {\n                if (s(i).isUpper) result +=\
    \ s(i).toLower\n                else result += s(i).toUpper\n            }\n \
    \           else result += s(i)\n        }\n        if (result.forall(!_.isLetter))\
    \ result.reverse\n        else result", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        if (s.exists(c => c.isLetter))\
    \ {\n            s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c).reverse\n\
    \        } else {\n            s.reverse\n        }", "        if (s.forall(!_.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) if (c.isUpper) c.toLower\
    \ else c.toUpper else c)", "        if (s.exists(c => c.isLetter)) {\n       \
    \     s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c).reverse\n     \
    \   } else {\n            s.reverse\n        }"]
stop_tokens:
- "\n    }\n"
