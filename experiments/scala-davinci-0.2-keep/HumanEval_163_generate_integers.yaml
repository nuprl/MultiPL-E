name: HumanEval_163_generate_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two positive integers a and b, return the even digits between a\n\
  \    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
  \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
  \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
  \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n  \
  \  assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
  \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        var result = List[Long]()\n        val min = min(a, b)\n  \
    \      val max = max(a, b)\n        for (i <- min to max) {\n            if (i\
    \ % 2 == 0) result = result :+ i\n        }\n        result", "        val min\
    \ = min(a, b)\n        val max = max(a, b)\n        val result = new ListBuffer[Long]\n\
    \        for (i <- min to max) {\n            if (i % 2 == 0) result += i\n  \
    \      }\n        result.toList", "        var result = List[Long]()\n       \
    \ for (i <- min(a, b) to max(a, b)) {\n            if (i % 2 == 0) result = result\
    \ :+ i\n        }\n        return result", "        val min = min(a, b)\n    \
    \    val max = max(a, b)\n        val result = new ListBuffer[Long]\n        for\
    \ (i <- min to max) {\n            if (i % 2 == 0) result += i\n        }\n  \
    \      result.toList", "        val min = min(a, b)\n        val max = max(a,\
    \ b)\n        val result = new ListBuffer[Long]\n        for (i <- min to max)\
    \ {\n            if (i % 2 == 0) result += i\n        }\n        result.toList",
  "        var result = List[Long]()\n        var start = min(a, b)\n        var end\
    \ = max(a, b)\n        while (start <= end) {\n            if (start % 2 == 0)\
    \ result = result :+ start\n            start += 1\n        }\n        return\
    \ result", "        val min = min(a, b)\n        val max = max(a, b)\n       \
    \ val result = new ListBuffer[Long]\n        for (i <- min to max) {\n       \
    \     if (i % 2 == 0) result += i\n        }\n        result.toList", "      \
    \  val min = min(a, b)\n        val max = max(a, b)\n        val result = new\
    \ ListBuffer[Long]\n        for (i <- min to max) {\n            if (i % 2 ==\
    \ 0) result += i\n        }\n        result.toList", "        val min = min(a,\
    \ b)\n        val max = max(a, b)\n        val result = new ListBuffer[Long]\n\
    \        for (i <- min to max) {\n            if (i % 2 == 0) result += i\n  \
    \      }\n        result.toList", "        val min = min(a, b)\n        val max\
    \ = max(a, b)\n        (min to max).filter(x => x % 2 == 0).toList", "       \
    \ val min = min(a, b)\n        val max = max(a, b)\n        val result = new ListBuffer[Long]\n\
    \        for (i <- min to max) {\n            if (i % 2 == 0) result += i\n  \
    \      }\n        result.toList", "        val min = min(a, b)\n        val max\
    \ = max(a, b)\n        val result = new ListBuffer[Long]\n        for (i <- min\
    \ to max) {\n            if (i % 2 == 0) result += i\n        }\n        result.toList",
  "        val min = min(a, b)\n        val max = max(a, b)\n        val result =\
    \ new ListBuffer[Long]\n        for (i <- min to max) {\n            if (i % 2\
    \ == 0) result += i\n        }\n        result.toList", "        val min = min(a,\
    \ b)\n        val max = max(a, b)\n        val list = new ListBuffer[Long]\n \
    \       for (i <- min to max) {\n            if (i % 2 == 0) list += i\n     \
    \   }\n        list.toList", "        val min = min(a, b)\n        val max = max(a,\
    \ b)\n        val result = new ListBuffer[Long]\n        for (i <- min to max)\
    \ {\n            if (i % 2 == 0) result += i\n        }\n        result.toList",
  "        val min = min(a, b)\n        val max = max(a, b)\n        if (min % 2 ==\
    \ 1) (min + 1 to max by 2).toList\n        else (min to max by 2).toList", " \
    \       var l = List[Long]()\n        val (min, max) = if (a < b) (a, b) else\
    \ (b, a)\n        for (i <- min to max) {\n            if (i % 2 == 0) l = i ::\
    \ l\n        }\n        l.sorted", "        val min = min(a, b)\n        val max\
    \ = max(a, b)\n        val result = new ListBuffer[Long]\n        for (i <- min\
    \ to max) {\n            if (i % 2 == 0) result += i\n        }\n        result.toList",
  "        val min = min(a, b)\n        val max = max(a, b)\n        var result =\
    \ List[Long]()\n        for (i <- min to max) {\n            if (i % 2 == 0) result\
    \ = result :+ i\n        }\n        result", "        val min = min(a, b)\n  \
    \      val max = max(a, b)\n        val result = new ListBuffer[Long]\n      \
    \  for (i <- min to max) {\n            if (i % 2 == 0) result += i\n        }\n\
    \        result.toList"]
stop_tokens:
- "\n    }\n"
