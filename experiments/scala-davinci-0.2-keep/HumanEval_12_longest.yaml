name: HumanEval_12_longest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n    // strings of the same length. Return None in case the input\
  \ list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b', 'c'])\n\
  \    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n    def longest(strings\
  \ : List[String]) : Option[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
  \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
  \n}\n"
completions: ["        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        if (strings.isEmpty) return\
    \ None\n        var longest = strings(0)\n        for (s <- strings) {\n     \
    \       if (s.length > longest.length) longest = s\n        }\n        return\
    \ Some(longest)", "        if (strings.isEmpty) None\n        else {\n       \
    \     var longest = strings(0)\n            for (s <- strings) {\n           \
    \     if (s.length > longest.length) longest = s\n            }\n            Some(longest)\n\
    \        }", "        if (strings.isEmpty) None\n        else {\n            val\
    \ maxLength = strings.map(_.length).max\n            strings.find(_.length ==\
    \ maxLength)\n        }", "        if (strings.isEmpty) None\n        else {\n\
    \            var longest = strings(0)\n            for (s <- strings) {\n    \
    \            if (s.length > longest.length) longest = s\n            }\n     \
    \       Some(longest)\n        }", "        if (strings.isEmpty) None\n      \
    \  else Some(strings.maxBy(_.length))", "        if (strings.isEmpty) None\n \
    \       else {\n            val maxLength = strings.map(_.length).max\n      \
    \      val maxLengthStrings = strings.filter(_.length == maxLength)\n        \
    \    Some(maxLengthStrings.head)\n        }", "        if (strings.isEmpty) None\n\
    \        else {\n            val maxLength = strings.map(s => s.length).max\n\
    \            val maxLengthStrings = strings.filter(s => s.length == maxLength)\n\
    \            Some(maxLengthStrings.head)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (s <- strings) {\n                if (s.length > longest.length) longest = s\n\
    \            }\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (s <- strings) {\n                if (s.length > longest.length) longest = s\n\
    \            }\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (s <- strings) {\n                if (s.length > longest.length) longest = s\n\
    \            }\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty)\
    \ None\n        else {\n            val maxLength = strings.map(_.length).max\n\
    \            val longestStrings = strings.filter(_.length == maxLength)\n    \
    \        Some(longestStrings.head)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            val maxLength = strings.map(_.length).max\n\
    \            val maxLengthStrings = strings.filter(_.length == maxLength)\n  \
    \          Some(maxLengthStrings.head)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            val maxLength = strings.map(_.length).max\n\
    \            val maxLengthStrings = strings.filter(_.length == maxLength)\n  \
    \          Some(maxLengthStrings.head)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (s <- strings) {\n                if (s.length > longest.length) longest = s\n\
    \            }\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var maxLength = 0\n            var maxString\
    \ = \"\"\n            for (s <- strings) {\n                if (s.length > maxLength)\
    \ {\n                    maxLength = s.length\n                    maxString =\
    \ s\n                }\n            }\n            Some(maxString)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            val maxLength =\
    \ strings.map(_.length).max\n            val maxLengthStrings = strings.filter(_.length\
    \ == maxLength)\n            Some(maxLengthStrings.head)\n        }"]
stop_tokens:
- "\n    }\n"
