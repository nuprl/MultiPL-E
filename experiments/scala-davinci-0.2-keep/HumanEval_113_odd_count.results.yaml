language: scala
name: HumanEval_113_odd_count
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => (c - '0')\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val result = new ListBuffer[String]\n\
    \        for (i <- 0 until lst.length) {\n            var count = 0\n        \
    \    for (j <- 0 until lst(i).length) {\n                if (lst(i)(j) % 2 ==\
    \ 1) count += 1\n            }\n            result += \"the number of odd elements\
    \ \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count\
    \ + \"nput.\"\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => {\n            val\
    \ count = x.filter(y => y.toInt % 2 == 1).length\n            val str = \"the\
    \ number of odd elements \" + count + \"n the str\" + count + \"ng \" + count\
    \ + \" of the \" + count + \"nput.\"\n            str\n        })\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.map(y => if (y.toInt\
    \ % 2 == 1) 1 else 0).sum)\n            .map(x => \"the number of odd elements\
    \ \" + x + \"n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var result = List[String]()\n  \
    \      for (i <- 0 until lst.length) {\n            var count = 0\n          \
    \  for (j <- 0 until lst(i).length) {\n                if (lst(i)(j).toInt % 2\
    \ == 1) count += 1\n            }\n            result = result :+ \"the number\
    \ of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of\
    \ the \" + count + \"nput.\"\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.filter(c => (c - '0') % 2 == 1).length\n            \"the number of\
    \ odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the\
    \ \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.map(c => if (c.asDigit\
    \ % 2 == 1) 1 else 0).sum)\n            .map(n => s\"the number of odd elements\
    \ ${n}n the str${n}ng ${n} of the ${n}nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.length + \"ng\
    \ \" + x.length + \" of the \" + x.length + \"nput.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5d9si21p.scala:17)\n\tat Problem.main(tmp5d9si21p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.filter(c => (c - '0') % 2 == 1).length\n            s\"the number\
    \ of odd elements $countn the str$countng $count of the $countnput.\"\n      \
    \  })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbjn6b9l.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: countn\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbjn6b9l.scala:16:57\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the\
    \ number of odd elements \e[0m$countn\e[31m the str\e[0m$countng\e[31m \e[0m$count\e\
    [31m of the \e[0m$countnput\e[31m.\"\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                            ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                   Not found: countng\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbjn6b9l.scala:16:80 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                      Not found: countnput\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (str : String) =>\
    \ str.filter(c => c.asDigit % 2 == 1).length\n        lst.map(str => \"the number\
    \ of odd elements \" + oddCount(str) + \"n the str\" + oddCount(str) + \"ng \"\
    \ + oddCount(str) + \" of the \" + oddCount(str) + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(i => s\"the number of odd elements ${i}n the str${i}ng ${i} of\
    \ the ${i}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        def oddCount(str : String) : Int\
    \ = {\n            var count = 0\n            for (i <- 0 until str.length) {\n\
    \                if (str(i) % 2 == 1) count += 1\n            }\n            count\n\
    \        }\n        var result = List[String]()\n        for (i <- 0 until lst.length)\
    \ {\n            var str = lst(i)\n            var count = oddCount(str)\n   \
    \         var newStr = \"the number of odd elements \" + count + \"n the str\"\
    \ + count + \"ng \" + count + \" of the \" + count + \"nput.\"\n            result\
    \ = result :+ newStr\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (s : String) => s.map(c\
    \ => c.asDigit).count(d => d % 2 == 1)\n        lst.map(s => s.replaceAll(\"[0-9]\"\
    , \"4\").replaceAll(\"4\", oddCount(s).toString))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0_nizpyw.scala:18)\n\tat Problem.main(tmp0_nizpyw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.filter(c => c.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoaua20vn.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36ms\e[0m\
    \ => s.filter(\e[36mc\e[0m => c.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.filter(y => y.toInt % 2 == 1).length + \"n the str\" + x.length\
    \ + \"ng \" + x.length + \" of the \" + x.length + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ppeqtlf.scala:17)\n\tat Problem.main(tmp7ppeqtlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var result = List[String]()\n  \
    \      for (i <- 0 until lst.length) {\n            var count = 0\n          \
    \  for (j <- 0 until lst(i).length) {\n                if (lst(i)(j).asDigit %\
    \ 2 == 1) count += 1\n            }\n            result = result :+ \"the number\
    \ of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of\
    \ the \" + count + \"nput.\"\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(i => s\"the number of odd elements ${i}n the str${i}ng ${i} of\
    \ the ${i}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCounts = lst.map(x => x.filter(x\
    \ => x.toInt % 2 == 1).length)\n        val result = for (i <- 0 until lst.length)\
    \ yield {\n            val str = lst(i)\n            val count = oddCounts(i)\n\
    \            val newStr = str.map(x => if (x.toInt % 2 == 1) count.toString else\
    \ x)\n            newStr\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppjovk73u.scala:21:15\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        result.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[IndexedSeq[Matchable]]\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1))\n            .map(n => s\"the number of odd elements ${n}n the str${n}ng\
    \ ${n} of the ${n}nput.\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => {\n            val\
    \ count = x.filter(c => c.asDigit % 2 == 1).length\n            \"the number of\
    \ odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the\
    \ \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1))\n            .map(x => \"the number of odd elements \" + x + \"n\
    \ the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.filter(y => y.toInt % 2 == 1).length + \"n the str\" + x.length\
    \ + \"ng \" + x.length + \" of the \" + x.length + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ppeqtlf.scala:17)\n\tat Problem.main(tmp7ppeqtlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.map(c => if (c.asDigit % 2 == 1) 1 else 0).sum\n            s\"the\
    \ number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.\"\
    \n        })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(i => \"the number of odd elements \" + i + \"n the str\" + i\
    \ + \"ng \" + i + \" of the \" + i + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.count(c => c.asDigit % 2 == 1)\n            \"the number of odd elements\
    \ \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count\
    \ + \"nput.\"\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2pns9z_c.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.count(\e[36my\e[0m => y.asDigit % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Found:    Int\n\e[31m   |\e[0m                \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd = (x : String) => x.count(_.asDigit\
    \ % 2 == 1)\n        lst.map(x => \"the number of odd elements \" + odd(x) + \"\
    n the str\" + odd(x) + \"ng \" + odd(x) + \" of the \" + odd(x) + \"nput.\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.filter(c => c.asDigit % 2 == 1).length\n            s\"the number\
    \ of odd elements $countn the str$countng $count of the $countnput.\"\n      \
    \  })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm2tjzee.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: countn\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm2tjzee.scala:16:57\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the\
    \ number of odd elements \e[0m$countn\e[31m the str\e[0m$countng\e[31m \e[0m$count\e\
    [31m of the \e[0m$countnput\e[31m.\"\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                            ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                   Not found: countng\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm2tjzee.scala:16:80 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                      Not found: countnput\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ n = s.count(c => c.asDigit % 2 == 1)\n            \"the number of odd elements\
    \ \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"\n  \
    \      })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.toInt % 2 == 1) + \"n the str\" + x.count(_.toInt %\
    \ 2 == 1) + \"ng \" + x.count(_.toInt % 2 == 1) + \" of the \" + x.count(_.toInt\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.filter(y => y.toInt % 2 == 1).length + \"n the str\" + x.length\
    \ + \"ng \" + x.length + \" of the \" + x.length + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ppeqtlf.scala:17)\n\tat Problem.main(tmp7ppeqtlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (s : String) => s.map(c\
    \ => c.asDigit).filter(d => d % 2 == 1).length\n        lst.map(s => s.replaceAll(\"\
    [0-9]\", \"n\").replaceAll(\"n\", oddCount(s).toString))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk38iv0dc.scala:18)\n\tat Problem.main(tmpk38iv0dc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.count(c => c.asDigit % 2 == 1)\n            val str = \"the number\
    \ of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of\
    \ the \" + count + \"nput.\"\n            str\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        def oddCountHelper(str : String)\
    \ : Int = {\n            var count = 0\n            for (i <- 0 until str.length)\
    \ {\n                if (str(i) % 2 == 1) count += 1\n            }\n        \
    \    count\n        }\n        var result = List[String]()\n        for (i <-\
    \ 0 until lst.length) {\n            var str = \"the number of odd elements \"\
    \ + oddCountHelper(lst(i)) + \"n the str\" + lst(i).length + \"ng \" + lst(i).length\
    \ + \" of the \" + lst(i).length + \"nput.\"\n            result = result :+ str\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1u2g8mr3.scala:29)\n\tat Problem.main(tmp1u2g8mr3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ c = s.count(c => c.asDigit % 2 == 1)\n            \"the number of odd elements\
    \ \" + c + \"n the str\" + c + \"ng \" + c + \" of the \" + c + \"nput.\"\n  \
    \      })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => {\n            val\
    \ count = x.filter(y => y.toInt % 2 == 1).length\n            \"the number of\
    \ odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the\
    \ \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        def oddCountHelper(str : String)\
    \ : Int = {\n            var count = 0\n            for (i <- 0 until str.length)\
    \ {\n                if (str(i) % 2 == 1) count += 1\n            }\n        \
    \    count\n        }\n        var result = List[String]()\n        for (i <-\
    \ 0 until lst.length) {\n            var str = lst(i)\n            var count =\
    \ oddCountHelper(str)\n            var newStr = \"the number of odd elements \"\
    \ + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"\
    nput.\"\n            result = result :+ newStr\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val result = new ListBuffer[String]\n\
    \        for (i <- 0 until lst.length) {\n            var count = 0\n        \
    \    for (j <- 0 until lst(i).length) {\n                if (lst(i)(j) % 2 ==\
    \ 1) count += 1\n            }\n            result += \"the number of odd elements\
    \ \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count\
    \ + \"nput.\"\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1).toString).map(x => \"the number of odd elements \" + x + \"n the str\"\
    \ + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.filter(c => c.toInt % 2 == 1).length\n            \"the number of\
    \ odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the\
    \ \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.filter(c => c.asDigit % 2 == 1).length\n            s\"the number\
    \ of odd elements $countn the str$countng $count of the $countnput.\"\n      \
    \  })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm2tjzee.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: countn\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm2tjzee.scala:16:57\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the\
    \ number of odd elements \e[0m$countn\e[31m the str\e[0m$countng\e[31m \e[0m$count\e\
    [31m of the \e[0m$countnput\e[31m.\"\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                            ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                   Not found: countng\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm2tjzee.scala:16:80 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                      Not found: countnput\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = lst.map(x => x.count(y\
    \ => y.asDigit % 2 == 1))\n        val result = lst.zip(oddCount).map(x => x._1.replaceAll(\"\
    [0-9]\", \"4\").replaceAll(\"4\", x._2.toString))\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnushjn2k.scala:19)\n\tat Problem.main(tmpnushjn2k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(x => x.toInt\
    \ % 2 == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjas4tgnm.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.count(\e[36mx\e[0m => x.toInt % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Found:    Int\n\e[31m   |\e[0m                \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => {\n            val\
    \ count = x.filter(y => (y.toInt - '0'.toInt) % 2 == 1).length\n            \"\
    the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count\
    \ + \" of the \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.count(c => (c - '0') % 2 == 1)\n            val str = \"the number\
    \ of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of\
    \ the \" + count + \"nput.\"\n            str\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.filter(c => (c -\
    \ '0') % 2 == 1).length)\n            .map(n => \"the number of odd elements \"\
    \ + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (str : String) =>\
    \ str.count(_.asDigit % 2 == 1)\n        lst.map(str => \"the number of odd elements\
    \ \" + oddCount(str) + \"n the str\" + oddCount(str) + \"ng \" + oddCount(str)\
    \ + \" of the \" + oddCount(str) + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.filter(c => c.asDigit % 2 == 1).length\n            s\"the number\
    \ of odd elements $countn the str$countng $count of the $countnput.\"\n      \
    \  })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm2tjzee.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: countn\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm2tjzee.scala:16:57\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the\
    \ number of odd elements \e[0m$countn\e[31m the str\e[0m$countng\e[31m \e[0m$count\e\
    [31m of the \e[0m$countnput\e[31m.\"\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                            ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                   Not found: countng\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm2tjzee.scala:16:80 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                      Not found: countnput\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(i => s\"the number of odd elements ${i}n the str${i}ng ${i} of\
    \ the ${i}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1))\n            .map(x => \"the number of odd elements \" + x + \"n\
    \ the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        def oddCount(s : String) : Int =\
    \ {\n            var count = 0\n            for (c <- s) {\n                if\
    \ (c.asDigit % 2 == 1) count += 1\n            }\n            count\n        }\n\
    \        var result = List[String]()\n        for (s <- lst) {\n            var\
    \ count = oddCount(s)\n            var str = \"\"\n            for (c <- s) {\n\
    \                if (c.asDigit % 2 == 1) str += count.toString\n             \
    \   else str += c\n            }\n            result = str :: result\n       \
    \ }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpugpig_64.scala:34)\n\tat Problem.main(tmpugpig_64.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(x => x.toInt\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(x => x.toInt\
    \ % 2 == 1).toString)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3x8ma250.scala:17)\n\tat Problem.main(tmp3x8ma250.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        def oddCountHelper(str : String)\
    \ : Int = {\n            var count = 0\n            for (i <- 0 until str.length)\
    \ {\n                if (str(i) % 2 == 1) count += 1\n            }\n        \
    \    count\n        }\n        var result = List[String]()\n        for (i <-\
    \ 0 until lst.length) {\n            val str = lst(i)\n            val count =\
    \ oddCountHelper(str)\n            result = result :+ s\"the number of odd elements\
    \ ${count}n the str${count}ng ${count} of the ${count}nput.\"\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(x => x.toInt\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(x => x.toInt\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val result = new ListBuffer[String]\n\
    \        for (str <- lst) {\n            var count = 0\n            for (i <-\
    \ 0 until str.length) {\n                if (str(i) % 2 == 1) count += 1\n   \
    \         }\n            result += \"the number of odd elements \" + count + \"\
    n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\"\n   \
    \     }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var result = List[String]()\n  \
    \      for (i <- 0 until lst.length) {\n            var count = 0\n          \
    \  for (j <- 0 until lst(i).length) {\n                if (lst(i)(j).toInt % 2\
    \ == 1) count += 1\n            }\n            result = result :+ \"the number\
    \ of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of\
    \ the \" + count + \"nput.\"\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.toList.filter(y =>\
    \ y.toInt % 2 == 1).length)\n            .map(x => \"the number of odd elements\
    \ \" + x + \"n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(n => s\"the number of odd elements ${n}n the str${n}ng ${n} of\
    \ the ${n}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.map(y => if (y.asDigit\
    \ % 2 == 1) 1 else 0).sum)\n            .map(x => \"the number of odd elements\
    \ \" + x + \"n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(n => \"the number of odd elements \" + n + \"n the str\" + n\
    \ + \"ng \" + n + \" of the \" + n + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1))\n            .map(x => s\"the number of odd elements ${x}n the str${x}ng\
    \ ${x} of the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        def oddCount(str : String) : Int\
    \ = {\n            str.filter(c => c.asDigit % 2 == 1).length\n        }\n   \
    \     lst.map(str => \"the number of odd elements \" + oddCount(str) + \"n the\
    \ str\" + oddCount(str) + \"ng \" + oddCount(str) + \" of the \" + oddCount(str)\
    \ + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.filter(c => c.toInt % 2 == 1).length\n            \"the number of\
    \ odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the\
    \ \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val result = new ListBuffer[String]\n\
    \        for (i <- 0 until lst.length) {\n            val count = lst(i).count(c\
    \ => c.toInt % 2 == 1)\n            result += \"the number of odd elements \"\
    \ + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"\
    nput.\"\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => (c - '0')\
    \ % 2 == 1)).map(n => \"the number of odd elements \" + n + \"n the str\" + n\
    \ + \"ng \" + n + \" of the \" + n + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => (c - '0')\
    \ % 2 == 1))\n            .map(x => s\"the number of odd elements ${x}n the str${x}ng\
    \ ${x} of the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n            .map(x => \"the number of odd elements \" + x\
    \ + \"n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.length + \"ng\
    \ \" + x.length + \" of the \" + x.length + \"nput.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5d9si21p.scala:17)\n\tat Problem.main(tmp5d9si21p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.filter(c => (c - '0') % 2 == 1).length\n            s\"the number\
    \ of odd elements $countn the str$countng $count of the $countnput.\"\n      \
    \  })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbjn6b9l.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: countn\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbjn6b9l.scala:16:57\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the\
    \ number of odd elements \e[0m$countn\e[31m the str\e[0m$countng\e[31m \e[0m$count\e\
    [31m of the \e[0m$countnput\e[31m.\"\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                            ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                   Not found: countng\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbjn6b9l.scala:16:80 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31ms\"the number of odd elements \e[0m$countn\e\
    [31m the str\e[0m$countng\e[31m \e[0m$count\e[31m of the \e[0m$countnput\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                      Not found: countnput\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n        .map(x => \"the number of odd elements \" + x + \"\
    n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(str => {\n            val\
    \ count = str.filter(c => (c - '0') % 2 == 1).length\n            \"the number\
    \ of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of\
    \ the \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(x => x.toInt\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1))\n            .map(n => \"the number of odd elements \" + n + \"n\
    \ the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (str : String) =>\
    \ {\n            str.map(c => c.asDigit).filter(x => x % 2 == 1).length\n    \
    \    }\n        val replace = (str : String, i : Int) => {\n            str.replaceAll(\"\
    4\", i.toString)\n        }\n        lst.map(str => replace(replace(replace(\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\", oddCount(str)), str.length),\
    \ str.length))\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7g9x2nah.scala:23)\n\tat Problem.main(tmp7g9x2nah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val result = new ListBuffer[String]\n\
    \        for (i <- 0 until lst.length) {\n            var count = 0\n        \
    \    for (j <- 0 until lst(i).length) {\n                if (lst(i)(j) % 2 ==\
    \ 1) count += 1\n            }\n            result += \"the number of odd elements\
    \ \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count\
    \ + \"nput.\"\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => {\n            val\
    \ count = x.map(y => y.asDigit).filter(y => y % 2 == 1).length\n            \"\
    the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count\
    \ + \" of the \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val result = new ListBuffer[String]\n\
    \        for (i <- 0 until lst.length) {\n            val num = lst(i).toInt\n\
    \            var count = 0\n            var temp = num\n            while (temp\
    \ > 0) {\n                if (temp % 2 == 1) count += 1\n                temp\
    \ /= 10\n            }\n            result += \"the number of odd elements \"\
    \ + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"\
    nput.\"\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.filter(y => y.toInt % 2 == 1).length + \"n the str\" + x.length\
    \ + \"ng \" + x.length + \" of the \" + x.length + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ppeqtlf.scala:17)\n\tat Problem.main(tmp7ppeqtlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        def oddCount(str : String) : Int\
    \ = {\n            str.map(c => c.asDigit).filter(n => n % 2 == 1).length\n  \
    \      }\n        lst.map(str => {\n            val count = oddCount(str)\n  \
    \          \"the number of odd elements \" + count + \"n the str\" + count + \"\
    ng \" + count + \" of the \" + count + \"nput.\"\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => {\n            val\
    \ count = x.count(y => (y.toInt - '0'.toInt) % 2 == 1)\n            \"the number\
    \ of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of\
    \ the \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.filter(c => c.asDigit\
    \ % 2 == 1).length)\n            .map(n => \"the number of odd elements \" + n\
    \ + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var result = List[String]()\n  \
    \      for (str <- lst) {\n            var count = 0\n            for (c <- str)\
    \ {\n                if (c.asDigit % 2 == 1) count += 1\n            }\n     \
    \       var s = \"the number of odd elements \" + count + \"n the str\" + count\
    \ + \"ng \" + count + \" of the \" + count + \"nput.\"\n            result = result\
    \ :+ s\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (str : String) =>\
    \ str.count(_.asDigit % 2 == 1)\n        val oddCountStr = (str : String) => s\"\
    the number of odd elements ${oddCount(str)}n the str${oddCount(str)}ng ${oddCount(str)}\
    \ of the ${oddCount(str)}nput.\"\n        lst.map(oddCountStr)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val odd_count = (str : String) =>\
    \ str.count(_.toInt % 2 == 1)\n        val odd_count_str = (str : String) => str.replaceAll(\"\
    [0-9]\", \"n\")\n        val odd_count_str_with_count = (str : String) => str.replaceAll(\"\
    n\", odd_count(str).toString)\n        lst.map(odd_count_str_with_count)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbglw_5ia.scala:20)\n\tat Problem.main(tmpbglw_5ia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => {\n            val\
    \ count = x.count(c => c.asDigit % 2 == 1)\n            \"the number of odd elements\
    \ \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count\
    \ + \"nput.\"\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var res = List[String]()\n     \
    \   for (str <- lst) {\n            var count = 0\n            for (c <- str)\
    \ {\n                if (c.asDigit % 2 == 1) count += 1\n            }\n     \
    \       res = res :+ \"the number of odd elements \" + count + \"n the str\" +\
    \ count + \"ng \" + count + \" of the \" + count + \"nput.\"\n        }\n    \
    \    res\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1).toString)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pq_vvuj.scala:17)\n\tat Problem.main(tmp6pq_vvuj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.map(y => if (y.asDigit\
    \ % 2 == 1) 1 else 0).sum)\n        .map(x => \"the number of odd elements \"\
    \ + x + \"n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1))\n            .map(x => s\"the number of odd elements ${x}n the str${x}ng\
    \ ${x} of the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(i => \"the number of odd elements \" + i + \"n the str\" + i\
    \ + \"ng \" + i + \" of the \" + i + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(n => \"the number of odd elements \" + n + \"n the str\" + n\
    \ + \"ng \" + n + \" of the \" + n + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => {\n            val\
    \ count = s.filter(c => c.asDigit % 2 == 1).length\n            \"the number of\
    \ odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the\
    \ \" + count + \"nput.\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n            .map(x => \"the number of odd elements \" + x\
    \ + \"n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.filter(y => y.toInt % 2 == 1).length + \"n the str\" + x.length\
    \ + \"ng \" + x.length + \" of the \" + x.length + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ppeqtlf.scala:17)\n\tat Problem.main(tmp7ppeqtlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1))\n            .map(x => s\"the number of odd elements ${x}n the str${x}ng\
    \ ${x} of the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(n => \"the number of odd elements \" + n + \"n the str\" + n\
    \ + \"ng \" + n + \" of the \" + n + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (str : String) =>\
    \ str.count(_.toInt % 2 == 1)\n        val oddCountStr = (str : String) => str.replaceAll(\"\
    [0-9]\", \"n\")\n        val oddCountStrWithCount = (str : String) => oddCountStr(str).replaceFirst(\"\
    n\", oddCount(str).toString)\n        lst.map(oddCountStrWithCount)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9mc45_9m.scala:20)\n\tat Problem.main(tmp9mc45_9m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1))\n            .map(x => s\"the number of odd elements ${x}n the str${x}ng\
    \ ${x} of the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.asDigit\
    \ % 2 == 1).length)\n        .map(x => \"the number of odd elements \" + x + \"\
    n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1))\n            .map(x => \"the number of odd elements \" + x + \"n\
    \ the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(x => x.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ijlhie4.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36mx\e[0m => x.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var result = List[String]()\n  \
    \      for (s <- lst) {\n            var count = 0\n            for (c <- s) {\n\
    \                if (c.asDigit % 2 == 1) {\n                    count += 1\n \
    \               }\n            }\n            result = result :+ s\"the number\
    \ of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.\"\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (str : String) =>\
    \ str.count(_.toInt % 2 == 1)\n        lst.map(str => \"the number of odd elements\
    \ \" + oddCount(str) + \"n the str\" + oddCount(str) + \"ng \" + oddCount(str)\
    \ + \" of the \" + oddCount(str) + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var res = List[String]()\n     \
    \   for (s <- lst) {\n            var count = 0\n            for (c <- s) {\n\
    \                if (c.asDigit % 2 == 1) count += 1\n            }\n         \
    \   res = res :+ s\"the number of odd elements ${count}n the str${count}ng ${count}\
    \ of the ${count}nput.\"\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2pns9z_c.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.count(\e[36my\e[0m => y.asDigit % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Found:    Int\n\e[31m   |\e[0m                \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => s\"the number of odd elements ${x}n the str${x}ng ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(i => s\"the number of odd elements ${i}n the str${i}ng ${i} of\
    \ the ${i}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(n => \"the number of odd elements \" + n + \"n the str\" + n\
    \ + \"ng \" + n + \" of the \" + n + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        def oddCountHelper(str : String)\
    \ : Int = {\n            var count = 0\n            for (i <- 0 until str.length)\
    \ {\n                if (str(i) % 2 == 1) count += 1\n            }\n        \
    \    count\n        }\n        var result = new ListBuffer[String]\n        for\
    \ (i <- 0 until lst.length) {\n            var str = lst(i)\n            var count\
    \ = oddCountHelper(str)\n            var newStr = \"the number of odd elements\
    \ \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count\
    \ + \"nput.\"\n            result += newStr\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val res = new ListBuffer[String]\n\
    \        for (i <- 0 until lst.length) {\n            val str = lst(i)\n     \
    \       var count = 0\n            for (j <- 0 until str.length) {\n         \
    \       if (str(j) % 2 == 1) count += 1\n            }\n            res += \"\
    the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count\
    \ + \" of the \" + count + \"nput.\"\n        }\n        res.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaed89nrq.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => x.filter(\e[36my\e[0m => y.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        var result = List[String]()\n  \
    \      for (str <- lst) {\n            var count = 0\n            for (c <- str)\
    \ {\n                if (c.asDigit % 2 == 1) count += 1\n            }\n     \
    \       result = result :+ \"the number of odd elements \" + count + \"n the str\"\
    \ + count + \"ng \" + count + \" of the \" + count + \"nput.\"\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.filter(y => y.toInt % 2 == 1).length + \"n the str\" + x.length\
    \ + \"ng \" + x.length + \" of the \" + x.length + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ppeqtlf.scala:17)\n\tat Problem.main(tmp7ppeqtlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(c => c.asDigit\
    \ % 2 == 1)).map(x => \"the number of odd elements \" + x + \"n the str\" + x\
    \ + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.filter(c => c.asDigit\
    \ % 2 == 1).length)\n            .map(i => s\"the number of odd elements ${i}n\
    \ the str${i}ng ${i} of the ${i}nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.count(c => c.asDigit\
    \ % 2 == 1)).map(n => \"the number of odd elements \" + n + \"n the str\" + n\
    \ + \"ng \" + n + \" of the \" + n + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (str : String) =>\
    \ str.map(_.asDigit).filter(_ % 2 == 1).length\n        lst.map(str => \"the number\
    \ of odd elements \" + oddCount(str) + \"n the str\" + oddCount(str) + \"ng \"\
    \ + oddCount(str) + \" of the \" + oddCount(str) + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        def oddCountHelper(str : String)\
    \ : Int = {\n            var count = 0\n            for (i <- 0 until str.length)\
    \ {\n                if (str(i) % 2 == 1) count += 1\n            }\n        \
    \    count\n        }\n        var result = List[String]()\n        for (i <-\
    \ 0 until lst.length) {\n            var str = lst(i)\n            var count =\
    \ oddCountHelper(str)\n            var temp = \"the number of odd elements \"\
    \ + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"\
    nput.\"\n            result = result :+ temp\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(s => s.map(c => if (c.asDigit\
    \ % 2 == 1) 1 else 0).sum)\n        .map(i => s\"the number of odd elements ${i}n\
    \ the str${i}ng ${i} of the ${i}nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.count(y => y.asDigit\
    \ % 2 == 1).toString).map(x => \"the number of odd elements \" + x + \"n the str\"\
    \ + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        val oddCount = (s : String) => s.filter(_.toInt\
    \ % 2 == 1).length\n        lst.map(s => s\"the number of odd elements ${oddCount(s)}n\
    \ the str${oddCount(s)}ng ${oddCount(s)} of the ${oddCount(s)}nput.\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => \"the number of odd\
    \ elements \" + x.count(_.asDigit % 2 == 1) + \"n the str\" + x.count(_.asDigit\
    \ % 2 == 1) + \"ng \" + x.count(_.asDigit % 2 == 1) + \" of the \" + x.count(_.asDigit\
    \ % 2 == 1) + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    //\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst\
    \ : List[String]) : List[String] = {\n        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n        .map(x => \"the number of odd elements \" + x + \"\
    n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794880
