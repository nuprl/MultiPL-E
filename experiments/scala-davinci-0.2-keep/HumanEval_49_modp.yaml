name: HumanEval_49_modp
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp(3, 5)\n   \
  \ // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0, 101)\n    // 1\n\
  \    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n    // 1\n    def\
  \ modp(n : Long, p : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
  \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
  \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
  \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
  \ == (3l));\n    }\n\n}\n"
completions: ["        var result = 1L\n        var base = 2L\n        var exponent\
    \ = n\n        while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n\
    \                result = (result * base) % p\n            }\n            exponent\
    \ >>= 1\n            base = (base * base) % p\n        }\n        return result",
  "        if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n   \
    \         if (n % 2 == 0) (x * x) % p\n            else (x * x * 2) % p\n    \
    \    }", "        var result = 1L\n        var b = n\n        var a = p\n    \
    \    while (b > 0) {\n            if ((b & 1) == 1) {\n                result\
    \ = (result * a) % p\n            }\n            b >>= 1\n            a = (a *\
    \ a) % p\n        }\n        result", "        if (n == 0) return 1\n        var\
    \ a = modp(n / 2, p)\n        a = (a * a) % p\n        if (n % 2 == 1) a = (a\
    \ * 2) % p\n        return a", "        var result = 1L\n        var k = n\n \
    \       var m = p\n        while (k > 0) {\n            if ((k & 1) == 1) {\n\
    \                result = (result * n) % p\n            }\n            k >>= 1\n\
    \            n = (n * n) % p\n        }\n        return result", "        var\
    \ r = 1L\n        var b = 2L\n        var e = n\n        while (e > 0) {\n   \
    \         if (e % 2 == 1) {\n                r = (r * b) % p\n            }\n\
    \            e = e / 2\n            b = (b * b) % p\n        }\n        return\
    \ r", "        var result = 1L\n        var base = 2L\n        var exp = n\n \
    \       while (exp > 0) {\n            if (exp % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            exp /= 2\n        }\n        return result", "        var result\
    \ = 1L\n        var power = n\n        var base = 2L\n        while (power > 0)\
    \ {\n            if (power % 2 == 1) {\n                result = (result * base)\
    \ % p\n            }\n            base = (base * base) % p\n            power\
    \ /= 2\n        }\n        return result", "        var result = 1L\n        var\
    \ k = n\n        var x = 2L\n        while (k > 0) {\n            if (k % 2 ==\
    \ 1) {\n                result = (result * x) % p\n            }\n           \
    \ k = k / 2\n            x = (x * x) % p\n        }\n        return result", " \
    \       if (n == 0) return 1\n        var result = 1L\n        var b = 2L\n  \
    \      var e = n\n        while (e > 0) {\n            if (e % 2 == 1) result\
    \ = (result * b) % p\n            e /= 2\n            b = (b * b) % p\n      \
    \  }\n        return result", "        if (n == 0) return 1\n        var result\
    \ = 1L\n        var b = 2L\n        var e = n\n        while (e > 0) {\n     \
    \       if (e % 2 == 1) result = (result * b) % p\n            e /= 2\n      \
    \      b = (b * b) % p\n        }\n        return result", "        if (n == 0)\
    \ return 1\n        var x = modp(n / 2, p)\n        x = (x * x) % p\n        if\
    \ (n % 2 == 1) x = (x * 2) % p\n        return x", "        var res = 1L\n   \
    \     var x = n\n        var y = p\n        while (x > 0) {\n            if ((x\
    \ & 1) == 1) res = (res * y) % p\n            x >>= 1\n            y = (y * y)\
    \ % p\n        }\n        res", "        var res = 1L\n        var b = n\n   \
    \     var e = p\n        while (e > 0) {\n            if ((e & 1) == 1) {\n  \
    \              res = (res * b) % p\n            }\n            e >>= 1\n     \
    \       b = (b * b) % p\n        }\n        res", "        if (n == 0) return\
    \ 1\n        if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n         \
    \   return (x * x) % p\n        }\n        else return (modp(n - 1, p) * n) %\
    \ p", "        var result = 1L\n        var b = n\n        var a = p\n       \
    \ while (b > 0) {\n            if ((b & 1) == 1) {\n                result = (result\
    \ * a) % p\n            }\n            b >>= 1\n            a = (a * a) % p\n\
    \        }\n        result", "        var result = 1L\n        var base = 2L\n\
    \        var exp = n\n        while (exp > 0) {\n            if (exp % 2 == 1)\
    \ {\n                result = (result * base) % p\n            }\n           \
    \ base = (base * base) % p\n            exp /= 2\n        }\n        return result",
  "        var result = 1L\n        var b = n\n        var e = p\n        while (e\
    \ > 0) {\n            if ((e & 1) == 1) {\n                result = (result *\
    \ b) % p\n            }\n            e >>= 1\n            b = (b * b) % p\n  \
    \      }\n        return result", "        var result = 1L\n        var base =\
    \ 2L\n        var exponent = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result", "        if (n == 0) 1\n        else {\n \
    \           val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n\
    \            else (x * x * 2) % p\n        }", "        if (n == 0) return 1\n\
    \        var result = 1L\n        var x = 2L\n        var y = n\n        while\
    \ (y > 0) {\n            if (y % 2 == 1) {\n                result = (result *\
    \ x) % p\n            }\n            x = (x * x) % p\n            y /= 2\n   \
    \     }\n        return result", "        var result = 1L\n        var base =\
    \ 2L\n        var exponent = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result", "        var result = 1L\n        var x =\
    \ n\n        var y = p\n        while (x > 0) {\n            if ((x & 1) == 1)\
    \ {\n                result = (result * y) % p\n            }\n            x >>=\
    \ 1\n            y = (y * y) % p\n        }\n        return result", "       \
    \ if (n == 0) return 1\n        if (n % 2 == 0) {\n            val t = modp(n\
    \ / 2, p)\n            return (t * t) % p\n        }\n        return (modp(n -\
    \ 1, p) * n) % p", "        var r = 1L\n        var b = 2L\n        var e = n\n\
    \        while (e > 0) {\n            if (e % 2 == 1) {\n                r = (r\
    \ * b) % p\n            }\n            e = e / 2\n            b = (b * b) % p\n\
    \        }\n        return r", "        if (n == 0) return 1\n        var result\
    \ = 1L\n        var b = 2L\n        var e = n\n        while (e > 0) {\n     \
    \       if (e % 2 == 1) result = (result * b) % p\n            e /= 2\n      \
    \      b = (b * b) % p\n        }\n        return result", "        var result\
    \ = 1L\n        var x = n\n        var y = p\n        while (x > 0) {\n      \
    \      if ((x & 1) == 1) {\n                result = (result * y) % p\n      \
    \      }\n            x >>= 1\n            y = (y * y) % p\n        }\n      \
    \  return result", "        if (n == 0) return 1\n        var res = 1L\n     \
    \   var b = 2L\n        var e = n\n        while (e > 0) {\n            if (e\
    \ % 2 == 1) res = (res * b) % p\n            b = (b * b) % p\n            e /=\
    \ 2\n        }\n        res", "        var result = 1L\n        var base = 2L\n\
    \        var exponent = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        if (n == 0) return 1\n        if (n % 2 == 0)\
    \ {\n            val x = modp(n / 2, p)\n            return (x * x) % p\n    \
    \    }\n        return (modp(n - 1, p) * n) % p", "        var result = 1L\n \
    \       var base = 2L\n        var exponent = n\n        while (exponent > 0)\
    \ {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result = 1L\n \
    \       var power = n\n        var base = 2L\n        while (power > 0) {\n  \
    \          if (power % 2 == 1) {\n                result = (result * base) % p\n\
    \            }\n            base = (base * base) % p\n            power /= 2\n\
    \        }\n        return result", "        var result = 1L\n        var power\
    \ = n\n        var base = 2L\n        while (power > 0) {\n            if (power\
    \ % 2 == 1) {\n                result = (result * base) % p\n            }\n \
    \           base = (base * base) % p\n            power /= 2\n        }\n    \
    \    return result", "        if (n == 0) return 1\n        var res = 1L\n   \
    \     var b = 2L\n        var e = n\n        while (e > 0) {\n            if (e\
    \ % 2 == 1) res = (res * b) % p\n            b = (b * b) % p\n            e /=\
    \ 2\n        }\n        res", "        if (n == 0) return 1\n        var r = 1L\n\
    \        var b = 2L\n        var e = n\n        while (e > 0) {\n            if\
    \ (e % 2 == 1) r = (r * b) % p\n            e /= 2\n            b = (b * b) %\
    \ p\n        }\n        return r", "        var result = 1L\n        var base\
    \ = 2L\n        var exponent = n\n        while (exponent > 0) {\n           \
    \ if ((exponent & 1) == 1) {\n                result = (result * base) % p\n \
    \           }\n            exponent >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        var result = 1L\n        var\
    \ power = n\n        var mod = p\n        while (power > 0) {\n            if\
    \ ((power & 1) == 1) {\n                result = (result * n) % p\n          \
    \  }\n            power >>= 1\n            n = (n * n) % p\n        }\n      \
    \  return result", "        var r = 1L\n        var k = n\n        var m = p\n\
    \        while (k > 0) {\n            if ((k & 1) == 1) r = (r * n) % p\n    \
    \        k >>= 1\n            n = (n * n) % p\n        }\n        r", "      \
    \  var result = 1L\n        var base = 2L\n        var exponent = n\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exponent >>= 1\n         \
    \   base = (base * base) % p\n        }\n        return result", "        var\
    \ result = 1L\n        var base = 2L\n        var exponent = n\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exponent >>= 1\n         \
    \   base = (base * base) % p\n        }\n        return result", "        if (n\
    \ == 0) return 1\n        var result = 1L\n        var k = n\n        var x =\
    \ 2L\n        while (k > 0) {\n            if (k % 2 == 1) {\n               \
    \ result = (result * x) % p\n            }\n            x = (x * x) % p\n    \
    \        k /= 2\n        }\n        return result", "        var result = 1L\n\
    \        var base = 2L\n        var exp = n\n        while (exp > 0) {\n     \
    \       if (exp % 2 == 1) {\n                result = (result * base) % p\n  \
    \          }\n            base = (base * base) % p\n            exp /= 2\n   \
    \     }\n        return result", "        if (n == 0) return 1\n        var x\
    \ = modp(n / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x *\
    \ 2) % p\n        return x", "        if (n == 0) 1\n        else {\n        \
    \    val x = modp(n / 2, p)\n            val y = (x * x) % p\n            if (n\
    \ % 2 == 0) y else (y * 2) % p\n        }", "        var result = 1L\n       \
    \ var base = 2L\n        var exponent = n\n        while (exponent > 0) {\n  \
    \          if ((exponent & 1) == 1) {\n                result = (result * base)\
    \ % p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        if (n == 0) return 1\n    \
    \    var x = modp(n / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1)\
    \ x = (x * 2) % p\n        return x", "        var result = 1L\n        var x\
    \ = n\n        var y = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * y) % p\n            }\n           \
    \ x >>= 1\n            y = (y * y) % p\n        }\n        return result", " \
    \       var result = 1L\n        var base = 2L\n        var exp = n\n        while\
    \ (exp > 0) {\n            if (exp % 2 == 1) {\n                result = (result\
    \ * base) % p\n            }\n            base = (base * base) % p\n         \
    \   exp /= 2\n        }\n        return result", "        if (n == 0) return 1\n\
    \        var x = modp(n / 2, p)\n        x = (x * x) % p\n        if (n % 2 ==\
    \ 1) x = (x * 2) % p\n        return x", "        if (n == 0) return 1\n     \
    \   if (n % 2 == 0) {\n            val t = modp(n / 2, p)\n            return\
    \ (t * t) % p\n        }\n        return (2 * modp(n - 1, p)) % p", "        if\
    \ (n == 0) return 1\n        var result = 1L\n        var b = 2L\n        var\
    \ e = n\n        while (e > 0) {\n            if (e % 2 == 1) result = (result\
    \ * b) % p\n            e /= 2\n            b = (b * b) % p\n        }\n     \
    \   return result", "        if (n == 0) return 1\n        val x = modp(n / 2,\
    \ p)\n        val y = (x * x) % p\n        if (n % 2 == 0) return y\n        else\
    \ return (y * 2) % p", "        if (n == 0) return 1\n        if (n % 2 == 0)\
    \ {\n            val x = modp(n / 2, p)\n            return (x * x) % p\n    \
    \    }\n        return (modp(n - 1, p) * n) % p", "        var result = 1L\n \
    \       var base = 2L\n        var exponent = n\n        while (exponent > 0)\
    \ {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        if (n == 0) return\
    \ 1\n        var result = 1L\n        var x = n\n        var y = p\n        while\
    \ (x > 0) {\n            if ((x & 1) == 1) {\n                result = (result\
    \ * y) % p\n            }\n            x >>= 1\n            y = (y * y) % p\n\
    \        }\n        return result", "        if (n == 0) 1\n        else {\n \
    \           val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n\
    \            else (x * x * 2) % p\n        }", "        var result = 1L\n    \
    \    var b = n\n        var a = p\n        while (b > 0) {\n            if ((b\
    \ & 1) == 1) {\n                result = (result * a) % p\n            }\n   \
    \         b >>= 1\n            a = (a * a) % p\n        }\n        result", " \
    \       var result = 1L\n        var base = 2L\n        var exp = n\n        while\
    \ (exp > 0) {\n            if (exp % 2 == 1) {\n                result = (result\
    \ * base) % p\n            }\n            base = (base * base) % p\n         \
    \   exp /= 2\n        }\n        return result", "        var result = 1L\n  \
    \      var base = 2L\n        var exponent = n\n        while (exponent > 0) {\n\
    \            if ((exponent & 1) == 1) {\n                result = (result * base)\
    \ % p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        var result = 1L\n        var\
    \ base = 2L\n        var exponent = n\n        while (exponent > 0) {\n      \
    \      if ((exponent & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        var result = 1L\n        var\
    \ x = n\n        var y = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * y) % p\n            }\n           \
    \ x >>= 1\n            y = (y * y) % p\n        }\n        return result", " \
    \       if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x *\
    \ x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "      \
    \  if (n == 0) return 1\n        var result = 1L\n        var b = 2L\n       \
    \ var e = n\n        while (e > 0) {\n            if (e % 2 == 1) result = (result\
    \ * b) % p\n            e /= 2\n            b = (b * b) % p\n        }\n     \
    \   return result", "        var result = 1L\n        var k = n\n        var x\
    \ = 2L\n        while (k > 0) {\n            if (k % 2 == 1) {\n             \
    \   result = (result * x) % p\n            }\n            k = k / 2\n        \
    \    x = (x * x) % p\n        }\n        return result", "        var result =\
    \ 1L\n        var base = 2L\n        var exp = n\n        while (exp > 0) {\n\
    \            if (exp % 2 == 1) {\n                result = (result * base) % p\n\
    \            }\n            base = (base * base) % p\n            exp >>= 1\n\
    \        }\n        return result", "        if (n == 0) return 1\n        if\
    \ (n % 2 == 0) {\n            val m = modp(n / 2, p)\n            return (m *\
    \ m) % p\n        }\n        return (modp(n - 1, p) * 2) % p", "        var result\
    \ = 1L\n        var base = 2L\n        var exponent = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result = 1L\n \
    \       var x = n\n        var y = p\n        while (x > 0) {\n            if\
    \ ((x & 1) == 1) {\n                result = (result * y) % p\n            }\n\
    \            x >>= 1\n            y = (y * y) % p\n        }\n        return result",
  "        var result = 1L\n        var power = n\n        var base = 2L\n       \
    \ while (power > 0) {\n            if (power % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            power /= 2\n        }\n        return result", "        var result\
    \ = 1L\n        var power = n\n        var base = 2L\n        while (power > 0)\
    \ {\n            if (power % 2 == 1) {\n                result = (result * base)\
    \ % p\n            }\n            base = (base * base) % p\n            power\
    \ /= 2\n        }\n        return result", "        if (n == 0) return 1\n   \
    \     var x = modp(n / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1)\
    \ x = (x * 2) % p\n        return x", "        var result = 1L\n        var a\
    \ = 2L\n        var b = n\n        while (b > 0) {\n            if ((b & 1) ==\
    \ 1) {\n                result = (result * a) % p\n            }\n           \
    \ a = (a * a) % p\n            b >>= 1\n        }\n        result", "        if\
    \ (n == 0) return 1\n        var result = 1L\n        var x = 2L\n        var\
    \ y = n\n        while (y > 0) {\n            if (y % 2 == 1) {\n            \
    \    result = (result * x) % p\n            }\n            x = (x * x) % p\n \
    \           y /= 2\n        }\n        return result", "        var result = 1L\n\
    \        var base = 2L\n        var exponent = n\n        while (exponent > 0)\
    \ {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result = 1L\n \
    \       var power = n\n        var base = 2L\n        while (power > 0) {\n  \
    \          if (power % 2 == 1) {\n                result = (result * base) % p\n\
    \            }\n            base = (base * base) % p\n            power /= 2\n\
    \        }\n        return result", "        var result = 1L\n        var base\
    \ = 2L\n        var exponent = n\n        while (exponent > 0) {\n           \
    \ if ((exponent & 1) == 1) {\n                result = (result * base) % p\n \
    \           }\n            exponent >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        var result = 1L\n        var\
    \ b = n\n        var a = p\n        while (b > 0) {\n            if ((b & 1) ==\
    \ 1) {\n                result = (result * a) % p\n            }\n           \
    \ b >>= 1\n            a = (a * a) % p\n        }\n        result", "        if\
    \ (n == 0) return 1\n        var result = 1L\n        var base = 2L\n        var\
    \ exponent = n\n        while (exponent > 0) {\n            if ((exponent & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       base = (base * base) % p\n            exponent >>= 1\n        }\n    \
    \    return result", "        if (n == 0) 1\n        else {\n            val x\
    \ = modp(n / 2, p)\n            val x2 = (x * x) % p\n            if (n % 2 ==\
    \ 0) x2\n            else (x2 * 2) % p\n        }", "        var result = 1L\n\
    \        var b = n\n        var a = p\n        while (b > 0) {\n            if\
    \ ((b & 1) == 1) result = (result * a) % p\n            b >>= 1\n            a\
    \ = (a * a) % p\n        }\n        return result", "        var result = 1L\n\
    \        var base = 2L\n        var exp = n\n        while (exp > 0) {\n     \
    \       if (exp % 2 == 1) {\n                result = (result * base) % p\n  \
    \          }\n            base = (base * base) % p\n            exp /= 2\n   \
    \     }\n        return result", "        var result = 1L\n        var base =\
    \ 2L\n        var exponent = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result", "        if (n == 0) return 1\n        if\
    \ (n % 2 == 0) {\n            val t = modp(n / 2, p)\n            return t * t\
    \ % p\n        }\n        return modp(n - 1, p) * 2 % p", "        var res = 1L\n\
    \        var x = n\n        var y = p\n        while (x > 0) {\n            if\
    \ ((x & 1) == 1) {\n                res = (res * y) % p\n            }\n     \
    \       x >>= 1\n            y = (y * y) % p\n        }\n        res", "     \
    \   var result = 1L\n        var base = 2L\n        var exponent = n\n       \
    \ while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n           \
    \     result = (result * base) % p\n            }\n            exponent >>= 1\n\
    \            base = (base * base) % p\n        }\n        return result", "  \
    \      var result = 1L\n        var base = 2L\n        var exp = n\n        while\
    \ (exp > 0) {\n            if (exp % 2 == 1) {\n                result = (result\
    \ * base) % p\n            }\n            base = (base * base) % p\n         \
    \   exp /= 2\n        }\n        return result", "        if (n == 0) 1\n    \
    \    else {\n            val x = modp(n / 2, p)\n            if (n % 2 == 0) (x\
    \ * x) % p\n            else (x * x * 2) % p\n        }", "        if (n == 0)\
    \ return 1\n        var result = 1L\n        var b = 2L\n        var e = n\n \
    \       while (e > 0) {\n            if (e % 2 == 1) result = (result * b) % p\n\
    \            e /= 2\n            b = (b * b) % p\n        }\n        return result",
  "        if (n == 0) 1\n        else {\n            var x = modp(n / 2, p)\n   \
    \         x = (x * x) % p\n            if (n % 2 == 1) x = (x * 2) % p\n     \
    \       x\n        }", "        if (n == 0) return 1\n        if (n % 2 == 0)\
    \ {\n            val x = modp(n / 2, p)\n            return (x * x) % p\n    \
    \    }\n        else return (modp(n - 1, p) * n) % p", "        if (n == 0) return\
    \ 1\n        if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n         \
    \   return (x * x) % p\n        }\n        else return (modp(n - 1, p) * n) %\
    \ p", "        var result = 1L\n        var power = n\n        var base = 2L\n\
    \        while (power > 0) {\n            if (power % 2 == 1) {\n            \
    \    result = (result * base) % p\n            }\n            base = (base * base)\
    \ % p\n            power /= 2\n        }\n        return result", "        var\
    \ result = 1L\n        var x = n\n        var y = p\n        while (x > 0) {\n\
    \            if ((x & 1) == 1) {\n                result = (result * y) % p\n\
    \            }\n            x >>= 1\n            y = (y * y) % p\n        }\n\
    \        return result", "        var result = 1L\n        var base = 2L\n   \
    \     var exponent = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        var result = 1L\n        var base = 2L\n   \
    \     var exp = n\n        while (exp > 0) {\n            if (exp % 2 == 1) {\n\
    \                result = (result * base) % p\n            }\n            base\
    \ = (base * base) % p\n            exp >>= 1\n        }\n        return result",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        else return (2 *\
    \ modp(n - 1, p)) % p", "        if (n == 0) return 1\n        var x = modp(n\
    \ / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n\
    \        return x", "        var result = 1L\n        var power = n\n        var\
    \ base = 2L\n        while (power > 0) {\n            if (power % 2 == 1) {\n\
    \                result = (result * base) % p\n            }\n            base\
    \ = (base * base) % p\n            power /= 2\n        }\n        return result",
  "        var r = 1L\n        var b = 2L\n        var e = n\n        while (e > 0)\
    \ {\n            if (e % 2 == 1) {\n                r = (r * b) % p\n        \
    \    }\n            e = e / 2\n            b = (b * b) % p\n        }\n      \
    \  return r", "        var result = 1L\n        var power = n\n        var base\
    \ = 2L\n        while (power > 0) {\n            if (power % 2 == 1) {\n     \
    \           result = (result * base) % p\n            }\n            base = (base\
    \ * base) % p\n            power /= 2\n        }\n        return result", "  \
    \      if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x *\
    \ x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "      \
    \  if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x * x) %\
    \ p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "        var\
    \ result = 1L\n        var x = n\n        var y = p\n        while (x > 0) {\n\
    \            if ((x & 1) == 1) {\n                result = (result * y) % p\n\
    \            }\n            x >>= 1\n            y = (y * y) % p\n        }\n\
    \        return result", "        if (n == 0) return 1\n        var x = modp(n\
    \ / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n\
    \        return x", "        var result = 1L\n        var power = n\n        var\
    \ mod = p\n        while (power > 0) {\n            if ((power & 1) == 1) {\n\
    \                result = (result * n) % p\n            }\n            power >>=\
    \ 1\n            n = (n * n) % p\n        }\n        return result", "       \
    \ if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        return (modp(n -\
    \ 1, p) * n) % p", "        if (n == 0) return 1\n        var result = 1L\n  \
    \      var b = 2L\n        var e = n\n        while (e > 0) {\n            if\
    \ (e % 2 == 1) result = (result * b) % p\n            e /= 2\n            b =\
    \ (b * b) % p\n        }\n        return result", "        var result = 1L\n \
    \       var b = n\n        var a = p\n        while (b > 0) {\n            if\
    \ ((b & 1) == 1) {\n                result = (result * a) % p\n            }\n\
    \            b >>= 1\n            a = (a * a) % p\n        }\n        result",
  "        var result = 1L\n        var base = 2L\n        var exp = n\n        while\
    \ (exp > 0) {\n            if (exp % 2 == 1) {\n                result = (result\
    \ * base) % p\n            }\n            base = (base * base) % p\n         \
    \   exp /= 2\n        }\n        return result", "        var result = 1L\n  \
    \      var base = 2L\n        var exponent = n\n        while (exponent > 0) {\n\
    \            if ((exponent & 1) == 1) {\n                result = (result * base)\
    \ % p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        if (n == 0) return 1\n    \
    \    var res = modp(n / 2, p)\n        res = (res * res) % p\n        if (n %\
    \ 2 == 1) res = (res * 2) % p\n        return res", "        if (n == 0) return\
    \ 1\n        var result = 1L\n        var a = 2L\n        var b = n\n        while\
    \ (b > 0) {\n            if ((b & 1) == 1) result = (result * a) % p\n       \
    \     a = (a * a) % p\n            b >>= 1\n        }\n        return result",
  "        if (n == 0) return 1\n        var res = 1L\n        var b = 2L\n      \
    \  var e = n\n        while (e > 0) {\n            if (e % 2 == 1) res = (res\
    \ * b) % p\n            b = (b * b) % p\n            e /= 2\n        }\n     \
    \   res", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n         \
    \   val m = modp(n / 2, p)\n            (m * m) % p\n        } else {\n      \
    \      (2 * modp(n - 1, p)) % p\n        }", "        if (n == 0) return 1\n \
    \       if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n            return\
    \ (x * x) % p\n        }\n        else return (modp(n - 1, p) * n) % p", "   \
    \     var result = 1L\n        var k = n\n        var x = 2L\n        while (k\
    \ > 0) {\n            if (k % 2 == 1) {\n                result = (result * x)\
    \ % p\n            }\n            k = k / 2\n            x = (x * x) % p\n   \
    \     }\n        return result", "        if (n == 0) return 1\n        if (n\
    \ % 2 == 0) {\n            val t = modp(n / 2, p)\n            return (t * t)\
    \ % p\n        }\n        return (modp(n - 1, p) * n) % p", "        if (n ==\
    \ 0) return 1\n        var result = 1L\n        var x = 2L\n        var nn = n\n\
    \        while (nn > 0) {\n            if (nn % 2 == 1) result = (result * x)\
    \ % p\n            x = (x * x) % p\n            nn /= 2\n        }\n        return\
    \ result", "        if (n == 0) return 1\n        var result = 1L\n        var\
    \ b = 2L\n        var e = n\n        while (e > 0) {\n            if (e % 2 ==\
    \ 1) result = (result * b) % p\n            e /= 2\n            b = (b * b) %\
    \ p\n        }\n        return result", "        var result = 1L\n        var\
    \ base = 2L\n        var exp = n\n        while (exp > 0) {\n            if (exp\
    \ % 2 == 1) {\n                result = (result * base) % p\n            }\n \
    \           base = (base * base) % p\n            exp /= 2\n        }\n      \
    \  return result", "        var result = 1L\n        var a = 2L\n        var b\
    \ = n\n        while (b > 0) {\n            if ((b & 1) == 1) {\n            \
    \    result = (result * a) % p\n            }\n            a = (a * a) % p\n \
    \           b >>= 1\n        }\n        result", "        if (n == 0) return 1\n\
    \        val x = modp(n / 2, p)\n        val y = (x * x) % p\n        if (n %\
    \ 2 == 0) y else (y * 2) % p", "        var result = 1L\n        var base = 2L\n\
    \        var power = n\n        while (power > 0) {\n            if (power % 2\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       base = (base * base) % p\n            power /= 2\n        }\n        return\
    \ result", "        var result = 1L\n        var base = 2L\n        var exp =\
    \ n\n        while (exp > 0) {\n            if (exp % 2 == 1) {\n            \
    \    result = (result * base) % p\n            }\n            base = (base * base)\
    \ % p\n            exp /= 2\n        }\n        return result", "        var result\
    \ = 1L\n        var x = n\n        var y = p\n        while (x > 0) {\n      \
    \      if ((x & 1) == 1) {\n                result = (result * y) % p\n      \
    \      }\n            x >>= 1\n            y = (y * y) % p\n        }\n      \
    \  return result", "        if (n == 0) 1\n        else {\n            val x =\
    \ modp(n / 2, p)\n            val x2 = (x * x) % p\n            if (n % 2 == 0)\
    \ x2\n            else (x2 * 2) % p\n        }", "        if (n == 0) return 1\n\
    \        var result = modp(n / 2, p)\n        result = (result * result) % p\n\
    \        if (n % 2 == 1) result = (result * 2) % p\n        return result", " \
    \       var result = 1L\n        var nn = n\n        var pp = p\n        while\
    \ (nn > 0) {\n            if ((nn & 1) == 1) {\n                result = (result\
    \ * nn) % pp\n            }\n            nn = nn >> 1\n        }\n        result",
  "        var result = 1L\n        var power = n\n        var base = 2L\n       \
    \ while (power > 0) {\n            if (power % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            power /= 2\n        }\n        return result", "        if (n ==\
    \ 0) return 1\n        var result = 1L\n        var x = n\n        var y = p\n\
    \        while (x > 0) {\n            if ((x & 1) == 1) {\n                result\
    \ = (result * y) % p\n            }\n            x >>= 1\n            y = (y *\
    \ y) % p\n        }\n        return result", "        var result = 1L\n      \
    \  var x = n\n        var y = p\n        while (x > 0) {\n            if ((x &\
    \ 1) == 1) result = (result * y) % p\n            x >>= 1\n            y = (y\
    \ * y) % p\n        }\n        return result", "        if (n == 0) return 1\n\
    \        var result = 1L\n        var b = 2L\n        var e = n\n        while\
    \ (e > 0) {\n            if (e % 2 == 1) result = (result * b) % p\n         \
    \   e /= 2\n            b = (b * b) % p\n        }\n        return result", " \
    \       var result = 1L\n        var k = n\n        var x = 2L\n        while\
    \ (k > 0) {\n            if (k % 2 == 1) {\n                result = (result *\
    \ x) % p\n            }\n            k = k / 2\n            x = (x * x) % p\n\
    \        }\n        return result", "        var res = 1L\n        var a = 2L\n\
    \        var b = n\n        while (b > 0) {\n            if (b % 2 == 1) {\n \
    \               res = (res * a) % p\n            }\n            a = (a * a) %\
    \ p\n            b /= 2\n        }\n        res", "        if (n == 0) return\
    \ 1\n        if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n         \
    \   return (x * x) % p\n        }\n        return (modp(n - 1, p) * n) % p", " \
    \       if (n == 0) return 1\n        var result = 1L\n        var power = n\n\
    \        var base = 2L\n        while (power > 0) {\n            if (power % 2\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       base = (base * base) % p\n            power /= 2\n        }\n        return\
    \ result", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n        \
    \    val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n     \
    \   return (modp(n - 1, p) * n) % p", "        var result = 1L\n        var base\
    \ = 2L\n        var exponent = n\n        while (exponent > 0) {\n           \
    \ if ((exponent & 1) == 1) {\n                result = (result * base) % p\n \
    \           }\n            exponent >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        var result = 1L\n        var\
    \ power = n\n        var base = 2L\n        while (power > 0) {\n            if\
    \ (power % 2 == 1) {\n                result = (result * base) % p\n         \
    \   }\n            base = (base * base) % p\n            power /= 2\n        }\n\
    \        return result", "        var res = 1L\n        var x = n\n        var\
    \ y = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n          \
    \      res = (res * y) % p\n            }\n            x >>= 1\n            y\
    \ = (y * y) % p\n        }\n        res", "        if (n == 0) return 1\n    \
    \    if (n % 2 == 0) {\n            val t = modp(n / 2, p)\n            return\
    \ (t * t) % p\n        }\n        else return (modp(n - 1, p) * n) % p", "   \
    \     var result = 1L\n        var power = n\n        var base = 2L\n        while\
    \ (power > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * base) % p\n            }\n            base = (base * base) % p\n         \
    \   power /= 2\n        }\n        return result", "        var result = 1L\n\
    \        var b = n\n        var e = p\n        while (e > 0) {\n            if\
    \ ((e & 1) == 1) {\n                result = (result * b) % p\n            }\n\
    \            e >>= 1\n            b = (b * b) % p\n        }\n        return result",
  "        var result = 1L\n        var power = n\n        var base = 2L\n       \
    \ while (power > 0) {\n            if (power % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            power /= 2\n        }\n        return result", "        if (n ==\
    \ 0) return 1\n        var x = modp(n / 2, p)\n        x = (x * x) % p\n     \
    \   if (n % 2 == 1) x = (x * 2) % p\n        return x", "        if (n == 0) return\
    \ 1\n        if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n         \
    \   return (x * x) % p\n        }\n        return (modp(n - 1, p) * n) % p", " \
    \       var result = 1L\n        var base = 2L\n        var exponent = n\n   \
    \     while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n       \
    \         result = (result * base) % p\n            }\n            exponent >>=\
    \ 1\n            base = (base * base) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        else return (modp(n\
    \ - 1, p) * n) % p", "        var result = 1L\n        var power = n\n       \
    \ var base = 2L\n        while (power > 0) {\n            if (power % 2 == 1)\
    \ {\n                result = (result * base) % p\n            }\n           \
    \ base = (base * base) % p\n            power /= 2\n        }\n        return\
    \ result", "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n   \
    \     x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val\
    \ x = modp(n / 2, p)\n            return (x * x) % p\n        }\n        else\
    \ return (modp(n - 1, p) * n) % p", "        var result = 1L\n        var power\
    \ = n\n        var base = 2L\n        while (power > 0) {\n            if (power\
    \ % 2 == 1) {\n                result = (result * base) % p\n            }\n \
    \           base = (base * base) % p\n            power /= 2\n        }\n    \
    \    return result", "        if (n == 0) return 1\n        var result = 1L\n\
    \        var x = n\n        var y = p\n        while (x > 0) {\n            if\
    \ ((x & 1) == 1) {\n                result = (result * y) % p\n            }\n\
    \            x >>= 1\n            y = (y * y) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val t = modp(n\
    \ / 2, p)\n            return (t * t) % p\n        }\n        else return (modp(n\
    \ - 1, p) * n) % p", "        var result = 1L\n        var base = 2L\n       \
    \ var exponent = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        var result = 1L\n        var base = 2L\n   \
    \     var exponent = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        var result = 1L\n        var k = n\n       \
    \ var m = p\n        while (k > 0) {\n            if ((k & 1) == 1) result = (result\
    \ * n) % p\n            k >>= 1\n            n = (n * n) % p\n        }\n    \
    \    return result", "        var result = 1L\n        var base = 2L\n       \
    \ var exponent = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        var result = 1L\n        var power = n\n   \
    \     var base = 2L\n        while (power > 0) {\n            if (power % 2 ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    base = (base * base) % p\n            power /= 2\n        }\n        return\
    \ result", "        var result = 1L\n        var b = n\n        var e = p\n  \
    \      while (e > 0) {\n            if ((e & 1) == 1) {\n                result\
    \ = (result * b) % p\n            }\n            e >>= 1\n            b = (b *\
    \ b) % p\n        }\n        return result", "        var result = 1L\n      \
    \  var k = n\n        var x = 2L\n        while (k > 0) {\n            if (k %\
    \ 2 == 1) {\n                result = (result * x) % p\n            }\n      \
    \      k = k / 2\n            x = (x * x) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        else return (modp(n\
    \ - 1, p) * 2) % p", "        var result = 1L\n        var k = n\n        var\
    \ x = 2L\n        while (k > 0) {\n            if (k % 2 == 1) {\n           \
    \     result = (result * x) % p\n            }\n            k = k / 2\n      \
    \      x = (x * x) % p\n        }\n        return result", "        var result\
    \ = 1L\n        var power = n\n        var base = 2L\n        while (power > 0)\
    \ {\n            if (power % 2 == 1) {\n                result = (result * base)\
    \ % p\n            }\n            base = (base * base) % p\n            power\
    \ /= 2\n        }\n        return result", "        var result = 1L\n        var\
    \ k = n\n        var power = p\n        while (k > 0) {\n            if ((k &\
    \ 1) == 1) result = (result * power) % p\n            power = (power * power)\
    \ % p\n            k >>= 1\n        }\n        return result", "        var result\
    \ = 1L\n        var k = n\n        var x = 2L\n        while (k > 0) {\n     \
    \       if (k % 2 == 1) {\n                result = (result * x) % p\n       \
    \     }\n            k = k / 2\n            x = (x * x) % p\n        }\n     \
    \   return result", "        var result = 1L\n        var power = n\n        var\
    \ base = 2L\n        while (power > 0) {\n            if (power % 2 == 1) {\n\
    \                result = (result * base) % p\n            }\n            base\
    \ = (base * base) % p\n            power /= 2\n        }\n        return result",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val t = modp(n\
    \ / 2, p)\n            (t * t) % p\n        } else {\n            (2 * modp(n\
    \ - 1, p)) % p\n        }", "        if (n == 0) return 1\n        var result\
    \ = 1L\n        var b = 2L\n        var e = n\n        while (e > 0) {\n     \
    \       if (e % 2 == 1) result = (result * b) % p\n            e /= 2\n      \
    \      b = (b * b) % p\n        }\n        return result", "        var result\
    \ = 1L\n        var b = n\n        var a = p\n        while (b > 0) {\n      \
    \      if ((b & 1) == 1) result = (result * a) % p\n            b >>= 1\n    \
    \        a = (a * a) % p\n        }\n        return result", "        var result\
    \ = 1L\n        var base = 2L\n        var exponent = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        if (n == 0) return\
    \ 1\n        var x = modp(n / 2, p)\n        x = (x * x) % p\n        if (n %\
    \ 2 == 1) x = (x * 2) % p\n        return x", "        var result = 1L\n     \
    \   var base = 2L\n        var exp = n\n        while (exp > 0) {\n          \
    \  if (exp % 2 == 1) {\n                result = (result * base) % p\n       \
    \     }\n            base = (base * base) % p\n            exp /= 2\n        }\n\
    \        return result", "        var result = 1L\n        var base = 2L\n   \
    \     var exp = n\n        while (exp > 0) {\n            if (exp % 2 == 1) {\n\
    \                result = (result * base) % p\n            }\n            base\
    \ = (base * base) % p\n            exp /= 2\n        }\n        return result",
  "        if (n == 0) return 1\n        var result = 1L\n        var x = 2L\n   \
    \     var y = n\n        while (y > 0) {\n            if (y % 2 == 1) {\n    \
    \            result = (result * x) % p\n            }\n            x = (x * x)\
    \ % p\n            y /= 2\n        }\n        return result", "        var result\
    \ = 1L\n        var base = 2L\n        var exponent = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result = 1L\n \
    \       var k = n\n        var x = 2L\n        while (k > 0) {\n            if\
    \ (k % 2 == 1) {\n                result = (result * x) % p\n            }\n \
    \           x = (x * x) % p\n            k = k / 2\n        }\n        return\
    \ result", "        var result = 1L\n        var base = 2L\n        var exp =\
    \ n\n        while (exp > 0) {\n            if (exp % 2 == 1) {\n            \
    \    result = (result * base) % p\n            }\n            base = (base * base)\
    \ % p\n            exp >>= 1\n        }\n        return result", "        var\
    \ result = 1L\n        var base = 2L\n        var power = n\n        while (power\
    \ > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * base) % p\n            }\n            base = (base * base) % p\n         \
    \   power /= 2\n        }\n        return result", "        if (n == 0) return\
    \ 1\n        var result = 1L\n        var b = 2L\n        var e = n\n        while\
    \ (e > 0) {\n            if (e % 2 == 1) result = (result * b) % p\n         \
    \   e /= 2\n            b = (b * b) % p\n        }\n        return result", " \
    \       var result = 1L\n        var power = n\n        var base = 2L\n      \
    \  while (power > 0) {\n            if (power % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            power /= 2\n        }\n        return result", "        var result\
    \ = 1L\n        var base = 2L\n        var exponent = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result = 1L\n \
    \       var power = n\n        var mod = p\n        while (power > 0) {\n    \
    \        if ((power & 1) == 1) {\n                result = (result * n) % p\n\
    \            }\n            power >>= 1\n            n = (n * n) % p\n       \
    \ }\n        return result", "        var result = 1L\n        var base = 2L\n\
    \        var exponent = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        var result = 1L\n        var base = 2L\n   \
    \     var exponent = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        var result = 1L\n        var power = n\n   \
    \     var base = 2L\n        while (power > 0) {\n            if (power % 2 ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    base = (base * base) % p\n            power /= 2\n        }\n        return\
    \ result", "        if (n == 0) 1\n        else {\n            val x = modp(n\
    \ / 2, p)\n            val y = (x * x) % p\n            if (n % 2 == 0) y else\
    \ (y * 2) % p\n        }", "        if (n == 0) return 1\n        var x = modp(n\
    \ / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n\
    \        return x", "        var result = 1L\n        var base = 2L\n        var\
    \ exponent = n\n        while (exponent > 0) {\n            if ((exponent & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exponent >>= 1\n            base = (base * base) % p\n        }\n    \
    \    return result", "        var result = 1L\n        var base = 2L\n       \
    \ var exponent = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        if (n == 0) return 1\n        if (n % 2 == 0)\
    \ {\n            val x = modp(n / 2, p)\n            return (x * x) % p\n    \
    \    }\n        else return (modp(n - 1, p) * n) % p", "        if (n == 0) return\
    \ 1\n        var result = 1L\n        var b = 2L\n        var e = n\n        while\
    \ (e > 0) {\n            if (e % 2 == 1) result = (result * b) % p\n         \
    \   e /= 2\n            b = (b * b) % p\n        }\n        return result", " \
    \       if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x *\
    \ x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "      \
    \  if (n == 0) return 1\n        if (n % 2 == 0) {\n            val t = modp(n\
    \ / 2, p)\n            return (t * t) % p\n        }\n        return (modp(n -\
    \ 1, p) * n) % p", "        var result = 1L\n        var b = n\n        var e\
    \ = p\n        while (e > 0) {\n            if ((e & 1) == 1) result = (result\
    \ * b) % p\n            e >>= 1\n            b = (b * b) % p\n        }\n    \
    \    return result", "        if (n == 0) return 1\n        var result = 1L\n\
    \        var b = 2L\n        var e = n\n        while (e > 0) {\n            if\
    \ (e % 2 == 1) result = (result * b) % p\n            e /= 2\n            b =\
    \ (b * b) % p\n        }\n        return result", "        var result = 1L\n \
    \       var b = n\n        var a = p\n        while (b > 0) {\n            if\
    \ ((b & 1) == 1) result = (result * a) % p\n            b >>= 1\n            a\
    \ = (a * a) % p\n        }\n        return result", "        if (n == 0) return\
    \ 1\n        if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n         \
    \   return (x * x) % p\n        }\n        return (modp(n - 1, p) * n) % p", " \
    \       var result = 1L\n        var k = n\n        var x = 2L\n        while\
    \ (k > 0) {\n            if (k % 2 == 1) {\n                result = (result *\
    \ x) % p\n            }\n            k /= 2\n            x = (x * x) % p\n   \
    \     }\n        result", "        if (n == 0) return 1\n        var x = modp(n\
    \ / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n\
    \        return x"]
stop_tokens:
- "\n    }\n"
