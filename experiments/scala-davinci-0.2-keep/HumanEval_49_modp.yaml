name: HumanEval_49_modp
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp(3, 5)\n   \
  \ // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0, 101)\n    // 1\n\
  \    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n    // 1\n    def\
  \ modp(n : Long, p : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
  \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
  \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
  \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
  \ == (3l));\n    }\n\n}\n"
completions: ["        var result = 1L\n        var base = 2L\n        var exponent\
    \ = n\n        while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n\
    \                result = (result * base) % p\n            }\n            exponent\
    \ >>= 1\n            base = (base * base) % p\n        }\n        return result",
  "        if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n   \
    \         if (n % 2 == 0) (x * x) % p\n            else (x * x * 2) % p\n    \
    \    }", "        var result = 1L\n        var b = n\n        var a = p\n    \
    \    while (b > 0) {\n            if ((b & 1) == 1) {\n                result\
    \ = (result * a) % p\n            }\n            b >>= 1\n            a = (a *\
    \ a) % p\n        }\n        result", "        if (n == 0) return 1\n        var\
    \ a = modp(n / 2, p)\n        a = (a * a) % p\n        if (n % 2 == 1) a = (a\
    \ * 2) % p\n        return a", "        var result = 1L\n        var k = n\n \
    \       var m = p\n        while (k > 0) {\n            if ((k & 1) == 1) {\n\
    \                result = (result * n) % p\n            }\n            k >>= 1\n\
    \            n = (n * n) % p\n        }\n        return result", "        var\
    \ r = 1L\n        var b = 2L\n        var e = n\n        while (e > 0) {\n   \
    \         if (e % 2 == 1) {\n                r = (r * b) % p\n            }\n\
    \            e = e / 2\n            b = (b * b) % p\n        }\n        return\
    \ r", "        var result = 1L\n        var base = 2L\n        var exp = n\n \
    \       while (exp > 0) {\n            if (exp % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            exp /= 2\n        }\n        return result", "        var result\
    \ = 1L\n        var power = n\n        var base = 2L\n        while (power > 0)\
    \ {\n            if (power % 2 == 1) {\n                result = (result * base)\
    \ % p\n            }\n            base = (base * base) % p\n            power\
    \ /= 2\n        }\n        return result", "        var result = 1L\n        var\
    \ k = n\n        var x = 2L\n        while (k > 0) {\n            if (k % 2 ==\
    \ 1) {\n                result = (result * x) % p\n            }\n           \
    \ k = k / 2\n            x = (x * x) % p\n        }\n        return result", " \
    \       if (n == 0) return 1\n        var result = 1L\n        var b = 2L\n  \
    \      var e = n\n        while (e > 0) {\n            if (e % 2 == 1) result\
    \ = (result * b) % p\n            e /= 2\n            b = (b * b) % p\n      \
    \  }\n        return result", "        if (n == 0) return 1\n        var result\
    \ = 1L\n        var b = 2L\n        var e = n\n        while (e > 0) {\n     \
    \       if (e % 2 == 1) result = (result * b) % p\n            e /= 2\n      \
    \      b = (b * b) % p\n        }\n        return result", "        if (n == 0)\
    \ return 1\n        var x = modp(n / 2, p)\n        x = (x * x) % p\n        if\
    \ (n % 2 == 1) x = (x * 2) % p\n        return x", "        var res = 1L\n   \
    \     var x = n\n        var y = p\n        while (x > 0) {\n            if ((x\
    \ & 1) == 1) res = (res * y) % p\n            x >>= 1\n            y = (y * y)\
    \ % p\n        }\n        res", "        var res = 1L\n        var b = n\n   \
    \     var e = p\n        while (e > 0) {\n            if ((e & 1) == 1) {\n  \
    \              res = (res * b) % p\n            }\n            e >>= 1\n     \
    \       b = (b * b) % p\n        }\n        res", "        if (n == 0) return\
    \ 1\n        if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n         \
    \   return (x * x) % p\n        }\n        else return (modp(n - 1, p) * n) %\
    \ p", "        var result = 1L\n        var b = n\n        var a = p\n       \
    \ while (b > 0) {\n            if ((b & 1) == 1) {\n                result = (result\
    \ * a) % p\n            }\n            b >>= 1\n            a = (a * a) % p\n\
    \        }\n        result", "        var result = 1L\n        var base = 2L\n\
    \        var exp = n\n        while (exp > 0) {\n            if (exp % 2 == 1)\
    \ {\n                result = (result * base) % p\n            }\n           \
    \ base = (base * base) % p\n            exp /= 2\n        }\n        return result",
  "        var result = 1L\n        var b = n\n        var e = p\n        while (e\
    \ > 0) {\n            if ((e & 1) == 1) {\n                result = (result *\
    \ b) % p\n            }\n            e >>= 1\n            b = (b * b) % p\n  \
    \      }\n        return result", "        var result = 1L\n        var base =\
    \ 2L\n        var exponent = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result", "        if (n == 0) 1\n        else {\n \
    \           val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n\
    \            else (x * x * 2) % p\n        }"]
stop_tokens:
- "\n    }\n"
