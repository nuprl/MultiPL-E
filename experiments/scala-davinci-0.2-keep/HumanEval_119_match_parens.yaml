name: HumanEval_119_match_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of two strings, both strings consist of open\n    //\
  \ parentheses '(' or close parentheses ')' only.\n    // Your job is to check if\
  \ it is possible to concatenate the two strings in\n    // some order, that the\
  \ resulting string will be good.\n    // A string S is considered to be good if\
  \ and only if all parentheses in S\n    // are balanced. For example: the string\
  \ '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes'\
  \ if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n\
  \    // match_parens(['()(', ')']) == 'Yes'\n    // match_parens([')', ')']) ==\
  \ 'No'\n    def matchParens(lst : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"\
  ()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\"\
  , \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\"\
  , \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\"\
  , \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\"\
  , \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\"\
  , \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\",\
  \ \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\"\
  , \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\"\
  , \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \"\
  )(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"\
  Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\"\
  )));\n    }\n\n}\n"
completions: ["        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c =\
    \ s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o =\
    \ s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c ==\
    \ s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o && s2c > s2o) \"Yes\"\
    \n        else if (s1c > s1o && s2c == s2o) \"Yes\"\n        else if (s1c > s1o\
    \ && s2c > s2o) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n    \
    \    val s2 = lst(1)\n        var count = 0\n        for (i <- 0 until s1.length)\
    \ {\n            if (s1(i) == '(') count += 1\n            else count -= 1\n \
    \       }\n        for (i <- 0 until s2.length) {\n            if (s2(i) == '(')\
    \ count += 1\n            else count -= 1\n        }\n        if (count == 0)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count = s1.count(_\
    \ == '(')\n        val s2_count = s2.count(_ == '(')\n        if (s1_count ==\
    \ s2_count) {\n            if (s1.count(_ == ')') == s2.count(_ == ')')) {\n \
    \               \"Yes\"\n            } else {\n                \"No\"\n      \
    \      }\n        } else {\n            if (s1_count > s2_count) {\n         \
    \       if (s1.count(_ == ')') >= s2.count(_ == ')')) {\n                    \"\
    Yes\"\n                } else {\n                    \"No\"\n                }\n\
    \            } else {\n                if (s2.count(_ == ')') >= s1.count(_ ==\
    \ ')')) {\n                    \"Yes\"\n                } else {\n           \
    \         \"No\"\n                }\n            }\n        }", "        val s1\
    \ = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n\
    \        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_ ==\
    \ '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) return \"Yes\"\n        if (s1_open == s1_close) {\n\
    \            if (s2_open > s2_close) {\n                if (s2_open - s2_close\
    \ == 1) return \"Yes\"\n                else return \"No\"\n            }\n  \
    \          else {\n                if (s2_close - s2_open == 1) return \"Yes\"\
    \n                else return \"No\"\n            }\n        }\n        else if\
    \ (s2_open == s2_close) {\n            if (s1_open > s1_close) {\n           \
    \     if (s1_open - s1_close == 1) return \"Yes\"\n                else return\
    \ \"No\"\n            }\n            else {\n                if (s1_close - s1_open\
    \ == 1) return \"Yes\"\n                else return \"No\"\n            }\n  \
    \      }\n        else return \"No\"", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_\
    \ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_\
    \ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c\
    \ == s1o && s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c == s2o) \"Yes\"\
    \n        else if (s1c > s1o && s2c > s2o) \"Yes\"\n        else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) return \"Yes\"\n        if (s1_open == s1_close) {\n\
    \            if (s2_open > s2_close) {\n                val diff = s2_open - s2_close\n\
    \                if (diff % 2 == 0) return \"Yes\"\n            }\n        }\n\
    \        if (s2_open == s2_close) {\n            if (s1_open > s1_close) {\n \
    \               val diff = s1_open - s1_close\n                if (diff % 2 ==\
    \ 0) return \"Yes\"\n            }\n        }\n        return \"No\"", "     \
    \   val s1 = lst(0)\n        val s2 = lst(1)\n        val n1 = s1.length\n   \
    \     val n2 = s2.length\n        val dp = Array.ofDim[Boolean](n1 + 1, n2 + 1)\n\
    \        dp(0)(0) = true\n        for (i <- 1 to n1) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) && s1(i - 1) == '('\n        }\n        for (j <- 1 to n2) {\n\
    \            dp(0)(j) = dp(0)(j - 1) && s2(j - 1) == '('\n        }\n        for\
    \ (i <- 1 to n1; j <- 1 to n2) {\n            dp(i)(j) = (dp(i - 1)(j) && s1(i\
    \ - 1) == '(') || (dp(i)(j - 1) && s2(j - 1) == '(') || (dp(i - 1)(j - 1) && (s1(i\
    \ - 1) == ')' || s2(j - 1) == ')'))\n        }\n        if (dp(n1)(n2)) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        var\
    \ cnt = 0\n        for (i <- 0 until s1.length) {\n            if (s1(i) == '(')\
    \ cnt += 1\n            else cnt -= 1\n        }\n        for (i <- 0 until s2.length)\
    \ {\n            if (s2(i) == '(') cnt += 1\n            else cnt -= 1\n     \
    \   }\n        if (cnt == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n        val\
    \ s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_ == '(')\n  \
    \      val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close && s2_open\
    \ == s2_close) return \"Yes\"\n        if (s1_open == s1_close) {\n          \
    \  if (s2_open > s2_close) return \"Yes\"\n            else return \"No\"\n  \
    \      }\n        if (s2_open == s2_close) {\n            if (s1_open > s1_close)\
    \ return \"Yes\"\n            else return \"No\"\n        }\n        if (s1_open\
    \ > s1_close) {\n            if (s2_open > s2_close) return \"Yes\"\n        \
    \    else return \"No\"\n        }\n        if (s2_open > s2_close) {\n      \
    \      if (s1_open > s1_close) return \"Yes\"\n            else return \"No\"\n\
    \        }\n        if (s1_open < s1_close) {\n            if (s2_open < s2_close)\
    \ return \"Yes\"\n            else return \"No\"\n        }\n        if (s2_open\
    \ < s2_close) {\n            if (s1_open < s1_close) return \"Yes\"\n        \
    \    else return \"No\"\n        }\n        \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1_count = s1.count(_ == '(')\n        val\
    \ s2_count = s2.count(_ == '(')\n        if (s1_count == s2_count) {\n       \
    \     val s = s1 + s2\n            if (s.count(_ == '(') == s.count(_ == ')'))\
    \ \"Yes\" else \"No\"\n        } else if (s1_count > s2_count) {\n           \
    \ val s = s1 + s2\n            if (s.count(_ == '(') == s.count(_ == ')')) \"\
    Yes\" else \"No\"\n        } else {\n            val s = s2 + s1\n           \
    \ if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\" else \"No\"\n        }",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) {\n            \"Yes\"\n        } else if (s1_open ==\
    \ s1_close && s2_open > s2_close) {\n            \"Yes\"\n        } else if (s1_open\
    \ > s1_close && s2_open == s2_close) {\n            \"Yes\"\n        } else {\n\
    \            \"No\"\n        }", "        val s = lst.mkString\n        val c\
    \ = s.count(_ == '(') - s.count(_ == ')')\n        if (c == 0) \"Yes\" else if\
    \ (c < 0) \"No\" else {\n            val l = s.splitAt(s.indexOf(')') + 1)\n \
    \           if (l._1.count(_ == '(') == l._1.count(_ == ')')) \"Yes\" else \"\
    No\"\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s1_open = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n  \
    \      val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ ==\
    \ ')')\n        if (s1_open == s1_close && s2_open == s2_close) return \"Yes\"\
    \n        if (s1_open == s1_close) {\n            if (s2_open > s2_close) return\
    \ \"Yes\"\n            else return \"No\"\n        }\n        if (s2_open == s2_close)\
    \ {\n            if (s1_open > s1_close) return \"Yes\"\n            else return\
    \ \"No\"\n        }\n        if (s1_open > s1_close) {\n            if (s2_open\
    \ > s2_close) return \"Yes\"\n            else return \"No\"\n        }\n    \
    \    if (s2_open > s2_close) {\n            if (s1_open > s1_close) return \"\
    Yes\"\n            else return \"No\"\n        }\n        return \"No\"", "  \
    \      val s = lst.foldLeft(\"\")(_ + _)\n        if (s.count(_ == '(') == s.count(_\
    \ == ')')) \"Yes\" else \"No\"", "        val left = lst(0).count(_ == '(')\n\
    \        val right = lst(1).count(_ == ')')\n        if (left == right) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val\
    \ s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c\
    \ == s1o && s2c == s2o) return \"Yes\"\n        if (s1c == s1o && s2c > s2o) return\
    \ \"Yes\"\n        if (s1c > s1o && s2c == s2o) return \"Yes\"\n        if (s1c\
    \ > s1o && s2c > s2o) return \"Yes\"\n        \"No\"", "        val (a, b) = (lst(0),\
    \ lst(1))\n        val (c, d) = (a.count(_ == '('), a.count(_ == ')'))\n     \
    \   val (e, f) = (b.count(_ == '('), b.count(_ == ')'))\n        if (c == d &&\
    \ e == f) \"Yes\"\n        else if (c == d && e > f) \"Yes\"\n        else if\
    \ (c > d && e == f) \"Yes\"\n        else \"No\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        val lst1_open = lst1.filter(x => x\
    \ == '(').length\n        val lst1_close = lst1.filter(x => x == ')').length\n\
    \        val lst2_open = lst2.filter(x => x == '(').length\n        val lst2_close\
    \ = lst2.filter(x => x == ')').length\n        if (lst1_open == lst1_close &&\
    \ lst2_open == lst2_close) {\n            if (lst1_open == lst2_close && lst1_close\
    \ == lst2_open) \"Yes\"\n            else \"No\"\n        }\n        else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val n1 = s1.length\n\
    \        val n2 = s2.length\n        val dp = Array.ofDim[Int](n1 + 1, n2 + 1)\n\
    \        for (i <- 0 to n1) dp(i)(0) = 0\n        for (j <- 0 to n2) dp(0)(j)\
    \ = 0\n        for (i <- 1 to n1; j <- 1 to n2) {\n            dp(i)(j) = max(dp(i\
    \ - 1)(j), dp(i)(j - 1))\n            if (s1(i - 1) == '(' && s2(j - 1) == ')')\
    \ dp(i)(j) = max(dp(i)(j), dp(i - 1)(j - 1) + 1)\n        }\n        if (dp(n1)(n2)\
    \ == 0) \"No\" else \"Yes\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1_count = s1.count(_ == '(')\n        val s2_count = s2.count(_\
    \ == '(')\n        val s1_open = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == ')')\n        if (s1_count == s1_open && s2_count == s2_open) \"Yes\"\n \
    \       else if (s1_count == s1_open && s2_count < s2_open) \"No\"\n        else\
    \ if (s1_count < s1_open && s2_count == s2_open) \"No\"\n        else if (s1_count\
    \ < s1_open && s2_count < s2_open) \"No\"\n        else if (s1_count > s1_open\
    \ && s2_count > s2_open) \"Yes\"\n        else if (s1_count > s1_open && s2_count\
    \ == s2_open) \"Yes\"\n        else if (s1_count == s1_open && s2_count > s2_open)\
    \ \"Yes\"\n        else \"Yes\"", "        val (open, close) = lst.map(s => s.count(_\
    \ == '(') - s.count(_ == ')')).partition(_ > 0)\n        if (open.sum == close.sum)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n  \
    \      val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n  \
    \      if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o && s2c\
    \ > s2o) \"Yes\"\n        else if (s1c > s1o && s2c == s2o) \"Yes\"\n        else\
    \ if (s1c > s1o && s2c > s2o) \"Yes\"\n        else \"No\"", "        val (a,\
    \ b) = (lst(0), lst(1))\n        val (a1, b1) = (a.count(_ == '('), b.count(_\
    \ == '('))\n        val (a2, b2) = (a.count(_ == ')'), b.count(_ == ')'))\n  \
    \      if (a1 == a2 && b1 == b2) \"Yes\"\n        else if (a1 == a2 && b1 > b2)\
    \ \"Yes\"\n        else if (a1 > a2 && b1 == b2) \"Yes\"\n        else \"No\"",
  "        val s = lst.mkString\n        val n = s.length\n        var cnt = 0\n \
    \       for (i <- 0 until n) {\n            if (s(i) == '(') cnt += 1\n      \
    \      else cnt -= 1\n            if (cnt < 0) return \"No\"\n        }\n    \
    \    if (cnt == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open\
    \ = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n        val\
    \ s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ == ')')\n  \
    \      if (s1_open == s1_close && s2_open == s2_close) {\n            \"Yes\"\n\
    \        } else if (s1_open == s1_close && s2_open > s2_close) {\n           \
    \ \"Yes\"\n        } else if (s1_open > s1_close && s2_open == s2_close) {\n \
    \           \"Yes\"\n        } else {\n            \"No\"\n        }", "     \
    \   val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) return \"Yes\"\n        if (s1_open == s1_close) {\n\
    \            if (s2_open > s2_close) return \"Yes\"\n            else return \"\
    No\"\n        }\n        if (s2_open == s2_close) {\n            if (s1_open >\
    \ s1_close) return \"Yes\"\n            else return \"No\"\n        }\n      \
    \  if (s1_open > s1_close) {\n            if (s2_open > s2_close) return \"Yes\"\
    \n            else return \"No\"\n        }\n        if (s2_open > s2_close) {\n\
    \            if (s1_open > s1_close) return \"Yes\"\n            else return \"\
    No\"\n        }\n        \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1_count = s1.count(_ == '(')\n        val s2_count = s2.count(_\
    \ == '(')\n        val s1_rev_count = s1.count(_ == ')')\n        val s2_rev_count\
    \ = s2.count(_ == ')')\n        if (s1_count == s1_rev_count && s2_count == s2_rev_count)\
    \ {\n            if (s1_count + s2_count == s1_rev_count + s2_rev_count) \"Yes\"\
    \n            else \"No\"\n        } else \"No\"", "        var count = 0\n  \
    \      for (s <- lst) {\n            for (c <- s) {\n                if (c ==\
    \ '(') count += 1\n                else count -= 1\n                if (count\
    \ < 0) return \"No\"\n            }\n        }\n        if (count == 0) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s1_open = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n  \
    \      val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ ==\
    \ ')')\n        if (s1_open == s1_close && s2_open == s2_close) \"Yes\"\n    \
    \    else if (s1_open == s1_close) {\n            if (s2_open > s2_close) \"Yes\"\
    \n            else \"No\"\n        }\n        else if (s2_open == s2_close) {\n\
    \            if (s1_open > s1_close) \"Yes\"\n            else \"No\"\n      \
    \  }\n        else if (s1_open > s1_close && s2_open > s2_close) \"Yes\"\n   \
    \     else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n      \
    \  val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n      \
    \  if (s1c == s1o && s2c == s2o) return \"Yes\"\n        if (s1c == s1o && s2c\
    \ > s2o) return \"Yes\"\n        if (s1c > s1o && s2c == s2o) return \"Yes\"\n\
    \        if (s1c > s1o && s2c > s2o) return \"Yes\"\n        \"No\"", "      \
    \  val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n        val lst1_open\
    \ = lst1.filter(c => c == '(').length\n        val lst1_close = lst1.filter(c\
    \ => c == ')').length\n        val lst2_open = lst2.filter(c => c == '(').length\n\
    \        val lst2_close = lst2.filter(c => c == ')').length\n        if (lst1_open\
    \ == lst1_close && lst2_open == lst2_close) {\n            if (lst1_open == lst2_close)\
    \ \"Yes\"\n            else \"No\"\n        }\n        else \"No\"", "       \
    \ val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_ ==\
    \ '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) \"Yes\"\n        else if (s1_open == s1_close && s2_open\
    \ > s2_close) {\n            if (s2_open - s2_close <= s1_open) \"Yes\"\n    \
    \        else \"No\"\n        }\n        else if (s1_open > s1_close && s2_open\
    \ == s2_close) {\n            if (s1_open - s1_close <= s2_open) \"Yes\"\n   \
    \         else \"No\"\n        }\n        else if (s1_open > s1_close && s2_open\
    \ > s2_close) {\n            if (s1_open - s1_close + s2_open - s2_close <= s1_open\
    \ + s2_open) \"Yes\"\n            else \"No\"\n        }\n        else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) return \"Yes\"\n        if (s1c == s1o) {\n            if (s2c > s2o)\
    \ return \"Yes\"\n            else return \"No\"\n        }\n        if (s2c ==\
    \ s2o) {\n            if (s1c > s1o) return \"Yes\"\n            else return \"\
    No\"\n        }\n        if (s1c > s1o && s2c > s2o) return \"Yes\"\n        if\
    \ (s1c > s1o) {\n            if (s2c > s2o) return \"Yes\"\n            else return\
    \ \"No\"\n        }\n        if (s2c > s2o) {\n            if (s1c > s1o) return\
    \ \"Yes\"\n            else return \"No\"\n        }\n        \"No\"", "     \
    \   val s = lst.mkString\n        if (s.count(_ == '(') != s.count(_ == ')'))\
    \ \"No\"\n        else {\n            val stack = new Stack[Char]\n          \
    \  for (c <- s) {\n                if (c == '(') stack.push(c)\n             \
    \   else if (stack.isEmpty) return \"No\"\n                else stack.pop\n  \
    \          }\n            if (stack.isEmpty) \"Yes\"\n            else \"No\"\n\
    \        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c\
    \ = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o\
    \ = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c\
    \ == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o && s2c > s2o) \"\
    Yes\"\n        else if (s1c > s1o && s2c == s2o) \"Yes\"\n        else if (s1c\
    \ > s1o && s2c > s2o) \"Yes\"\n        else \"No\"", "        var stack = new\
    \ Stack[Char]\n        for (c <- lst(0)) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        for (c <- lst(1)) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s =\
    \ lst.mkString\n        val c = s.count(_ == '(') - s.count(_ == ')')\n      \
    \  if (c == 0) \"Yes\" else if (c < 0) \"No\" else {\n            val l = s.lastIndexOf('(')\n\
    \            if (l == -1) \"No\" else {\n                val r = s.indexOf(')',\
    \ l)\n                if (r == -1) \"No\" else matchParens(List(s.substring(0,\
    \ l) + s.substring(r + 1), s.substring(l + 1, r)))\n            }\n        }",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val n1 = s1.length\n\
    \        val n2 = s2.length\n        val dp = Array.ofDim[Int](n1 + 1, n2 + 1)\n\
    \        for (i <- 0 to n1) {\n            for (j <- 0 to n2) {\n            \
    \    if (i == 0 && j == 0) dp(i)(j) = 0\n                else if (i == 0) {\n\
    \                    dp(i)(j) = dp(i)(j - 1) + (if (s2(j - 1) == '(') 1 else -1)\n\
    \                    if (dp(i)(j) < 0) dp(i)(j) = Int.MinValue\n             \
    \   }\n                else if (j == 0) {\n                    dp(i)(j) = dp(i\
    \ - 1)(j) + (if (s1(i - 1) == '(') 1 else -1)\n                    if (dp(i)(j)\
    \ < 0) dp(i)(j) = Int.MinValue\n                }\n                else {\n  \
    \                  dp(i)(j) = dp(i - 1)(j) + (if (s1(i - 1) == '(') 1 else -1)\n\
    \                    if (dp(i)(j) < 0) dp(i)(j) = Int.MinValue\n             \
    \       val temp = dp(i)(j - 1) + (if (s2(j - 1) == '(') 1 else -1)\n        \
    \            if (temp > dp(i)(j)) dp(i)(j) = temp\n                    if (dp(i)(j)\
    \ < 0) dp(i)(j) = Int.MinValue\n                }\n            }\n        }\n\
    \        if (dp(n1)(n2) == 0) \"Yes\" else \"No\"", "        val (open, close)\
    \ = lst.map(s => s.count(_ == '(') - s.count(_ == ')')).partition(_ > 0)\n   \
    \     if (open.sum == close.sum) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val n1 = s1.length\n        val n2 = s2.length\n\
    \        val dp = Array.ofDim[Boolean](n1 + 1, n2 + 1)\n        dp(0)(0) = true\n\
    \        for (i <- 1 to n1) {\n            if (s1(i - 1) == '(') dp(i)(0) = dp(i\
    \ - 1)(0)\n        }\n        for (j <- 1 to n2) {\n            if (s2(j - 1)\
    \ == '(') dp(0)(j) = dp(0)(j - 1)\n        }\n        for (i <- 1 to n1; j <-\
    \ 1 to n2) {\n            if (s1(i - 1) == '(') dp(i)(j) = dp(i - 1)(j)\n    \
    \        if (s2(j - 1) == '(') dp(i)(j) = dp(i)(j) || dp(i)(j - 1)\n         \
    \   if (s1(i - 1) == ')' && s2(j - 1) == ')') dp(i)(j) = dp(i)(j) || dp(i - 1)(j\
    \ - 1)\n        }\n        if (dp(n1)(n2)) \"Yes\" else \"No\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n\
    \        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_ ==\
    \ '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) return \"Yes\"\n        if (s1_open == s1_close) {\n\
    \            val diff = abs(s2_open - s2_close)\n            if (diff % 2 == 0)\
    \ return \"Yes\"\n        }\n        if (s2_open == s2_close) {\n            val\
    \ diff = abs(s1_open - s1_close)\n            if (diff % 2 == 0) return \"Yes\"\
    \n        }\n        if (s1_open == s1_close && s2_open == s2_close) return \"\
    Yes\"\n        return \"No\"", "        var s = lst(0) + lst(1)\n        var c\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i) == '(') c +=\
    \ 1\n            else c -= 1\n            if (c < 0) return \"No\"\n        }\n\
    \        if (c == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n        val s1_close\
    \ = s1.count(_ == ')')\n        val s2_open = s2.count(_ == '(')\n        val\
    \ s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close && s2_open ==\
    \ s2_close) return \"Yes\"\n        if (s1_open == s1_close) {\n            if\
    \ (s2_open > s2_close) return \"Yes\"\n            else return \"No\"\n      \
    \  }\n        if (s2_open == s2_close) {\n            if (s1_open > s1_close)\
    \ return \"Yes\"\n            else return \"No\"\n        }\n        if (s1_open\
    \ > s1_close) {\n            if (s2_open > s2_close) return \"Yes\"\n        \
    \    else return \"No\"\n        }\n        if (s2_open > s2_close) {\n      \
    \      if (s1_open > s1_close) return \"Yes\"\n            else return \"No\"\n\
    \        }\n        \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n\
    \        if (s1c == s1o && s2c == s2o) {\n            if (s1c == s2o) \"Yes\"\n\
    \            else \"No\"\n        } else if (s1c == s1o) {\n            if (s1c\
    \ == s2o) \"Yes\"\n            else \"No\"\n        } else if (s2c == s2o) {\n\
    \            if (s2c == s1o) \"Yes\"\n            else \"No\"\n        } else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count\
    \ = s1.count(c => c == '(')\n        val s2_count = s2.count(c => c == '(')\n\
    \        if (s1_count == s2_count) \"Yes\"\n        else if (s1_count > s2_count)\
    \ {\n            if (s1.count(c => c == ')') == s2_count) \"Yes\"\n          \
    \  else \"No\"\n        }\n        else {\n            if (s2.count(c => c ==\
    \ ')') == s1_count) \"Yes\"\n            else \"No\"\n        }", "        val\
    \ s = lst.mkString\n        if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s1_open = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n  \
    \      val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ ==\
    \ ')')\n        if (s1_open == s1_close && s2_open == s2_close) {\n          \
    \  if (s1_open == s2_close) \"Yes\" else \"No\"\n        } else if (s1_open ==\
    \ s1_close) {\n            if (s1_open == s2_close) \"Yes\" else \"No\"\n    \
    \    } else if (s2_open == s2_close) {\n            if (s2_open == s1_close) \"\
    Yes\" else \"No\"\n        } else {\n            \"No\"\n        }", "       \
    \ def isGood(s : String) : Boolean = {\n            var cnt = 0\n            for\
    \ (c <- s) {\n                if (c == '(') cnt += 1\n                else cnt\
    \ -= 1\n                if (cnt < 0) return false\n            }\n           \
    \ return cnt == 0\n        }\n        if (isGood(lst(0) + lst(1))) return \"Yes\"\
    \n        if (isGood(lst(1) + lst(0))) return \"Yes\"\n        return \"No\"",
  "        val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n        val\
    \ lst1_count = lst1.count(x => x == '(')\n        val lst2_count = lst2.count(x\
    \ => x == '(')\n        val lst1_close = lst1.count(x => x == ')')\n        val\
    \ lst2_close = lst2.count(x => x == ')')\n        if (lst1_count == lst1_close\
    \ && lst2_count == lst2_close) {\n            \"Yes\"\n        } else {\n    \
    \        \"No\"\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n\
    \        if (s1c == s1o && s2c == s2o) {\n            \"Yes\"\n        } else\
    \ if (s1c == s1o && s2c > s2o) {\n            if (s1c + s2c - s2o == s1o + s2o)\
    \ \"Yes\" else \"No\"\n        } else if (s1c > s1o && s2c == s2o) {\n       \
    \     if (s1c + s2c - s1o == s1o + s2o) \"Yes\" else \"No\"\n        } else if\
    \ (s1c > s1o && s2c > s2o) {\n            if (s1c + s2c - s1o - s2o == s1o + s2o)\
    \ \"Yes\" else \"No\"\n        } else \"No\"", "        val s1 = lst(0)\n    \
    \    val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c =\
    \ s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o =\
    \ s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n        else\
    \ if (s1c == s1o && s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c == s2o)\
    \ \"Yes\"\n        else if (s1c > s1o && s2c > s2o) \"Yes\"\n        else \"No\"",
  "        val s = lst.mkString\n        val n = s.length\n        val dp = Array.fill(n\
    \ + 1)(0)\n        for (i <- 1 to n) {\n            if (s(i - 1) == '(') dp(i)\
    \ = dp(i - 1) + 1\n            else dp(i) = dp(i - 1) - 1\n        }\n       \
    \ if (dp.min < 0) return \"No\"\n        val m = dp.max\n        for (i <- 0 to\
    \ n) {\n            if (dp(i) == m) {\n                val s1 = s.substring(0,\
    \ i)\n                val s2 = s.substring(i, n)\n                if (isGood(s1)\
    \ && isGood(s2)) return \"Yes\"\n            }\n        }\n        \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == '(') count += 1\n            else count -= 1\n            if (count < 0)\
    \ return \"No\"\n        }\n        if (count == 0) \"Yes\" else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count = s1.count(_\
    \ == '(')\n        val s2_count = s2.count(_ == '(')\n        val s1_open = s1.count(_\
    \ == ')')\n        val s2_open = s2.count(_ == ')')\n        if (s1_count == s1_open\
    \ && s2_count == s2_open) \"Yes\"\n        else if (s1_count == s1_open && s2_count\
    \ > s2_open) \"Yes\"\n        else if (s1_count > s1_open && s2_count == s2_open)\
    \ \"Yes\"\n        else \"No\"", "        val (open, close) = lst.map(s => s.count(_\
    \ == '(') - s.count(_ == ')')).partition(_ > 0)\n        if (open.sum == close.sum)\
    \ \"Yes\" else \"No\"", "        val s = lst.mkString\n        val c = s.count(_\
    \ == '(') - s.count(_ == ')')\n        if (c == 0) \"Yes\" else if (c < 0) \"\
    No\" else {\n            val l = s.length\n            val r = s.reverse\n   \
    \         val dp = Array.fill(l + 1, l + 1)(0)\n            for (i <- 0 until\
    \ l; j <- 0 until l) {\n                if (s(i) == '(' && r(j) == ')') dp(i +\
    \ 1)(j + 1) = dp(i)(j) + 1\n                else dp(i + 1)(j + 1) = max(dp(i +\
    \ 1)(j), dp(i)(j + 1))\n            }\n            if (dp(l)(l) == c) \"Yes\"\
    \ else \"No\"\n        }", "        val s = lst.mkString\n        if (s.count(_\
    \ == '(') == s.count(_ == ')')) \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\
    \")(_ + _)\n        if (s.length % 2 == 1) return \"No\"\n        val stack =\
    \ new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s =\
    \ lst.foldLeft(\"\")(_ + _)\n        if (s.count(_ == '(') != s.count(_ == ')'))\
    \ \"No\"\n        else {\n            var stack = new Stack[Char]\n          \
    \  for (c <- s) {\n                if (c == '(') stack.push(c)\n             \
    \   else if (stack.isEmpty) return \"No\"\n                else stack.pop\n  \
    \          }\n            if (stack.isEmpty) \"Yes\" else \"No\"\n        }",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     if (s.count(_ == '(') != s.count(_ == ')')) return \"No\"\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          stack.pop\n            }\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val (a, b) = (lst(0), lst(1))\n        val (c, d)\
    \ = (a.count(_ == '('), a.count(_ == ')'))\n        val (e, f) = (b.count(_ ==\
    \ '('), b.count(_ == ')'))\n        if (c - d == e - f) \"Yes\" else \"No\"",
  "        val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n        val\
    \ lst1_open = lst1.filter(_ == '(').length\n        val lst1_close = lst1.filter(_\
    \ == ')').length\n        val lst2_open = lst2.filter(_ == '(').length\n     \
    \   val lst2_close = lst2.filter(_ == ')').length\n        if (lst1_open == lst1_close\
    \ && lst2_open == lst2_close) {\n            \"Yes\"\n        } else if (lst1_open\
    \ == lst1_close && lst2_open > lst2_close) {\n            if (lst2_open - lst2_close\
    \ == lst1_open) {\n                \"Yes\"\n            } else {\n           \
    \     \"No\"\n            }\n        } else if (lst1_open == lst1_close && lst2_open\
    \ < lst2_close) {\n            if (lst1_open == lst2_close - lst2_open) {\n  \
    \              \"Yes\"\n            } else {\n                \"No\"\n       \
    \     }\n        } else if (lst1_open > lst1_close && lst2_open == lst2_close)\
    \ {\n            if (lst1_open - lst1_close == lst2_open) {\n                \"\
    Yes\"\n            } else {\n                \"No\"\n            }\n        }\
    \ else if (lst1_open < lst1_close && lst2_open == lst2_close) {\n            if\
    \ (lst2_open == lst1_close - lst1_open) {\n                \"Yes\"\n         \
    \   } else {\n                \"No\"\n            }\n        } else if (lst1_open\
    \ > lst1_close && lst2_open > lst2_close) {\n            if (lst1_open - lst1_close\
    \ == lst2_open - lst2_close) {\n                \"Yes\"\n            } else {\n\
    \                \"No\"\n            }\n        } else", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1_count = s1.count(_ == '(')\n        val\
    \ s2_count = s2.count(_ == '(')\n        val s1_balance = s1.count(_ == ')') -\
    \ s1_count\n        val s2_balance = s2.count(_ == ')') - s2_count\n        if\
    \ (s1_balance == 0 && s2_balance == 0) \"Yes\"\n        else if (s1_balance ==\
    \ 0 && s2_balance < 0) \"Yes\"\n        else if (s1_balance < 0 && s2_balance\
    \ == 0) \"Yes\"\n        else if (s1_balance < 0 && s2_balance < 0) \"Yes\"\n\
    \        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n   \
    \     val s = s1 + s2\n        val c = s.count(_ == '(') - s.count(_ == ')')\n\
    \        if (c == 0) \"Yes\"\n        else if (c > 0) {\n            if (s2.count(_\
    \ == ')') >= c) \"Yes\"\n            else \"No\"\n        } else {\n         \
    \   if (s1.count(_ == '(') >= -c) \"Yes\"\n            else \"No\"\n        }",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) return \"Yes\"\n        if (s1c == s1o) {\n            val diff = abs(s2c\
    \ - s2o)\n            if (diff % 2 == 0) return \"Yes\"\n        }\n        if\
    \ (s2c == s2o) {\n            val diff = abs(s1c - s1o)\n            if (diff\
    \ % 2 == 0) return \"Yes\"\n        }\n        return \"No\"", "        val s\
    \ = lst.mkString\n        if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        if\
    \ (s1.contains('(') && s2.contains(')')) {\n            val s = s1 + s2\n    \
    \        if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\" else \"No\"\n   \
    \     } else if (s1.contains(')') && s2.contains('(')) {\n            val s =\
    \ s2 + s1\n            if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\" else\
    \ \"No\"\n        } else \"No\"", "        val lst1 = lst(0).toList\n        val\
    \ lst2 = lst(1).toList\n        val lst1_count = lst1.count(x => x == '(')\n \
    \       val lst2_count = lst2.count(x => x == '(')\n        val lst1_count_close\
    \ = lst1.count(x => x == ')')\n        val lst2_count_close = lst2.count(x =>\
    \ x == ')')\n        if (lst1_count == lst1_count_close && lst2_count == lst2_count_close)\
    \ {\n            if (lst1_count == lst2_count_close && lst2_count == lst1_count_close)\
    \ {\n                \"Yes\"\n            } else {\n                \"No\"\n \
    \           }\n        } else {\n            \"No\"\n        }", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n\
    \        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n\
    \        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"\
    Yes\"\n        else if (s1c == s1o && s2c > s2o) \"Yes\"\n        else if (s1c\
    \ > s1o && s2c == s2o) \"Yes\"\n        else if (s1c > s1o && s2c > s2o) \"Yes\"\
    \n        else \"No\"", "        val s = lst.mkString\n        val s1 = s.replaceAll(\"\
    \\\\(\\\\)\", \"\")\n        val s2 = s1.replaceAll(\"\\\\(\", \"\")\n       \
    \ val s3 = s2.replaceAll(\"\\\\)\", \"\")\n        if (s3.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s = lst.foldLeft(\"\")(_ + _)\n        if (s.count(_ ==\
    \ '(') != s.count(_ == ')')) return \"No\"\n        var cnt = 0\n        for (c\
    \ <- s) {\n            if (c == '(') cnt += 1\n            else cnt -= 1\n   \
    \         if (cnt < 0) return \"No\"\n        }\n        \"Yes\"", "        val\
    \ (a, b) = (lst(0), lst(1))\n        val (a1, b1) = (a.count(_ == '('), b.count(_\
    \ == '('))\n        val (a2, b2) = (a.count(_ == ')'), b.count(_ == ')'))\n  \
    \      if (a1 - a2 + b1 - b2 == 0) \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\
    \")(_ + _)\n        val c = s.count(_ == '(') - s.count(_ == ')')\n        if\
    \ (c == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n\
    \        if (s1c == s1o && s2c == s2o) return \"Yes\"\n        if (s1c > s1o &&\
    \ s2c > s2o) return \"Yes\"\n        if (s1c < s1o && s2c < s2o) return \"Yes\"\
    \n        return \"No\"", "        val s = lst.mkString\n        if (s.count(_\
    \ == '(') == s.count(_ == ')')) \"Yes\" else \"No\"", "        val s = lst.mkString(\"\
    \")\n        val stack = new Stack[Char]\n        for (c <- s) {\n           \
    \ if (c == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\
    \n            else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s = lst.mkString\n        val c = s.count(_ == '(') - s.count(_ ==\
    \ ')')\n        if (c == 0) \"Yes\" else if (c < 0) \"No\" else {\n          \
    \  val l = s.lastIndexOf('(')\n            if (l == -1) \"No\" else {\n      \
    \          val r = s.indexOf(')', l)\n                if (r == -1) \"No\" else\
    \ matchParens(List(s.substring(0, l) + s.substring(r + 1), s.substring(l + 1,\
    \ r)))\n            }\n        }", "        val s1 = lst(0)\n        val s2 =\
    \ lst(1)\n        val s1_count = s1.count(_ == '(')\n        val s2_count = s2.count(_\
    \ == '(')\n        val s1_count_close = s1.count(_ == ')')\n        val s2_count_close\
    \ = s2.count(_ == ')')\n        if (s1_count == s1_count_close && s2_count ==\
    \ s2_count_close) {\n            if (s1_count + s2_count == s1_count_close + s2_count_close)\
    \ \"Yes\"\n            else \"No\"\n        } else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n\
    \        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_ ==\
    \ '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) \"Yes\"\n        else if (s1_open == s1_close && s2_open\
    \ > s2_close) {\n            if (s2_open - s2_close <= s1_open) \"Yes\"\n    \
    \        else \"No\"\n        }\n        else if (s1_open == s1_close && s2_open\
    \ < s2_close) {\n            if (s2_close - s2_open <= s1_open) \"Yes\"\n    \
    \        else \"No\"\n        }\n        else if (s1_open > s1_close && s2_open\
    \ == s2_close) {\n            if (s1_open - s1_close <= s2_open) \"Yes\"\n   \
    \         else \"No\"\n        }\n        else if (s1_open < s1_close && s2_open\
    \ == s2_close) {\n            if (s1_close - s1_open <= s2_open) \"Yes\"\n   \
    \         else \"No\"\n        }\n        else if (s1_open > s1_close && s2_open\
    \ > s2_close) {\n            if (s1_open - s1_close + s2_open - s2_close <= s1_open\
    \ + s2_open) \"Yes\"\n            else \"No\"\n        }\n        else if (s1_open\
    \ > s1_close && s2_open < s2_close) {\n            if (s1_open - s1_close + s2_close\
    \ - s2_open <= s1_open + s2_open) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s1_open < s1_close && s2_open > s2_", "        val (open, close)\
    \ = lst.map(s => s.count(_ == '(') - s.count(_ == ')')).partition(_ > 0)\n   \
    \     if (open.sum == close.sum) \"Yes\" else \"No\"", "        var stack = new\
    \ Stack[Char]\n        for (c <- lst(0)) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        for (c <- lst(1)) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1_count = s1.count(_ == '(')\n\
    \        val s2_count = s2.count(_ == '(')\n        val s1_count_close = s1.count(_\
    \ == ')')\n        val s2_count_close = s2.count(_ == ')')\n        if (s1_count\
    \ == s1_count_close && s2_count == s2_count_close) {\n            val s1_count_diff\
    \ = s1_count - s1_count_close\n            val s2_count_diff = s2_count - s2_count_close\n\
    \            if (s1_count_diff + s2_count_diff == 0) \"Yes\"\n            else\
    \ if (s1_count_diff * s2_count_diff < 0) \"Yes\"\n            else \"No\"\n  \
    \      }\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1_count = s1.count(_ == '(')\n        val s2_count = s2.count(_\
    \ == '(')\n        val s1_open = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == ')')\n        if (s1_count == s1_open && s2_count == s2_open) {\n       \
    \     \"Yes\"\n        } else if (s1_count == s1_open && s2_count > s2_open) {\n\
    \            \"Yes\"\n        } else if (s1_count > s1_open && s2_count == s2_open)\
    \ {\n            \"Yes\"\n        } else {\n            \"No\"\n        }", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) return \"Yes\"\n        if (s1_open == s1_close) {\n\
    \            if (s2_open > s2_close) return \"Yes\"\n            else return \"\
    No\"\n        }\n        if (s2_open == s2_close) {\n            if (s1_open >\
    \ s1_close) return \"Yes\"\n            else return \"No\"\n        }\n      \
    \  if (s1_open > s1_close) {\n            if (s2_open > s2_close) return \"Yes\"\
    \n            else return \"No\"\n        }\n        if (s2_open > s2_close) {\n\
    \            if (s1_open > s1_close) return \"Yes\"\n            else return \"\
    No\"\n        }\n        \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n\
    \        if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o &&\
    \ s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c == s2o) \"Yes\"\n    \
    \    else if (s1c > s1o && s2c > s2o) \"Yes\"\n        else \"No\"", "       \
    \ val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count = s1.count(_\
    \ == '(')\n        val s2_count = s2.count(_ == '(')\n        val s1_rev_count\
    \ = s1.count(_ == ')')\n        val s2_rev_count = s2.count(_ == ')')\n      \
    \  val s1_rev = s1.reverse\n        val s2_rev = s2.reverse\n        val s1_rev_count_rev\
    \ = s1_rev.count(_ == '(')\n        val s2_rev_count_rev = s2_rev.count(_ == '(')\n\
    \        val s1_count_rev = s1_rev.count(_ == ')')\n        val s2_count_rev =\
    \ s2_rev.count(_ == ')')\n        if (s1_count == s1_rev_count && s2_count ==\
    \ s2_rev_count) \"Yes\"\n        else if (s1_count == s2_rev_count && s2_count\
    \ == s1_rev_count) \"Yes\"\n        else if (s1_count == s2_count_rev && s2_count\
    \ == s1_count_rev) \"Yes\"\n        else if (s1_count == s2_count && s2_count\
    \ == s1_count) \"Yes\"\n        else if (s1_rev_count == s2_rev_count_rev && s2_rev_count\
    \ == s1_rev_count_rev) \"Yes\"\n        else if (s1_rev_count == s2_count_rev\
    \ && s2_rev_count == s1_count_rev) \"Yes\"\n        else if (s1_rev_count == s2_rev_count\
    \ && s2_rev_count == s1_rev_count) \"Yes\"\n        else \"No\"", "        val\
    \ parens = lst.mkString\n        val stack = new Stack[Char]\n        for (c <-\
    \ parens) {\n            if (c == '(') {\n                stack.push(c)\n    \
    \        } else {\n                if (stack.isEmpty) return \"No\"\n        \
    \        stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\"\
    \ else \"No\"", "        val s = lst.mkString\n        val n = s.length\n    \
    \    val dp = Array.fill(n + 1)(0)\n        for (i <- 1 to n) {\n            if\
    \ (s(i - 1) == '(') dp(i) = dp(i - 1) + 1\n            else dp(i) = dp(i - 1)\
    \ - 1\n        }\n        if (dp.min < 0) return \"No\"\n        val dp2 = Array.fill(n\
    \ + 1)(0)\n        for (i <- n - 1 to 0 by -1) {\n            if (s(i) == ')')\
    \ dp2(i) = dp2(i + 1) + 1\n            else dp2(i) = dp2(i + 1) - 1\n        }\n\
    \        if (dp2.min < 0) return \"No\"\n        return \"Yes\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s1Count = s1.count(_ == '(')\n\
    \        val s2Count = s2.count(_ == '(')\n        val s1Balanced = s1.count(_\
    \ == ')') == s1Count\n        val s2Balanced = s2.count(_ == ')') == s2Count\n\
    \        if (s1Balanced && s2Balanced) {\n            if (s1Count == s2Count)\
    \ \"Yes\"\n            else if (s1Count > s2Count) \"Yes\"\n            else \"\
    No\"\n        } else if (s1Balanced) {\n            if (s1Count > s2Count) \"\
    Yes\"\n            else \"No\"\n        } else if (s2Balanced) {\n           \
    \ if (s2Count > s1Count) \"Yes\"\n            else \"No\"\n        } else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1Count = s1.count(_\
    \ == '(')\n        val s2Count = s2.count(_ == '(')\n        if (s1Count == s2Count)\
    \ return \"Yes\"\n        if (s1Count > s2Count) {\n            val s1Open = s1.count(_\
    \ == '(')\n            val s1Close = s1.count(_ == ')')\n            val s2Open\
    \ = s2.count(_ == '(')\n            val s2Close = s2.count(_ == ')')\n       \
    \     if (s1Open - s1Close == s2Open - s2Close) return \"Yes\"\n        }\n  \
    \      \"No\"", "        val (a, b) = (lst(0), lst(1))\n        val (a1, b1) =\
    \ (a.count(_ == '('), b.count(_ == '('))\n        val (a2, b2) = (a.count(_ ==\
    \ ')'), b.count(_ == ')'))\n        if (a1 == a2 && b1 == b2) \"Yes\"\n      \
    \  else if (a1 - a2 == b2 - b1) \"Yes\"\n        else \"No\"", "        val (a,\
    \ b) = (lst(0), lst(1))\n        val (c, d) = (a.count(_ == '('), a.count(_ ==\
    \ ')'))\n        val (e, f) = (b.count(_ == '('), b.count(_ == ')'))\n       \
    \ if (c == d && e == f) \"Yes\"\n        else if (c == d && e != f) \"No\"\n \
    \       else if (c != d && e == f) \"No\"\n        else if (c != d && e != f)\
    \ {\n            if (c - d == e - f) \"Yes\"\n            else \"No\"\n      \
    \  }\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        if (s1c == s2c) \"Yes\"\n        else if (s1c == s2c + 1) {\n       \
    \     if (s1.count(_ == ')') == s2.count(_ == ')')) \"Yes\"\n            else\
    \ \"No\"\n        }\n        else if (s1c + 1 == s2c) {\n            if (s1.count(_\
    \ == ')') == s2.count(_ == ')')) \"Yes\"\n            else \"No\"\n        }\n\
    \        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n   \
    \     val s1_count = s1.count(c => c == '(')\n        val s2_count = s2.count(c\
    \ => c == '(')\n        if (s1_count == s2_count) \"Yes\"\n        else if (s1_count\
    \ == s2_count + 1) {\n            if (s1.count(c => c == ')') == s2.count(c =>\
    \ c == ')')) \"Yes\"\n            else \"No\"\n        }\n        else if (s1_count\
    \ + 1 == s2_count) {\n            if (s1.count(c => c == ')') == s2.count(c =>\
    \ c == ')')) \"Yes\"\n            else \"No\"\n        }\n        else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n        val s1_close\
    \ = s1.count(_ == ')')\n        val s2_open = s2.count(_ == '(')\n        val\
    \ s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close && s2_open ==\
    \ s2_close) {\n            if (s1_open == s2_close) \"Yes\" else \"No\"\n    \
    \    } else if (s1_open == s1_close) {\n            if (s1_open == s2_close) \"\
    Yes\" else \"No\"\n        } else if (s2_open == s2_close) {\n            if (s2_open\
    \ == s1_close) \"Yes\" else \"No\"\n        } else {\n            \"No\"\n   \
    \     }", "        val s = lst.mkString\n        val n = s.length\n        val\
    \ dp = Array.fill(n + 1)(0)\n        for (i <- 0 until n) {\n            if (s(i)\
    \ == '(') dp(i + 1) = dp(i) + 1\n            else dp(i + 1) = dp(i) - 1\n    \
    \    }\n        if (dp.min < 0) return \"No\"\n        val m = dp.max\n      \
    \  if (m == 0) return \"Yes\"\n        for (i <- 0 until n) {\n            if\
    \ (dp(i) == m) {\n                val s1 = s.substring(0, i)\n               \
    \ val s2 = s.substring(i)\n                if (matchParens(List(s1, s2)) == \"\
    Yes\") return \"Yes\"\n            }\n        }\n        \"No\"", "        val\
    \ s = lst.reduceLeft(_ + _)\n        if (s.count(_ == '(') == s.count(_ == ')'))\
    \ \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\")((s, t) => s + t)\n\
    \        if (s.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n        val\
    \ s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_ == '(')\n  \
    \      val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close && s2_open\
    \ == s2_close) {\n            if (s1_open == s2_close) \"Yes\" else \"No\"\n \
    \       } else if (s1_open == s1_close) {\n            if (s1_open == s2_close)\
    \ \"Yes\" else \"No\"\n        } else if (s2_open == s2_close) {\n           \
    \ if (s2_open == s1_close) \"Yes\" else \"No\"\n        } else {\n           \
    \ \"No\"\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n    \
    \    var count = 0\n        for (c <- s1) {\n            if (c == '(') count +=\
    \ 1\n            else count -= 1\n        }\n        for (c <- s2) {\n       \
    \     if (c == '(') count += 1\n            else count -= 1\n        }\n     \
    \   if (count == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_\
    \ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_\
    \ == ')')\n        if (s1c == s1o && s2c == s2o) return \"Yes\"\n        if (s1c\
    \ == s1o) {\n            if (s2c - s2o == 1) return \"Yes\"\n            else\
    \ return \"No\"\n        }\n        if (s2c == s2o) {\n            if (s1c - s1o\
    \ == 1) return \"Yes\"\n            else return \"No\"\n        }\n        if\
    \ (s1c - s1o == 1 && s2c - s2o == 1) return \"Yes\"\n        \"No\"", "      \
    \  val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) return \"Yes\"\n        if (s1_open == s1_close) {\n\
    \            if (s2_open > s2_close) return \"Yes\"\n            else return \"\
    No\"\n        }\n        if (s2_open == s2_close) {\n            if (s1_open >\
    \ s1_close) return \"Yes\"\n            else return \"No\"\n        }\n      \
    \  if (s1_open > s1_close) {\n            if (s2_open > s2_close) return \"Yes\"\
    \n            else return \"No\"\n        }\n        if (s2_open > s2_close) {\n\
    \            if (s1_open > s1_close) return \"Yes\"\n            else return \"\
    No\"\n        }\n        \"No\"", "        var open = 0\n        var close = 0\n\
    \        for (s <- lst) {\n            for (c <- s) {\n                if (c ==\
    \ '(') open += 1\n                else close += 1\n            }\n        }\n\
    \        if (open == close) \"Yes\" else \"No\"", "        val (open, close) =\
    \ lst.map(s => s.count(_ == '(') - s.count(_ == ')')).partition(_ > 0)\n     \
    \   if (open.sum == close.sum && open.sum != 0) \"Yes\" else \"No\"", "      \
    \  val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count = s1.count(_\
    \ == '(')\n        val s2_count = s2.count(_ == '(')\n        if (s1_count ==\
    \ s2_count) \"Yes\"\n        else if (s1_count == s2_count + 1) {\n          \
    \  if (s1.count(_ == ')') == s2.count(_ == ')')) \"Yes\"\n            else \"\
    No\"\n        }\n        else if (s1_count + 1 == s2_count) {\n            if\
    \ (s1.count(_ == ')') == s2.count(_ == ')')) \"Yes\"\n            else \"No\"\n\
    \        }\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1_open = s1.count(_ == '(')\n        val s1_close = s1.count(_ ==\
    \ ')')\n        val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_\
    \ == ')')\n        if (s1_open == s1_close && s2_open == s2_close) \"Yes\"\n \
    \       else if (s1_open == s1_close) {\n            if (s2_open > s2_close) \"\
    Yes\"\n            else \"No\"\n        }\n        else if (s2_open == s2_close)\
    \ {\n            if (s1_open > s1_close) \"Yes\"\n            else \"No\"\n  \
    \      }\n        else if (s1_open > s1_close && s2_open > s2_close) \"Yes\"\n\
    \        else \"No\"", "        val (open, close) = lst.partition(_.head == '(')\n\
    \        if (open.length == close.length) \"Yes\"\n        else \"No\"", "   \
    \     val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        val s1_diff = s1_open\
    \ - s1_close\n        val s2_diff = s2_open - s2_close\n        if (s1_diff ==\
    \ 0 && s2_diff == 0) \"Yes\"\n        else if (s1_diff == 0 && s2_diff != 0) \"\
    No\"\n        else if (s1_diff != 0 && s2_diff == 0) \"No\"\n        else if (s1_diff\
    \ > 0 && s2_diff > 0) \"No\"\n        else if (s1_diff < 0 && s2_diff < 0) \"\
    No\"\n        else if (s1_diff > 0 && s2_diff < 0) {\n            if (s1_diff\
    \ == -s2_diff) \"Yes\"\n            else \"No\"\n        }\n        else if (s1_diff\
    \ < 0 && s2_diff > 0) {\n            if (s2_diff == -s1_diff) \"Yes\"\n      \
    \      else \"No\"\n        }\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c\
    \ = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o\
    \ = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n      \
    \  else if (s1c == s1o && s2c < s2o) \"No\"\n        else if (s1c < s1o && s2c\
    \ == s2o) \"No\"\n        else if (s1c < s1o && s2c < s2o) \"No\"\n        else\
    \ if (s1c > s1o && s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c < s2o)\
    \ \"Yes\"\n        else if (s1c < s1o && s2c > s2o) \"Yes\"\n        else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n   \
    \         if (s(i) == '(') stack.push(s(i))\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1_count = s1.count(_ == '(')\n        val s2_count = s2.count(_ ==\
    \ '(')\n        val s1_count_close = s1.count(_ == ')')\n        val s2_count_close\
    \ = s2.count(_ == ')')\n        if (s1_count == s1_count_close && s2_count ==\
    \ s2_count_close) {\n            if (s1_count == s2_count_close && s2_count ==\
    \ s1_count_close) \"Yes\"\n            else \"No\"\n        } else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count = s1.count(_\
    \ == '(')\n        val s2_count = s2.count(_ == '(')\n        val s1_rev_count\
    \ = s1.count(_ == ')')\n        val s2_rev_count = s2.count(_ == ')')\n      \
    \  if (s1_count == s1_rev_count && s2_count == s2_rev_count) {\n            \"\
    Yes\"\n        } else if (s1_count == s1_rev_count && s2_count != s2_rev_count)\
    \ {\n            \"No\"\n        } else if (s1_count != s1_rev_count && s2_count\
    \ == s2_rev_count) {\n            \"No\"\n        } else {\n            if (s1_count\
    \ > s1_rev_count) {\n                if (s2_count > s2_rev_count) {\n        \
    \            \"Yes\"\n                } else {\n                    \"No\"\n \
    \               }\n            } else {\n                if (s2_count > s2_rev_count)\
    \ {\n                    \"No\"\n                } else {\n                  \
    \  \"Yes\"\n                }\n            }\n        }", "        val (a, b)\
    \ = (lst(0), lst(1))\n        val (c, d) = (a.count(_ == '('), a.count(_ == ')'))\n\
    \        val (e, f) = (b.count(_ == '('), b.count(_ == ')'))\n        if (c -\
    \ d == e - f) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 =\
    \ lst(1)\n        var cnt = 0\n        for (i <- 0 until s1.length) {\n      \
    \      if (s1(i) == '(') cnt += 1\n            else cnt -= 1\n        }\n    \
    \    for (i <- 0 until s2.length) {\n            if (s2(i) == '(') cnt += 1\n\
    \            else cnt -= 1\n        }\n        if (cnt == 0) \"Yes\" else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) {\n            \"Yes\"\n        } else if (s1c == s1o && s2c > s2o)\
    \ {\n            \"Yes\"\n        } else if (s1c > s1o && s2c == s2o) {\n    \
    \        \"Yes\"\n        } else {\n            \"No\"\n        }", "        val\
    \ s = lst.mkString\n        val c = s.count(_ == '(') - s.count(_ == ')')\n  \
    \      if (c == 0) \"Yes\" else if (c < 0) \"No\" else if (c % 2 == 0) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ n1 = s1.count(_ == '(')\n        val n2 = s2.count(_ == '(')\n        val n3\
    \ = s1.count(_ == ')')\n        val n4 = s2.count(_ == ')')\n        if (n1 +\
    \ n2 == n3 + n4) \"Yes\" else \"No\"", "        val (open, close) = lst.map(_.count(_\
    \ == '(')).partition(_ > 0)\n        if (open.sum == close.sum) \"Yes\" else \"\
    No\"", "        val s = lst.mkString(\"\")\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c\
    \ = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o\
    \ = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n      \
    \  else if (s1c == s1o && s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c\
    \ == s2o) \"Yes\"\n        else if (s1c > s1o && s2c > s2o) \"Yes\"\n        else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open\
    \ = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n        val\
    \ s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ == ')')\n  \
    \      if (s1_open == s1_close && s2_open == s2_close) {\n            if (s1_open\
    \ == s2_close) \"Yes\" else \"No\"\n        } else if (s1_open == s1_close) {\n\
    \            if (s1_open == s2_close) \"Yes\" else \"No\"\n        } else if (s2_open\
    \ == s2_close) {\n            if (s2_open == s1_close) \"Yes\" else \"No\"\n \
    \       } else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n  \
    \      val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n  \
    \      if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c > s1o && s2c\
    \ > s2o) \"Yes\"\n        else if (s1c < s1o && s2c < s2o) \"Yes\"\n        else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count\
    \ = s1.count(c => c == '(')\n        val s2_count = s2.count(c => c == '(')\n\
    \        if (s1_count == s2_count) \"Yes\"\n        else if (s1_count > s2_count)\
    \ {\n            if (s1.count(c => c == ')') == s2_count) \"Yes\"\n          \
    \  else \"No\"\n        }\n        else {\n            if (s2.count(c => c ==\
    \ ')') == s1_count) \"Yes\"\n            else \"No\"\n        }", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n\
    \        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_ ==\
    \ '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) {\n            \"Yes\"\n        } else if (s1_open ==\
    \ s1_close) {\n            if (s2_open > s2_close) {\n                \"Yes\"\n\
    \            } else {\n                \"No\"\n            }\n        } else if\
    \ (s2_open == s2_close) {\n            if (s1_open > s1_close) {\n           \
    \     \"Yes\"\n            } else {\n                \"No\"\n            }\n \
    \       } else {\n            \"No\"\n        }", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s1Count = s1.count(_ == '(')\n        val\
    \ s2Count = s2.count(_ == '(')\n        val s1Balance = s1.scanLeft(0)((acc, c)\
    \ => if (c == '(') acc + 1 else acc - 1).min\n        val s2Balance = s2.scanLeft(0)((acc,\
    \ c) => if (c == '(') acc + 1 else acc - 1).min\n        if (s1Count == s2Count\
    \ && s1Balance >= 0 && s2Balance >= 0) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n    \
    \    val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n    \
    \    val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\
    \n        else if (s1c == s1o && s2c > s2o) \"Yes\"\n        else if (s1c > s1o\
    \ && s2c == s2o) \"Yes\"\n        else if (s1c > s1o && s2c > s2o) \"Yes\"\n \
    \       else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n    \
    \    val s1_count = s1.count(_ == '(')\n        val s2_count = s2.count(_ == '(')\n\
    \        val s1_rev_count = s1.count(_ == ')')\n        val s2_rev_count = s2.count(_\
    \ == ')')\n        if (s1_count == s1_rev_count && s2_count == s2_rev_count) {\n\
    \            val s1_rev = s1.reverse\n            val s2_rev = s2.reverse\n  \
    \          val s1_rev_count = s1_rev.count(_ == '(')\n            val s2_rev_count\
    \ = s2_rev.count(_ == '(')\n            if (s1_rev_count == s2_rev_count) \"Yes\"\
    \ else \"No\"\n        } else \"No\"", "        val (open, close) = lst.foldLeft((0,\
    \ 0))((acc, str) => {\n            val (open, close) = acc\n            val (open2,\
    \ close2) = str.foldLeft((0, 0))((acc, ch) => {\n                val (open, close)\
    \ = acc\n                ch match {\n                    case '(' => (open + 1,\
    \ close)\n                    case ')' => (open, close + 1)\n                }\n\
    \            })\n            (open + open2, close + close2)\n        })\n    \
    \    if (open == close) \"Yes\" else \"No\"", "        val s1 = lst(0)\n     \
    \   val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n        val s1_close\
    \ = s1.count(_ == ')')\n        val s2_open = s2.count(_ == '(')\n        val\
    \ s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close && s2_open ==\
    \ s2_close) \"Yes\"\n        else if (s1_open == s1_close && s2_open > s2_close)\
    \ {\n            if (s2_open - s2_close <= s1_open) \"Yes\"\n            else\
    \ \"No\"\n        }\n        else if (s1_open > s1_close && s2_open == s2_close)\
    \ {\n            if (s1_open - s1_close <= s2_open) \"Yes\"\n            else\
    \ \"No\"\n        }\n        else if (s1_open > s1_close && s2_open > s2_close)\
    \ {\n            if (s1_open - s1_close == s2_open - s2_close) \"Yes\"\n     \
    \       else \"No\"\n        }\n        else \"No\"", "        val (open, close)\
    \ = lst.map(s => s.count(_ == '(') - s.count(_ == ')')).partition(_ > 0)\n   \
    \     if (open.sum == close.sum) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c\
    \ = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o\
    \ = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) return \"Yes\"\n\
    \        if (s1c == s1o) {\n            if (s2c - s2o == 1) return \"Yes\"\n \
    \           else return \"No\"\n        }\n        if (s2c == s2o) {\n       \
    \     if (s1c - s1o == 1) return \"Yes\"\n            else return \"No\"\n   \
    \     }\n        if (s1c - s1o == 1 && s2c - s2o == 1) return \"Yes\"\n      \
    \  \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val n = s.length\n        var stack = new Stack[Char]\n   \
    \     for (i <- 0 until n) {\n            val c = s(i)\n            if (c == '(')\
    \ stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n  \
    \      val lst2 = lst(1).toList\n        val lst1_open = lst1.filter(x => x ==\
    \ '(').length\n        val lst1_close = lst1.filter(x => x == ')').length\n  \
    \      val lst2_open = lst2.filter(x => x == '(').length\n        val lst2_close\
    \ = lst2.filter(x => x == ')').length\n        if (lst1_open == lst1_close &&\
    \ lst2_open == lst2_close) {\n            \"Yes\"\n        } else if (lst1_open\
    \ == lst1_close) {\n            if (lst2_open > lst2_close) {\n              \
    \  if (lst2_open - lst2_close == lst1_open) {\n                    \"Yes\"\n \
    \               } else {\n                    \"No\"\n                }\n    \
    \        } else {\n                if (lst2_close - lst2_open == lst1_close) {\n\
    \                    \"Yes\"\n                } else {\n                    \"\
    No\"\n                }\n            }\n        } else if (lst2_open == lst2_close)\
    \ {\n            if (lst1_open > lst1_close) {\n                if (lst1_open\
    \ - lst1_close == lst2_open) {\n                    \"Yes\"\n                }\
    \ else {\n                    \"No\"\n                }\n            } else {\n\
    \                if (lst1_close - lst1_open == lst2_close) {\n               \
    \     \"Yes\"\n                } else {\n                    \"No\"\n        \
    \        }\n            }\n        } else {\n            \"No\"\n        }", " \
    \       val (open, close) = lst.map(_.count(_ == '(')).partition(_ > 0)\n    \
    \    if (open.sum == close.sum) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1c = s1.count(c => c == '(')\n        val\
    \ s2c = s2.count(c => c == '(')\n        val s1o = s1.count(c => c == ')')\n \
    \       val s2o = s2.count(c => c == ')')\n        if (s1c == s1o && s2c == s2o)\
    \ \"Yes\"\n        else if (s1c == s1o && s2c > s2o) \"Yes\"\n        else if\
    \ (s1c > s1o && s2c == s2o) \"Yes\"\n        else if (s1c > s1o && s2c > s2o)\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count\
    \ = s1.count(_ == '(')\n        val s2_count = s2.count(_ == '(')\n        val\
    \ s1_count_r = s1.count(_ == ')')\n        val s2_count_r = s2.count(_ == ')')\n\
    \        if (s1_count == s1_count_r && s2_count == s2_count_r) {\n           \
    \ val s1_count_diff = s1_count - s1_count_r\n            val s2_count_diff = s2_count\
    \ - s2_count_r\n            if (s1_count_diff == s2_count_diff) \"Yes\"\n    \
    \        else if (s1_count_diff == 0 || s2_count_diff == 0) \"Yes\"\n        \
    \    else \"No\"\n        } else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_\
    \ == '(')\n        if (s1c == s2c) \"Yes\"\n        else if (s1c == s2c + 1) {\n\
    \            if (s1.count(_ == ')') == s2.count(_ == ')')) \"Yes\"\n         \
    \   else \"No\"\n        }\n        else if (s1c + 1 == s2c) {\n            if\
    \ (s1.count(_ == ')') == s2.count(_ == ')')) \"Yes\"\n            else \"No\"\n\
    \        }\n        else \"No\"", "        val s = lst.mkString\n        if (s.count(_\
    \ == '(') != s.count(_ == ')')) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c\
    \ = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o\
    \ = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n      \
    \  else if (s1c == s1o && s2c < s2o) \"No\"\n        else if (s1c < s1o && s2c\
    \ == s2o) \"No\"\n        else if (s1c < s1o && s2c < s2o) {\n            if (s1c\
    \ + s2c == s1o + s2o) \"Yes\"\n            else \"No\"\n        }\n        else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c\
    \ = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o\
    \ = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c\
    \ == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o && s2c > s2o) \"\
    Yes\"\n        else if (s1c > s1o && s2c == s2o) \"Yes\"\n        else if (s1c\
    \ > s1o && s2c > s2o) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        def isGood(s : String) : Boolean = {\n     \
    \       var count = 0\n            for (c <- s) {\n                if (c == '(')\
    \ count += 1\n                else if (c == ')') count -= 1\n                if\
    \ (count < 0) return false\n            }\n            count == 0\n        }\n\
    \        if (isGood(s1 + s2)) \"Yes\"\n        else if (isGood(s2 + s1)) \"Yes\"\
    \n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n  \
    \      val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n  \
    \      if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c > s1o && s2c\
    \ > s2o) \"Yes\"\n        else if (s1c < s1o && s2c < s2o) \"Yes\"\n        else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c\
    \ = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o\
    \ = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c\
    \ == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o && s2c > s2o) \"\
    Yes\"\n        else if (s1c > s1o && s2c == s2o) \"Yes\"\n        else if (s1c\
    \ > s1o && s2c > s2o) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c\
    \ = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o\
    \ = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n      \
    \  else if (s1c == s1o && s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c\
    \ == s2o) \"Yes\"\n        else if (s1c > s1o && s2c > s2o) \"Yes\"\n        else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c\
    \ = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o\
    \ = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c\
    \ == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o && s2c < s2o) \"\
    No\"\n        else if (s1c < s1o && s2c == s2o) \"No\"\n        else if (s1c <\
    \ s1o && s2c < s2o) \"No\"\n        else \"Yes\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c\
    \ = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o\
    \ = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n      \
    \  else if (s1c == s1o && s2c < s2o) \"No\"\n        else if (s1c < s1o && s2c\
    \ == s2o) \"No\"\n        else if (s1c < s1o && s2c < s2o) \"No\"\n        else\
    \ if (s1c > s1o && s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c < s2o)\
    \ \"Yes\"\n        else if (s1c < s1o && s2c > s2o) \"Yes\"\n        else \"No\"",
  "        val s = lst.foldLeft(\"\")(_ + _)\n        if (s.count(_ == '(') == s.count(_\
    \ == ')')) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n\
    \        if (s1c == s1o && s2c == s2o) {\n            if (s1c == s2o) \"Yes\"\n\
    \            else \"No\"\n        } else if (s1c == s1o && s2c != s2o) {\n   \
    \         if (s1c == s2c) \"Yes\"\n            else \"No\"\n        } else if\
    \ (s1c != s1o && s2c == s2o) {\n            if (s1o == s2o) \"Yes\"\n        \
    \    else \"No\"\n        } else {\n            if (s1c == s2o || s1o == s2c)\
    \ \"Yes\"\n            else \"No\"\n        }", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n        val s1_close\
    \ = s1.count(_ == ')')\n        val s2_open = s2.count(_ == '(')\n        val\
    \ s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close && s2_open ==\
    \ s2_close) return \"Yes\"\n        if (s1_open == s1_close) {\n            if\
    \ (s2_open > s2_close) return \"Yes\"\n            else return \"No\"\n      \
    \  }\n        if (s2_open == s2_close) {\n            if (s1_open > s1_close)\
    \ return \"Yes\"\n            else return \"No\"\n        }\n        if (s1_open\
    \ > s1_close) {\n            if (s2_open > s2_close) return \"Yes\"\n        \
    \    else return \"No\"\n        }\n        if (s2_open > s2_close) {\n      \
    \      if (s1_open > s1_close) return \"Yes\"\n            else return \"No\"\n\
    \        }\n        \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n\
    \        if (s1c == s1o && s2c == s2o) return \"Yes\"\n        if (s1c > s1o &&\
    \ s2c < s2o) return \"Yes\"\n        if (s1c < s1o && s2c > s2o) return \"Yes\"\
    \n        \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n       \
    \ val c1 = s1.count(_ == '(')\n        val c2 = s2.count(_ == '(')\n        val\
    \ d1 = s1.count(_ == ')')\n        val d2 = s2.count(_ == ')')\n        if (c1\
    \ == d1 && c2 == d2) \"Yes\"\n        else if (c1 == d1 && c2 > d2) {\n      \
    \      if (c1 + c2 - d2 == d1) \"Yes\"\n            else \"No\"\n        }\n \
    \       else if (c1 > d1 && c2 == d2) {\n            if (c1 - d1 + c2 == d2) \"\
    Yes\"\n            else \"No\"\n        }\n        else if (c1 > d1 && c2 > d2)\
    \ {\n            if (c1 - d1 + c2 - d2 == d1 + d2) \"Yes\"\n            else \"\
    No\"\n        }\n        else \"No\"", "        val (a, b) = (lst(0), lst(1))\n\
    \        val (a1, b1) = (a.count(_ == '('), b.count(_ == '('))\n        val (a2,\
    \ b2) = (a.count(_ == ')'), b.count(_ == ')'))\n        if (a1 == a2 && b1 ==\
    \ b2) \"Yes\"\n        else if (a1 == a2 && b1 > b2) \"Yes\"\n        else if\
    \ (a1 > a2 && b1 == b2) \"Yes\"\n        else \"No\"", "        val (open, close)\
    \ = lst.map(s => s.count(_ == '(') - s.count(_ == ')')).partition(_ > 0)\n   \
    \     if (open.sum == close.sum) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n        val\
    \ s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_ == '(')\n  \
    \      val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close && s2_open\
    \ == s2_close) {\n            \"Yes\"\n        } else if (s1_open == s1_close\
    \ && s2_open != s2_close) {\n            if (s2_open > s2_close) {\n         \
    \       \"Yes\"\n            } else {\n                \"No\"\n            }\n\
    \        } else if (s1_open != s1_close && s2_open == s2_close) {\n          \
    \  if (s1_open > s1_close) {\n                \"Yes\"\n            } else {\n\
    \                \"No\"\n            }\n        } else {\n            \"No\"\n\
    \        }", "        val s = lst.mkString\n        if (s.count(_ == '(') == s.count(_\
    \ == ')')) \"Yes\" else \"No\"", "        val s = lst.mkString(\"\")\n       \
    \ if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\" else \"No\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count = s1.count(_ == '(')\n\
    \        val s2_count = s2.count(_ == '(')\n        if (s1_count == s2_count)\
    \ {\n            \"Yes\"\n        } else {\n            \"No\"\n        }", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) \"Yes\"\n        else if (s1c == s1o && s2c > s2o) \"Yes\"\n       \
    \ else if (s1c > s1o && s2c == s2o) \"Yes\"\n        else if (s1c > s1o && s2c\
    \ > s2o) \"Yes\"\n        else \"No\"", "        var stack = new Stack[Char]\n\
    \        for (s <- lst) {\n            for (c <- s) {\n                if (c ==\
    \ '(') stack.push(c)\n                else if (c == ')') {\n                 \
    \   if (stack.isEmpty) return \"No\"\n                    else stack.pop\n   \
    \             }\n            }\n        }\n        if (stack.isEmpty) \"Yes\"\
    \ else \"No\"", "        val (open, close) = lst.map(s => s.count(_ == '(') -\
    \ s.count(_ == ')')).partition(_ > 0)\n        if (open.sum == close.sum) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ n1 = s1.length\n        val n2 = s2.length\n        val dp = Array.ofDim[Int](n1\
    \ + 1, n2 + 1)\n        for (i <- 0 to n1) {\n            for (j <- 0 to n2) {\n\
    \                if (i == 0 && j == 0) dp(i)(j) = 0\n                else if (i\
    \ == 0) {\n                    if (s2(j - 1) == '(') dp(i)(j) = dp(i)(j - 1) +\
    \ 1\n                    else dp(i)(j) = dp(i)(j - 1) - 1\n                }\n\
    \                else if (j == 0) {\n                    if (s1(i - 1) == '(')\
    \ dp(i)(j) = dp(i - 1)(j) + 1\n                    else dp(i)(j) = dp(i - 1)(j)\
    \ - 1\n                }\n                else {\n                    if (s1(i\
    \ - 1) == '(') dp(i)(j) = max(dp(i - 1)(j) + 1, dp(i)(j - 1))\n              \
    \      else dp(i)(j) = max(dp(i - 1)(j) - 1, dp(i)(j - 1))\n                }\n\
    \            }\n        }\n        if (dp(n1)(n2) == 0) \"Yes\" else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count = s1.count(_\
    \ == '(')\n        val s2_count = s2.count(_ == '(')\n        val s1_balanced\
    \ = s1.count(_ == ')') == s1_count\n        val s2_balanced = s2.count(_ == ')')\
    \ == s2_count\n        if (s1_balanced && s2_balanced) {\n            if (s1_count\
    \ == s2_count) \"Yes\"\n            else \"No\"\n        } else if (s1_balanced)\
    \ {\n            if (s1_count == s2_count + 1) \"Yes\"\n            else \"No\"\
    \n        } else if (s2_balanced) {\n            if (s2_count == s1_count + 1)\
    \ \"Yes\"\n            else \"No\"\n        } else {\n            if (s1_count\
    \ == s2_count + 1 || s2_count == s1_count + 1) \"Yes\"\n            else \"No\"\
    \n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        def isGood(s\
    \ : String) : Boolean = {\n            var count = 0\n            for (c <- s)\
    \ {\n                if (c == '(') count += 1\n                else count -= 1\n\
    \                if (count < 0) return false\n            }\n            return\
    \ count == 0\n        }\n        if (isGood(s1 + s2)) return \"Yes\"\n       \
    \ if (isGood(s2 + s1)) return \"Yes\"\n        return \"No\"", "        val s1\
    \ = lst(0)\n        val s2 = lst(1)\n        val s1_cnt = s1.count(_ == '(')\n\
    \        val s2_cnt = s2.count(_ == '(')\n        val s1_rev = s1.reverse\n  \
    \      val s2_rev = s2.reverse\n        val s1_rev_cnt = s1_rev.count(_ == ')')\n\
    \        val s2_rev_cnt = s2_rev.count(_ == ')')\n        if (s1_cnt == s2_rev_cnt\
    \ && s2_cnt == s1_rev_cnt) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1_count = s1.count(_ == '(')\n        val\
    \ s2_count = s2.count(_ == '(')\n        val s1_count_close = s1.count(_ == ')')\n\
    \        val s2_count_close = s2.count(_ == ')')\n        if (s1_count == s1_count_close\
    \ && s2_count == s2_count_close) {\n            if (s1_count == s2_count_close\
    \ && s2_count == s1_count_close) \"Yes\"\n            else \"No\"\n        } else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open\
    \ = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n        val\
    \ s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ == ')')\n  \
    \      if (s1_open == s1_close && s2_open == s2_close) \"Yes\"\n        else if\
    \ (s1_open > s1_close && s2_open > s2_close) \"Yes\"\n        else if (s1_open\
    \ < s1_close && s2_open < s2_close) \"Yes\"\n        else \"No\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count = s1.count(_ == '(')\n\
    \        val s2_count = s2.count(_ == '(')\n        val s1_count_close = s1.count(_\
    \ == ')')\n        val s2_count_close = s2.count(_ == ')')\n        if (s1_count\
    \ == s1_count_close && s2_count == s2_count_close) {\n            val s1_count_diff\
    \ = s1_count - s1_count_close\n            val s2_count_diff = s2_count - s2_count_close\n\
    \            if (s1_count_diff == s2_count_diff) \"Yes\"\n            else if\
    \ (s1_count_diff == 0 || s2_count_diff == 0) \"Yes\"\n            else \"No\"\n\
    \        }\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1_count = s1.count(_ == '(')\n        val s2_count = s2.count(_\
    \ == '(')\n        val s1_open = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == ')')\n        if (s1_count == s1_open && s2_count == s2_open) {\n       \
    \     \"Yes\"\n        } else if (s1_count == s1_open && s2_count > s2_open) {\n\
    \            \"Yes\"\n        } else if (s1_count > s1_open && s2_count == s2_open)\
    \ {\n            \"Yes\"\n        } else {\n            \"No\"\n        }", " \
    \       val s = lst.foldLeft(\"\")(_ + _)\n        if (s.length % 2 == 1) return\
    \ \"No\"\n        val stack = new Stack[Char]\n        for (c <- s) {\n      \
    \      if (c == '(') stack.push(c)\n            else if (stack.isEmpty) return\
    \ \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val (a, b) = (lst(0), lst(1))\n        val (a1, b1)\
    \ = (a.count(_ == '('), b.count(_ == '('))\n        val (a2, b2) = (a.count(_\
    \ == ')'), b.count(_ == ')'))\n        if (a1 == a2 && b1 == b2) \"Yes\"\n   \
    \     else if (a1 == a2 && b1 > b2) \"Yes\"\n        else if (a1 > a2 && b1 ==\
    \ b2) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val s1Count = s1.count(_ == '(')\n        val s2Count = s2.count(_\
    \ == '(')\n        if (s1Count == s2Count) \"Yes\"\n        else if (s1Count ==\
    \ s2.count(_ == ')')) \"Yes\"\n        else if (s2Count == s1.count(_ == ')'))\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        if (s1c == s2c) \"Yes\"\n        else if (s1c > s2c) {\n            if\
    \ (s1.count(_ == ')') > s2.count(_ == ')')) \"Yes\"\n            else \"No\"\n\
    \        }\n        else {\n            if (s2.count(_ == ')') > s1.count(_ ==\
    \ ')')) \"Yes\"\n            else \"No\"\n        }", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val n1 = s1.length\n        val n2 = s2.length\n\
    \        val dp = Array.ofDim[Int](n1 + 1, n2 + 1)\n        for (i <- 0 to n1)\
    \ dp(i)(0) = 0\n        for (j <- 0 to n2) dp(0)(j) = 0\n        for (i <- 1 to\
    \ n1; j <- 1 to n2) {\n            dp(i)(j) = max(dp(i - 1)(j), dp(i)(j - 1))\n\
    \            if (s1(i - 1) == '(' && s2(j - 1) == ')') dp(i)(j) = max(dp(i)(j),\
    \ dp(i - 1)(j - 1) + 1)\n        }\n        if (dp(n1)(n2) == 0) \"No\" else \"\
    Yes\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_len\
    \ = s1.length\n        val s2_len = s2.length\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) {\n            if (s1_open == s2_close) \"Yes\"\n  \
    \          else \"No\"\n        } else if (s1_open == s1_close) {\n          \
    \  if (s1_open == s2_close) \"Yes\"\n            else \"No\"\n        } else if\
    \ (s2_open == s2_close) {\n            if (s2_open == s1_close) \"Yes\"\n    \
    \        else \"No\"\n        } else \"No\"", "        val s1 = lst(0)\n     \
    \   val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_\
    \ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_\
    \ == ')')\n        if (s1c == s1o && s2c == s2o) return \"Yes\"\n        if (s1c\
    \ == s1o) {\n            val diff = abs(s2c - s2o)\n            if (diff % 2 ==\
    \ 0) return \"Yes\"\n        }\n        if (s2c == s2o) {\n            val diff\
    \ = abs(s1c - s1o)\n            if (diff % 2 == 0) return \"Yes\"\n        }\n\
    \        \"No\"", "        val (open, close) = lst.map(s => s.count(_ == '(')\
    \ - s.count(_ == ')')).partition(_ > 0)\n        if (open.sum == close.sum) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s1_open = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n\
    \        val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ ==\
    \ ')')\n        val diff = s1_open - s1_close + s2_open - s2_close\n        if\
    \ (diff == 0) \"Yes\"\n        else if (diff > 0) {\n            if (s1_open -\
    \ s1_close >= diff) \"Yes\"\n            else \"No\"\n        }\n        else\
    \ {\n            if (s2_open - s2_close >= -diff) \"Yes\"\n            else \"\
    No\"\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        if (s1c\
    \ == s2c) return \"Yes\"\n        if (s1c == s2c + 1) {\n            if (s1.count(_\
    \ == ')') == s2.count(_ == ')')) return \"Yes\"\n        }\n        if (s2c ==\
    \ s1c + 1) {\n            if (s2.count(_ == ')') == s1.count(_ == ')')) return\
    \ \"Yes\"\n        }\n        \"No\"", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val c1 = s1.count(_ == '(')\n        val c2 = s2.count(_ ==\
    \ '(')\n        val c3 = s1.count(_ == ')')\n        val c4 = s2.count(_ == ')')\n\
    \        if (c1 + c2 == c3 + c4) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c\
    \ = s2.count(_ == '(')\n        if (s1c == s2c) \"Yes\"\n        else if (s1c\
    \ == s2c + 1) {\n            if (s1.count(_ == ')') == s2.count(_ == ')')) \"\
    Yes\"\n            else \"No\"\n        }\n        else if (s1c + 1 == s2c) {\n\
    \            if (s1.count(_ == ')') == s2.count(_ == ')')) \"Yes\"\n         \
    \   else \"No\"\n        }\n        else \"No\"", "        val s = lst.mkString\n\
    \        var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n \
    \           else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c\
    \ = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o\
    \ = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c\
    \ == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o && s2c > s2o) \"\
    Yes\"\n        else if (s1c > s1o && s2c == s2o) \"Yes\"\n        else if (s1c\
    \ > s1o && s2c > s2o) \"Yes\"\n        else \"No\"", "        val (open, close)\
    \ = lst.map(s => s.count(_ == '(') - s.count(_ == ')')).partition(_ > 0)\n   \
    \     if (open.sum == close.sum) \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        def matchParens(lst : List[Char], count\
    \ : Int) : Boolean = {\n            if (lst.isEmpty) count == 0\n            else\
    \ if (lst.head == '(') matchParens(lst.tail, count + 1)\n            else if (lst.head\
    \ == ')') count > 0 && matchParens(lst.tail, count - 1)\n            else matchParens(lst.tail,\
    \ count)\n        }\n        if (matchParens(lst1, 0) && matchParens(lst2, 0))\
    \ \"Yes\"\n        else if (matchParens(lst1 ++ lst2, 0)) \"Yes\"\n        else\
    \ \"No\"", "        val (a, b) = (lst(0), lst(1))\n        val (a1, b1) = (a.count(_\
    \ == '('), b.count(_ == '('))\n        val (a2, b2) = (a.count(_ == ')'), b.count(_\
    \ == ')'))\n        if (a1 == a2 && b1 == b2) \"Yes\"\n        else if (a1 ==\
    \ a2 && b1 < b2) \"No\"\n        else if (a1 < a2 && b1 == b2) \"No\"\n      \
    \  else if (a1 < a2 && b1 < b2) \"No\"\n        else \"Yes\"", "        val s1\
    \ = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n\
    \        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_ ==\
    \ '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) {\n            \"Yes\"\n        } else if (s1_open ==\
    \ s1_close && s2_open > s2_close) {\n            if (s2_open - s2_close == s1_open)\
    \ \"Yes\" else \"No\"\n        } else if (s1_open == s1_close && s2_open < s2_close)\
    \ {\n            if (s1_open == s2_close - s2_open) \"Yes\" else \"No\"\n    \
    \    } else if (s1_open > s1_close && s2_open == s2_close) {\n            if (s1_open\
    \ - s1_close == s2_open) \"Yes\" else \"No\"\n        } else if (s1_open < s1_close\
    \ && s2_open == s2_close) {\n            if (s2_open == s1_close - s1_open) \"\
    Yes\" else \"No\"\n        } else if (s1_open > s1_close && s2_open > s2_close)\
    \ {\n            if (s1_open - s1_close == s2_open - s2_close) \"Yes\" else \"\
    No\"\n        } else if (s1_open > s1_close && s2_open < s2_close) {\n       \
    \     if (s1_open - s1_close == s2_close - s2_open) \"Yes\" else \"No\"\n    \
    \    } else if (s1_open < s1_close && s2_open > s2_close) {\n            if (s2_open\
    \ - s2_close == s1_close - s1_open) \"Yes\" else \"No\"\n        } else if (",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1Count = s1.count(_\
    \ == '(')\n        val s2Count = s2.count(_ == '(')\n        if (s1Count == s2Count)\
    \ \"Yes\"\n        else if (s1Count > s2Count) {\n            if (s1.count(_ ==\
    \ ')') == s2Count) \"Yes\"\n            else \"No\"\n        }\n        else {\n\
    \            if (s2.count(_ == ')') == s1Count) \"Yes\"\n            else \"No\"\
    \n        }", "        val s = lst.mkString\n        val n = s.length\n      \
    \  var count = 0\n        for (i <- 0 until n) {\n            if (s(i) == '(')\
    \ count += 1\n            else count -= 1\n            if (count < 0) return \"\
    No\"\n        }\n        if (count == 0) \"Yes\" else \"No\"", "        val s\
    \ = lst.mkString\n        val n = s.length\n        var c = 0\n        for (i\
    \ <- 0 until n) {\n            if (s(i) == '(') c += 1\n            else c -=\
    \ 1\n            if (c < 0) return \"No\"\n        }\n        if (c == 0) \"Yes\"\
    \ else \"No\"", "        val s = lst.mkString\n        val n = s.length\n    \
    \    val dp = Array.fill(n + 1)(0)\n        for (i <- 0 until n) {\n         \
    \   if (s(i) == '(') dp(i + 1) = dp(i) + 1\n            else dp(i + 1) = dp(i)\
    \ - 1\n        }\n        if (dp.min < 0) return \"No\"\n        val max = dp.max\n\
    \        for (i <- 0 until n) {\n            if (s(i) == ')') {\n            \
    \    if (dp(i + 1) == max) return \"Yes\"\n            }\n        }\n        \"\
    No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open\
    \ = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n        val\
    \ s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ == ')')\n  \
    \      if (s1_open == s1_close && s2_open == s2_close) {\n            \"Yes\"\n\
    \        } else if (s1_open == s1_close && s2_open != s2_close) {\n          \
    \  if (s2_open > s2_close) {\n                if (s1_open > s2_close) {\n    \
    \                \"Yes\"\n                } else {\n                    \"No\"\
    \n                }\n            } else {\n                if (s1_close > s2_open)\
    \ {\n                    \"Yes\"\n                } else {\n                 \
    \   \"No\"\n                }\n            }\n        } else if (s1_open != s1_close\
    \ && s2_open == s2_close) {\n            if (s1_open > s1_close) {\n         \
    \       if (s2_open > s1_close) {\n                    \"Yes\"\n             \
    \   } else {\n                    \"No\"\n                }\n            } else\
    \ {\n                if (s2_close > s1_open) {\n                    \"Yes\"\n\
    \                } else {\n                    \"No\"\n                }\n   \
    \         }\n        } else {\n            if (s1_open > s1_close) {\n       \
    \         if (s2_open > s1_close) {\n                    \"Yes\"\n           \
    \     } else {\n                    \"No\"\n                }\n            } else\
    \ {\n                if (s2_close > s1_open) {\n                    \"Yes\"\n\
    \                } else {\n                    \"No\"\n                }\n   \
    \         }\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n \
    \       val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n \
    \       val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n \
    \       if (s1c == s1o && s2c == s2o) return \"Yes\"\n        if (s1c == s1o &&\
    \ s2c < s2o) return \"No\"\n        if (s1c < s1o && s2c == s2o) return \"No\"\
    \n        if (s1c < s1o && s2c < s2o) return \"No\"\n        if (s1c > s1o &&\
    \ s2c > s2o) return \"Yes\"\n        if (s1c > s1o && s2c == s2o) return \"Yes\"\
    \n        if (s1c == s1o && s2c > s2o) return \"Yes\"\n        if (s1c > s1o &&\
    \ s2c < s2o) {\n            if (s1c - s1o == s2o - s2c) return \"Yes\"\n     \
    \       else return \"No\"\n        }\n        if (s1c < s1o && s2c > s2o) {\n\
    \            if (s1o - s1c == s2c - s2o) return \"Yes\"\n            else return\
    \ \"No\"\n        }\n        return \"No\"", "        val s1 = lst(0)\n      \
    \  val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_\
    \ == '(')\n        if (s1c == s2c) \"Yes\"\n        else if (s1c == s2c + 1 &&\
    \ s1.count(_ == ')') == 0) \"Yes\"\n        else if (s2c == s1c + 1 && s2.count(_\
    \ == ')') == 0) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n    \
    \    val s2 = lst(1)\n        var count = 0\n        for (i <- 0 until s1.length)\
    \ {\n            if (s1(i) == '(') count += 1\n            else count -= 1\n \
    \       }\n        for (i <- 0 until s2.length) {\n            if (s2(i) == '(')\
    \ count += 1\n            else count -= 1\n        }\n        if (count == 0)\
    \ \"Yes\" else \"No\"", "        def isGood(s : String) : Boolean = {\n      \
    \      var c = 0\n            for (i <- 0 until s.length) {\n                if\
    \ (s(i) == '(') c += 1\n                else c -= 1\n                if (c < 0)\
    \ return false\n            }\n            return c == 0\n        }\n        if\
    \ (isGood(lst(0) + lst(1))) \"Yes\"\n        else if (isGood(lst(1) + lst(0)))\
    \ \"Yes\"\n        else \"No\""]
stop_tokens:
- "\n    }\n"
