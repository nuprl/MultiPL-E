name: HumanEval_65_circular_shift
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Circular shift the digits of the integer x, shift the digits right by shift\n\
  \    // and return the result as a string.\n    // If shift > number of digits,\
  \ return digits reversed.\n    // >>> circular_shift(12, 1)\n    // \"21\"\n   \
  \ // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x : Long, shift\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        val digits = x.toString.map(_.asDigit).toList\n        val\
    \ n = digits.length\n        if (shift >= n) digits.reverse.mkString\n       \
    \ else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n  \
    \          (right ::: left).mkString\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.map(_.asDigit).toList\n        val n = digits.length\n        if\
    \ (shift > n) digits.reverse.mkString\n        else {\n            val (left,\
    \ right) = digits.splitAt(n - shift.toInt)\n            (right ::: left).mkString\n\
    \        }", "        val digits = x.toString.length\n        if (shift >= digits)\
    \ x.toString.reverse\n        else x.toString.substring(digits - shift.toInt)\
    \ + x.toString.substring(0, digits - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val s = x.toString\n        if (shift\
    \ > s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        if\
    \ (shift > digits.length) digits.reverse.mkString\n        else digits.drop(shift.toInt)\
    \ ++ digits.take(shift.toInt) mkString", "        val digits = x.toString.toList\n\
    \        val len = digits.length\n        val shift2 = if (shift > len) len else\
    \ shift\n        val (left, right) = digits.splitAt(len - shift2)\n        (right\
    \ ::: left).mkString", "        val digits = x.toString.length\n        if (shift\
    \ >= digits) {\n            x.toString.reverse\n        } else {\n           \
    \ val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n \
    \       }", "        val s = x.toString\n        if (shift > s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val digits = x.toString.map(_.asDigit).toList\n    \
    \    val n = digits.length\n        val shift_mod = shift % n\n        val shifted\
    \ = digits.slice(n - shift_mod, n) ++ digits.slice(0, n - shift_mod)\n       \
    \ shifted.mkString", "        val s = x.toString\n        val n = s.length\n \
    \       if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val s = x.toString\n        if (shift\
    \ > s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        val\
    \ n = digits.length\n        val shift_mod = shift % n\n        if (shift_mod\
    \ == 0) digits.mkString\n        else if (shift_mod == n) digits.reverse.mkString\n\
    \        else digits.drop(n - shift_mod).mkString + digits.take(n - shift_mod).mkString",
  "        val digits = x.toString.length\n        if (shift > digits) x.toString.reverse\n\
    \        else x.toString.substring(digits - shift.toInt) + x.toString.substring(0,\
    \ digits - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (left, right) = x.toString.splitAt(digits - shift.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (left, right) = x.toString.splitAt(digits - shift.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.length\n\
    \        if (shift >= digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else (digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)).mkString",
  "        val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val digits = x.toString.length\n        if (shift >= digits) return x.toString.reverse\n\
    \        val (a, b) = x.toString.splitAt(digits - shift.toInt)\n        b + a",
  "        val s = x.toString\n        val n = s.length\n        val shift2 = if (shift\
    \ > n) n else shift\n        val s2 = s.substring(n - shift2, n) + s.substring(0,\
    \ n - shift2)\n        s2", "        val digits = x.toString.length\n        val\
    \ s = shift % digits\n        if (s == 0) x.toString\n        else x.toString.substring(digits\
    \ - s) + x.toString.substring(0, digits - s)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        digits.slice(n - shift2, n) ++ digits.slice(0, n - shift2)\
    \ mkString", "        val digits = x.toString.toList\n        val shiftDigits\
    \ = if (shift > digits.length) digits.reverse else digits.drop(shift.toInt) ++\
    \ digits.take(shift.toInt)\n        shiftDigits.mkString", "        val digits\
    \ = x.toString.length\n        if (shift > digits) x.toString.reverse\n      \
    \  else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else (digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)).mkString",
  "        if (shift == 0) return x.toString\n        val digits = x.toString.length\n\
    \        if (shift >= digits) return x.toString.reverse\n        val (a, b) =\
    \ x.toString.splitAt(digits - shift.toInt)\n        b + a", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val s = x.toString\n        val n = s.length\n        if (shift\
    \ > n) {\n            s.reverse\n        } else {\n            s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)\n        }", "        val digits\
    \ = x.toString.toList\n        val shiftDigits = digits.drop(shift.toInt) ++ digits.take(shift.toInt)\n\
    \        shiftDigits.mkString", "        if (shift == 0) return x.toString\n \
    \       val digits = x.toString.length\n        if (shift >= digits) return x.toString.reverse\n\
    \        val (a, b) = x.toString.splitAt(digits - shift.toInt)\n        b + a",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   if (shift > len) digits.reverse.mkString\n        else {\n            val\
    \ (left, right) = digits.splitAt(len - shift.toInt)\n            (right ::: left).mkString\n\
    \        }", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        if (shift >= n) digits.reverse.mkString\n        else digits.drop(n -\
    \ shift.toInt).mkString + digits.take(n - shift.toInt).mkString", "        val\
    \ digits = x.toString.toList\n        if (shift > digits.length) digits.reverse.mkString\n\
    \        else (digits.drop(shift.toInt) ::: digits.take(shift.toInt)).mkString",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift > n) digits.reverse.mkString\n        else (digits.drop(n - shift.toInt)\
    \ ::: digits.take(n - shift.toInt)).mkString", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.takeRight(shift.toInt)\n        val remainingDigits\
    \ = digits.dropRight(shift.toInt)\n        (shiftDigits ::: remainingDigits).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        if (shift >= s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   val shift_mod = shift % len\n        if (shift_mod == 0) {\n            digits.mkString\n\
    \        } else {\n            val (left, right) = digits.splitAt(len - shift_mod)\n\
    \            (right ++ left).mkString\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n\
    \            (right ::: left).mkString\n        }", "        if (shift == 0) return\
    \ x.toString\n        val digits = x.toString.length\n        if (shift >= digits)\
    \ return x.toString.reverse\n        val (a, b) = x.toString.splitAt(digits -\
    \ shift.toInt)\n        b + a", "        val s = x.toString\n        if (shift\
    \ >= s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.map(_.asDigit).toArray\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val shift3 = if (shift2 == 0) n else shift2\n        val\
    \ digits2 = digits.slice(n - shift3, n) ++ digits.slice(0, n - shift3)\n     \
    \   digits2.mkString", "        if (shift == 0) return x.toString\n        val\
    \ digits = x.toString.toList\n        val shiftDigits = digits.takeRight(shift.toInt)\n\
    \        val remainingDigits = digits.dropRight(shift.toInt)\n        (shiftDigits\
    \ ::: remainingDigits).mkString", "        val s = x.toString\n        if (shift\
    \ > s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        if (shift >=\
    \ s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        val\
    \ len = digits.length\n        if (shift > len) digits.reverse.mkString\n    \
    \    else (digits.drop(len - shift.toInt) ::: digits.take(len - shift.toInt)).mkString",
  "        if (shift == 0) return x.toString\n        val digits = x.toString.length\n\
    \        if (shift >= digits) return x.toString.reverse\n        val (left, right)\
    \ = x.toString.splitAt(digits - shift.toInt)\n        right + left", "       \
    \ val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ val shift2 = if (shift > n) n else shift\n        val (left, right) = digits.splitAt(n\
    \ - shift2)\n        (right ::: left).mkString", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) {\n            digits.reverse.mkString\n\
    \        } else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n\
    \            (right ::: left).mkString\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else {\n            val (a, b) = digits.splitAt(n - shift.toInt)\n  \
    \          (b ::: a).mkString\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift_mod = shift % n\n        if\
    \ (shift_mod == 0) digits.mkString\n        else if (shift_mod > n / 2) (digits.takeRight(shift_mod)\
    \ ++ digits.take(n - shift_mod)).mkString\n        else (digits.takeRight(n -\
    \ shift_mod) ++ digits.take(shift_mod)).mkString", "        val digits = x.toString.toList\n\
    \        val len = digits.length\n        if (shift > len) digits.reverse.mkString\n\
    \        else digits.drop(len - shift.toInt).mkString + digits.take(len - shift.toInt).mkString",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ val shift_mod = shift % n\n        if (shift_mod == 0) digits.mkString\n   \
    \     else if (shift_mod > n / 2) digits.reverse.mkString\n        else digits.drop(shift_mod.toInt).mkString\
    \ + digits.take(shift_mod.toInt).mkString", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else (digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val shiftDigits = if (shift > digits.length)\
    \ digits.reverse else digits.drop(shift.toInt) ++ digits.take(shift.toInt)\n \
    \       shiftDigits.mkString", "        val s = x.toString\n        val n = s.length\n\
    \        val shift_mod = shift % n\n        if (shift_mod == 0) s\n        else\
    \ if (shift_mod == 1) s.substring(n - 1, n) + s.substring(0, n - 1)\n        else\
    \ if (shift_mod == n - 1) s.substring(1, n) + s.substring(0, 1)\n        else\
    \ s.substring(n - shift_mod, n) + s.substring(0, n - shift_mod)", "        val\
    \ digits = x.toString.toList\n        val len = digits.length\n        if (shift\
    \ > len) digits.reverse.mkString\n        else digits.drop(len - shift.toInt).mkString\
    \ + digits.take(len - shift.toInt).mkString", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shift_mod = shift % n\n        if\
    \ (shift_mod == 0) x.toString\n        else if (shift_mod < n / 2) digits.takeRight(shift_mod).mkString\
    \ + digits.take(n - shift_mod).mkString\n        else digits.takeRight(n - shift_mod).mkString\
    \ + digits.take(shift_mod).mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        if (shift == 0) return x.toString\n      \
    \  val s = x.toString\n        val n = s.length\n        if (shift >= n) return\
    \ s.reverse\n        s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.map(_.asDigit).toList\n        val n = digits.length\n\
    \        val shift2 = if (shift > n) n - shift else shift\n        if (shift2\
    \ == 0) x.toString\n        else (digits.takeRight(shift2) ::: digits.take(n -\
    \ shift2)).mkString", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val digits = x.toString.toList\n        if (shift > digits.length)\
    \ digits.reverse.mkString\n        else (digits.drop(shift.toInt) ::: digits.take(shift.toInt)).mkString",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift >= n) digits.reverse.mkString\n        else {\n            val (left,\
    \ right) = digits.splitAt(n - shift.toInt)\n            (right ::: left).mkString\n\
    \        }", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        val shift1 = if (shift > n) n else shift\n        val shift2 = if (shift1\
    \ == n) 0 else shift1\n        (digits.takeRight(shift2) ::: digits.dropRight(shift2)).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   if (shift >= len) digits.reverse.mkString\n        else {\n            val\
    \ (left, right) = digits.splitAt(len - shift.toInt)\n            (right ::: left).mkString\n\
    \        }", "        val digits = x.toString.map(_.asDigit).toList\n        if\
    \ (shift > digits.length) digits.reverse.mkString\n        else {\n          \
    \  val (left, right) = digits.splitAt(digits.length - shift.toInt)\n         \
    \   (right ::: left).mkString\n        }", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val (left, right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString",
  "        val digits = x.toString.map(_.asDigit).toList\n        val n = digits.length\n\
    \        if (shift > n) digits.reverse.mkString\n        else digits.drop(n -\
    \ shift.toInt) ++ digits.take(n - shift.toInt) mkString", "        val digits\
    \ = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val first = x.toString.substring(0, digits - shift.toInt)\n\
    \            val second = x.toString.substring(digits - shift.toInt)\n       \
    \     second + first\n        }", "        val digits = x.toString.length\n  \
    \      if (shift >= digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val digits = x.toString.toList\n        val\
    \ len = digits.length\n        if (shift > len) digits.reverse.mkString\n    \
    \    else (digits.slice(len - shift, len) ::: digits.slice(0, len - shift)).mkString",
  "        val digits = x.toString.length\n        if (shift > digits) {\n       \
    \     x.toString.reverse\n        } else {\n            val right = x % pow(10,\
    \ shift).toLong\n            val left = x / pow(10, shift).toLong\n          \
    \  (right.toString + left.toString)\n        }", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.toList\n        val n = digits.length\n        val shift2 = if\
    \ (shift > n) n else shift\n        val (left, right) = digits.splitAt(n - shift2)\n\
    \        (right ::: left).mkString", "        val digits = x.toString.toCharArray\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n\
    \            (right ++ left).mkString\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) return x.toString.reverse\n        val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n        b + a", "        val digits = x.toString.toList\n  \
    \      val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val (left, right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString",
  "        val digits = x.toString.toList\n        if (shift > digits.length) digits.reverse.mkString\n\
    \        else (digits.drop(shift.toInt) ::: digits.take(shift.toInt)).mkString",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift > n) digits.reverse.mkString\n        else (digits.drop(n - shift.toInt)\
    \ ::: digits.take(n - shift.toInt)).mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else {\n            val\
    \ (left, right) = x.toString.splitAt(digits - shift.toInt)\n            right\
    \ + left\n        }", "        val digits = x.toString.toList\n        if (shift\
    \ > digits.length) digits.reverse.mkString\n        else digits.drop(shift.toInt)\
    \ ++ digits.take(shift.toInt) mkString", "        val s = x.toString\n       \
    \ val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else (digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)).mkString",
  "        val digits = x.toString.length\n        if (shift > digits) {\n       \
    \     x.toString.reverse\n        } else {\n            val (left, right) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            right + left\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift >= digits)\n            return x.toString.reverse\n       \
    \ val (a, b) = x.toString.splitAt(digits - shift.toInt)\n        b + a", "   \
    \     val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        if (shift >= s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val digits = x.toString.map(_.asDigit).toList\n        val shiftDigits\
    \ = digits.takeRight(shift.toInt) ::: digits.dropRight(shift.toInt)\n        shiftDigits.mkString",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   if (shift >= len) digits.reverse.mkString\n        else {\n            val\
    \ (left, right) = digits.splitAt(len - shift.toInt)\n            (right ::: left).mkString\n\
    \        }", "        if (shift == 0) return x.toString\n        val digits =\
    \ x.toString.length\n        if (shift >= digits) return x.toString.reverse\n\
    \        val (left, right) = x.toString.splitAt(digits - shift.toInt)\n      \
    \  right + left", "        val s = x.toString\n        val n = s.length\n    \
    \    if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val digits = x.toString.length\n        if (shift\
    \ > digits) {\n            x.toString.reverse\n        } else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val digits = x.toString.toList\n        val shiftDigits = digits.takeRight(shift.toInt)\n\
    \        val remainingDigits = digits.dropRight(shift.toInt)\n        (shiftDigits\
    \ ::: remainingDigits).mkString", "        val s = x.toString\n        val n =\
    \ s.length\n        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val (left, right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift > n) digits.reverse.mkString\n        else (digits.drop(n - shift.toInt)\
    \ ::: digits.take(n - shift.toInt)).mkString", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n\
    \            (right ::: left).mkString\n        }", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val shift_mod = shift % digits.length\n        if (shift_mod == 0) x.toString\n\
    \        else if (shift_mod > digits.length / 2) digits.reverse.mkString\n   \
    \     else digits.drop(shift_mod).mkString + digits.take(shift_mod).mkString",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   if (shift >= len) digits.reverse.mkString\n        else {\n            val\
    \ (a, b) = digits.splitAt(len - shift.toInt)\n            (b ::: a).mkString\n\
    \        }", "        val s = x.toString\n        val n = s.length\n        if\
    \ (shift >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val (left, right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift > n) digits.reverse.mkString\n        else (digits.drop(n - shift.toInt)\
    \ ::: digits.take(n - shift.toInt)).mkString", "        val s = x.toString\n \
    \       val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val len = digits.length\n        if (shift > len) digits.reverse.mkString\n\
    \        else {\n            val (a, b) = digits.splitAt(len - shift.toInt)\n\
    \            (b ++ a).mkString\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else (digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)).mkString",
  "        val digits = x.toString.map(_.asDigit).toList\n        val n = digits.length\n\
    \        val shift_mod = shift % n\n        if (shift_mod == 0) x.toString\n \
    \       else (digits.takeRight(shift_mod) ::: digits.dropRight(shift_mod)).mkString",
  "        val digits = x.toString.length\n        if (shift >= digits) x.toString.reverse\n\
    \        else {\n            val (left, right) = x.toString.splitAt(digits - shift.toInt)\n\
    \            right + left\n        }", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n else shift\n\
    \        val shift2 = if (shift1 == n) 0 else shift1\n        val (left, right)\
    \ = digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ val shift2 = if (shift > n) n else shift\n        val (left, right) = digits.splitAt(n\
    \ - shift2)\n        (right ::: left).mkString", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val shiftedDigits = digits.drop(n - shift2) ++ digits.take(n - shift2)\n\
    \        shiftedDigits.mkString", "        val s = x.toString\n        val n =\
    \ s.length\n        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else digits.drop(n - shift.toInt).mkString + digits.take(n - shift.toInt).mkString",
  "        val digits = x.toString.length\n        val shift2 = if (shift > digits)\
    \ digits else shift\n        val shift3 = digits - shift2\n        val x2 = x\
    \ / pow(10, shift3).toLong\n        val x3 = x2 / pow(10, shift2).toLong\n   \
    \     val x4 = x2 % pow(10, shift2).toLong\n        val x5 = x4 * pow(10, shift3).toLong\n\
    \        (x5 + x3).toString", "        val digits = x.toString.toList\n      \
    \  val n = digits.length\n        val shift1 = shift % n\n        val (a, b) =\
    \ digits.splitAt(n - shift1)\n        (b ++ a).mkString", "        val digits\
    \ = x.toString.toList\n        val shiftDigits = (digits.takeRight(shift.toInt)\
    \ ::: digits.dropRight(shift.toInt)).mkString\n        shiftDigits", "       \
    \ val digits = x.toString.map(_.asDigit).toList\n        val shiftMod = shift\
    \ % digits.length\n        if (shiftMod == 0) digits.mkString\n        else if\
    \ (shiftMod > digits.length / 2) digits.reverse.mkString\n        else (digits.drop(shiftMod)\
    \ ::: digits.take(shiftMod)).mkString", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else (digits.drop(shift.toInt)\
    \ ::: digits.take(shift.toInt)).mkString", "        val s = x.toString\n     \
    \   val n = s.length\n        val m = shift % n\n        if (m == 0) s\n     \
    \   else s.substring(n - m) + s.substring(0, n - m)", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val shifted = digits.takeRight(shift2).reverse ::: digits.take(n - shift2)\n\
    \        shifted.mkString", "        if (shift == 0) x.toString\n        else\
    \ {\n            val digits = x.toString.length\n            val shift2 = if (shift\
    \ > digits) shift % digits else shift\n            val (a, b) = x.toString.splitAt(digits\
    \ - shift2)\n            b + a\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n else shift\n\
    \        val shift2 = if (shift1 == n) 0 else shift1\n        val (a, b) = digits.splitAt(n\
    \ - shift2)\n        (b ::: a).mkString", "        val s = x.toString\n      \
    \  if (shift > s.length) s.reverse\n        else s.substring(s.length - shift.toInt)\
    \ + s.substring(0, s.length - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val shift_mod = shift % digits.length\n        if (shift_mod == 0) digits.mkString\n\
    \        else if (shift_mod < digits.length / 2) digits.drop(shift_mod).mkString\
    \ + digits.take(shift_mod).mkString\n        else digits.takeRight(shift_mod).mkString\
    \ + digits.dropRight(shift_mod).mkString", "        val s = x.toString\n     \
    \   val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n else shift\n\
    \        val shift2 = if (shift1 == n) 0 else shift1\n        val (left, right)\
    \ = digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ s = x.toString\n        if (shift > s.length) s.reverse\n        else s.substring(s.length\
    \ - shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.map(_.asDigit).toList\n        val n = digits.length\n        if\
    \ (shift > n) digits.reverse.mkString\n        else digits.drop(n - shift.toInt).mkString\
    \ + digits.take(n - shift.toInt).mkString", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else (digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift >= n) digits.reverse.mkString\n        else (digits.drop(n - shift.toInt)\
    \ ::: digits.take(n - shift.toInt)).mkString", "        val s = x.toString\n \
    \       val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else (digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)).mkString",
  "        if (shift == 0) return x.toString\n        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shifted = digits.drop(n - shift.toInt)\
    \ ++ digits.take(n - shift.toInt)\n        shifted.mkString", "        val digits\
    \ = x.toString.toList\n        if (shift > digits.length) digits.reverse.mkString\n\
    \        else (digits.drop(shift.toInt) ::: digits.take(shift.toInt)).mkString",
  "        val digits = x.toString.length\n        if (shift > digits) {\n       \
    \     x.toString.reverse\n        } else {\n            val (left, right) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            right + left\n        }", "        val digits =\
    \ x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (left, right) = x.toString.splitAt(digits -\
    \ shift.toInt)\n            right + left\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift >= digits) x.toString.reverse\n        else {\n           \
    \ val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n \
    \       }", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        val shift2 = if (shift > n) n - shift else shift\n        val (left,\
    \ right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString", " \
    \       val digits = x.toString.length\n        if (shift >= digits) {\n     \
    \       x.toString.reverse\n        } else {\n            val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            b + a\n        }", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        if (shift ==\
    \ 0) return x.toString\n        val digits = x.toString.length\n        if (shift\
    \ >= digits) return x.toString.reverse\n        val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n        b + a", "        val digits = x.toString.toList\n  \
    \      val len = digits.length\n        if (shift > len) digits.reverse.mkString\n\
    \        else {\n            val (a, b) = digits.splitAt(len - shift.toInt)\n\
    \            (b ++ a).mkString\n        }", "        val s = x.toString\n    \
    \    val l = s.length\n        if (shift >= l) s.reverse\n        else s.substring(l\
    \ - shift.toInt) + s.substring(0, l - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.toList\n        val n = digits.length\n        val shift2 = if\
    \ (shift > n) n else shift\n        val (left, right) = digits.splitAt(n - shift2)\n\
    \        (right ::: left).mkString", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else {\n\
    \            val (left, right) = digits.splitAt(digits.length - shift.toInt)\n\
    \            (right ::: left).mkString\n        }", "        val s = x.toString\n\
    \        val len = s.length\n        if (shift >= len) s.reverse\n        else\
    \ s.substring(len - shift.toInt) + s.substring(0, len - shift.toInt)", "     \
    \   val digits = x.toString.toList\n        val n = digits.length\n        if\
    \ (shift >= n) digits.reverse.mkString\n        else digits.slice(n - shift.toInt,\
    \ n) ++ digits.slice(0, n - shift.toInt) mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val digits = x.toString.toList\n        if\
    \ (shift > digits.length) digits.reverse.mkString\n        else {\n          \
    \  val (left, right) = digits.splitAt(digits.length - shift.toInt)\n         \
    \   (right ::: left).mkString\n        }", "        if (shift == 0) return x.toString\n\
    \        val digits = x.toString.length\n        if (shift > digits) return x.toString.reverse\n\
    \        val (left, right) = x.toString.splitAt(digits - shift.toInt)\n      \
    \  right + left", "        val s = x.toString\n        if (shift > s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val s = x.toString\n        if (shift > s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val s = x.toString\n        if (shift > s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val digits = x.toString.map(_.asDigit)\n        val\
    \ len = digits.length\n        val shift_mod = shift % len\n        val (left,\
    \ right) = digits.splitAt(len - shift_mod)\n        (right ++ left).mkString",
  "        val digits = x.toString.map(_.asDigit)\n        if (shift > digits.length)\
    \ digits.reverse.mkString\n        else (digits.slice(digits.length - shift.toInt,\
    \ digits.length) ++ digits.slice(0, digits.length - shift.toInt)).mkString", " \
    \       val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val digits = x.toString.toList\n        val shiftDigits = if (shift > digits.length)\
    \ digits.reverse else digits.drop(shift.toInt) ++ digits.take(shift.toInt)\n \
    \       shiftDigits.mkString", "        val s = x.toString\n        if (shift\
    \ > s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.length\n        if\
    \ (shift > digits) {\n            x.toString.reverse\n        } else {\n     \
    \       val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b +\
    \ a\n        }", "        val digits = x.toString.toList\n        if (shift >\
    \ digits.length) digits.reverse.mkString\n        else (digits.drop(shift.toInt)\
    \ ::: digits.take(shift.toInt)).mkString", "        val digits = x.toString.length\n\
    \        if (shift >= digits) x.toString.reverse\n        else {\n           \
    \ val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n \
    \       }", "        val s = x.toString\n        if (shift > s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)"]
stop_tokens:
- "\n    }\n"
