name: HumanEval_65_circular_shift
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Circular shift the digits of the integer x, shift the digits right by shift\n\
  \    // and return the result as a string.\n    // If shift > number of digits,\
  \ return digits reversed.\n    // >>> circular_shift(12, 1)\n    // \"21\"\n   \
  \ // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x : Long, shift\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        val digits = x.toString.map(_.asDigit).toList\n        val\
    \ n = digits.length\n        if (shift >= n) digits.reverse.mkString\n       \
    \ else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n  \
    \          (right ::: left).mkString\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.map(_.asDigit).toList\n        val n = digits.length\n        if\
    \ (shift > n) digits.reverse.mkString\n        else {\n            val (left,\
    \ right) = digits.splitAt(n - shift.toInt)\n            (right ::: left).mkString\n\
    \        }", "        val digits = x.toString.length\n        if (shift >= digits)\
    \ x.toString.reverse\n        else x.toString.substring(digits - shift.toInt)\
    \ + x.toString.substring(0, digits - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val s = x.toString\n        if (shift\
    \ > s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        if\
    \ (shift > digits.length) digits.reverse.mkString\n        else digits.drop(shift.toInt)\
    \ ++ digits.take(shift.toInt) mkString", "        val digits = x.toString.toList\n\
    \        val len = digits.length\n        val shift2 = if (shift > len) len else\
    \ shift\n        val (left, right) = digits.splitAt(len - shift2)\n        (right\
    \ ::: left).mkString", "        val digits = x.toString.length\n        if (shift\
    \ >= digits) {\n            x.toString.reverse\n        } else {\n           \
    \ val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n \
    \       }", "        val s = x.toString\n        if (shift > s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val digits = x.toString.map(_.asDigit).toList\n    \
    \    val n = digits.length\n        val shift_mod = shift % n\n        val shifted\
    \ = digits.slice(n - shift_mod, n) ++ digits.slice(0, n - shift_mod)\n       \
    \ shifted.mkString", "        val s = x.toString\n        val n = s.length\n \
    \       if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val s = x.toString\n        if (shift\
    \ > s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        val\
    \ n = digits.length\n        val shift_mod = shift % n\n        if (shift_mod\
    \ == 0) digits.mkString\n        else if (shift_mod == n) digits.reverse.mkString\n\
    \        else digits.drop(n - shift_mod).mkString + digits.take(n - shift_mod).mkString",
  "        val digits = x.toString.length\n        if (shift > digits) x.toString.reverse\n\
    \        else x.toString.substring(digits - shift.toInt) + x.toString.substring(0,\
    \ digits - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (left, right) = x.toString.splitAt(digits - shift.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (left, right) = x.toString.splitAt(digits - shift.toInt)\n\
    \            right + left\n        }"]
stop_tokens:
- "\n    }\n"
