name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort an array of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3,\
  \ 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n \
  \   // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    def sortArray(arr :\
  \ List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 != b1) a1 < b1 else a < b\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            if (aBin.count(_ == '1') == bBin.count(_\
    \ == '1')) {\n                a < b\n            } else {\n                aBin.count(_\
    \ == '1') < bBin.count(_ == '1')\n            }\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            aBin.count(_ == '1') < bBin.count(_ == '1') || (aBin.count(_ == '1')\
    \ == bBin.count(_ == '1') && a < b)\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            if (aBin.count(_ == '1') == bBin.count(_ == '1')) a < b else aBin.count(_\
    \ == '1') < bBin.count(_ == '1')\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n      \
    \      val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a\
    \ < b else aOnes < bOnes\n        })\n        sorted", "        arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n      \
    \      val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a\
    \ < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val onesA = a.toBinaryString.count(_ == '1')\n            val onesB\
    \ = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB) a < b else\
    \ onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n         \
    \   val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ ==\
    \ '1')\n            if (aOnes == bOnes) {\n                a < b\n           \
    \ } else {\n                aOnes < bOnes\n            }\n        })", "     \
    \   arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n      \
    \      val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ {\n                a < b\n            } else {\n                aOnes < bOnes\n\
    \            }\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n         \
    \   val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ ==\
    \ '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val sorted = arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.filter(_\
    \ == '1').length\n            val bOnes = bBin.filter(_ == '1').length\n     \
    \       if (aOnes == bOnes) {\n                a < b\n            } else {\n \
    \               aOnes < bOnes\n            }\n        })\n        sorted", " \
    \       arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n  \
    \          val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((x, y) => {\n   \
    \         val x1 = x.toBinaryString.count(_ == '1')\n            val y1 = y.toBinaryString.count(_\
    \ == '1')\n            if (x1 == y1) x < y else x1 < y1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n        \
    \    val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a <\
    \ b else aOnes < bOnes\n        })", "        arr.sortWith((x, y) => {\n     \
    \       val x1 = x.toBinaryString.count(_ == '1')\n            val y1 = y.toBinaryString.count(_\
    \ == '1')\n            if (x1 == y1) x < y else x1 < y1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.filter(_ == '1').length\n\
    \            val bOnes = bBin.filter(_ == '1').length\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(c => c == '1')\n            val bOnes =\
    \ bBinary.count(c => c == '1')\n            if (aOnes == bOnes) {\n          \
    \      a < b\n            } else {\n                aOnes < bOnes\n          \
    \  }\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        val zeros = ones.filter(_._2 == 0).sortBy(_._1)\n\
    \        val ones_ = ones.filter(_._2 != 0).sortBy(_._1)\n        zeros ::: ones_",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBits = a.toBinaryString.count(_ == '1')\n            val bBits\
    \ = b.toBinaryString.count(_ == '1')\n            if (aBits == bBits) a < b else\
    \ aBits < bBits\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n      \
    \      val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) {\n\
    \                a < b\n            } else {\n                aOnes < bOnes\n\
    \            }\n        })\n        sorted", "        arr.sortWith((a, b) => {\n\
    \            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBits = a.toBinaryString.count(_ == '1')\n           \
    \ val bBits = b.toBinaryString.count(_ == '1')\n            if (aBits == bBits)\
    \ a < b else aBits < bBits\n        })", "        val ones = arr.map(x => (x,\
    \ x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.sortBy(_._1).map(_._1)",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(c\
    \ => c == '1')\n            val bOnes = bBinary.count(c => c == '1')\n       \
    \     if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            if (aBin.count(_ == '1') == bBin.count(_ == '1')) a < b else aBin.count(_\
    \ == '1') < bBin.count(_ == '1')\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })\n    \
    \    sorted", "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBits = a.toBinaryString.count(_ == '1')\n           \
    \ val bBits = b.toBinaryString.count(_ == '1')\n            if (aBits == bBits)\
    \ a < b else aBits < bBits\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })\n\
    \        sorted", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        val zeros = ones.filter(_._2 == 0).sortBy(_._1)\n\
    \        val ones_ = ones.filter(_._2 != 0).sortBy(_._1)\n        zeros ::: ones_",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            if (aBin.count(_ == '1') ==\
    \ bBin.count(_ == '1')) a < b else aBin.count(_ == '1') < bBin.count(_ == '1')\n\
    \        })", "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.filter(_ == '1').length\n            val bOnes =\
    \ bBin.filter(_ == '1').length\n            if (aOnes == bOnes) a < b else aOnes\
    \ < bOnes\n        })\n        sorted", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })\n        sorted", "        val ones = arr.map(x\
    \ => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.map(_._1)",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(c => c == '1')\n            val bOnes = bBin.count(c\
    \ => c == '1')\n            if (aOnes == bOnes) {\n                a < b\n   \
    \         } else {\n                aOnes < bOnes\n            }\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.filter(_ ==\
    \ '1').length\n            val bOnes = bBin.filter(_ == '1').length\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        val sorted\
    \ = arr.sortWith((x, y) => {\n            val xOnes = x.toBinaryString.count(_\
    \ == '1')\n            val yOnes = y.toBinaryString.count(_ == '1')\n        \
    \    if (xOnes == yOnes) x < y else xOnes < yOnes\n        })\n        sorted",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.map(_._1)", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.filter(_ == '1').length\n            val bOnes =\
    \ bBin.filter(_ == '1').length\n            if (aOnes == bOnes) a < b else aOnes\
    \ < bOnes\n        })", "        val sorted = arr.sortWith((a, b) => {\n     \
    \       val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })\n        sorted",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            if (aBinary.count(_ == '1') == bBinary.count(_ == '1')) a < b\n \
    \           else aBinary.count(_ == '1') < bBinary.count(_ == '1')\n        })",
  "        arr.sortWith((a, b) => {\n            val aBits = a.toBinaryString.count(_\
    \ == '1')\n            val bBits = b.toBinaryString.count(_ == '1')\n        \
    \    if (aBits == bBits) a < b else aBits < bBits\n        })", "        val sorted\
    \ = arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n      \
    \      val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })\n        sorted", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBits = a.toBinaryString.count(_ == '1')\n            val bBits\
    \ = b.toBinaryString.count(_ == '1')\n            if (aBits == bBits) a < b else\
    \ aBits < bBits\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n   \
    \         val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            aBin.count(_ == '1') < bBin.count(_\
    \ == '1') || (aBin.count(_ == '1') == bBin.count(_ == '1') && a < b)\n       \
    \ })", "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n        \
    \    val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a <\
    \ b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n     \
    \       val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  val ones = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n\
    \        ones.sortBy(_._1).map(_._1)", "        arr.sortWith((a, b) => {\n   \
    \         val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n    \
    \        val bBinary = b.toBinaryString\n            if (aBinary.count(_ == '1')\
    \ == bBinary.count(_ == '1')) a < b\n            else aBinary.count(_ == '1')\
    \ < bBinary.count(_ == '1')\n        })", "        arr.sortWith((x, y) => {\n\
    \            val xBinary = x.toBinaryString\n            val yBinary = y.toBinaryString\n\
    \            val xOnes = xBinary.count(_ == '1')\n            val yOnes = yBinary.count(_\
    \ == '1')\n            if (xOnes == yOnes) x < y else xOnes < yOnes\n        })",
  "        arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      val sorted = arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ != bOnes) aOnes < bOnes\n            else a < b\n        })\n        sorted",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val onesA = a.toBinaryString.count(_ == '1')\n           \
    \ val onesB = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB)\
    \ a < b else onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            if (aBinary.count(_ == '1') == bBinary.count(_ == '1')) a < b\n \
    \           else aBinary.count(_ == '1') < bBinary.count(_ == '1')\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.filter(_ == '1').length\n            val bOnes =\
    \ bBin.filter(_ == '1').length\n            if (aOnes == bOnes) a < b else aOnes\
    \ < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val aBinary\
    \ = a.toBinaryString\n            val bBinary = b.toBinaryString\n           \
    \ val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val b1\
    \ = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else a1\
    \ < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBin =\
    \ a.toBinaryString\n            val bBin = b.toBinaryString\n            val aOnes\
    \ = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n     \
    \       if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.map(_._1)", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val b1\
    \ = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else a1\
    \ < b1\n        })", "        arr.sortWith((x, y) => {\n            val xones\
    \ = x.toBinaryString.count(_ == '1')\n            val yones = y.toBinaryString.count(_\
    \ == '1')\n            if (xones == yones) x < y else xones < yones\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            if (aBinary.count(_ == '1') == bBinary.count(_\
    \ == '1')) {\n                a < b\n            } else {\n                aBinary.count(_\
    \ == '1') < bBinary.count(_ == '1')\n            }\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })\n        sorted", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBits = a.toBinaryString.count(_ == '1')\n           \
    \ val bBits = b.toBinaryString.count(_ == '1')\n            if (aBits == bBits)\
    \ a < b else aBits < bBits\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val sorted = arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })\n        sorted", "        val\
    \ onesCount = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n\
    \        val onesCountGrouped = onesCount.groupBy(_._2)\n        val sorted =\
    \ onesCountGrouped.map(x => x._2.map(_._1).sorted).toList.flatten\n        sorted",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })\n\
    \        sorted", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.map(_._1)", "        arr.sortWith((a, b)\
    \ => {\n            val aBits = a.toBinaryString.count(_ == '1')\n           \
    \ val bBits = b.toBinaryString.count(_ == '1')\n            if (aBits == bBits)\
    \ a < b else aBits < bBits\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBits = a.toBinaryString.count(_\
    \ == '1')\n            val bBits = b.toBinaryString.count(_ == '1')\n        \
    \    if (aBits == bBits) a < b else aBits < bBits\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val onesA = a.toBinaryString.count(_ == '1')\n        \
    \    val onesB = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB)\
    \ a < b else onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x,\
    \ y) => {\n            val x1 = x.toBinaryString.count(_ == '1')\n           \
    \ val y1 = y.toBinaryString.count(_ == '1')\n            if (x1 == y1) x < y else\
    \ x1 < y1\n        })", "        arr.sortWith((a, b) => {\n            val aBin\
    \ = a.toBinaryString\n            val bBin = b.toBinaryString\n            val\
    \ aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((x, y) => {\n            val xones = x.toBinaryString.count(_\
    \ == '1')\n            val yones = y.toBinaryString.count(_ == '1')\n        \
    \    if (xones == yones) x < y else xones < yones\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.filter(_ ==\
    \ '1').length\n            val bOnes = bBin.filter(_ == '1').length\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        val ones\
    \ = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n       \
    \ val zeros = ones.filter(_._2 == 0).sortBy(_._1)\n        val nonzeros = ones.filter(_._2\
    \ != 0).sortBy(_._1)\n        zeros ::: nonzeros.map(_._1)", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBinary\
    \ = a.toBinaryString\n            val bBinary = b.toBinaryString\n           \
    \ val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val onesA = a.toBinaryString.count(_ == '1')\n            val onesB\
    \ = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB) a < b else\
    \ onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aCount = aBin.count(_ == '1')\n\
    \            val bCount = bBin.count(_ == '1')\n            if (aCount == bCount)\
    \ a < b else aCount < bCount\n        })", "        arr.sortWith((a, b) => {\n\
    \            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val sorted = arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })\n        sorted", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            aBin.count(_ == '1') < bBin.count(_\
    \ == '1') ||\n            (aBin.count(_ == '1') == bBin.count(_ == '1') && a <\
    \ b)\n        })", "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((x, y) => {\n            val xones\
    \ = x.toBinaryString.count(c => c == '1')\n            val yones = y.toBinaryString.count(c\
    \ => c == '1')\n            if (xones == yones) x < y else xones < yones\n   \
    \     })", "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            aBin.count(_ == '1') < bBin.count(_ == '1') || (aBin.count(_ == '1')\
    \ == bBin.count(_ == '1') && a < b)\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((x, y) => {\n            val x1\
    \ = x.toBinaryString.count(_ == '1')\n            val y1 = y.toBinaryString.count(_\
    \ == '1')\n            if (x1 == y1) x < y else x1 < y1\n        })", "      \
    \  val l = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(x => (x._2,\
    \ x._1))\n        l.map(x => x._1)", "        def countOnes(n : Long) : Int =\
    \ {\n            var count = 0\n            var n2 = n\n            while (n2\
    \ > 0) {\n                if (n2 % 2 == 1) count += 1\n                n2 /= 2\n\
    \            }\n            count\n        }\n        arr.sortWith((a, b) => {\n\
    \            val onesA = countOnes(a)\n            val onesB = countOnes(b)\n\
    \            if (onesA == onesB) a < b\n            else onesA < onesB\n     \
    \   })", "        arr.sortWith((x, y) => (x.toBinaryString.count(_ == '1') < y.toBinaryString.count(_\
    \ == '1')) || (x.toBinaryString.count(_ == '1') == y.toBinaryString.count(_ ==\
    \ '1') && x < y))", "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aCount = a.toBinaryString.count(_ == '1')\n          \
    \  val bCount = b.toBinaryString.count(_ == '1')\n            if (aCount == bCount)\
    \ a < b else aCount < bCount\n        })", "        arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2).map(_._1)", "        arr.sortWith((a, b) => {\n     \
    \       val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            if (aBin.count(_ == '1') == bBin.count(_ == '1')) {\n           \
    \     a < b\n            } else {\n                aBin.count(_ == '1') < bBin.count(_\
    \ == '1')\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val onesA = a.toBinaryString.count(_\
    \ == '1')\n            val onesB = b.toBinaryString.count(_ == '1')\n        \
    \    if (onesA == onesB) a < b else onesA < onesB\n        })", "        arr.sortWith((x,\
    \ y) => {\n            val x1 = x.toBinaryString.count(_ == '1')\n           \
    \ val y1 = y.toBinaryString.count(_ == '1')\n            if (x1 == y1) x < y else\
    \ x1 < y1\n        })", "        arr.sortWith((a, b) => {\n            val aBin\
    \ = a.toBinaryString\n            val bBin = b.toBinaryString\n            val\
    \ aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val aBits = a.toBinaryString.count(_\
    \ == '1')\n            val bBits = b.toBinaryString.count(_ == '1')\n        \
    \    if (aBits == bBits) a < b else aBits < bBits\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val x = a.toBinaryString.count(_ == '1')\n            val\
    \ y = b.toBinaryString.count(_ == '1')\n            if (x == y) a < b else x <\
    \ y\n        })", "        val sorted = arr.sortWith((a, b) => {\n           \
    \ val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n     \
    \       val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })\n    \
    \    sorted", "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val onesA = a.toBinaryString.filter(_ == '1').length\n      \
    \      val onesB = b.toBinaryString.filter(_ == '1').length\n            if (onesA\
    \ == onesB) a < b else onesA < onesB\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n        \
    \    val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a <\
    \ b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n     \
    \       val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  val sorted = arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })\n        sorted", "        arr.sortWith((x,\
    \ y) => {\n            val x1 = x.toBinaryString.count(_ == '1')\n           \
    \ val y1 = y.toBinaryString.count(_ == '1')\n            if (x1 == y1) x < y else\
    \ x1 < y1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ {\n                a < b\n            } else {\n                aOnes < bOnes\n\
    \            }\n        })", "        def countOnes(n : Long) : Int = {\n    \
    \        var count = 0\n            var m = n\n            while (m > 0) {\n \
    \               if (m % 2 == 1) count += 1\n                m /= 2\n         \
    \   }\n            count\n        }\n        arr.sortWith((a, b) => {\n      \
    \      val aOnes = countOnes(a)\n            val bOnes = countOnes(b)\n      \
    \      if (aOnes == bOnes) a < b\n            else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((x, y)\
    \ => {\n            val x1 = x.toBinaryString.count(_ == '1')\n            val\
    \ y1 = y.toBinaryString.count(_ == '1')\n            if (x1 == y1) x < y else\
    \ x1 < y1\n        })", "        arr.sortWith((a, b) => {\n            val aBin\
    \ = a.toBinaryString\n            val bBin = b.toBinaryString\n            val\
    \ aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n     \
    \       val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ {\n                a < b\n            } else {\n                aOnes < bOnes\n\
    \            }\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n         \
    \   if (aBin.count(_ == '1') == bBin.count(_ == '1')) a < b else aBin.count(_\
    \ == '1') < bBin.count(_ == '1')\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val onesA = a.toBinaryString.count(_ == '1')\n            val\
    \ onesB = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB) a\
    \ < b else onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a_ones = a.toBinaryString.count(_ == '1')\n          \
    \  val b_ones = b.toBinaryString.count(_ == '1')\n            if (a_ones == b_ones)\
    \ a < b else a_ones < b_ones\n        })", "        arr.sortWith((a, b) => {\n\
    \            val aBits = a.toBinaryString.count(_ == '1')\n            val bBits\
    \ = b.toBinaryString.count(_ == '1')\n            if (aBits == bBits) a < b else\
    \ aBits < bBits\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n   \
    \         val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })"]
stop_tokens:
- "\n    }\n"
