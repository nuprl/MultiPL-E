name: HumanEval_147_get_max_triples
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i\
  \ * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where\
  \ i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example\
  \ :\n    // Input: n = 5\n    // Output: 1\n    // Explanation: \n    // a = [1,\
  \ 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    def getMaxTriples(n\
  \ : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
  \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
  \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
completions: ["        val a = new Array[Long](n.toInt)\n        for (i <- 0 until\
    \ n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count", "        val a = new Array[Long](n.toInt)\n        for (i <-\
    \ 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n        for (i\
    \ <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n\
    \                for (k <- j + 1 until n.toInt) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        var count = 0L\n        for (i <- 1L to n) {\n\
    \            for (j <- i + 1L to n) {\n                for (k <- j + 1L to n)\
    \ {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0) {\n                        count += 1\n                    }\n     \
    \           }\n            }\n        }\n        count", "        val a = new\
    \ Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) = i * i - i +\
    \ 1\n        var count = 0L\n        for (i <- 0 until n.toInt - 2) {\n      \
    \      for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j + 1 until\
    \ n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count", "        val\
    \ a = Array.fill(n.toInt)(0)\n        for (i <- 0 until n.toInt) a(i) = i * i\
    \ - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt - 2) {\n\
    \            for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j\
    \ + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0)\
    \ count += 1\n                }\n            }\n        }\n        count", " \
    \       // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3\
    \ * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n        // = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j\
    \ + k * k - i - j - k) + 3\n        // = 3 * (i * i + j * j + k * k - i - j -\
    \ k + 1)\n        // = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1) + 3\n \
    \       // = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1) - 3\n       \
    \ // = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1)\n        // = 3\
    \ * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1 + 1) - 3\n        // =\
    \ 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1)\n        //\
    \ = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1 + 1) - 3\n\
    \        // = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1 +\
    \ 1 - 1)\n        // = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1\
    \ + 1 - 1 + 1 - 1 + 1) - 3\n        // = 3 * (i * i + j * j + k * k - i - j -\
    \ k + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1)\n        // = 3 * (i * i + j * j\
    \ + k", "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count", "        val a = new Array[Long](n.toInt)\n        for (i <-\
    \ 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n        for (i\
    \ <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n\
    \                for (k <- j + 1 until n.toInt) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        val a = Array.fill(n.toInt)(0)\n        for (i\
    \ <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0\n        for\
    \ (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1)\
    \ {\n                for (k <- j + 1 until n.toInt) {\n                    if\
    \ ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n\
    \        }\n        count", "        val a = new Array[Long](n.toInt)\n      \
    \  for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n \
    \       for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n       \
    \     }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count"]
stop_tokens:
- "\n    }\n"
