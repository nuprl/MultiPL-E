name: HumanEval_34_unique
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique elements in a list\n    // >>> unique([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n    def unique(l : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
completions: ['        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  "        val s = l.toSet\n        s.toList.sorted", '        l.toSet.toList.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.toSet.toList.sorted',
  "        val s = l.toSet\n        s.toList.sorted", '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.toSet.toList.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.toSet.toList.sorted',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', "        val s = SortedSet[Long]()\n\
    \        for (x <- l) s += x\n        s.toList", '        l.distinct.sorted',
  '        l.foldLeft(List[Long]())((acc, x) => if (acc.contains(x)) acc else x ::
    acc).sorted', '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.toSet.toList.sorted', '        l.toSet.toList.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', "        var m = Map[Long, Boolean]()\n        for\
    \ (x <- l) m(x) = true\n        return m.keys.toList.sorted", '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.toSet.toList.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.toSet.toList.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.toSet.toList.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', "        var s = SortedSet[Long]()\n\
    \        for (i <- l) s += i\n        s.toList", '        l.distinct.sorted',
  '        l.foldLeft(List[Long]())((r, c) => if (r.contains(c)) r else r :+ c).sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  "        val s = SortedSet[Long]()\n        for (i <- l) s += i\n        s.toList",
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', "        val set = new\
    \ HashSet[Long]\n        for (x <- l) set += x\n        set.toList.sorted", '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.foldLeft(List[Long]())((r,
    c) => if (r.contains(c)) r else r :+ c).sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.toSet.toList.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.toSet.toList.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', "        var m = Map[Long,\
    \ Boolean]()\n        for (x <- l) {\n            m(x) = true\n        }\n   \
    \     return m.keys.toList.sorted", '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.toSet.toList.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.toSet.toList.sorted', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.toSet.toList.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted']
stop_tokens:
- "\n    }\n"
