name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    //\
  \ for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n   \
  \ def StrongestExtension(class_name : String, extensions : List[String]) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        var strongest = extensions(0)\n        var strength = 0\n \
    \       for (ext <- extensions) {\n            val cap = ext.count(_.isUpper)\n\
    \            val sm = ext.count(_.isLower)\n            val s = cap - sm\n   \
    \         if (s > strength) {\n                strength = s\n                strongest\
    \ = ext\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        var\
    \ max_strength = 0.0\n        var max_strength_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_strength_extension = extension\n\
    \            }\n        }\n        return class_name + \".\" + max_strength_extension",
  "        var max_strength = -1.0\n        var max_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else strength -= 1\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength\n                max_extension =\
    \ extension\n            }\n        }\n        return class_name + \".\" + max_extension",
  "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var maxStrength = -1.0\n        var maxExtension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > maxStrength) {\n           \
    \     maxStrength = strength\n                maxExtension = extension\n     \
    \       }\n        }\n        class_name + \".\" + maxExtension", "        var\
    \ strongest_extension = \"\"\n        var strongest_strength = -1.0\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else if (c.isLower) strength -= 1\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength\n   \
    \             strongest_extension = extension\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension", "        val strengths\
    \ = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var max_strength = 0.0\n        var max_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_extension = extension\n  \
    \          }\n        }\n        return class_name + \".\" + max_extension", " \
    \       var strongest = extensions(0)\n        var strongest_strength = 0\n  \
    \      for (extension <- extensions) {\n            var strength = 0\n       \
    \     for (c <- extension) {\n                if (c.isUpper) strength += 1\n \
    \               else strength -= 1\n            }\n            if (strength >\
    \ strongest_strength) {\n                strongest = extension\n             \
    \   strongest_strength = strength\n            }\n        }\n        return class_name\
    \ + \".\" + strongest", "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper)\
    \ - ext.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n  \
    \      class_name + \".\" + strongest._1", "        var strongest = 0.0\n    \
    \    var strongest_extension = \"\"\n        for (extension <- extensions) {\n\
    \            var cap = 0\n            var sm = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            var strength = cap - sm\n            if (strength >\
    \ strongest) {\n                strongest = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension",
  "        var strongest_extension = extensions(0)\n        var strongest_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else strength -= 1\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength\n   \
    \             strongest_extension = extension\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension", "        var strongest\
    \ = extensions(0)\n        var strongest_strength = 0\n        for (extension\
    \ <- extensions) {\n            var strength = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest", " \
    \       var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val s = cap - sm\n            if (s >\
    \ strength) {\n                strength = s\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        var\
    \ strongest = extensions(0)\n        for (ext <- extensions) {\n            if\
    \ (ext.count(_.isUpper) - ext.count(_.isLower) > strongest.count(_.isUpper) -\
    \ strongest.count(_.isLower)) strongest = ext\n        }\n        return class_name\
    \ + \".\" + strongest", "        var strongest = extensions(0)\n        var strength\
    \ = 0\n        for (ext <- extensions) {\n            var cap = 0\n          \
    \  var sm = 0\n            for (c <- ext) {\n                if (c.isUpper) cap\
    \ += 1\n                else sm += 1\n            }\n            if (cap - sm\
    \ > strength) {\n                strength = cap - sm\n                strongest\
    \ = ext\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var max_strength = 0.0\n        var max_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_extension = extension\n  \
    \          }\n        }\n        return class_name + \".\" + max_extension", " \
    \       val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest_extension = extensions(0)\n        var strongest_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1.0\n                else if (c.isLower) strength -= 1.0\n            }\n  \
    \          if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  var strongest = extensions(0)\n        var strength = 0\n        for (ext <-\
    \ extensions) {\n            val cap = ext.count(_.isUpper)\n            val sm\
    \ = ext.count(_.isLower)\n            val str = cap - sm\n            if (str\
    \ > strength) {\n                strength = str\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        var\
    \ strongest = extensions(0)\n        var strongest_strength = 0\n        for (extension\
    \ <- extensions) {\n            var strength = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest", " \
    \       var strongest = (0.0, \"\")\n        for (ext <- extensions) {\n     \
    \       var cap = 0\n            var sm = 0\n            for (c <- ext) {\n  \
    \              if (c.isUpper) cap += 1\n                else sm += 1\n       \
    \     }\n            if (cap - sm > strongest._1) strongest = (cap - sm, ext)\n\
    \        }\n        class_name + \".\" + strongest._2", "        var max_strength\
    \ = -1.0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_extension = extension\n            }\n     \
    \   }\n        return class_name + \".\" + max_extension", "        var strongest\
    \ = extensions(0)\n        var strength = 0\n        for (ext <- extensions) {\n\
    \            val cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n\
    \            val new_strength = cap - sm\n            if (new_strength > strength)\
    \ {\n                strength = new_strength\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val max_strength = strengths.maxBy(_._2)._2\n        val strongest_extensions\
    \ = strengths.filter(_._2 == max_strength).map(_._1)\n        class_name + \"\
    .\" + strongest_extensions.head", "        var max_strength = 0.0\n        var\
    \ max_strength_extension = \"\"\n        for (extension <- extensions) {\n   \
    \         var strength = 0.0\n            for (c <- extension) {\n           \
    \     if (c.isUpper) strength += 1\n                else strength -= 1\n     \
    \       }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_strength_extension = extension\n           \
    \ }\n        }\n        return class_name + \".\" + max_strength_extension", " \
    \       val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest_extension = extensions(0)\n        var strongest_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else if (c.isLower) strength -= 1\n            }\n      \
    \      if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  var strongest = extensions(0)\n        var strength = 0\n        for (ext <-\
    \ extensions) {\n            val cap = ext.count(_.isUpper)\n            val sm\
    \ = ext.count(_.isLower)\n            val cur_strength = cap - sm\n          \
    \  if (cur_strength > strength) {\n                strength = cur_strength\n \
    \               strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest", "        val strengths = extensions.map(x => (x, x.count(_.isUpper)\
    \ - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n    \
    \    class_name + \".\" + strongest._1", "        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n    \
    \        val curr_strength = cap - sm\n            if (curr_strength > strength)\
    \ {\n                strength = curr_strength\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        var\
    \ strongest_extension = extensions(0)\n        var strongest_extension_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else strength -= 1\n            }\n            if (strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val str = cap - sm\n            if (str\
    \ > strength) {\n                strength = str\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val max_strength = strengths.map(_._2).max\n        val strongest_extensions\
    \ = strengths.filter(_._2 == max_strength).map(_._1)\n        class_name + \"\
    .\" + strongest_extensions.min", "        val strengths = extensions.map(ext =>\
    \ (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val max_strength\
    \ = strengths.maxBy(_._2)._2\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.head",
  "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val max_strength = strengths.map(_._2).max\n        val strongest_extensions\
    \ = strengths.filter(_._2 == max_strength).map(_._1)\n        class_name + \"\
    .\" + strongest_extensions.min", "        var strongest = extensions(0)\n    \
    \    var strength = 0\n        for (ext <- extensions) {\n            var cap\
    \ = 0\n            var sm = 0\n            for (c <- ext) {\n                if\
    \ (c.isUpper) cap += 1\n                else sm += 1\n            }\n        \
    \    var s = cap - sm\n            if (s > strength) {\n                strength\
    \ = s\n                strongest = ext\n            }\n        }\n        return\
    \ class_name + \".\" + strongest", "        var strongest_extension = \"\"\n \
    \       var strongest_extension_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (letter <- extension) {\n\
    \                if (letter.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength\n               \
    \ strongest_extension = extension\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension", "        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1", "     \
    \   var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val s = cap - sm\n            if (s >\
    \ strength) {\n                strength = s\n                strongest = ext\n\
    \            }\n        }\n        return class_name + \".\" + strongest", " \
    \       var max_strength = -1.0\n        var max_strength_extension = \"\"\n \
    \       for (extension <- extensions) {\n            var strength = 0.0\n    \
    \        for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength\n                max_strength_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + max_strength_extension",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var max_strength = -1.0\n        var max_strength_extension = \"\"\n  \
    \      for (extension <- extensions) {\n            var strength = 0.0\n     \
    \       for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength\n                max_strength_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + max_strength_extension",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var max_strength = -1.0\n        var max_strength_extension = \"\"\n  \
    \      for (extension <- extensions) {\n            var strength = 0.0\n     \
    \       for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength\n                max_strength_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + max_strength_extension",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val s = cap - sm\n            if (s >\
    \ strength) {\n                strength = s\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        var\
    \ strongest = extensions(0)\n        var strength = 0\n        for (ext <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- ext)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            if (cap - sm > strength) {\n                strength\
    \ = cap - sm\n                strongest = ext\n            }\n        }\n    \
    \    return class_name + \".\" + strongest", "        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n    \
    \        val s = cap - sm\n            if (s > strength) {\n                strength\
    \ = s\n                strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest", "        var strongest = extensions(0)\n        var strength\
    \ = 0\n        for (ext <- extensions) {\n            val cap = ext.count(_.isUpper)\n\
    \            val sm = ext.count(_.isLower)\n            val new_strength = cap\
    \ - sm\n            if (new_strength > strength) {\n                strength =\
    \ new_strength\n                strongest = ext\n            }\n        }\n  \
    \      return class_name + \".\" + strongest", "        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest", "        var strongest_extension = extensions(0)\n   \
    \     var strongest_strength = 0.0\n        for (extension <- extensions) {\n\
    \            var strength = 0.0\n            for (c <- extension) {\n        \
    \        if (c.isUpper) strength += 1\n                else if (c.isLower) strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(c => c.isUpper)\n        \
    \    val sm = ext.count(c => c.isLower)\n            val str = cap - sm\n    \
    \        if (str > strength) {\n                strength = str\n             \
    \   strongest = ext\n            }\n        }\n        return class_name + \"\
    .\" + strongest", "        var strongest = extensions(0)\n        var strongest_strength\
    \ = 0\n        for (extension <- extensions) {\n            var strength = 0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else strength -= 1\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest = extension\n           \
    \     strongest_strength = strength\n            }\n        }\n        return\
    \ class_name + \".\" + strongest", "        var strongest_extension = extensions(0)\n\
    \        var strongest_strength = 0.0\n        for (extension <- extensions) {\n\
    \            var strength = 0.0\n            for (c <- extension) {\n        \
    \        if (c.isUpper) strength += 1\n                else if (c.isLower) strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val str = cap - sm\n            if (str\
    \ > strength) {\n                strength = str\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        var\
    \ max_strength = 0.0\n        var max_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_extension = extension\n  \
    \          }\n        }\n        return class_name + \".\" + max_extension", " \
    \       var strongest_extension = extensions(0)\n        var strongest_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else if (c.isLower) strength -= 1\n            }\n      \
    \      if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  var strongest = extensions(0)\n        var strength = 0\n        for (ext <-\
    \ extensions) {\n            val cap = ext.count(_.isUpper)\n            val sm\
    \ = ext.count(_.isLower)\n            val st = cap - sm\n            if (st >\
    \ strength) {\n                strength = st\n                strongest = ext\n\
    \            }\n        }\n        return class_name + \".\" + strongest", " \
    \       var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        var\
    \ strongest_extension = \"\"\n        var strongest_extension_strength = 0.0\n\
    \        for (extension <- extensions) {\n            var strength = 0.0\n   \
    \         for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else if (c.isLower) strength -= 1\n            }\n          \
    \  if (strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        class_name + \".\" + strongest_extension", "        var strongest\
    \ = extensions(0)\n        var strength = 0\n        for (ext <- extensions) {\n\
    \            val cap = ext.count(c => c.isUpper)\n            val sm = ext.count(c\
    \ => c.isLower)\n            val s = cap - sm\n            if (s > strength) {\n\
    \                strength = s\n                strongest = ext\n            }\n\
    \        }\n        return class_name + \".\" + strongest", "        var strongest\
    \ = extensions(0)\n        var max_strength = 0.0\n        for (ext <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- ext) {\n          \
    \      if (c.isUpper) strength += 1\n                else strength -= 1\n    \
    \        }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                strongest = ext\n            }\n        }\n    \
    \    class_name + \".\" + strongest", "        val strengths = extensions.map(ext\
    \ => (ext, ext.filter(c => c.isUpper).length - ext.filter(c => c.isLower).length))\n\
    \        val strongest = strengths.maxBy(x => x._2)\n        class_name + \".\"\
    \ + strongest._1", "        var strongest = 0.0\n        var strongest_extension\
    \ = \"\"\n        for (extension <- extensions) {\n            var cap = 0\n \
    \           var sm = 0\n            for (c <- extension) {\n                if\
    \ (c.isUpper) cap += 1\n                else sm += 1\n            }\n        \
    \    val strength = cap - sm\n            if (strength > strongest) {\n      \
    \          strongest = strength\n                strongest_extension = extension\n\
    \            }\n        }\n        class_name + \".\" + strongest_extension",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val s = cap - sm\n            if (s >\
    \ strength) {\n                strength = s\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val st = cap - sm\n            if (st\
    \ > strength) {\n                strength = st\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        var\
    \ max_strength = -1.0\n        var max_strength_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else strength -= 1\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength\n                max_strength_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + max_strength_extension",
  "        var max_strength = -1.0\n        var max_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else strength -= 1\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength\n                max_extension =\
    \ extension\n            }\n        }\n        return class_name + \".\" + max_extension",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var max_strength = 0.0\n        var max_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_extension = extension\n  \
    \          }\n        }\n        return class_name + \".\" + max_extension", " \
    \       var strongest = extensions(0)\n        var strongest_strength = 0\n  \
    \      for (extension <- extensions) {\n            var strength = 0\n       \
    \     for (c <- extension) {\n                if (c.isUpper) strength += 1\n \
    \               else strength -= 1\n            }\n            if (strength >\
    \ strongest_strength) {\n                strongest = extension\n             \
    \   strongest_strength = strength\n            }\n        }\n        class_name\
    \ + \".\" + strongest", "        var strongest_extension = \"\"\n        var strongest_extension_strength\
    \ = -1.0\n        for (extension <- extensions) {\n            var strength =\
    \ 0.0\n            for (c <- extension) {\n                if (c.isUpper) strength\
    \ += 1\n                else if (c.isLower) strength -= 1\n            }\n   \
    \         if (strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  var strongest = extensions(0)\n        var strength = 0\n        for (ext <-\
    \ extensions) {\n            val cap = ext.count(c => c.isUpper)\n           \
    \ val sm = ext.count(c => c.isLower)\n            val s = cap - sm\n         \
    \   if (s > strength) {\n                strength = s\n                strongest\
    \ = ext\n            }\n        }\n        return class_name + \".\" + strongest",
  "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val max_strength = strengths.map(_._2).max\n        val max_strength_extensions\
    \ = strengths.filter(_._2 == max_strength).map(_._1)\n        class_name + \"\
    .\" + max_strength_extensions.head", "        var strongest_extension = extensions(0)\n\
    \        var strongest_strength = 0.0\n        for (extension <- extensions) {\n\
    \            var strength = 0.0\n            for (c <- extension) {\n        \
    \        if (c.isUpper) strength += 1\n                else strength -= 1\n  \
    \          }\n            if (strength > strongest_strength) {\n             \
    \   strongest_strength = strength\n                strongest_extension = extension\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val cur_strength = cap - sm\n       \
    \     if (cur_strength > strength) {\n                strength = cur_strength\n\
    \                strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest", "        val strengths = extensions.map(x => (x, x.count(_.isUpper)\
    \ - x.count(_.isLower)))\n        val max_strength = strengths.map(_._2).max\n\
    \        val strongest_extensions = strengths.filter(_._2 == max_strength).map(_._1)\n\
    \        class_name + \".\" + strongest_extensions.head", "        val strengths\
    \ = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n      \
    \  val maxStrength = strengths.maxBy(_._2)._2\n        class_name + \".\" + strengths.filter(_._2\
    \ == maxStrength).minBy(_._1)._1", "        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1", "     \
    \   val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        var\
    \ strongest = extensions(0)\n        var strength = 0\n        for (ext <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- ext)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            if (cap - sm > strength) {\n                strength\
    \ = cap - sm\n                strongest = ext\n            }\n        }\n    \
    \    return class_name + \".\" + strongest", "        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1", "        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else strength -= 1\n    \
    \        }\n            if (strength > strongest_strength) {\n               \
    \ strongest = extension\n                strongest_strength = strength\n     \
    \       }\n        }\n        return class_name + \".\" + strongest", "      \
    \  var strongest = extensions(0)\n        var strongest_strength = 0\n       \
    \ for (extension <- extensions) {\n            var strength = 0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val max_strength = strengths.map(_._2).max\n        val max_strength_extensions\
    \ = strengths.filter(_._2 == max_strength).map(_._1)\n        class_name + \"\
    .\" + max_strength_extensions.head", "        var strongest = \"\"\n        var\
    \ strength = 0.0\n        for (ext <- extensions) {\n            var cap = 0\n\
    \            var sm = 0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            val cur_strength\
    \ = cap - sm\n            if (cur_strength > strength) {\n                strength\
    \ = cur_strength\n                strongest = ext\n            }\n        }\n\
    \        class_name + \".\" + strongest", "        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n    \
    \        val str = cap - sm\n            if (str > strength) {\n             \
    \   strength = str\n                strongest = ext\n            }\n        }\n\
    \        return class_name + \".\" + strongest", "        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val max_strength =\
    \ strengths.map(_._2).max\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        return class_name + \".\" + strongest_extensions.head",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val s = cap - sm\n            if (s >\
    \ strength) {\n                strength = s\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val max_strength = strengths.map(_._2).max\n        val strongest_extensions\
    \ = strengths.filter(_._2 == max_strength).map(_._1)\n        class_name + \"\
    .\" + strongest_extensions.head", "        var strongest = extensions(0)\n   \
    \     var strongest_strength = 0\n        for (extension <- extensions) {\n  \
    \          var strength = 0\n            for (c <- extension) {\n            \
    \    if (c.isUpper) strength += 1\n                else strength -= 1\n      \
    \      }\n            if (strength > strongest_strength) {\n                strongest\
    \ = extension\n                strongest_strength = strength\n            }\n\
    \        }\n        return class_name + \".\" + strongest", "        var max_strength\
    \ = 0.0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_extension = extension\n            }\n     \
    \   }\n        return class_name + \".\" + max_extension", "        var max_strength\
    \ = -1.0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_extension = extension\n            }\n     \
    \   }\n        return class_name + \".\" + max_extension", "        var strongest\
    \ = extensions(0)\n        var strength = 0\n        for (ext <- extensions) {\n\
    \            var cap = 0\n            var sm = 0\n            for (c <- ext) {\n\
    \                if (c.isUpper) cap += 1\n                else sm += 1\n     \
    \       }\n            if (cap - sm > strength) {\n                strength =\
    \ cap - sm\n                strongest = ext\n            }\n        }\n      \
    \  return class_name + \".\" + strongest", "        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ s = ext.filter(_.isUpper).length - ext.filter(_.isLower).length\n          \
    \  if (s > strength) {\n                strength = s\n                strongest\
    \ = ext\n            }\n        }\n        class_name + \".\" + strongest", " \
    \       var max_strength = -1.0\n        var max_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1.0\n       \
    \         else strength -= 1.0\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength\n                max_extension =\
    \ extension\n            }\n        }\n        class_name + \".\" + max_extension",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var strongest = 0.0\n        var strongest_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var cap = 0\n            var sm = 0\n\
    \            for (char <- extension) {\n                if (char.isUpper) cap\
    \ += 1\n                else sm += 1\n            }\n            var strength\
    \ = cap - sm\n            if (strength > strongest) {\n                strongest\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        class_name + \".\" + strongest_extension", "        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > strongest_strength) {\n           \
    \     strongest_strength = strength\n                strongest_extension = extension\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var strongest_extension = \"\"\n        var strongest_strength = 0.0\n\
    \        for (extension <- extensions) {\n            var strength = 0.0\n   \
    \         for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ strongest_strength) {\n                strongest_strength = strength\n     \
    \           strongest_extension = extension\n            }\n        }\n      \
    \  class_name + \".\" + strongest_extension", "        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension",
  "        var max_strength = -1.0\n        var max_strength_extension = \"\"\n  \
    \      for (extension <- extensions) {\n            var strength = 0.0\n     \
    \       for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength\n                max_strength_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + max_strength_extension",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var strongest = 0.0\n        var strongest_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var cap = 0\n            var sm = 0\n\
    \            for (c <- extension) {\n                if (c.isUpper) cap += 1\n\
    \                else sm += 1\n            }\n            var strength = cap -\
    \ sm\n            if (strength > strongest) {\n                strongest = strength\n\
    \                strongest_extension = extension\n            }\n        }\n \
    \       return class_name + \".\" + strongest_extension", "        val strengths\
    \ = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n      \
    \  val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = (0.0, \"\")\n        for (ext <- extensions) {\n      \
    \      var cap = 0\n            var sm = 0\n            for (c <- ext) {\n   \
    \             if (c.isUpper) cap += 1\n                else sm += 1\n        \
    \    }\n            if (cap - sm > strongest._1) strongest = (cap - sm, ext)\n\
    \        }\n        class_name + \".\" + strongest._2", "        val strengths\
    \ = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n      \
    \  val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(c => c.isUpper)\n        \
    \    val sm = ext.count(c => c.isLower)\n            val s = cap - sm\n      \
    \      if (s > strength) {\n                strength = s\n                strongest\
    \ = ext\n            }\n        }\n        class_name + \".\" + strongest", " \
    \       var strongest = 0.0\n        var strongest_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (letter <- extension) {\n                if (letter.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ strongest) {\n                strongest = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val st = cap - sm\n            if (st\
    \ > strength) {\n                strength = st\n                strongest = ext\n\
    \            }\n        }\n        return class_name + \".\" + strongest", " \
    \       val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest_extension = extensions(0)\n        var strongest_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else if (c.isLower) strength -= 1\n            }\n      \
    \      if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  var strongest_extension = extensions(0)\n        var strongest_strength = 0\n\
    \        for (extension <- extensions) {\n            var strength = 0\n     \
    \       for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else if (c.isLower) strength -= 1\n            }\n          \
    \  if (strength > strongest_strength) {\n                strongest_strength =\
    \ strength\n                strongest_extension = extension\n            }\n \
    \       }\n        return class_name + \".\" + strongest_extension", "       \
    \ var strongest_extension = \"\"\n        var strongest_strength = -1\n      \
    \  for (extension <- extensions) {\n            var strength = 0\n           \
    \ for (c <- extension) {\n                if (c.isUpper) strength += 1\n     \
    \           else if (c.isLower) strength -= 1\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength\n   \
    \             strongest_extension = extension\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension", "        val strengths\
    \ = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n      \
    \  val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var max_strength = 0.0\n        var max_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_extension = extension\n  \
    \          }\n        }\n        return class_name + \".\" + max_extension", " \
    \       var max = 0.0\n        var max_ext = \"\"\n        for (ext <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- ext)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            var strength = cap - sm\n            if (strength >\
    \ max) {\n                max = strength\n                max_ext = ext\n    \
    \        }\n        }\n        return class_name + \".\" + max_ext", "       \
    \ val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => x.count(c => c.isUpper) - x.count(c\
    \ => c.isLower))\n        val max_strength = strengths.max\n        val max_index\
    \ = strengths.indexOf(max_strength)\n        return class_name + \".\" + extensions(max_index)",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.count(_.isUpper)\n            val\
    \ sm = ext.count(_.isLower)\n            val str = cap - sm\n            if (str\
    \ > strength) {\n                strength = str\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = (0.0, \"\")\n        for (ext <- extensions) {\n      \
    \      var cap = 0\n            var sm = 0\n            for (c <- ext) {\n   \
    \             if (c.isUpper) cap += 1\n                else sm += 1\n        \
    \    }\n            if (cap - sm > strongest._1) strongest = (cap - sm, ext)\n\
    \        }\n        return class_name + \".\" + strongest._2", "        var strongest\
    \ = extensions(0)\n        var strongest_strength = 0\n        for (extension\
    \ <- extensions) {\n            var strength = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = 0.0\n        var strongest_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else strength -= 1\n            }\n            if (strength > strongest)\
    \ {\n                strongest = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        var\
    \ strongest = extensions(0)\n        var strength = 0\n        for (ext <- extensions)\
    \ {\n            val cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n\
    \            val s = cap - sm\n            if (s > strength) {\n             \
    \   strength = s\n                strongest = ext\n            }\n        }\n\
    \        class_name + \".\" + strongest", "        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest", "        val strengths = extensions.map(x => (x, x.count(_.isUpper)\
    \ - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n    \
    \    class_name + \".\" + strongest._1", "        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else strength -= 1\n    \
    \        }\n            if (strength > strongest_strength) {\n               \
    \ strongest = extension\n                strongest_strength = strength\n     \
    \       }\n        }\n        return class_name + \".\" + strongest", "      \
    \  val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val max_strength = strengths.map(_._2).max\n        val max_strength_extensions\
    \ = strengths.filter(_._2 == max_strength).map(_._1)\n        class_name + \"\
    .\" + max_strength_extensions.head", "        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else strength -= 1\n    \
    \        }\n            if (strength > strongest_strength) {\n               \
    \ strongest = extension\n                strongest_strength = strength\n     \
    \       }\n        }\n        return class_name + \".\" + strongest", "      \
    \  var strongest = extensions(0)\n        var strongest_strength = 0\n       \
    \ for (extension <- extensions) {\n            var strength = 0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var max_strength = 0.0\n        var max_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_extension = extension\n  \
    \          }\n        }\n        return class_name + \".\" + max_extension", " \
    \       var max_strength = -1.0\n        var max_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else strength -= 1\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength\n                max_extension =\
    \ extension\n            }\n        }\n        return class_name + \".\" + max_extension",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest_extension = extensions(0)\n        var strongest_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else if (c.isLower) strength -= 1\n            }\n      \
    \      if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        class_name + \".\" + strongest_extension", "        var strongest\
    \ = extensions(0)\n        var strength = 0\n        for (ext <- extensions) {\n\
    \            var cap = 0\n            var sm = 0\n            for (c <- ext) {\n\
    \                if (c.isUpper) cap += 1\n                else sm += 1\n     \
    \       }\n            if (cap - sm > strength) {\n                strength =\
    \ cap - sm\n                strongest = ext\n            }\n        }\n      \
    \  return class_name + \".\" + strongest", "        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = extension.count(c => c.isUpper) - extension.count(c\
    \ => c.isLower)\n            if (strength > strongest_strength) {\n          \
    \      strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest", " \
    \       var strongest = (\"\", 0.0)\n        for (ext <- extensions) {\n     \
    \       var cap = 0\n            var sm = 0\n            for (c <- ext) {\n  \
    \              if (c.isUpper) cap += 1\n                else sm += 1\n       \
    \     }\n            var strength = cap - sm\n            if (strength > strongest._2)\
    \ strongest = (ext, strength)\n        }\n        return class_name + \".\" +\
    \ strongest._1", "        val strengths = extensions.map(x => (x, x.count(_.isUpper)\
    \ - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n    \
    \    class_name + \".\" + strongest._1", "        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          var s = cap - sm\n            if (s > strength) {\n               \
    \ strength = s\n                strongest = ext\n            }\n        }\n  \
    \      return class_name + \".\" + strongest", "        val strengths = extensions.map(x\
    \ => x.count(y => y.isUpper) - x.count(y => y.isLower))\n        val max_strength\
    \ = strengths.max\n        val max_strength_index = strengths.indexOf(max_strength)\n\
    \        class_name + \".\" + extensions(max_strength_index)", "        var strongest\
    \ = extensions(0)\n        var strength = 0\n        for (ext <- extensions) {\n\
    \            var cap = 0\n            var sm = 0\n            for (c <- ext) {\n\
    \                if (c.isUpper) cap += 1\n                else sm += 1\n     \
    \       }\n            if (cap - sm > strength) {\n                strength =\
    \ cap - sm\n                strongest = ext\n            }\n        }\n      \
    \  return class_name + \".\" + strongest", "        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val maxStrength =\
    \ strengths.maxBy(_._2)._2\n        val strongestExtensions = strengths.filter(_._2\
    \ == maxStrength).map(_._1)\n        class_name + \".\" + strongestExtensions.min",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        var\
    \ strongest = extensions(0)\n        var strength = 0\n        for (ext <- extensions)\
    \ {\n            val cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n\
    \            val s = cap - sm\n            if (s > strength) {\n             \
    \   strength = s\n                strongest = ext\n            }\n        }\n\
    \        class_name + \".\" + strongest", "        var strongest = extensions(0)\n\
    \        var max = 0\n        for (ext <- extensions) {\n            var cap =\
    \ 0\n            var sm = 0\n            for (c <- ext) {\n                if\
    \ (c.isUpper) cap += 1\n                else sm += 1\n            }\n        \
    \    if (cap - sm > max) {\n                max = cap - sm\n                strongest\
    \ = ext\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        val\
    \ strengths = extensions.map(ext => {\n            val cap = ext.filter(c => c.isUpper).length\n\
    \            val sm = ext.filter(c => c.isLower).length\n            (ext, cap\
    \ - sm)\n        })\n        val strongest = strengths.maxBy(x => x._2)\n    \
    \    class_name + \".\" + strongest._1", "        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val max_strength =\
    \ strengths.maxBy(_._2)._2\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.head",
  "        var strongest = \"\"\n        var strength = 0.0\n        for (ext <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- ext)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            var s = cap - sm\n            if (s > strength) {\n\
    \                strength = s\n                strongest = ext\n            }\n\
    \        }\n        return class_name + \".\" + strongest", "        val strengths\
    \ = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest_extension = \"\"\n        var strongest_extension_strength\
    \ = -1\n        for (extension <- extensions) {\n            var strength = 0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else if (c.isLower) strength -= 1\n            }\n      \
    \      if (strength > strongest_extension_strength) {\n                strongest_extension\
    \ = extension\n                strongest_extension_strength = strength\n     \
    \       }\n        }\n        return class_name + \".\" + strongest_extension",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            val cap = ext.filter(c => c.isUpper).length\n\
    \            val sm = ext.filter(c => c.isLower).length\n            val s = cap\
    \ - sm\n            if (s > strength) {\n                strength = s\n      \
    \          strongest = ext\n            }\n        }\n        class_name + \"\
    .\" + strongest", "        var strongest = extensions(0)\n        var strongest_strength\
    \ = 0\n        for (extension <- extensions) {\n            var strength = 0\n\
    \            for (c <- extension) if (c.isUpper) strength += 1 else strength -=\
    \ 1\n            if (strength > strongest_strength) {\n                strongest\
    \ = extension\n                strongest_strength = strength\n            }\n\
    \        }\n        return class_name + \".\" + strongest", "        var strongest\
    \ = extensions(0)\n        var strongest_strength = 0\n        for (extension\
    \ <- extensions) {\n            var strength = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest", " \
    \       val strengths = extensions.map(ext => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension\n                strongest_strength\
    \ = strength\n            }\n        }\n        class_name + \".\" + strongest",
  "        var strongest = extensions(0)\n        var strength = 0\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            if (cap - sm > strength) {\n    \
    \            strength = cap - sm\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest", "        var\
    \ strongest = 0.0\n        var strongest_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest) {\n             \
    \   strongest = strength\n                strongest_extension = extension\n  \
    \          }\n        }\n        class_name + \".\" + strongest_extension", " \
    \       var strongest = (0.0, \"\")\n        for (ext <- extensions) {\n     \
    \       var strength = 0.0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ strength += 1\n                else if (c.isLower) strength -= 1\n         \
    \   }\n            if (strength > strongest._1) strongest = (strength, ext)\n\
    \        }\n        return class_name + \".\" + strongest._2", "        val strengths\
    \ = extensions.map(x => x.count(y => y.isUpper) - x.count(y => y.isLower))\n \
    \       val max_strength = strengths.max\n        val max_index = strengths.indexOf(max_strength)\n\
    \        class_name + \".\" + extensions(max_index)", "        var strongest =\
    \ 0.0\n        var strongest_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > strongest) {\n                strongest\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  var strongest = extensions(0)\n        var strength = 0\n        for (ext <-\
    \ extensions) {\n            val cap = ext.count(_.isUpper)\n            val sm\
    \ = ext.count(_.isLower)\n            val s = cap - sm\n            if (s > strength)\
    \ {\n                strength = s\n                strongest = ext\n         \
    \   }\n        }\n        class_name + \".\" + strongest", "        var strongest\
    \ = extensions(0)\n        var strongest_strength = 0\n        for (extension\
    \ <- extensions) {\n            var strength = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest", " \
    \       var strongest = extensions(0)\n        var strongestStrength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else strength -= 1\n            }\n            if (strength > strongestStrength)\
    \ {\n                strongestStrength = strength\n                strongest =\
    \ extension\n            }\n        }\n        return class_name + \".\" + strongest",
  "        var max_strength = 0.0\n        var max_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_extension = extension\n  \
    \          }\n        }\n        class_name + \".\" + max_extension", "      \
    \  var strongest = extensions(0)\n        var strength = 0\n        for (ext <-\
    \ extensions) {\n            var cap = 0\n            var sm = 0\n           \
    \ for (c <- ext) {\n                if (c.isUpper) cap += 1\n                else\
    \ sm += 1\n            }\n            if (cap - sm > strength) {\n           \
    \     strength = cap - sm\n                strongest = ext\n            }\n  \
    \      }\n        return class_name + \".\" + strongest"]
stop_tokens:
- "\n    }\n"
