name: HumanEval_17_parse_music
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    // Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    // not last.\n    // Here is a\
  \ legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts\
  \ two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parse_music('o\
  \ o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    def\
  \ parseMusic(music_string : String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
  )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o\
  \ o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o|\
  \ o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        val map = Map('o' -> 4, 'o|' -> 2, '.|' -> 1)\n        val\
    \ list = music_string.split(\" \").toList\n        list.map(x => map(x))", " \
    \       val beats = ListBuffer[Long]()\n        for (c <- music_string) {\n  \
    \          c match {\n                case 'o' => beats += 4\n               \
    \ case 'o' => beats += 2\n                case '.' => beats += 1\n           \
    \ }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = 4 :: beats\n            else if (note == \"o|\") beats = 2 ::\
    \ beats\n            else if (note == \".|\") beats = 1 :: beats\n        }\n\
    \        beats.reverse", "        val notes = music_string.split(\" \")\n    \
    \    val beats = new ListBuffer[Long]\n        for (note <- notes) {\n       \
    \     if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        // Write your code here\n        return List()", "        // TODO: Implement\
    \ this function\n        return List()", "        val notes = music_string.split(\"\
    \ \")\n        val result = new ListBuffer[Long]\n        for (note <- notes)\
    \ {\n            note match {\n                case \"o\" => result += 4\n   \
    \             case \"o|\" => result += 2\n                case \".|\" => result\
    \ += 1\n            }\n        }\n        result.toList", "        val beats =\
    \ ListBuffer[Long]()\n        for (c <- music_string) {\n            if (c ==\
    \ 'o') beats += 4\n            else if (c == '|') beats += 2\n            else\
    \ if (c == '.') beats += 1\n        }\n        beats.toList", "        val notes\
    \ = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val music_string_list = music_string.split(\" \"\
    ).toList\n        val music_string_list_length = music_string_list.length\n  \
    \      var result = List[Long]()\n        for (i <- 0 until music_string_list_length)\
    \ {\n            if (music_string_list(i) == \"o\") {\n                result\
    \ = result :+ 4\n            } else if (music_string_list(i) == \"o|\") {\n  \
    \              result = result :+ 2\n            } else if (music_string_list(i)\
    \ == \".|\") {\n                result = result :+ 1\n            }\n        }\n\
    \        result", "        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        var result = List[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") result = result\
    \ :+ 4\n            else if (note == \"o|\") result = result :+ 2\n          \
    \  else if (note == \".|\") result = result :+ 1\n        }\n        result",
  "        val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 1\n                } else beats += 4\n            } else if (music_string(i)\
    \ == '.') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 1\n                    i += 1\n\
    \                }\n            }\n        }\n        beats.toList", "       \
    \ val notes = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            c match {\n                case 'o' => beats +=\
    \ 4\n                case 'o' => beats += 2\n                case '.' => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        val map = Map('o'\
    \ -> 4, 'o|' -> 2, '.|' -> 1)\n        music_string.split(\" \").map(x => map(x)).toList",
  "        val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList"]
stop_tokens:
- "\n    }\n"
