name: HumanEval_60_sum_to_n
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> sum_to_n(30)\n\
  \    // 465\n    // >>> sum_to_n(100)\n    // 5050\n    // >>> sum_to_n(5)\n   \
  \ // 15\n    // >>> sum_to_n(10)\n    // 55\n    // >>> sum_to_n(1)\n    // 1\n\
  \    def sumToN(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumToN((1l)) == (1l));\n\
  \    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l))\
  \ == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n"
completions: ['        n * (n + 1) / 2', '        return n * (n + 1) / 2', "     \
    \   if (n == 1) 1\n        else n + sumToN(n - 1)", '        return (n * (n +
    1)) / 2', "        if (n == 1) return 1\n        return n + sumToN(n - 1)", '        return
    (n * (n + 1)) / 2', '        return n * (n + 1) / 2', "        if (n == 1) {\n\
    \            1\n        } else {\n            n + sumToN(n - 1)\n        }", '        n
    * (n + 1) / 2', "        if (n == 1) return 1\n        return n + sumToN(n - 1)",
  '        return n * (n + 1) / 2', "        if (n == 1) return 1\n        return\
    \ n + sumToN(n - 1)", '        return (n * (n + 1)) / 2', '        return n *
    (n + 1) / 2', '        n * (n + 1) / 2', '        (n * (n + 1)) / 2', "      \
    \  if (n == 1) return 1\n        return n + sumToN(n - 1)", '        return (n
    * (n + 1)) / 2', '        return n * (n + 1) / 2', "        if (n == 1) 1\n  \
    \      else n + sumToN(n - 1)", '        return n * (n + 1) / 2', '        n *
    (n + 1) / 2', '        n * (n + 1) / 2', '        return n * (n + 1) / 2', " \
    \       if (n == 1) return 1\n        return n + sumToN(n - 1)", '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return (n * (n
    + 1)) / 2', "        if (n == 1) 1\n        else n + sumToN(n - 1)", "       \
    \ if (n == 1) return 1\n        return n + sumToN(n - 1)", '        n * (n + 1)
    / 2', '        (1L to n).sum', '        n * (n + 1) / 2', '        return (n *
    (n + 1)) / 2', '        return n * (n + 1) / 2', '        n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', "        if (n == 1) 1\n \
    \       else n + sumToN(n - 1)", '        n * (n + 1) / 2', "        if (n ==\
    \ 1) 1\n        else n + sumToN(n - 1)", '        return (n * (n + 1)) / 2', '        return
    (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return (n * (n
    + 1)) / 2', '        n * (n + 1) / 2', '        return n * (n + 1) / 2', "   \
    \     if (n == 1) return 1\n        return n + sumToN(n - 1)", '        return
    n * (n + 1) / 2', "        if (n == 1) return 1\n        return n + sumToN(n -\
    \ 1)", "        if (n == 1) return 1\n        return n + sumToN(n - 1)", '        return
    (n * (n + 1)) / 2', "        if (n == 1) return 1\n        return n + sumToN(n\
    \ - 1)", '        return (n * (n + 1)) / 2', "        if (n == 1) 1\n        else\
    \ n + sumToN(n - 1)", "        if (n == 1) return 1\n        return n + sumToN(n\
    \ - 1)", '        (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', '        return
    (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', "        if (n == 1) 1\n\
    \        else n + sumToN(n - 1)", '        n * (n + 1) / 2', '        return n
    * (n + 1) / 2', '        n * (n + 1) / 2', '        n * (n + 1) / 2', '        (n
    * (n + 1)) / 2', "        if (n == 1) return 1\n        return n + sumToN(n -\
    \ 1)", "        if (n == 1) return 1\n        return n + sumToN(n - 1)", '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n +
    1) / 2', '        n * (n + 1) / 2', '        n * (n + 1) / 2', '        n * (n
    + 1) / 2', '        n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        n * (n + 1) / 2', '        n * (n + 1) / 2', '        n
    * (n + 1) / 2', "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n   \
    \         sum += i\n        }\n        sum", '        n * (n + 1) / 2', '        (1L
    to n).sum', "        if (n == 1) return 1\n        return n + sumToN(n - 1)",
  '        return n * (n + 1) / 2', '        (1L to n).sum', "        // your code\
    \ here\n        return 0", '        n * (n + 1) / 2', "        if (n == 1) 1\n\
    \        else n + sumToN(n - 1)", '        n * (n + 1) / 2', "        if (n ==\
    \ 1) 1\n        else n + sumToN(n - 1)", '        n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1)
    / 2', '        n * (n + 1) / 2', "        if (n == 1) return 1\n        return\
    \ n + sumToN(n - 1)", "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n\
    \            sum += i\n        }\n        sum", '        return n * (n + 1) /
    2', '        n * (n + 1) / 2', '        return n * (n + 1) / 2', "        if (n\
    \ == 1) return 1\n        return n + sumToN(n - 1)", '        n * (n + 1) / 2',
  '        return (n * (n + 1)) / 2', '        n * (n + 1) / 2', "        if (n ==\
    \ 1) 1\n        else n + sumToN(n - 1)", '        return n * (n + 1) / 2', " \
    \       if (n == 1) 1\n        else n + sumToN(n - 1)", '        n * (n + 1) /
    2', '        n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return
    (n * (n + 1)) / 2', '        (1L to n).sum', '        return n * (n + 1) / 2',
  "        if (n == 1) 1\n        else n + sumToN(n - 1)", '        return n * (n
    + 1) / 2', '        return n * (n + 1) / 2', '        n * (n + 1) / 2', '        n
    * (n + 1) / 2', "        if (n == 1) return 1\n        return n + sumToN(n - 1)",
  '        n * (n + 1) / 2', '        n * (n + 1) / 2', '        n * (n + 1) / 2',
  '        n * (n + 1) / 2', '        n * (n + 1) / 2', '        n * (n + 1) / 2',
  '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        n *
    (n + 1) / 2', "        if (n == 1) return 1\n        return n + sumToN(n - 1)",
  '        (n * (n + 1)) / 2', '        n * (n + 1) / 2', '        (n * (n + 1)) /
    2', "        if (n == 1) return 1\n        return n + sumToN(n - 1)", '        return
    (n * (n + 1)) / 2', '        n * (n + 1) / 2', '        return n * (n + 1) / 2',
  '        return n * (n + 1) / 2', '        n * (n + 1) / 2', "        var sum =\
    \ 0L\n        for (i <- 1 to n.toInt) {\n            sum += i\n        }\n   \
    \     sum", "        if (n == 1) 1\n        else n + sumToN(n - 1)", '        n
    * (n + 1) / 2', '        n * (n + 1) / 2', '        (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return (n * (n +
    1)) / 2', '        n * (n + 1) / 2', "        if (n == 1) 1\n        else n +\
    \ sumToN(n - 1)", '        (1L to n).sum', '        return n * (n + 1) / 2', '        n
    * (n + 1) / 2', '        return (n * (n + 1)) / 2', "        if (n == 1) 1\n \
    \       else n + sumToN(n - 1)", '        return n * (n + 1) / 2', "        if\
    \ (n == 1) 1\n        else n + sumToN(n - 1)", '        return (n * (n + 1)) /
    2', '        return n * (n + 1) / 2', "        if (n == 1) 1\n        else n +\
    \ sumToN(n - 1)", '        return (n * (n + 1)) / 2', '        n * (n + 1) / 2',
  "        if (n == 1) return 1\n        return n + sumToN(n - 1)", '        return
    (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', '        n * (n + 1) /
    2', "        if (n == 1) 1\n        else n + sumToN(n - 1)", '        n * (n +
    1) / 2', '        return n * (n + 1) / 2', "        if (n == 1) return 1\n   \
    \     return n + sumToN(n - 1)", "        if (n == 1) 1\n        else n + sumToN(n\
    \ - 1)", '        return n * (n + 1) / 2', "        if (n == 1) 1\n        else\
    \ n + sumToN(n - 1)", '        (1L to n).sum', '        n * (n + 1) / 2', "  \
    \      if (n == 1) return 1\n        return n + sumToN(n - 1)", '        return
    (n * (n + 1)) / 2', '        (1L to n).sum', '        n * (n + 1) / 2', '        n
    * (n + 1) / 2', "        if (n == 1) return 1\n        return n + sumToN(n - 1)",
  '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        (1L
    to n).sum', '        n * (n + 1) / 2', '        n * (n + 1) / 2', '        (1L
    to n).sum', '        (1L to n).sum', "        if (n == 1) return 1\n        else\
    \ return n + sumToN(n - 1)", "        if (n == 1) return 1\n        return n +\
    \ sumToN(n - 1)", "        if (n == 1) 1\n        else n + sumToN(n - 1)", " \
    \       var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += i\n\
    \        }\n        sum", '        n * (n + 1) / 2', '        return n * (n +
    1) / 2', '        return n * (n + 1) / 2', '        n * (n + 1) / 2', "      \
    \  if (n == 1) return 1\n        else return n + sumToN(n - 1)", "        if (n\
    \ == 1) return 1\n        return n + sumToN(n - 1)", '        return n * (n +
    1) / 2', "        if (n == 1) 1\n        else n + sumToN(n - 1)", '        n *
    (n + 1) / 2']
stop_tokens:
- "\n    }\n"
