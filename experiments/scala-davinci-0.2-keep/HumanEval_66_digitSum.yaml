name: HumanEval_66_digitSum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Task\n    // Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n   \
  \ // digitSum(\"\") => 0\n    // digitSum(\"abAB\") => 131\n    // digitSum(\"abcCd\"\
  ) => 67\n    // digitSum(\"helloE\") => 69\n    // digitSum(\"woArBld\") => 131\n\
  \    // digitSum(\"aAaaaXa\") => 153\n    def digitSum(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"))\
  \ == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
  abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
  woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
  \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) ==\
  \ (327l));\n    }\n\n}\n"
completions: ['        s.filter(c => c.isUpper).map(c => c.toLong).sum', '        s.filter(_.isUpper).map(_.toInt).sum',
  '        s.filter(c => c.isUpper).map(c => c.toLong).sum', '        s.filter(c =>
    c.isUpper).map(c => c.toInt).sum', '        s.filter(c => c.isUpper).map(c =>
    c.toLong).sum', '        s.toUpperCase.map(_.toLong).filter(_ >= 65).filter(_
    <= 90).sum', '        s.filter(x => x.isUpper).map(x => x.toLong).sum', '        s.filter(c
    => c.isUpper).map(c => c.toLong).sum', "        var sum = 0L\n        for (c <-\
    \ s) {\n            if (c >= 'A' && c <= 'Z') {\n                sum += c.toInt\n\
    \            }\n        }\n        sum", '        s.map(c => c.toLong).filter(c
    => c >= 65 && c <= 90).sum', '        s.filter(_.isUpper).map(_.toLong).sum',
  '        s.map(x => if (x.isUpper) x.toInt else 0).sum', '        s.filter(c =>
    c.isUpper).map(c => c.toLong).sum', "        var sum = 0L\n        for (c <- s)\
    \ {\n            if (c.isUpper) {\n                sum += c.toInt\n          \
    \  }\n        }\n        sum", '        s.map(c => c.toInt).filter(c => c >= 65
    && c <= 90).sum', '        s.filter(_.isUpper).map(_.toLong).sum', '        s.filter(x
    => x.isUpper).map(x => x.toLong).sum', "        var sum = 0L\n        for (c <-\
    \ s) {\n            if (c.isUpper) {\n                sum += c.toInt\n       \
    \     }\n        }\n        sum", '        s.filter(c => c.isUpper).map(c => c.toLong).sum',
  '        s.filter(x => x.isUpper).map(x => x.toLong).sum']
stop_tokens:
- "\n    }\n"
