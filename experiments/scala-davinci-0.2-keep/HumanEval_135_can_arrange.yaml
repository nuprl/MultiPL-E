name: HumanEval_135_can_arrange
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function which returns the largest index of an element which\n\
  \    // is not greater than or equal to the element immediately preceding it. If\n\
  \    // no such element exists then return -1. The given array will not contain\n\
  \    // duplicate values.\n    // Examples:\n    // can_arrange([1,2,4,3,5]) = 3\n\
  \    // can_arrange([1,2,3]) = -1\n    def canArrange(arr : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
  \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
  \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
  \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        val n = arr.length\n        val dp = Array.fill(n)(0L)\n  \
    \      for (i <- 0 until n) {\n            var j = i - 1\n            while (j\
    \ >= 0 && arr(j) >= arr(i)) {\n                j = dp(j).toInt\n            }\n\
    \            dp(i) = j\n        }\n        dp(n - 1)", "        var max = -1L\n\
    \        var maxIndex = -1L\n        for (i <- arr.indices) {\n            if\
    \ (arr(i) <= max) {\n                maxIndex = i\n                max = arr(i)\n\
    \            }\n        }\n        maxIndex", "        val n = arr.length\n  \
    \      val dp = Array.fill(n)(0)\n        for (i <- 1 until n) {\n           \
    \ dp(i) = dp(i - 1)\n            if (arr(i) <= arr(i - 1)) dp(i) = i\n       \
    \ }\n        var max = -1\n        for (i <- 0 until n) {\n            if (dp(i)\
    \ > max) max = dp(i)\n        }\n        max", "        val n = arr.length\n \
    \       val arr2 = arr.zipWithIndex.map(x => (x._1, x._2 + 1)).sortWith((x, y)\
    \ => x._1 < y._1)\n        val arr3 = arr2.map(x => (x._1, x._2 - 1)).sortWith((x,\
    \ y) => x._2 < y._2)\n        val arr4 = arr3.map(x => x._1)\n        val arr5\
    \ = arr4.zipWithIndex.map(x => (x._1, x._2 + 1)).sortWith((x, y) => x._1 < y._1)\n\
    \        val arr6 = arr5.map(x => (x._1, x._2 - 1)).sortWith((x, y) => x._2 <\
    \ y._2)\n        val arr7 = arr6.map(x => x._1)\n        val arr8 = arr7.zipWithIndex.map(x\
    \ => (x._1, x._2 + 1)).sortWith((x, y) => x._1 < y._1)\n        val arr9 = arr8.map(x\
    \ => (x._1, x._2 - 1)).sortWith((x, y) => x._2 < y._2)\n        val arr10 = arr9.map(x\
    \ => x._1)\n        val arr11 = arr10.zipWithIndex.map(x => (x._1, x._2 + 1)).sortWith((x,\
    \ y) => x._1 < y._1)\n        val arr12 = arr11.map(x => (x._1, x._2 - 1)).sortWith((x,\
    \ y) => x._2 < y._2)\n        val arr13 = arr12.map(x => x._1)\n        val arr14\
    \ = arr13.zipWithIndex.map(x => (x._1, x._2 + 1)).sortWith((x, y) => x._1 < y._1)\n\
    \        val arr15 = arr14.map(x => (x._1, x._2 - 1)).sortWith((x, y) => x._2\
    \ < y._2)\n        val arr16 = arr15.map(x => x._1)", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0)\n        for (i <- 1 until n) {\n         \
    \   var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n   \
    \         if (j >= 0) dp(i) = j + 1\n        }\n        var max = 0\n        for\
    \ (i <- 0 until n) if (dp(i) > max) max = dp(i)\n        max", "        val n\
    \ = arr.length\n        val dp = Array.fill(n)(0)\n        for (i <- 1 until n)\
    \ {\n            if (arr(i) >= arr(i - 1)) dp(i) = dp(i - 1) + 1\n        }\n\
    \        val max = dp.max\n        if (max == 0) -1 else max", "        val n\
    \ = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until\
    \ n) {\n            var j = i - 1\n            while (j >= 0 && arr(j) <= arr(i))\
    \ j -= 1\n            dp(i) = j\n        }\n        var max = -1L\n        for\
    \ (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n        }\n  \
    \      max", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 1 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i) = j\n        }\n    \
    \    var max = -1\n        for (i <- 0 until n) {\n            if (dp(i) > max)\
    \ max = dp(i)\n        }\n        max", "        var max = -1L\n        var maxIndex\
    \ = -1L\n        for (i <- arr.indices) {\n            if (arr(i) <= max) {\n\
    \                return maxIndex\n            }\n            max = arr(i)\n  \
    \          maxIndex = i\n        }\n        return -1", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n       \
    \         j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n \
    \       var max = -1\n        for (i <- 0 until n) {\n            if (dp(i) >\
    \ max) max = dp(i)\n        }\n        max", "        var max = -1L\n        var\
    \ maxIndex = -1L\n        for (i <- arr.indices) {\n            if (arr(i) > max)\
    \ {\n                max = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 0 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) {\n                j = dp(j)\n            }\n \
    \           dp(i) = j\n        }\n        var max = -1\n        for (i <- 0 until\
    \ n) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max", " \
    \       val n = arr.length\n        val dp = Array.fill(n)(0)\n        for (i\
    \ <- 1 until n) {\n            if (arr(i) >= arr(i - 1)) dp(i) = dp(i - 1) + 1\n\
    \        }\n        if (dp.max == 0) -1 else dp.max", "        var max = -1L\n\
    \        var index = -1L\n        for (i <- arr.indices) {\n            if (arr(i)\
    \ <= max) {\n                index = i\n                max = arr(i)\n       \
    \     }\n        }\n        index", "        val n = arr.length\n        var max\
    \ = -1\n        for (i <- 0 until n - 1) {\n            if (arr(i) >= arr(i +\
    \ 1)) {\n                max = i\n            }\n        }\n        max", "  \
    \      val n = arr.length\n        val l = Array.fill(n)(0)\n        val r = Array.fill(n)(0)\n\
    \        for (i <- 1 until n) {\n            if (arr(i) >= arr(i - 1)) l(i) =\
    \ l(i - 1) + 1\n        }\n        for (i <- n - 2 to 0 by -1) {\n           \
    \ if (arr(i) >= arr(i + 1)) r(i) = r(i + 1) + 1\n        }\n        var ans =\
    \ -1\n        for (i <- 0 until n) {\n            if (l(i) + r(i) > ans) ans =\
    \ l(i) + r(i)\n        }\n        ans", "        val n = arr.length\n        var\
    \ stack = new Stack[Long]\n        for (i <- 0 until n) {\n            while (!stack.isEmpty\
    \ && arr(i) >= stack.top) stack.pop\n            if (stack.isEmpty) return -1\n\
    \            stack.push(arr(i))\n        }\n        return n - 1", "        var\
    \ max = -1L\n        var maxIndex = -1L\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                if (max < arr(i))\
    \ {\n                    max = arr(i)\n                    maxIndex = i\n    \
    \            }\n            }\n        }\n        maxIndex", "        var max\
    \ = -1L\n        var maxIndex = -1L\n        for (i <- 0 until arr.length) {\n\
    \            if (arr(i) <= max) {\n                maxIndex = i\n            \
    \    max = arr(i)\n            }\n        }\n        maxIndex", "        val n\
    \ = arr.length\n        val dp = Array.fill(n)(0)\n        for (i <- 1 until n)\
    \ {\n            var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i))\
    \ {\n                j = dp(j)\n            }\n            dp(i) = j\n       \
    \ }\n        dp(n - 1)", "        var max = -1L\n        var maxIndex = -1L\n\
    \        for (i <- 0 until arr.length - 1) {\n            if (arr(i) <= arr(i\
    \ + 1)) {\n                if (max < arr(i)) {\n                    max = arr(i)\n\
    \                    maxIndex = i\n                }\n            }\n        }\n\
    \        maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            var max = 0L\n            for (j\
    \ <- 0 until i) {\n                if (arr(j) <= arr(i)) {\n                 \
    \   max = max max dp(j)\n                }\n            }\n            dp(i) =\
    \ max + 1\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n \
    \           max = max max dp(i)\n        }\n        max", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0)\n        for (i <- 1 until n) {\n         \
    \   var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n   \
    \         if (j >= 0) dp(i) = j + 1\n        }\n        var max = -1\n       \
    \ for (i <- 0 until n) if (dp(i) > max) max = dp(i)\n        max", "        val\
    \ n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until\
    \ n) {\n            var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i))\
    \ {\n                j = dp(j).toInt\n            }\n            dp(i) = j\n \
    \       }\n        dp(n - 1)", "        var max = -1L\n        var maxIndex =\
    \ -1L\n        for (i <- arr.indices) {\n            if (arr(i) <= max) {\n  \
    \              maxIndex = i\n            }\n            max = max(max, arr(i))\n\
    \        }\n        maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 1 until n) {\n            if (arr(i) >= arr(i - 1)) {\n   \
    \             dp(i) = dp(i - 1) + 1\n            }\n        }\n        var max\
    \ = 0\n        for (i <- 0 until n) {\n            max = max max dp(i)\n     \
    \   }\n        max", "        val arr2 = arr.zipWithIndex.map(x => (x._1, x._2\
    \ + 1)).sortBy(_._1)\n        val arr3 = arr2.map(x => (x._1, x._2, arr2.indexWhere(_._1\
    \ >= x._1)))\n        val arr4 = arr3.map(x => (x._1, x._2, arr3.indexWhere(_._3\
    \ == x._3)))\n        val arr5 = arr4.map(x => (x._1, x._2, arr4.indexWhere(_._3\
    \ == x._3)))\n        val arr6 = arr5.map(x => (x._1, x._2, arr5.indexWhere(_._3\
    \ == x._3)))\n        val arr7 = arr6.map(x => (x._1, x._2, arr6.indexWhere(_._3\
    \ == x._3)))\n        val arr8 = arr7.map(x => (x._1, x._2, arr7.indexWhere(_._3\
    \ == x._3)))\n        val arr9 = arr8.map(x => (x._1, x._2, arr8.indexWhere(_._3\
    \ == x._3)))\n        val arr10 = arr9.map(x => (x._1, x._2, arr9.indexWhere(_._3\
    \ == x._3)))\n        val arr11 = arr10.map(x => (x._1, x._2, arr10.indexWhere(_._3\
    \ == x._3)))\n        val arr12 = arr11.map(x => (x._1, x._2, arr11.indexWhere(_._3\
    \ == x._3)))\n        val arr13 = arr12.map(x => (x._1, x._2, arr12.indexWhere(_._3\
    \ == x._3)))\n        val arr14 = arr13.map(x => (x._1, x._2, arr13.indexWhere(_._3\
    \ == x._3)))\n        val arr15 = arr14.map(x => (x._1, x._2, arr14.indexWhere(_._3\
    \ == x._3)))\n        val arr16 = arr15.map(x => (x._1, x._2, arr15", "      \
    \  var max = -1L\n        var maxIndex = -1L\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) <= max) {\n                return maxIndex\n     \
    \       }\n            else {\n                max = arr(i)\n                maxIndex\
    \ = i\n            }\n        }\n        return -1", "        var max = -1L\n\
    \        for (i <- arr.indices) {\n            if (i > 0 && arr(i) <= arr(i -\
    \ 1)) {\n                max = i - 1\n            }\n        }\n        max",
  "        var max = -1L\n        var maxIndex = -1L\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                if (i > max)\
    \ {\n                    max = i\n                    maxIndex = i\n         \
    \       }\n            }\n        }\n        maxIndex", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n       \
    \         j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n \
    \       var max = -1\n        for (i <- 0 until n) {\n            if (dp(i) >\
    \ max) max = dp(i)\n        }\n        max", "        var max = -1L\n        var\
    \ maxIndex = -1L\n        for (i <- arr.indices) {\n            if (arr(i) <=\
    \ max) {\n                maxIndex = i\n            }\n            max = max max\
    \ arr(i)\n        }\n        maxIndex", "        val n = arr.length\n        val\
    \ dp = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            var j =\
    \ i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n                j =\
    \ dp(j).toInt\n            }\n            dp(i) = j\n        }\n        dp(n -\
    \ 1)", "        val n = arr.length\n        var max = -1\n        var maxIndex\
    \ = -1\n        for (i <- 0 until n - 1) {\n            if (arr(i) <= arr(i +\
    \ 1)) {\n                if (max < arr(i + 1)) {\n                    max = arr(i\
    \ + 1).toInt\n                    maxIndex = i + 1\n                }\n      \
    \      }\n        }\n        maxIndex", "        val n = arr.length\n        val\
    \ dp = Array.fill(n)(0)\n        for (i <- 1 until n) {\n            var j = i\
    \ - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n                j = dp(j)\n\
    \            }\n            dp(i) = j\n        }\n        dp(n - 1)", "      \
    \  val n = arr.length\n        val arr2 = arr.zipWithIndex.map(x => (x._1, x._2\
    \ + 1)).sortWith((x, y) => x._1 < y._1)\n        val arr3 = arr2.map(x => (x._1,\
    \ x._2 - 1))\n        val arr4 = arr3.sortWith((x, y) => x._2 < y._2)\n      \
    \  val arr5 = arr4.map(x => x._2)\n        val arr6 = arr5.zipWithIndex.map(x\
    \ => (x._1, x._2 + 1)).sortWith((x, y) => x._1 < y._1)\n        val arr7 = arr6.map(x\
    \ => (x._1, x._2 - 1))\n        val arr8 = arr7.sortWith((x, y) => x._2 < y._2)\n\
    \        val arr9 = arr8.map(x => x._2)\n        val arr10 = arr9.zipWithIndex.map(x\
    \ => (x._1, x._2 + 1)).sortWith((x, y) => x._1 < y._1)\n        val arr11 = arr10.map(x\
    \ => (x._1, x._2 - 1))\n        val arr12 = arr11.sortWith((x, y) => x._2 < y._2)\n\
    \        val arr13 = arr12.map(x => x._2)\n        val arr14 = arr13.zipWithIndex.map(x\
    \ => (x._1, x._2 + 1)).sortWith((x, y) => x._1 < y._1)\n        val arr15 = arr14.map(x\
    \ => (x._1, x._2 - 1))\n        val arr16 = arr15.sortWith((x, y) => x._2 < y._2)\n\
    \        val arr17 = arr16.map(x => x._2)\n        val arr18 = arr17.zipWithIndex.map(x\
    \ => (x._1, x._2 + 1)).sortWith((x, y) => x._1 < y._1)\n        val arr19 = arr18.map(x\
    \ => (x._1, x._2", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 1 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) {\n                j = dp(j).toInt\n          \
    \  }\n            dp(i) = j\n        }\n        dp(n - 1)", "        var max =\
    \ -1L\n        for (i <- arr.indices) {\n            if (i == 0) max = arr(i)\n\
    \            else if (arr(i) <= max) max = arr(i)\n            else return i -\
    \ 1\n        }\n        -1", "        val n = arr.length\n        val dp = Array.fill(n)(-1)\n\
    \        def dfs(i : Int) : Long = {\n            if (i == n) return -1\n    \
    \        if (dp(i) != -1) return dp(i)\n            var j = i + 1\n          \
    \  while (j < n && arr(j) >= arr(i)) j += 1\n            dp(i) = if (j == n) -1\
    \ else j\n            dp(i)\n        }\n        var max = -1\n        for (i <-\
    \ 0 until n) {\n            val j = dfs(i)\n            if (j != -1) max = max\
    \ max j\n        }\n        max", "        val n = arr.length\n        val dp\
    \ = Array.fill(n)(0)\n        for (i <- 1 until n) {\n            val x = arr(i)\n\
    \            var j = i - 1\n            while (j >= 0 && arr(j) >= x) {\n    \
    \            j -= 1\n            }\n            if (j == -1) dp(i) = -1\n    \
    \        else dp(i) = j\n        }\n        var max = -1\n        for (i <- 0\
    \ until n) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
  "        var max = -1L\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n\
    \        }\n        max", "        var max = -1L\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n \
    \           }\n        }\n        max", "        val n = arr.length\n        val\
    \ max = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            max(i)\
    \ = max(i - 1)\n            if (arr(i) > arr(i - 1)) max(i) = arr(i)\n       \
    \ }\n        var result = -1L\n        for (i <- n - 1 to 0 by -1) {\n       \
    \     if (arr(i) <= max(i)) result = i\n        }\n        result", "        var\
    \ max = -1L\n        var maxIndex = -1L\n        for (i <- arr.indices) {\n  \
    \          if (arr(i) <= max) {\n                maxIndex = i\n            }\n\
    \            max = max max arr(i)\n        }\n        maxIndex", "        val\
    \ n = arr.length\n        var max = -1\n        for (i <- 0 until n - 1) {\n \
    \           if (arr(i) >= arr(i + 1)) {\n                max = i\n           \
    \ }\n        }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(-1)\n\
    \        def dfs(i : Int) : Long = {\n            if (i == n) return -1\n    \
    \        if (dp(i) != -1) return dp(i)\n            var j = i + 1\n          \
    \  while (j < n && arr(j) >= arr(i)) j += 1\n            if (j == n) return -1\n\
    \            dp(i) = j\n            dfs(j)\n        }\n        dfs(0)", "    \
    \    val n = arr.length\n        val m = arr.max\n        val count = Array.fill(m.toInt\
    \ + 1)(0)\n        for (i <- 0 until n) count(arr(i).toInt) += 1\n        for\
    \ (i <- 1 to m.toInt) count(i) += count(i - 1)\n        var ans = -1\n       \
    \ for (i <- n - 1 to 0 by -1) {\n            if (arr(i) == count(arr(i).toInt))\
    \ ans = i\n        }\n        ans", "        var max = -1L\n        for (i <-\
    \ 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) max = i\n \
    \       }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) <= x) {\n                dp(i)\
    \ = max(dp(i), dp(j) + 1)\n                j -= 1\n            }\n        }\n\
    \        if (dp.max == 0) -1 else dp.max", "        val n = arr.length\n     \
    \   val dp = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            var\
    \ j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n              \
    \  j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n        dp(n\
    \ - 1)", "        var max = -1L\n        var maxIndex = -1L\n        for (i <-\
    \ arr.indices) {\n            if (arr(i) <= max) {\n                maxIndex =\
    \ i\n            }\n            max = max max arr(i)\n        }\n        maxIndex",
  "        val n = arr.length\n        val arr2 = arr.zipWithIndex.sortBy(_._1)\n\
    \        var max = -1L\n        for (i <- 0 until n - 1) {\n            if (arr2(i)._1\
    \ < arr2(i + 1)._1 && arr2(i)._2 > arr2(i + 1)._2) {\n                max = max\
    \ max arr2(i + 1)._2\n            }\n        }\n        max", "        val n =\
    \ arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 1 until n)\
    \ {\n            var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i))\
    \ j -= 1\n            dp(i) = j + 1\n        }\n        var max = -1L\n      \
    \  for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n        }\n\
    \        max", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 1 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i) = if (j == -1) -1 else\
    \ dp(j) + 1\n        }\n        dp.max", "        val n = arr.length\n       \
    \ val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j\
    \ <- 0 until i) {\n                if (arr(i) >= arr(j)) {\n                 \
    \   dp(i) = max(dp(i), dp(j) + 1)\n                }\n            }\n        }\n\
    \        var max = 0\n        for (i <- 0 until n) {\n            if (dp(i) >\
    \ max) {\n                max = dp(i)\n            }\n        }\n        max.toLong",
  "        var max = -1L\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n     \
    \   }\n        max", "        var max = -1L\n        var maxIndex = -1L\n    \
    \    for (i <- arr.indices) {\n            if (arr(i) <= max) {\n            \
    \    maxIndex = i\n            }\n            max = max max arr(i)\n        }\n\
    \        maxIndex", "        var max = -1L\n        var maxIndex = -1L\n     \
    \   for (i <- arr.indices) {\n            if (arr(i) <= max) {\n             \
    \   maxIndex = i\n            }\n            max = max max arr(i)\n        }\n\
    \        maxIndex", "        var max = -1L\n        var maxIndex = -1L\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) <= max) {\n      \
    \          maxIndex = i\n                max = arr(i)\n            }\n       \
    \ }\n        return maxIndex", "        val n = arr.length\n        val arr2 =\
    \ arr.zipWithIndex.sortBy(_._1)\n        var max = -1\n        for (i <- 0 until\
    \ n - 1) {\n            if (arr2(i)._1 < arr2(i + 1)._1 && arr2(i)._2 < arr2(i\
    \ + 1)._2) {\n                max = max max arr2(i + 1)._2\n            }\n  \
    \      }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 1 until n) {\n            if (arr(i) <= arr(i - 1)) dp(i) =\
    \ dp(i - 1) + 1\n        }\n        if (dp(n - 1) == n - 1) -1 else n - 1 - dp(n\
    \ - 1)", "        val n = arr.length\n        val l = new Array[Long](n)\n   \
    \     val r = new Array[Long](n)\n        for (i <- 0 until n) {\n           \
    \ l(i) = arr(i)\n            r(i) = arr(i)\n        }\n        for (i <- 1 until\
    \ n) {\n            l(i) = max(l(i), l(i - 1))\n        }\n        for (i <- n\
    \ - 2 to 0 by -1) {\n            r(i) = max(r(i), r(i + 1))\n        }\n     \
    \   var result = -1L\n        for (i <- 0 until n - 1) {\n            if (arr(i)\
    \ <= r(i + 1)) {\n                result = i\n            }\n        }\n     \
    \   result", "        var max = -1L\n        for (i <- 0 until arr.length - 1)\
    \ {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max i\n\
    \            }\n        }\n        max", "        val n = arr.length\n       \
    \ val dp = Array.fill(n)(0)\n        for (i <- 1 until n) {\n            val j\
    \ = i - 1\n            if (arr(j) <= arr(i)) dp(i) = dp(j)\n            else {\n\
    \                var k = dp(j)\n                while (k >= 0 && arr(k) >= arr(i))\
    \ k = dp(k)\n                dp(i) = k\n            }\n        }\n        dp(n\
    \ - 1)", "        var max = -1L\n        var maxIndex = -1L\n        for (i <-\
    \ arr.indices) {\n            if (arr(i) <= max) {\n                maxIndex =\
    \ i\n            }\n            max = max max arr(i)\n        }\n        maxIndex",
  "        val n = arr.length\n        var max = -1\n        for (i <- 0 until n -\
    \ 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n   \
    \         }\n        }\n        max", "        val n = arr.length\n        val\
    \ dp = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            val j =\
    \ i - 1\n            var k = j\n            while (k >= 0 && arr(k) >= arr(i))\
    \ k -= 1\n            if (k == -1) dp(i) = -1\n            else dp(i) = dp(k)\
    \ + 1\n        }\n        if (dp.last == -1) -1\n        else dp.last + 1", " \
    \       val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) {\n                j = dp(j).toInt\n            }\n            dp(i)\
    \ = j\n        }\n        dp(n - 1)", "        var max = -1L\n        var maxIndex\
    \ = -1L\n        for (i <- arr.indices) {\n            if (arr(i) >= max) {\n\
    \                max = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        var max = 0\n        for (i <- 0 until n) {\n            dp(i) = 1\n\
    \            for (j <- 0 until i) {\n                if (arr(j) <= arr(i)) {\n\
    \                    dp(i) = max(dp(i), dp(j) + 1)\n                }\n      \
    \      }\n            max = max(max, dp(i))\n        }\n        max", "      \
    \  var max = -1L\n        for (i <- 0 until arr.length - 1) {\n            if\
    \ (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n \
    \       }\n        max", "        val n = arr.length\n        val lis = Array.fill(n)(1)\n\
    \        val lds = Array.fill(n)(1)\n        for (i <- 1 until n) {\n        \
    \    for (j <- 0 until i) {\n                if (arr(i) > arr(j) && lis(i) < lis(j)\
    \ + 1) {\n                    lis(i) = lis(j) + 1\n                }\n       \
    \     }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j\
    \ <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && lds(i) <\
    \ lds(j) + 1) {\n                    lds(i) = lds(j) + 1\n                }\n\
    \            }\n        }\n        var max = 0\n        for (i <- 0 until n) {\n\
    \            if (lis(i) + lds(i) - 1 > max) {\n                max = lis(i) +\
    \ lds(i) - 1\n            }\n        }\n        max", "        val n = arr.length\n\
    \        var max = -1\n        for (i <- 0 until n) {\n            if (arr(i)\
    \ <= arr(i - 1)) {\n                max = i - 1\n            }\n        }\n  \
    \      max", "        var max = -1L\n        var max_index = -1L\n        for\
    \ (i <- arr.indices) {\n            if (i == 0) {\n                max = arr(i)\n\
    \                max_index = 0\n            } else {\n                if (arr(i)\
    \ <= max) {\n                    max = arr(i)\n                    max_index =\
    \ i\n                }\n            }\n        }\n        max_index", "      \
    \  val arr2 = arr.zipWithIndex.sortBy(_._1)\n        var max = -1\n        for\
    \ (i <- 0 until arr2.length - 1) {\n            if (arr2(i)._1 <= arr2(i + 1)._1)\
    \ {\n                max = max max arr2(i)._2\n            }\n        }\n    \
    \    max", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n \
    \       for (i <- 0 until n) {\n            var max = 0L\n            for (j <-\
    \ 0 until i) {\n                if (arr(j) <= arr(i)) {\n                    max\
    \ = max max dp(j)\n                }\n            }\n            dp(i) = max +\
    \ 1\n        }\n        dp.max - 1", "        var max = -1L\n        for (i <-\
    \ 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n       \
    \         max = i\n            }\n        }\n        max", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n        \
    \    val j = i - 1\n            if (arr(j) <= arr(i)) dp(i) = dp(j)\n        \
    \    else {\n                var k = dp(j)\n                while (k > 0 && arr(k\
    \ - 1) > arr(i)) k = dp(k - 1)\n                dp(i) = k\n            }\n   \
    \     }\n        dp(n - 1)", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 1 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) {\n                j -= 1\n\
    \            }\n            if (j == -1) dp(i) = -1\n            else dp(i) =\
    \ j\n        }\n        dp.max", "        val n = arr.length\n        val max\
    \ = arr.max\n        val min = arr.min\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        if (maxIndex == n - 1) {\n \
    \           if (minIndex == 0) {\n                -1\n            } else {\n \
    \               minIndex - 1\n            }\n        } else {\n            maxIndex\n\
    \        }", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 1 until n) {\n            if (arr(i) >= arr(i - 1)) {\n   \
    \             dp(i) = dp(i - 1) + 1\n            }\n        }\n        val max\
    \ = dp.max\n        if (max == 0) -1 else max", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n       \
    \         j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n \
    \       dp(n - 1)", "        val n = arr.length\n        val m = Array.fill(n)(-1)\n\
    \        for (i <- 0 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) {\n                j = m(j)\n            }\n  \
    \          if (j >= 0) m(i) = j\n        }\n        var max = -1\n        for\
    \ (i <- 0 until n) {\n            if (m(i) != -1 && i - m(i) > max) max = i -\
    \ m(i)\n        }\n        max", "        var max = -1L\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n               \
    \ max = max max i\n            }\n        }\n        max", "        val n = arr.length\n\
    \        var max = -1\n        for (i <- 0 until n - 1) {\n            if (arr(i)\
    \ >= arr(i + 1)) {\n                max = i\n            }\n        }\n      \
    \  max", "        val n = arr.length\n        var max = -1\n        for (i <-\
    \ 0 until n - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max\
    \ = i\n            }\n        }\n        max", "        if (arr.length == 0) return\
    \ -1\n        var max = arr(0)\n        var maxIndex = 0\n        for (i <- 1\
    \ until arr.length) {\n            if (arr(i) > max) {\n                max =\
    \ arr(i)\n                maxIndex = i\n            }\n        }\n        return\
    \ maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(-1)\n\
    \        for (i <- 0 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) {\n                j = dp(j)\n            }\n \
    \           if (j >= 0) dp(i) = j\n        }\n        var max = -1\n        for\
    \ (i <- 0 until n) {\n            if (dp(i) >= 0 && i - dp(i) > max) max = i -\
    \ dp(i)\n        }\n        max", "        val n = arr.length\n        val dp\
    \ = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            var j = i -\
    \ 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n                j = dp(j).toInt\n\
    \            }\n            dp(i) = j\n        }\n        var max = -1L\n    \
    \    for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n      \
    \  }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = 1\n        for (i <- 1 until n) {\n            var max = 0L\n\
    \            for (j <- 0 until i) {\n                if (arr(j) <= arr(i)) {\n\
    \                    max = max max dp(j)\n                }\n            }\n \
    \           dp(i) = max + 1\n        }\n        dp.max - 1", "        val n =\
    \ arr.length\n        var max = -1\n        for (i <- 0 until n - 1) {\n     \
    \       if (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n\
    \        }\n        max", "        var max = -1L\n        var index = -1L\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) <= max) {\n   \
    \             index = i\n                max = arr(i)\n            }\n       \
    \ }\n        return index", "        val n = arr.length\n        var max = -1\n\
    \        for (i <- 0 until n - 1) {\n            if (arr(i) >= arr(i + 1)) {\n\
    \                max = i\n            }\n        }\n        max", "        val\
    \ n = arr.length\n        var max = -1\n        for (i <- 0 until n) {\n     \
    \       if (i == 0) {\n                if (arr(i) <= arr(i + 1)) max = i\n   \
    \         } else if (i == n - 1) {\n                if (arr(i) <= arr(i - 1))\
    \ max = i\n            } else {\n                if (arr(i) <= arr(i - 1) && arr(i)\
    \ <= arr(i + 1)) max = i\n            }\n        }\n        max", "        val\
    \ n = arr.length\n        var max = -1\n        var maxIndex = -1\n        for\
    \ (i <- 0 until n) {\n            if (arr(i) <= max) {\n                maxIndex\
    \ = i\n                max = arr(i)\n            }\n        }\n        maxIndex",
  "        var max : Long = -1\n        var maxIndex : Long = -1\n        for (i <-\
    \ 0 until arr.length - 1) {\n            if (arr(i) >= max) {\n              \
    \  max = arr(i)\n                maxIndex = i\n            }\n        }\n    \
    \    maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n        \
    \        if (arr(j) <= arr(i)) dp(i) = max(dp(i), dp(j) + 1)\n            }\n\
    \        }\n        var max = 0\n        for (i <- 0 until n) max = max(dp(i),\
    \ max)\n        max", "        var max = -1L\n        var maxIndex = -1L\n   \
    \     for (i <- 0 until arr.length) {\n            if (arr(i) <= max) {\n    \
    \            maxIndex = i\n                max = arr(i)\n            }\n     \
    \   }\n        return maxIndex", "        val n = arr.length\n        val dp =\
    \ Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            var j = i - 1\n\
    \            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i) = j\
    \ + 1\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n     \
    \       if (dp(i) > max) max = dp(i)\n        }\n        max", "        val n\
    \ = arr.length\n        val dp = Array.fill(n)(-1)\n        def f(i : Int) : Long\
    \ = {\n            if (i == n) -1\n            else if (dp(i) != -1) dp(i)\n \
    \           else {\n                var max = -1\n                for (j <- i\
    \ + 1 until n) {\n                    if (arr(j) <= arr(i)) {\n              \
    \          val x = f(j)\n                        if (x != -1) max = max max x\n\
    \                    }\n                }\n                dp(i) = max\n     \
    \           max\n            }\n        }\n        f(0)", "        var max = -1L\n\
    \        var maxIndex = -1L\n        for (i <- 0 until arr.length - 1) {\n   \
    \         if (arr(i) >= arr(i + 1)) {\n                if (maxIndex == -1 || arr(i)\
    \ > max) {\n                    max = arr(i)\n                    maxIndex = i\n\
    \                }\n            }\n        }\n        maxIndex", "        var\
    \ max = -1L\n        for (i <- arr.indices) {\n            if (i == 0) {\n   \
    \             max = 0\n            } else {\n                if (arr(i) <= arr(i\
    \ - 1)) {\n                    max = i\n                }\n            }\n   \
    \     }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 1 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) j -= 1\n            if (j\
    \ == -1) dp(i) = -1\n            else dp(i) = j\n        }\n        var max =\
    \ -1\n        for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n\
    \        }\n        max", "        val n = arr.length\n        val maxs = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val max = arr.slice(0, i).max\n \
    \           maxs(i) = max\n        }\n        var result = -1L\n        for (i\
    \ <- 0 until n) {\n            if (arr(i) >= maxs(i)) {\n                result\
    \ = i\n            }\n        }\n        result", "        val n = arr.length\n\
    \        var max = -1\n        for (i <- 0 until n - 1) {\n            if (arr(i)\
    \ >= arr(i + 1)) {\n                max = i\n            }\n        }\n      \
    \  max", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n    \
    \    for (i <- 0 until n) {\n            var j = i - 1\n            while (j >=\
    \ 0 && arr(j) >= arr(i)) {\n                j = dp(j)\n            }\n       \
    \     dp(i) = j\n        }\n        var result = -1\n        for (i <- 0 until\
    \ n) {\n            if (dp(i) == i - 1) result = i\n        }\n        result",
  "        var max = -1L\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n     \
    \   }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) {\n                j = dp(j).toInt\n          \
    \  }\n            dp(i) = j\n        }\n        var max = -1\n        for (i <-\
    \ 0 until n) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
  "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i\
    \ <- 1 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        dp.max", "    \
    \    val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <-\
    \ 1 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ <= arr(i)) j -= 1\n            dp(i) = j + 1\n        }\n        var max = -1L\n\
    \        for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n  \
    \      }\n        max", "        val n = arr.length\n        var max = -1\n  \
    \      var maxIndex = -1\n        for (i <- 0 until n) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n        }\n        if (maxIndex == n - 1) return -1\n        var min\
    \ = Long.MaxValue\n        for (i <- maxIndex + 1 until n) {\n            if (arr(i)\
    \ < min) min = arr(i)\n        }\n        if (min <= max) return -1\n        maxIndex",
  "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) {\n                j = dp(j).toInt\n            }\n            dp(i)\
    \ = j\n        }\n        var max = -1\n        for (i <- 0 until n) {\n     \
    \       if (dp(i) > max) max = dp(i)\n        }\n        max", "        val n\
    \ = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until\
    \ n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n     \
    \           if (arr(j) <= arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n       \
    \     }\n        }\n        dp.max", "        val n = arr.length\n        var\
    \ max = -1\n        var maxIndex = -1\n        for (i <- 0 until n) {\n      \
    \      if (arr(i) <= max) {\n                maxIndex = i\n                max\
    \ = arr(i)\n            }\n        }\n        maxIndex", "        val n = arr.length\n\
    \        var max = arr(n - 1)\n        var maxIndex = n - 1\n        for (i <-\
    \ n - 2 to 0 by -1) {\n            if (arr(i) <= max) {\n                max =\
    \ arr(i)\n                maxIndex = i\n            }\n        }\n        maxIndex",
  "        val n = arr.length\n        val m = arr.max\n        val count = Array.fill(m.toInt\
    \ + 1)(0)\n        for (i <- 0 until n) count(arr(i).toInt) += 1\n        var\
    \ sum = 0L\n        for (i <- 0 until m.toInt + 1) {\n            sum += count(i)\n\
    \            if (sum >= i) return i.toLong\n        }\n        -1", "        val\
    \ n = arr.length\n        val m = arr.max\n        val cnt = Array.fill(m.toInt\
    \ + 1)(0)\n        for (i <- 0 until n) cnt(arr(i).toInt) += 1\n        var sum\
    \ = 0L\n        var i = 0\n        while (i < n) {\n            if (cnt(i) > 0)\
    \ {\n                sum += cnt(i)\n                cnt(i) = 0\n            }\n\
    \            if (sum == i) return i\n            i += 1\n        }\n        -1",
  "        val n = arr.length\n        val max = Array.fill(n)(0L)\n        for (i\
    \ <- 0 until n) {\n            max(i) = arr(i)\n            if (i > 0) max(i)\
    \ = max(i - 1) max arr(i)\n        }\n        var result = -1L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            if (arr(i) <= max(i - 1)) result = i\n \
    \       }\n        result", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 1 until n) {\n            if (arr(i) >= arr(i - 1)) dp(i) =\
    \ dp(i - 1) + 1\n        }\n        dp.max", "        val n = arr.length\n   \
    \     val dp = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n           \
    \ if (arr(i) >= arr(i - 1)) {\n                dp(i) = dp(i - 1) + 1\n       \
    \     }\n        }\n        dp.max", "        val n = arr.length\n        val\
    \ max = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            if (i ==\
    \ 0) max(i) = arr(i)\n            else max(i) = max(i - 1) max arr(i)\n      \
    \  }\n        var i = n - 1\n        while (i >= 0) {\n            if (i == 0)\
    \ {\n                if (arr(i) >= max(i)) return -1\n                else return\
    \ 0\n            }\n            else {\n                if (arr(i) >= max(i -\
    \ 1)) i -= 1\n                else return i\n            }\n        }\n      \
    \  -1", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n    \
    \    for (i <- 1 until n) {\n            var j = i - 1\n            while (j >=\
    \ 0 && arr(j) >= arr(i)) j -= 1\n            dp(i) = j + 1\n        }\n      \
    \  var max = -1L\n        for (i <- 0 until n) {\n            if (dp(i) > max)\
    \ max = dp(i)\n        }\n        max", "        var max = -1L\n        for (i\
    \ <- arr.indices) {\n            if (i == 0) {\n                max = 0\n    \
    \        } else {\n                if (arr(i) <= arr(i - 1)) {\n             \
    \       max = i\n                }\n            }\n        }\n        max", " \
    \       var max = -1L\n        for (i <- 0 until arr.length - 1) {\n         \
    \   if (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n    \
    \    }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        dp(0) = 1\n        var max = 1\n        for (i <- 1 until n) {\n    \
    \        dp(i) = 1\n            for (j <- 0 until i) {\n                if (arr(i)\
    \ >= arr(j) && dp(j) + 1 > dp(i)) {\n                    dp(i) = dp(j) + 1\n \
    \                   max = max max dp(i)\n                }\n            }\n  \
    \      }\n        max - 1", "        val n = arr.length\n        val dp = Array.fill(n)(1)\n\
    \        var max = 1\n        for (i <- 1 until n) {\n            for (j <- 0\
    \ until i) {\n                if (arr(i) >= arr(j) && dp(i) < dp(j) + 1) {\n \
    \                   dp(i) = dp(j) + 1\n                    max = max max dp(i)\n\
    \                }\n            }\n        }\n        max", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(-1)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n       \
    \         j = dp(j)\n            }\n            if (j >= 0) dp(i) = j\n      \
    \  }\n        var max = -1\n        for (i <- 0 until n) {\n            if (dp(i)\
    \ > max) max = dp(i)\n        }\n        max", "        var max = -1L\n      \
    \  var maxIndex = -1L\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) <= max) {\n                maxIndex = i\n                max = arr(i)\n\
    \            }\n        }\n        maxIndex", "        var max = -1L\n       \
    \ var index = -1L\n        for (i <- arr.indices) {\n            if (arr(i) <=\
    \ max) {\n                index = i\n                max = arr(i)\n          \
    \  }\n        }\n        index", "        var max = -1L\n        var maxIndex\
    \ = -1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) <= max)\
    \ {\n                return maxIndex\n            }\n            else {\n    \
    \            max = arr(i)\n                maxIndex = i\n            }\n     \
    \   }\n        return -1", "        var max = -1L\n        var maxIndex = -1L\n\
    \        for (i <- arr.indices) {\n            if (arr(i) <= max) {\n        \
    \        maxIndex = i\n            }\n            max = max(max, arr(i))\n   \
    \     }\n        maxIndex", "        val n = arr.length\n        val m = arr.max\n\
    \        val a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n) a(arr(i).toInt)\
    \ += 1\n        var sum = 0L\n        for (i <- 0 until m.toInt + 1) {\n     \
    \       sum += a(i)\n            if (sum > i) return i.toLong\n        }\n   \
    \     -1", "        val n = arr.length\n        var index = n - 1\n        for\
    \ (i <- n - 2 to 0 by -1) {\n            if (arr(i) > arr(i + 1)) {\n        \
    \        index = i\n            }\n        }\n        return index", "       \
    \ var max = -1L\n        var maxIndex = -1L\n        for (i <- arr.indices) {\n\
    \            if (arr(i) <= max) {\n                maxIndex = i\n            }\n\
    \            max = max max arr(i)\n        }\n        maxIndex", "        val\
    \ sorted = arr.sorted\n        val max = arr.max\n        val min = arr.min\n\
    \        if (max - min > 1) return -1\n        if (max == min) return -1\n   \
    \     if (max - min == 1) {\n            val count = arr.count(_ == max)\n   \
    \         if (count > 1) return -1\n        }\n        val diff = sorted.zip(sorted.tail).map(x\
    \ => x._2 - x._1)\n        val maxDiff = diff.max\n        if (maxDiff > 1) return\
    \ -1\n        val maxDiffIndex = diff.indexOf(maxDiff)\n        maxDiffIndex",
  "        var stack = new Stack[Long]()\n        var max = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (stack.isEmpty || arr(i) <= stack.top)\
    \ {\n                stack.push(arr(i))\n            } else {\n              \
    \  while (!stack.isEmpty && arr(i) > stack.top) {\n                    stack.pop()\n\
    \                }\n                if (stack.isEmpty) {\n                   \
    \ max = i\n                } else {\n                    stack.push(arr(i))\n\
    \                }\n            }\n        }\n        max", "        var max =\
    \ -1L\n        var index = -1L\n        for (i <- arr.indices) {\n           \
    \ if (arr(i) <= max) {\n                index = i\n                max = arr(i)\n\
    \            }\n        }\n        index", "        var max = -1L\n        for\
    \ (i <- arr.indices) {\n            if (i > 0 && arr(i) <= arr(i - 1)) {\n   \
    \             max = max max i\n            }\n        }\n        max", "     \
    \   var max = -1L\n        var maxIndex = -1L\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) <= max) {\n                return maxIndex\n     \
    \       }\n            else {\n                max = arr(i)\n                maxIndex\
    \ = i\n            }\n        }\n        return -1", "        val n = arr.length\n\
    \        if (n == 1) return -1\n        var max = arr(0)\n        var maxIndex\
    \ = 0\n        for (i <- 1 until n) {\n            if (arr(i) > max) {\n     \
    \           max = arr(i)\n                maxIndex = i\n            }\n      \
    \  }\n        var min = arr(n - 1)\n        var minIndex = n - 1\n        for\
    \ (i <- n - 2 to 0 by -1) {\n            if (arr(i) < min) {\n               \
    \ min = arr(i)\n                minIndex = i\n            }\n        }\n     \
    \   if (maxIndex < minIndex) return maxIndex\n        else return -1", "     \
    \   val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <-\
    \ 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        var max = -1L\n\
    \        for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n  \
    \      }\n        max", "        var max = -1L\n        var maxIndex = -1L\n \
    \       for (i <- 0 until arr.length) {\n            if (arr(i) <= max) {\n  \
    \              return maxIndex\n            }\n            max = arr(i)\n    \
    \        maxIndex = i\n        }\n        return -1", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n       \
    \         j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n \
    \       dp(n - 1)", "        var max = -1L\n        var maxIndex = -1L\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) <= max) {\n      \
    \          maxIndex = i\n                max = arr(i)\n            }\n       \
    \ }\n        return maxIndex", "        val n = arr.length\n        if (n == 1)\
    \ return -1\n        val dp = Array.fill(n)(-1)\n        for (i <- 0 until n)\
    \ {\n            var j = i - 1\n            while (j >= 0) {\n               \
    \ if (arr(j) <= arr(i)) {\n                    dp(i) = j\n                   \
    \ j = -1\n                }\n                j -= 1\n            }\n        }\n\
    \        var max = -1\n        for (i <- 0 until n) {\n            if (dp(i) !=\
    \ -1 && dp(i) > max) max = dp(i)\n        }\n        max", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(-1)\n        for (i <- n - 1 to 0 by -1) {\n \
    \           var max = -1\n            for (j <- i + 1 until n) {\n           \
    \     if (arr(j) <= arr(i)) {\n                    max = max max dp(j)\n     \
    \           }\n            }\n            dp(i) = max\n        }\n        dp(0)",
  "        val n = arr.length\n        val dp = Array.fill(n)(0)\n        for (i <-\
    \ 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) {\n                j = dp(j)\n            }\n            dp(i) =\
    \ j\n        }\n        var max = -1\n        for (i <- 0 until n) {\n       \
    \     if (dp(i) > max) max = dp(i)\n        }\n        max", "        var max\
    \ = -1L\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >=\
    \ arr(i + 1)) {\n                max = max max i\n            }\n        }\n \
    \       max", "        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 1 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i) = j\n        }\n    \
    \    var max = -1\n        for (i <- 0 until n) {\n            if (dp(i) > max)\
    \ max = dp(i)\n        }\n        max", "        val n = arr.length\n        val\
    \ arr2 = arr.zipWithIndex.map(x => (x._1, x._2 + 1))\n        val arr3 = arr2.sortWith((a,\
    \ b) => a._1 < b._1)\n        val arr4 = arr3.map(x => (x._1, x._2 - 1))\n   \
    \     val arr5 = arr4.sortWith((a, b) => a._2 < b._2)\n        val arr6 = arr5.map(x\
    \ => x._2)\n        val arr7 = arr6.map(x => if (x == 0) n else x)\n        val\
    \ arr8 = arr7.zipWithIndex.map(x => (x._1, x._2 + 1))\n        val arr9 = arr8.sortWith((a,\
    \ b) => a._1 < b._1)\n        val arr10 = arr9.map(x => (x._1, x._2 - 1))\n  \
    \      val arr11 = arr10.sortWith((a, b) => a._2 < b._2)\n        val arr12 =\
    \ arr11.map(x => x._2)\n        val arr13 = arr12.map(x => if (x == 0) n else\
    \ x)\n        val arr14 = arr13.zipWithIndex.map(x => (x._1, x._2 + 1))\n    \
    \    val arr15 = arr14.sortWith((a, b) => a._1 < b._1)\n        val arr16 = arr15.map(x\
    \ => (x._1, x._2 - 1))\n        val arr17 = arr16.sortWith((a, b) => a._2 < b._2)\n\
    \        val arr18 = arr17.map(x => x._2)\n        val arr19 = arr18.map(x =>\
    \ if (x == 0) n else x)\n        val arr20 = arr19.zipWithIndex.map(x => (x._1,\
    \ x._2 + 1))\n        val arr21 = arr20.sortWith((a, b) => a._1 < b._1)\n    \
    \    val arr22 = arr21.map(x => (x._1, x._2 - 1))\n       ", "        var max\
    \ = -1L\n        for (i <- arr.indices) {\n            if (i == 0) max = arr(i)\n\
    \            else if (arr(i) <= max) return i - 1\n            else max = arr(i)\n\
    \        }\n        return -1", "        var max = -1L\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) max = i\n        }\n\
    \        max", "        val n = arr.length\n        var max = -1\n        var\
    \ maxIndex = -1\n        for (i <- 0 until n) {\n            if (arr(i) <= max)\
    \ {\n                return maxIndex\n            }\n            if (arr(i) >\
    \ max) {\n                max = arr(i).toInt\n                maxIndex = i\n \
    \           }\n        }\n        return -1", "        val n = arr.length\n  \
    \      val max = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n  \
    \          if (i == n - 1) max(i) = arr(i)\n            else max(i) = max(i +\
    \ 1) max arr(i)\n        }\n        for (i <- 0 until n - 1) {\n            if\
    \ (arr(i) <= max(i + 1)) return i\n        }\n        -1", "        val n = arr.length\n\
    \        var max = -1\n        for (i <- 0 until n - 1) {\n            if (arr(i)\
    \ >= arr(i + 1)) {\n                max = max max i\n            }\n        }\n\
    \        max", "        val n = arr.length\n        var max = -1\n        for\
    \ (i <- 0 until n - 1) {\n            if (arr(i) > arr(i + 1)) {\n           \
    \     max = i\n            }\n        }\n        max", "        val n = arr.length\n\
    \        val stack = new Stack[Long]\n        for (i <- 0 until n) {\n       \
    \     val x = arr(i)\n            if (stack.isEmpty || stack.top <= x) stack.push(x)\n\
    \            else {\n                while (!stack.isEmpty && stack.top > x) stack.pop\n\
    \                if (stack.isEmpty || stack.top <= x) stack.push(x)\n        \
    \        else return i - 1\n            }\n        }\n        return -1", "  \
    \      val n = arr.length\n        val dp = Array.fill(n)(0)\n        for (i <-\
    \ 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        var max = -1\n\
    \        for (i <- 0 until n) if (dp(i) > max) max = dp(i)\n        max", "  \
    \      val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i\
    \ <- 1 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        dp.max", "    \
    \    val n = arr.length\n        val dp = Array.fill(n)(0)\n        var max =\
    \ 0\n        for (i <- 0 until n) {\n            dp(i) = 1\n            for (j\
    \ <- 0 until i) {\n                if (arr(j) <= arr(i)) dp(i) = max(dp(i), dp(j)\
    \ + 1)\n            }\n            max = max(max, dp(i))\n        }\n        max\
    \ - 1", "        var max = -1L\n        var maxIndex = -1L\n        for (i <-\
    \ 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n       \
    \         if (maxIndex == -1 || arr(i) > max) {\n                    max = arr(i)\n\
    \                    maxIndex = i\n                }\n            }\n        }\n\
    \        maxIndex", "        var max = -1L\n        var maxIndex = -1L\n     \
    \   for (i <- arr.indices) {\n            if (arr(i) <= max) {\n             \
    \   maxIndex = i\n            }\n            max = max(max, arr(i))\n        }\n\
    \        maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            var max = 0L\n            for (j\
    \ <- 0 until i) {\n                if (arr(j) <= arr(i)) {\n                 \
    \   max = max max dp(j)\n                }\n            }\n            dp(i) =\
    \ max + 1\n        }\n        dp.max - 1", "        val n = arr.length\n     \
    \   val m = arr.max\n        val cnt = Array.fill(m.toInt + 1)(0)\n        for\
    \ (i <- 0 until n) cnt(arr(i).toInt) += 1\n        var sum = 0L\n        for (i\
    \ <- 0 until m.toInt + 1) {\n            sum += cnt(i)\n            if (sum ==\
    \ i + 1) return i\n        }\n        -1", "        val n = arr.length\n     \
    \   var max = -1\n        for (i <- 0 until n - 1) {\n            if (arr(i) >=\
    \ arr(i + 1)) {\n                max = i\n            }\n        }\n        max",
  "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i\
    \ <- 1 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        var max = -1L\n\
    \        for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n  \
    \      }\n        max", "        var max = -1L\n        var maxIndex = -1L\n \
    \       for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i +\
    \ 1)) {\n                max = arr(i)\n                maxIndex = i\n        \
    \    }\n        }\n        maxIndex", "        val n = arr.length\n        val\
    \ dp = Array.fill(n)(0L)\n        dp(0) = 1\n        for (i <- 1 until n) {\n\
    \            if (arr(i) >= arr(i - 1)) dp(i) = dp(i - 1) + 1\n            else\
    \ dp(i) = 1\n        }\n        var max = 0L\n        for (i <- 0 until n) max\
    \ = max max dp(i)\n        max - 1", "        val n = arr.length\n        var\
    \ max = arr(n - 1)\n        var index = n - 1\n        for (i <- n - 2 to 0 by\
    \ -1) {\n            if (arr(i) <= max) {\n                max = arr(i)\n    \
    \            index = i\n            }\n        }\n        return index", "   \
    \     val n = arr.length\n        val left = new Array[Long](n)\n        val right\
    \ = new Array[Long](n)\n        left(0) = arr(0)\n        right(n - 1) = arr(n\
    \ - 1)\n        for (i <- 1 until n) left(i) = min(left(i - 1), arr(i))\n    \
    \    for (i <- n - 2 to 0 by -1) right(i) = min(right(i + 1), arr(i))\n      \
    \  for (i <- 0 until n) if (left(i) == right(i)) return i.toLong\n        -1",
  "        val n = arr.length\n        val dp = Array.fill(n)(0)\n        for (i <-\
    \ 1 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) {\n                j = dp(j)\n            }\n            dp(i) =\
    \ j\n        }\n        dp(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            var j = i -\
    \ 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i)\
    \ = j + 1\n        }\n        var max = -1L\n        for (i <- 0 until n) if (dp(i)\
    \ > max) max = dp(i)\n        max", "        val n = arr.length\n        var max\
    \ = -1\n        for (i <- 0 until n - 1) {\n            if (arr(i) >= arr(i +\
    \ 1)) max = i\n        }\n        max", "        var max = -1L\n        var index\
    \ = -1L\n        for (i <- arr.indices) {\n            if (arr(i) <= max) {\n\
    \                index = i\n                max = arr(i)\n            }\n    \
    \    }\n        index", "        var max = -1L\n        var maxIndex = -1L\n \
    \       for (i <- arr.indices) {\n            if (arr(i) <= max) {\n         \
    \       return maxIndex\n            }\n            max = arr(i)\n           \
    \ maxIndex = i\n        }\n        return -1", "        val n = arr.length\n \
    \       val dp = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n         \
    \   var j = i - 1\n            while (j >= 0 && arr(j) <= arr(i)) j -= 1\n   \
    \         dp(i) = j + 1\n        }\n        var max = -1L\n        for (i <- 0\
    \ until n) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
  "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right\
    \ = Array.fill(n)(0L)\n        for (i <- 1 until n) left(i) = max(left(i - 1),\
    \ arr(i - 1))\n        for (i <- n - 2 to 0 by -1) right(i) = max(right(i + 1),\
    \ arr(i + 1))\n        var ans = -1L\n        for (i <- 0 until n) if (arr(i)\
    \ >= left(i) && arr(i) >= right(i)) ans = i\n        ans", "        var max =\
    \ -1L\n        var maxIndex = -1L\n        for (i <- 0 until arr.length - 1) {\n\
    \            if (arr(i) >= arr(i + 1)) {\n                max = arr(i)\n     \
    \           maxIndex = i\n            }\n        }\n        maxIndex", "     \
    \   val n = arr.length\n        var max = arr(n - 1)\n        var index = n -\
    \ 1\n        for (i <- n - 2 to 0 by -1) {\n            if (arr(i) <= max) {\n\
    \                max = arr(i)\n                index = i\n            }\n    \
    \    }\n        if (index == 0) -1 else index", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0)\n        for (i <- 0 until n) {\n         \
    \   var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n        \
    \        j = dp(j)\n            }\n            dp(i) = j\n        }\n        var\
    \ result = -1\n        for (i <- 0 until n) {\n            if (dp(i) == -1) result\
    \ = i\n        }\n        result", "        var max = -1L\n        var maxIndex\
    \ = -1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) <= max)\
    \ {\n                return maxIndex\n            }\n            max = arr(i)\n\
    \            maxIndex = i\n        }\n        return -1", "        var max = -1L\n\
    \        var index = -1L\n        for (i <- 0 until arr.length - 1) {\n      \
    \      if (arr(i) <= arr(i + 1)) {\n                if (i > max) {\n         \
    \           max = i\n                    index = i + 1\n                }\n  \
    \          }\n        }\n        return index", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n       \
    \         j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n \
    \       var max = -1L\n        for (i <- 0 until n) {\n            if (dp(i) >\
    \ max) max = dp(i)\n        }\n        max", "        var max = -1L\n        var\
    \ maxIndex = -1L\n        for (i <- 0 until arr.length - 1) {\n            if\
    \ (arr(i) >= arr(i + 1)) {\n                if (maxIndex == -1L || arr(i) > max)\
    \ {\n                    max = arr(i)\n                    maxIndex = i\n    \
    \            }\n            }\n        }\n        maxIndex", "        var max\
    \ = -1L\n        var maxIndex = -1L\n        for (i <- arr.indices) {\n      \
    \      if (arr(i) <= max) {\n                maxIndex = i\n            }\n   \
    \         max = max max arr(i)\n        }\n        maxIndex", "        val n =\
    \ arr.length\n        val dp = Array.fill(n)(0)\n        for (i <- 0 until n)\
    \ {\n            var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i))\
    \ j -= 1\n            dp(i) = j\n        }\n        var max = -1\n        for\
    \ (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n        }\n  \
    \      max", "        val n = arr.length\n        val dp = Array.fill(n)(-1)\n\
    \        for (i <- 0 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) {\n                if (dp(j) == -1) dp(i) = j\n\
    \                else j = dp(j)\n            }\n        }\n        var max = -1\n\
    \        for (i <- 0 until n) {\n            if (dp(i) != -1 && dp(i) > max) max\
    \ = dp(i)\n        }\n        max", "        var max = -1L\n        var maxIndex\
    \ = -1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) <= max)\
    \ {\n                return maxIndex\n            }\n            max = arr(i)\n\
    \            maxIndex = i\n        }\n        return -1", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n       \
    \         j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n \
    \       var max = -1\n        for (i <- 0 until n) {\n            if (dp(i) >\
    \ max) max = dp(i)\n        }\n        max", "        var max = -1L\n        for\
    \ (i <- arr.indices) {\n            if (i == 0) max = arr(i)\n            else\
    \ if (arr(i) <= max) return i - 1\n            else max = arr(i)\n        }\n\
    \        return -1", "        var max = -1L\n        var index = -1L\n       \
    \ for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n\
    \                if (i > max) {\n                    max = i\n               \
    \     index = i\n                }\n            }\n        }\n        return index",
  "        var max = -1L\n        var maxIndex = -1L\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) <= max) {\n                maxIndex = i\n        \
    \        max = arr(i)\n            }\n        }\n        maxIndex", "        val\
    \ n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until\
    \ n) {\n            var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i))\
    \ j -= 1\n            dp(i) = j\n        }\n        var max = -1L\n        for\
    \ (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n        }\n  \
    \      max", "        var max = -1L\n        var maxIndex = -1L\n        for (i\
    \ <- arr.indices) {\n            if (arr(i) <= max) {\n                maxIndex\
    \ = i\n                max = arr(i)\n            }\n        }\n        maxIndex",
  "        var max = -1L\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) <= arr(i + 1)) {\n                max = i\n            }\n     \
    \   }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(-1)\n\
    \        def solve(i : Int) : Long = {\n            if (i == n) -1\n         \
    \   else if (dp(i) != -1) dp(i)\n            else {\n                val ans =\
    \ if (i == 0 || arr(i) >= arr(i - 1)) i else solve(i - 1)\n                dp(i)\
    \ = ans\n                ans\n            }\n        }\n        solve(n - 1)",
  "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        var max\
    \ = 0L\n        for (i <- 1 until n) {\n            if (arr(i) <= arr(i - 1))\
    \ {\n                dp(i) = dp(i - 1) + 1\n                max = max max dp(i)\n\
    \            }\n        }\n        max", "        val n = arr.length\n       \
    \ val dp = Array.fill(n)(0)\n        var max = 0\n        for (i <- 0 until n)\
    \ {\n            var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i))\
    \ j -= 1\n            if (j >= 0) dp(i) = dp(j) + 1\n            else dp(i) =\
    \ 1\n            max = max max dp(i)\n        }\n        max", "        var max\
    \ = -1L\n        var maxIndex = -1L\n        for (i <- arr.indices) {\n      \
    \      if (arr(i) <= max) {\n                maxIndex = i\n            }\n   \
    \         else {\n                max = arr(i)\n            }\n        }\n   \
    \     maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(-1)\n\
    \        for (i <- 0 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) {\n                if (dp(j) == -1) dp(i) = j\n\
    \                else j = dp(j)\n            }\n        }\n        var max = -1\n\
    \        for (i <- 0 until n) {\n            if (dp(i) != -1 && i - dp(i) > max)\
    \ max = i - dp(i)\n        }\n        max"]
stop_tokens:
- "\n    }\n"
