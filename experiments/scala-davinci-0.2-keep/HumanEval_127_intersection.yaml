name: HumanEval_127_intersection
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two intervals,\n    // where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n    // The given intervals are\
  \ closed which means that the interval (start, end)\n    // includes both start\
  \ and end.\n    // For each given interval, it is assumed that its start is less\
  \ or equal its end.\n    // Your task is to determine whether the length of intersection\
  \ of these two \n    // intervals is a prime number.\n    // Example, the intersection\
  \ of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which\
  \ not a prime number.\n    // If the length of the intersection is a prime number,\
  \ return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals\
  \ don't intersect, return \"NO\".\n    // [input/output] samples:\n    // intersection((1,\
  \ 2), (2, 3)) ==> \"NO\"\n    // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    //\
  \ intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def intersection(interval1 :\
  \ Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
  \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
  \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
  YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
  \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
  \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
  \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
  NO\")));\n    }\n\n}\n"
completions: ["        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        val length = end - start + 1\n        if (length\
    \ < 2) return \"NO\"\n        if (length == 2) return \"YES\"\n        if (length\
    \ % 2 == 0) return \"NO\"\n        for (i <- 3L to sqrt(length).toLong by 2) {\n\
    \            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (end1 < start2 || end2 < start1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        val length\
    \ = end - start + 1\n        if (length <= 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 until length) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) return \"NO\"\n        val length = end - start + 1\n        val isPrime\
    \ = (2L to length / 2).forall(length % _ != 0)\n        if (isPrime) \"YES\" else\
    \ \"NO\"", "        val start = max(interval1._1, interval2._1)\n        val end\
    \ = min(interval1._2, interval2._2)\n        if (start > end) return \"NO\"\n\
    \        val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        (3L to sqrt(length).toLong by\
    \ 2).foreach(i => if (length % i == 0) return \"NO\")\n        \"YES\"", "   \
    \     val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) {\n            \"NO\"\n        }\
    \ else {\n            val start = max(start1, start2)\n            val end = min(end1,\
    \ end2)\n            val length = end - start + 1\n            if (length == 1)\
    \ {\n                \"NO\"\n            } else {\n                if (length\
    \ == 2) {\n                    \"YES\"\n                } else {\n           \
    \         val sqrt = sqrt(length).toLong\n                    if (sqrt * sqrt\
    \ == length) {\n                        \"NO\"\n                    } else {\n\
    \                        var isPrime = true\n                        for (i <-\
    \ 2L to sqrt) {\n                            if (length % i == 0) {\n        \
    \                        isPrime = false\n                                i =\
    \ sqrt\n                            }\n                        }\n           \
    \             if (isPrime) {\n                            \"YES\"\n          \
    \              } else {\n                            \"NO\"\n                \
    \        }\n                    }\n                }\n            }\n        }",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start == end) return \"NO\"\n        if (start + 1 == end) return\
    \ \"YES\"\n        if (start + 2 == end) return \"NO\"\n        if (start + 3\
    \ == end) return \"YES\"\n        if (start + 4 == end) return \"NO\"\n      \
    \  if (start + 5 == end) return \"YES\"\n        if (start + 6 == end) return\
    \ \"NO\"\n        if (start + 7 == end) return \"YES\"\n        if (start + 8\
    \ == end) return \"NO\"\n        if (start + 9 == end) return \"NO\"\n       \
    \ if (start + 10 == end) return \"NO\"\n        if (start + 11 == end) return\
    \ \"YES\"\n        if (start + 12 == end) return \"NO\"\n        if (start + 13\
    \ == end) return \"YES\"\n        if (start + 14 == end) return \"NO\"\n     \
    \   if (start + 15 == end) return \"NO\"\n        if (start + 16 == end) return\
    \ \"NO\"\n        if (start + 17 == end) return \"YES\"\n        if (start + 18\
    \ == end) return \"NO\"\n        if (start + 19 == end) return \"YES\"\n     \
    \   if (start + 20 == end) return \"NO\"\n        if (start + 21 == end) return\
    \ \"NO\"\n        if (start + 22 == end) return \"NO\"\n        if (start + 23\
    \ == end) return \"YES\"\n        if (start + 24 == end) return \"NO\"\n     \
    \   if (start + 25 == end) return \"NO\"\n        if (start + 26 == end) return\
    \ \"NO\"\n        if (start + 27 == end) return \"NO\"\n        if (start + 28\
    \ == end) return \"NO\"\n        if (start + 29 == end) return \"YES\"\n     \
    \   if (start + 30 == end) return \"NO\"\n        if (start + 31 ==", "      \
    \  val (start1, end1) = interval1\n        val (start2, end2) = interval2\n  \
    \      val start = max(start1, start2)\n        val end = min(end1, end2)\n  \
    \      if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"\
    YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        if (start1 > end2 || start2 > end1)\
    \ return \"NO\"\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end - start\
    \ + 1)) return \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) \"NO\"\n        else {\n            val start = max(start1, start2)\n\
    \            val end = min(end1, end2)\n            if (start == end) \"YES\"\n\
    \            else if (isPrime(end - start)) \"YES\"\n            else \"NO\"\n\
    \        }", "        val start = max(interval1._1, interval2._1)\n        val\
    \ end = min(interval1._2, interval2._2)\n        if (start > end) return \"NO\"\
    \n        val length = end - start + 1\n        if (length <= 1) return \"NO\"\
    \n        if (length == 2) return \"YES\"\n        for (i <- 2L until length)\
    \ {\n            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"",
  "        val start = max(interval1._1, interval2._1)\n        val end = min(interval1._2,\
    \ interval2._2)\n        if (start > end) return \"NO\"\n        val length =\
    \ end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end\
    \ - start + 1)) return \"YES\"\n        \"NO\"", "        val (start1, end1) =\
    \ interval1\n        val (start2, end2) = interval2\n        if (start1 > end2\
    \ || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n \
    \       val end = min(end1, end2)\n        if (start == end) return \"NO\"\n \
    \       val length = end - start\n        if (length == 1) return \"NO\"\n   \
    \     if (length == 2) return \"YES\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 2L to sqrt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"", "        val (start1, end1) = interval1\n     \
    \   val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) return \"NO\"\n \
    \       val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        val sqrt = sqrt(length).toLong\n        for (i <- 2L to sqrt) {\n   \
    \         if (length % i == 0) return \"NO\"\n        }\n        \"YES\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start == end) return \"NO\"\n        if (isPrime(end - start + 1))\
    \ return \"YES\"\n        return \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) return \"NO\"\n \
    \       val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 2L to sqrt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"", "        val start = max(interval1._1, interval2._1)\n\
    \        val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        val sqrt = math.sqrt(length).toLong\n        for (i <- 2L to\
    \ sqrt) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\n   \
    \     val start = max(start1, start2)\n        val end = min(end1, end2)\n   \
    \     if (start == end) return \"NO\"\n        if (isPrime(end - start + 1)) return\
    \ \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n        val\
    \ (start2, end2) = interval2\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else if\
    \ (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        val length = end - start + 1\n   \
    \     if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n\
    \        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) return \"NO\"\n \
    \       val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 2L to sqrt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"", "        val start = max(interval1._1, interval2._1)\n\
    \        val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        if (start == end) return \"YES\"\n        if (start + 1 == end)\
    \ return \"YES\"\n        if (start + 2 == end) return \"YES\"\n        if (start\
    \ + 3 == end) return \"NO\"\n        if (start + 4 == end) return \"YES\"\n  \
    \      if (start + 5 == end) return \"NO\"\n        if (start + 6 == end) return\
    \ \"YES\"\n        if (start + 7 == end) return \"NO\"\n        if (start + 8\
    \ == end) return \"NO\"\n        if (start + 9 == end) return \"NO\"\n       \
    \ if (start + 10 == end) return \"NO\"\n        if (start + 11 == end) return\
    \ \"YES\"\n        if (start + 12 == end) return \"NO\"\n        if (start + 13\
    \ == end) return \"YES\"\n        if (start + 14 == end) return \"NO\"\n     \
    \   if (start + 15 == end) return \"NO\"\n        if (start + 16 == end) return\
    \ \"NO\"\n        if (start + 17 == end) return \"YES\"\n        if (start + 18\
    \ == end) return \"NO\"\n        if (start + 19 == end) return \"YES\"\n     \
    \   if (start + 20 == end) return \"NO\"\n        if (start + 21 == end) return\
    \ \"NO\"\n        if (start + 22 == end) return \"NO\"\n        if (start + 23\
    \ == end) return \"YES\"\n        if (start + 24 == end) return \"NO\"\n     \
    \   if (start + 25 == end) return \"NO\"\n        if (start + 26 == end) return\
    \ \"NO\"\n        if (start + 27 == end) return \"NO\"\n        if (start + 28\
    \ == end) return \"NO\"\n        if (start + 29 == end) return \"YES\"\n     \
    \   if (start + 30 == end) return \"NO\"\n        if (start + 31 == end) return\
    \ \"YES\"\n        if (start + 32 == end) return \"NO\"\n        if (", "    \
    \    val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start == end) return \"NO\"\n        if (isPrime(end - start + 1))\
    \ return \"YES\"\n        return \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end\
    \ - start + 1)) return \"YES\"\n        \"NO\"", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) return \"NO\"\n        val length = end - start + 1\n        if\
    \ (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n     \
    \   if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        if (interval1._1 > interval2._2 || interval2._1 > interval1._2)\
    \ return \"NO\"\n        val start = max(interval1._1, interval2._1)\n       \
    \ val end = min(interval1._2, interval2._2)\n        if (isPrime(end - start +\
    \ 1)) \"YES\" else \"NO\"", "        val (start1, end1) = interval1\n        val\
    \ (start2, end2) = interval2\n        if (start1 > end2 || start2 > end1) return\
    \ \"NO\"\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (isPrime(end - start + 1)) \"YES\" else \"NO\"", "       \
    \ val (start1, end1) = interval1\n        val (start2, end2) = interval2\n   \
    \     val start = max(start1, start2)\n        val end = min(end1, end2)\n   \
    \     if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\
    \n        else \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start == end) return \"NO\"\n        if (isPrime(end - start + 1))\
    \ return \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n \
    \       val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) {\n            \"\
    NO\"\n        } else {\n            val len = end - start + 1\n            if\
    \ (len == 1) {\n                \"NO\"\n            } else {\n               \
    \ val sqrt = sqrt(len).toLong\n                val isPrime = (2L to sqrt).forall(len\
    \ % _ != 0)\n                if (isPrime) {\n                    \"YES\"\n   \
    \             } else {\n                    \"NO\"\n                }\n      \
    \      }\n        }", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start == end) return \"NO\"\n        val length = end - start\n \
    \       if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) {\n            \"NO\"\n        } else {\n  \
    \          val length = end - start + 1\n            if (length == 1) {\n    \
    \            \"NO\"\n            } else {\n                val sqrt = sqrt(length).toLong\n\
    \                val isPrime = (2L to sqrt).forall(length % _ != 0)\n        \
    \        if (isPrime) {\n                    \"YES\"\n                } else {\n\
    \                    \"NO\"\n                }\n            }\n        }", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) \"NO\"\n        else {\n        \
    \    val start = max(start1, start2)\n            val end = min(end1, end2)\n\
    \            val length = end - start + 1\n            if (length == 1) \"NO\"\
    \n            else if (length == 2) \"YES\"\n            else {\n            \
    \    val sqrt = sqrt(length).toLong\n                var isPrime = true\n    \
    \            for (i <- 2L to sqrt) {\n                    if (length % i == 0)\
    \ {\n                        isPrime = false\n                        i = sqrt\n\
    \                    }\n                }\n                if (isPrime) \"YES\"\
    \n                else \"NO\"\n            }\n        }", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start == end) return \"NO\"\n\
    \        if (isPrime(end - start + 1)) return \"YES\"\n        \"NO\"", "    \
    \    val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        val length = end - start\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        for (i\
    \ <- 2L to sqrt(length).toLong) {\n            if (length % i == 0) return \"\
    NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n \
    \       val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        val length = end - start + 1\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        if (length\
    \ % 2 == 0) return \"NO\"\n        for (i <- 3L to sqrt(length).toLong by 2) {\n\
    \            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        val length = end - start + 1\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        if (length\
    \ % 2 == 0) return \"NO\"\n        val sqrt = sqrt(length).toLong\n        for\
    \ (i <- 3L to sqrt by 2) {\n            if (length % i == 0) return \"NO\"\n \
    \       }\n        \"YES\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        val start = max(start1, start2)\n  \
    \      val end = min(end1, end2)\n        if (start > end) return \"NO\"\n   \
    \     val length = end - start + 1\n        if (length == 1) return \"NO\"\n \
    \       if (length == 2) return \"YES\"\n        if (length % 2 == 0) return \"\
    NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) return \"NO\"\n        val length = end - start + 1\n        if\
    \ (length == 1) return \"NO\"\n        val primes = Array(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        if (primes.contains(length)) return \"YES\"\n        \"NO\"", "     \
    \   val (start1, end1) = interval1\n        val (start2, end2) = interval2\n \
    \       val start = max(start1, start2)\n        val end = min(end1, end2)\n \
    \       if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"\
    YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        val start = max(start1, start2)\n  \
    \      val end = min(end1, end2)\n        if (start > end) return \"NO\"\n   \
    \     val length = end - start + 1\n        if (length == 1) return \"NO\"\n \
    \       if (length == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt)\
    \ {\n            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"",
  "        val start = max(interval1._1, interval2._1)\n        val end = min(interval1._2,\
    \ interval2._2)\n        if (start > end) return \"NO\"\n        val length =\
    \ end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        if\
    \ (length % 3 == 0) return \"NO\"\n        for (i <- 5 to sqrt(length).toInt by\
    \ 2) {\n            if (length % i == 0) return \"NO\"\n        }\n        \"\
    YES\"", "        val (start1, end1) = interval1\n        val (start2, end2) =\
    \ interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end\
    \ - start + 1)) return \"YES\"\n        \"NO\"", "        val (start1, end1) =\
    \ interval1\n        val (start2, end2) = interval2\n        val start = max(start1,\
    \ start2)\n        val end = min(end1, end2)\n        if (start > end) \"NO\"\n\
    \        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) {\n            \"NO\"\n        }\
    \ else {\n            val start = max(start1, start2)\n            val end = min(end1,\
    \ end2)\n            val length = end - start + 1\n            if (length == 1)\
    \ {\n                \"NO\"\n            } else {\n                val isPrime\
    \ = (2 to sqrt(length).toInt).forall(length % _ != 0)\n                if (isPrime)\
    \ \"YES\" else \"NO\"\n            }\n        }", "        val (start1, end1)\
    \ = interval1\n        val (start2, end2) = interval2\n        if (start1 > end2\
    \ || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n \
    \       val end = min(end1, end2)\n        if (start == end) return \"NO\"\n \
    \       if (isPrime(end - start + 1)) return \"YES\"\n        \"NO\"", "     \
    \   val (start1, end1) = interval1\n        val (start2, end2) = interval2\n \
    \       if (start1 > end2 || start2 > end1) return \"NO\"\n        val start =\
    \ max(start1, start2)\n        val end = min(end1, end2)\n        if (start ==\
    \ end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n \
    \       return \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start == end) return \"NO\"\n        if (isPrime(end - start + 1))\
    \ return \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n \
    \       val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start == end) return \"NO\"\n\
    \        if (isPrime(end - start + 1)) return \"YES\"\n        \"NO\"", "    \
    \    val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        val sqrt = sqrt(length).toLong\n        for (i <- 2L to sqrt) {\n  \
    \          if (length % i == 0) return \"NO\"\n        }\n        \"YES\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"\
    YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        if (start1 > end2 || start2 > end1)\
    \ return \"NO\"\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start == end) return \"NO\"\n        val length = end - start\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3L to sqrt(length).toLong\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) \"NO\"\n        else\
    \ {\n            val start = max(start1, start2)\n            val end = min(end1,\
    \ end2)\n            val length = end - start + 1\n            if (length == 1)\
    \ \"NO\"\n            else if (length == 2) \"YES\"\n            else {\n    \
    \            val sqrt = ceil(sqrt(length)).toLong\n                for (i <- 2L\
    \ to sqrt) {\n                    if (length % i == 0) return \"NO\"\n       \
    \         }\n                \"YES\"\n            }\n        }", "        val\
    \ (start1, end1) = interval1\n        val (start2, end2) = interval2\n       \
    \ if (start1 > end2 || start2 > end1) return \"NO\"\n        val start = max(start1,\
    \ start2)\n        val end = min(end1, end2)\n        if (start == end) return\
    \ \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n        \"NO\"",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val start = max(interval1._1, interval2._1)\n     \
    \   val end = min(interval1._2, interval2._2)\n        if (start <= end) {\n \
    \           val length = end - start + 1\n            if (length == 1) \"NO\"\n\
    \            else if (length == 2) \"YES\"\n            else {\n             \
    \   val sqrt = sqrt(length).toLong\n                var isPrime = true\n     \
    \           for (i <- 2L to sqrt) {\n                    if (length % i == 0)\
    \ {\n                        isPrime = false\n                        i = sqrt\n\
    \                    }\n                }\n                if (isPrime) \"YES\"\
    \n                else \"NO\"\n            }\n        }\n        else \"NO\"",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        val length = end - start\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        val sqrt\
    \ = sqrt(length).toLong\n        for (i <- 2L to sqrt) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n \
    \       else \"NO\"", "        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt)\
    \ {\n            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        val sqrt\
    \ = sqrt(length).toLong\n        for (i <- 2L to sqrt) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) return \"NO\"\n        val length = end - start + 1\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        if (length\
    \ % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n\
    \            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"",
  "        val start = max(interval1._1, interval2._1)\n        val end = min(interval1._2,\
    \ interval2._2)\n        if (start > end) return \"NO\"\n        val length =\
    \ end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end\
    \ - start + 1)) return \"YES\"\n        \"NO\"", "        val (start1, end1) =\
    \ interval1\n        val (start2, end2) = interval2\n        val start = max(start1,\
    \ start2)\n        val end = min(end1, end2)\n        if (start > end) \"NO\"\n\
    \        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        val length = end - start\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        for (i\
    \ <- 2 to sqrt(length).toInt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"", "        val (start1, end1) = interval1\n     \
    \   val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) return \"NO\"\n \
    \       val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        if (length % 2 == 0) return\
    \ \"NO\"\n        val sqrt = sqrt(length).toLong\n        for (i <- 3L to sqrt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) return \"NO\"\n        val length = end - start\
    \ + 1\n        if (length == 1) return \"NO\"\n        if (length == 2) return\
    \ \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 3L to sqrt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) return \"NO\"\n \
    \       val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 2L to sqrt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"", "        val (start1, end1) = interval1\n     \
    \   val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) \"NO\"\n        else {\n            val start = max(start1,\
    \ start2)\n            val end = min(end1, end2)\n            if (start == end)\
    \ \"YES\"\n            else if (end - start == 1) \"YES\"\n            else if\
    \ (end - start == 2) \"YES\"\n            else if (end - start == 3) \"YES\"\n\
    \            else if (end - start == 5) \"YES\"\n            else if (end - start\
    \ == 7) \"YES\"\n            else \"NO\"\n        }", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n \
    \       else \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) return \"NO\"\n        val length = end - start\
    \ + 1\n        if (length == 1) return \"NO\"\n        if (length == 2) return\
    \ \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 3 to sqrt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) \"NO\"\n        else {\n            val start = max(start1, start2)\n\
    \            val end = min(end1, end2)\n            val length = end - start +\
    \ 1\n            if (length == 1) \"NO\"\n            else if (length == 2) \"\
    YES\"\n            else if (length % 2 == 0) \"NO\"\n            else {\n    \
    \            val sqrt = sqrt(length).toLong\n                for (i <- 3L to sqrt\
    \ by 2) {\n                    if (length % i == 0) return \"NO\"\n          \
    \      }\n                \"YES\"\n            }\n        }", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val (start,\
    \ end) = (max(start1, start2), min(end1, end2))\n        if (start > end) \"NO\"\
    \n        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end\
    \ - start + 1)) return \"YES\"\n        \"NO\"", "        val (a, b) = interval1\n\
    \        val (c, d) = interval2\n        val start = max(a, c)\n        val end\
    \ = min(b, d)\n        if (start > end) {\n            \"NO\"\n        } else\
    \ {\n            val length = end - start + 1\n            if (length == 1) {\n\
    \                \"NO\"\n            } else {\n                val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991,", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) return \"NO\"\n        val length = end - start\
    \ + 1\n        if (length == 1) return \"NO\"\n        if (length == 2) return\
    \ \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 3L to sqrt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) return \"NO\"\n        val length = end - start + 1\n        if\
    \ (length <= 1) return \"NO\"\n        if (length == 2) return \"YES\"\n     \
    \   if (length % 2 == 0) return \"NO\"\n        for (i <- 3L to sqrt(length).toLong\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val start\
    \ = max(interval1._1, interval2._1)\n        val end = min(interval1._2, interval2._2)\n\
    \        if (start > end) {\n            \"NO\"\n        } else {\n          \
    \  val len = end - start + 1\n            if (len == 1) {\n                \"\
    NO\"\n            } else {\n                val primes = ArrayBuffer(2L, 3L, 5L,\
    \ 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L,\
    \ 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L,\
    \ 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L,\
    \ 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L,\
    \ 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L,\
    \ 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L,\
    \ 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L,\
    \ 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L,\
    \ 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L,\
    \ 691L, 701L, 709L", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val len =\
    \ end - start + 1\n        if (len == 1) return \"NO\"\n        val sqrt = sqrt(len).toLong\n\
    \        for (i <- 2L to sqrt) {\n            if (len % i == 0) return \"NO\"\n\
    \        }\n        \"YES\"", "        val (start1, end1) = interval1\n      \
    \  val (start2, end2) = interval2\n        val start = max(start1, start2)\n \
    \       val end = min(end1, end2)\n        if (start > end) return \"NO\"\n  \
    \      val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        if (length % 2 == 0) return\
    \ \"NO\"\n        for (i <- 3L to sqrt(length).toLong by 2) {\n            if\
    \ (length % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) return \"NO\"\n        val length = end - start\
    \ + 1\n        if (length == 1) return \"NO\"\n        if (length == 2) return\
    \ \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 3 to sqrt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end\
    \ - start + 1)) return \"YES\"\n        \"NO\"", "        val (start1, end1) =\
    \ interval1\n        val (start2, end2) = interval2\n        if (start1 > end2\
    \ || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n \
    \       val end = min(end1, end2)\n        if (start == end) return \"NO\"\n \
    \       if (isPrime(end - start + 1)) return \"YES\"\n        \"NO\"", "     \
    \   val (start1, end1) = interval1\n        val (start2, end2) = interval2\n \
    \       val start = max(start1, start2)\n        val end = min(end1, end2)\n \
    \       if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"\
    YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        val start = max(start1, start2)\n  \
    \      val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) {\n            \"NO\"\n        } else {\n         \
    \   val start = max(start1, start2)\n            val end = min(end1, end2)\n \
    \           if (isPrime(end - start + 1)) \"YES\" else \"NO\"\n        }", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"\
    YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        if (start1 > end2 || start2 > end1)\
    \ return \"NO\"\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end - start\
    \ + 1)) return \"YES\"\n        return \"NO\"", "        val (start1, end1) =\
    \ interval1\n        val (start2, end2) = interval2\n        val start = max(start1,\
    \ start2)\n        val end = min(end1, end2)\n        if (start > end) \"NO\"\n\
    \        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        val length = end - start\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        if (length\
    \ % 2 == 0) return \"NO\"\n        val sqrt = sqrt(length).toLong\n        for\
    \ (i <- 3L to sqrt by 2) {\n            if (length % i == 0) return \"NO\"\n \
    \       }\n        \"YES\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        val start = max(start1, start2)\n  \
    \      val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val start\
    \ = max(interval1._1, interval2._1)\n        val end = min(interval1._2, interval2._2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) return \"NO\"\n        val length = end - start + 1\n        if\
    \ (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n     \
    \   if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\n   \
    \     val start = max(start1, start2)\n        val end = min(end1, end2)\n   \
    \     if (start == end) return \"NO\"\n        if (isPrime(end - start + 1)) return\
    \ \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n        val\
    \ (start2, end2) = interval2\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else if\
    \ (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        if (interval1._1 > interval2._2 || interval2._1 > interval1._2)\
    \ return \"NO\"\n        val start = max(interval1._1, interval2._1)\n       \
    \ val end = min(interval1._2, interval2._2)\n        val length = end - start\
    \ + 1\n        if (length == 1) return \"NO\"\n        if (length == 2) return\
    \ \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) return \"NO\"\n        val length = end - start + 1\n        if\
    \ (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n     \
    \   for (i <- 2L to sqrt(length).toLong) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) return \"NO\"\n        val length = end - start + 1\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        val sqrt\
    \ = sqrt(length).toLong\n        for (i <- 2L to sqrt) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start == end) return \"NO\"\n\
    \        if (isPrime(end - start + 1)) return \"YES\"\n        \"NO\"", "    \
    \    val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"\
    YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        val start = max(start1, start2)\n  \
    \      val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (a, b) = interval1\n     \
    \   val (c, d) = interval2\n        val start = max(a, c)\n        val end = min(b,\
    \ d)\n        if (start > end) return \"NO\"\n        val length = end - start\
    \ + 1\n        if (length == 1) return \"NO\"\n        if (length == 2) return\
    \ \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to\
    \ sqrt(length).toInt by 2) {\n            if (length % i == 0) return \"NO\"\n\
    \        }\n        \"YES\"", "        val (start1, end1) = interval1\n      \
    \  val (start2, end2) = interval2\n        if (start1 > end2 || start2 > end1)\
    \ \"NO\"\n        else {\n            val start = max(start1, start2)\n      \
    \      val end = min(end1, end2)\n            if (start == end) \"YES\"\n    \
    \        else if (start == end - 1) \"YES\"\n            else if (start == end\
    \ - 2) \"NO\"\n            else if (start == end - 3) \"YES\"\n            else\
    \ if (start == end - 4) \"NO\"\n            else if (start == end - 5) \"YES\"\
    \n            else if (start == end - 6) \"NO\"\n            else if (start ==\
    \ end - 7) \"YES\"\n            else if (start == end - 8) \"NO\"\n          \
    \  else if (start == end - 9) \"NO\"\n            else if (start == end - 10)\
    \ \"NO\"\n            else if (start == end - 11) \"YES\"\n            else if\
    \ (start == end - 12) \"NO\"\n            else if (start == end - 13) \"YES\"\n\
    \            else if (start == end - 14) \"NO\"\n            else if (start ==\
    \ end - 15) \"NO\"\n            else if (start == end - 16) \"NO\"\n         \
    \   else if (start == end - 17) \"YES\"\n            else if (start == end - 18)\
    \ \"NO\"\n            else if (start == end - 19) \"YES\"\n            else if\
    \ (start == end - 20) \"NO\"\n            else if (start == end - 21) \"NO\"\n\
    \            else if (start == end - 22) \"NO\"\n            else if (start ==\
    \ end - 23) \"YES\"\n            else if (start == end - 24) \"NO\"\n        \
    \    else if (start == end - 25) \"NO\"\n            else if (start == end - 26)\
    \ \"NO\"\n            else if (start == end - 27) \"NO\"\n            else if\
    \ (start == end - 28) \"NO\"\n            else if (start == end - 29) \"YES\"\n\
    \            else if (start == end - 30) \"NO\"\n            else if (start",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        val length = end - start\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        if (length\
    \ % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n\
    \            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        val sqrt = sqrt(length).toLong\n        for (i\
    \ <- 2L to sqrt) {\n            if (length % i == 0) return \"NO\"\n        }\n\
    \        \"YES\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (end1 < start2 || end2 < start1) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        if (length % 2 == 0) return\
    \ \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\n   \
    \     val start = max(start1, start2)\n        val end = min(end1, end2)\n   \
    \     if (start == end) return \"NO\"\n        val length = end - start\n    \
    \    if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n\
    \        for (i <- 2 to sqrt(length).toInt) {\n            if (length % i == 0)\
    \ return \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (isPrime(end - start + 1)) \"YES\" else \"NO\"",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        val length = end - start\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        if (length\
    \ % 2 == 0) return \"NO\"\n        if (length % 3 == 0) return \"NO\"\n      \
    \  if (length % 5 == 0) return \"NO\"\n        if (length % 7 == 0) return \"\
    NO\"\n        \"YES\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        val sqrt = sqrt(length).toLong\n        for (i\
    \ <- 2L to sqrt) {\n            if (length % i == 0) return \"NO\"\n        }\n\
    \        \"YES\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (start ==\
    \ end) \"YES\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\n   \
    \     val start = max(start1, start2)\n        val end = min(end1, end2)\n   \
    \     if (start == end) return \"NO\"\n        if (isPrime(end - start + 1)) return\
    \ \"YES\"\n        return \"NO\"", "        val (start1, end1) = interval1\n \
    \       val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) return \"NO\"\n \
    \       val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 2L to sqrt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"", "        val start = max(interval1._1, interval2._1)\n\
    \        val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                if (length == 2) {\n                    \"YES\"\n       \
    \         } else {\n                    if (length % 2 == 0) {\n             \
    \           \"NO\"\n                    } else {\n                        var\
    \ isPrime = true\n                        for (i <- 3L to sqrt(length).toLong\
    \ by 2) {\n                            if (length % i == 0) {\n              \
    \                  isPrime = false\n                            }\n          \
    \              }\n                        if (isPrime) {\n                   \
    \         \"YES\"\n                        } else {\n                        \
    \    \"NO\"\n                        }\n                    }\n              \
    \  }\n            }\n        }", "        val (start1, end1) = interval1\n   \
    \     val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (end - start == 1) \"YES\"\n        else if (end - start == 2) \"NO\"\n \
    \       else if (end - start == 3) \"YES\"\n        else if (end - start == 4)\
    \ \"NO\"\n        else if (end - start == 5) \"YES\"\n        else if (end - start\
    \ == 6) \"NO\"\n        else if (end - start == 7) \"YES\"\n        else if (end\
    \ - start == 8) \"NO\"\n        else if (end - start == 9) \"NO\"\n        else\
    \ if (end - start == 10) \"NO\"\n        else if (end - start == 11) \"YES\"\n\
    \        else if (end - start == 12) \"NO\"\n        else if (end - start == 13)\
    \ \"YES\"\n        else if (end - start == 14) \"NO\"\n        else if (end -\
    \ start == 15) \"NO\"\n        else if (end - start == 16) \"NO\"\n        else\
    \ if (end - start == 17) \"YES\"\n        else if (end - start == 18) \"NO\"\n\
    \        else if (end - start == 19) \"YES\"\n        else if (end - start ==\
    \ 20) \"NO\"\n        else if (end - start == 21) \"NO\"\n        else if (end\
    \ - start == 22) \"NO\"\n        else if (end - start == 23) \"YES\"\n       \
    \ else if (end - start == 24) \"NO\"\n        else if (end - start == 25) \"NO\"\
    \n        else if (end - start == 26) \"NO\"\n        else if (end - start ==\
    \ 27) \"NO\"\n        else if (end - start == 28) \"NO\"\n        else if (end\
    \ - start == 29) \"YES\"\n        else if (end - start == 30) \"NO\"\n       \
    \ else if (end - start == 31) \"YES\"\n        else if (end - start == 32) \"\
    NO\"\n", "        val start = max(interval1._1, interval2._1)\n        val end\
    \ = min(interval1._2, interval2._2)\n        if (start > end) return \"NO\"\n\
    \        val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        if (length % 2 == 0) return\
    \ \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start == end) return \"NO\"\n        val length\
    \ = end - start\n        if (length == 1) return \"NO\"\n        if (length ==\
    \ 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for (i\
    \ <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val start\
    \ = max(interval1._1, interval2._1)\n        val end = min(interval1._2, interval2._2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        val sqrt = sqrt(length).toLong\n        for (i <- 2L to sqrt) {\n  \
    \          if (length % i == 0) return \"NO\"\n        }\n        \"YES\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 3L to sqrt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start == end) return \"NO\"\n\
    \        if (isPrime(end - start + 1)) return \"YES\"\n        \"NO\"", "    \
    \    val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) \"NO\"\n        else\
    \ {\n            val start = max(start1, start2)\n            val end = min(end1,\
    \ end2)\n            if (start == end) \"YES\"\n            else if (isPrime(end\
    \ - start)) \"YES\"\n            else \"NO\"\n        }", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) {\n            \"NO\"\n        } else {\n         \
    \   val start = max(start1, start2)\n            val end = min(end1, end2)\n \
    \           val len = end - start + 1\n            if (len == 1) {\n         \
    \       \"NO\"\n            } else {\n                val primes = ArrayBuffer[Long]()\n\
    \                primes += 2\n                var i = 3\n                while\
    \ (primes.last < len) {\n                    var isPrime = true\n            \
    \        for (prime <- primes) {\n                        if (i % prime == 0)\
    \ {\n                            isPrime = false\n                           \
    \ break\n                        }\n                    }\n                  \
    \  if (isPrime) primes += i\n                    i += 2\n                }\n \
    \               if (primes.contains(len)) \"YES\" else \"NO\"\n            }\n\
    \        }", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\n   \
    \     val start = max(start1, start2)\n        val end = min(end1, end2)\n   \
    \     if (start == end) return \"NO\"\n        if (isPrime(end - start + 1)) return\
    \ \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n        val\
    \ (start2, end2) = interval2\n        if (start1 > end2 || start2 > end1) return\
    \ \"NO\"\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end - start\
    \ + 1)) return \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) return \"NO\"\n \
    \       val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        if (length % 2 == 0) return\
    \ \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\n   \
    \     val start = max(start1, start2)\n        val end = min(end1, end2)\n   \
    \     if (start == end) return \"NO\"\n        if (isPrime(end - start + 1)) return\
    \ \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n        val\
    \ (start2, end2) = interval2\n        if (start1 > end2 || start2 > end1) return\
    \ \"NO\"\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end - start\
    \ + 1)) return \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val start\
    \ = max(interval1._1, interval2._1)\n        val end = min(interval1._2, interval2._2)\n\
    \        if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"\
    YES\"\n        else \"NO\"", "        if (interval1._1 > interval2._2 || interval2._1\
    \ > interval1._2) return \"NO\"\n        val start = max(interval1._1, interval2._1)\n\
    \        val end = min(interval1._2, interval2._2)\n        if (start == end)\
    \ return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n      \
    \  \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\n   \
    \     val start = max(start1, start2)\n        val end = min(end1, end2)\n   \
    \     if (start == end) return \"NO\"\n        if (isPrime(end - start + 1)) return\
    \ \"YES\"\n        \"NO\"", "        val (start1, end1) = interval1\n        val\
    \ (start2, end2) = interval2\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else if\
    \ (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) {\n            \"NO\"\n        } else {\n            val length = end\
    \ - start + 1\n            if (length == 1) {\n                \"NO\"\n      \
    \      } else {\n                val sqrt = sqrt(length).toLong\n            \
    \    val isPrime = (2L to sqrt).forall(length % _ != 0)\n                if (isPrime)\
    \ {\n                    \"YES\"\n                } else {\n                 \
    \   \"NO\"\n                }\n            }\n        }", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val start\
    \ = max(interval1._1, interval2._1)\n        val end = min(interval1._2, interval2._2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        for (i <- 2 until length) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end\
    \ - start + 1)) return \"YES\"\n        \"NO\"", "        val (start1, end1) =\
    \ interval1\n        val (start2, end2) = interval2\n        val start = max(start1,\
    \ start2)\n        val end = min(end1, end2)\n        if (start > end) \"NO\"\n\
    \        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (start + 1 == end) return \"YES\"\n      \
    \  val length = end - start\n        if (length % 2 == 0) return \"NO\"\n    \
    \    val sqrt = sqrt(length).toLong\n        for (i <- 3L to sqrt by 2) {\n  \
    \          if (length % i == 0) return \"NO\"\n        }\n        \"YES\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ == end) return \"NO\"\n        if (isPrime(end - start + 1)) return \"YES\"\n\
    \        \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        if (start1 > end2 || start2 > end1) \"NO\"\n        else\
    \ {\n            val start = max(start1, start2)\n            val end = min(end1,\
    \ end2)\n            if (end - start == 1) \"YES\"\n            else if (end -\
    \ start == 0) \"NO\"\n            else {\n                val primes = ArrayBuffer[Long]()\n\
    \                for (i <- 2L to end - start) {\n                    var isPrime\
    \ = true\n                    for (j <- 2L to sqrt(i).toLong) {\n            \
    \            if (i % j == 0) {\n                            isPrime = false\n\
    \                            break\n                        }\n              \
    \      }\n                    if (isPrime) primes += i\n                }\n  \
    \              if (primes.contains(end - start)) \"YES\"\n                else\
    \ \"NO\"\n            }\n        }", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end2 || start2 >\
    \ end1) \"NO\"\n        else {\n            val start = max(start1, start2)\n\
    \            val end = min(end1, end2)\n            val length = end - start +\
    \ 1\n            if (length == 1) \"NO\"\n            else if (length == 2) \"\
    YES\"\n            else {\n                val sqrt = math.sqrt(length).toLong\n\
    \                val primes = ArrayBuffer[Long]()\n                for (i <- 2L\
    \ to sqrt) {\n                    if (length % i == 0) {\n                   \
    \     primes += i\n                        primes += length / i\n            \
    \        }\n                }\n                if (primes.size == 0) \"YES\"\n\
    \                else \"NO\"\n            }\n        }", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) return \"NO\"\n        val length = end - start + 1\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        val sqrt\
    \ = sqrt(length).toLong\n        for (i <- 2L to sqrt) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) {\n            \"NO\"\n        } else {\n         \
    \   val start = max(start1, start2)\n            val end = min(end1, end2)\n \
    \           if (isPrime(end - start + 1)) \"YES\" else \"NO\"\n        }", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"\
    YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        if (start1 > end2 || start2 > end1)\
    \ \"NO\"\n        else {\n            val start = max(start1, start2)\n      \
    \      val end = min(end1, end2)\n            if (isPrime(end - start + 1)) \"\
    YES\"\n            else \"NO\"\n        }", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) return \"NO\"\n \
    \       val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 2L to sqrt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"", "        val (start1, end1) = interval1\n     \
    \   val (start2, end2) = interval2\n        if (start1 > end2 || start2 > end1)\
    \ return \"NO\"\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start == end) return \"NO\"\n        if (isPrime(end - start\
    \ + 1)) return \"YES\"\n        return \"NO\"", "        val (start1, end1) =\
    \ interval1\n        val (start2, end2) = interval2\n        val start = max(start1,\
    \ start2)\n        val end = min(end1, end2)\n        if (start > end) \"NO\"\n\
    \        else if (start == end) if (isPrime(start)) \"YES\" else \"NO\"\n    \
    \    else if (end - start == 1) if (isPrime(start) || isPrime(end)) \"YES\" else\
    \ \"NO\"\n        else if (isPrime(end - start)) \"YES\" else \"NO\"", "     \
    \   val (start1, end1) = interval1\n        val (start2, end2) = interval2\n \
    \       val start = max(start1, start2)\n        val end = min(end1, end2)\n \
    \       if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        for (i <- 2 to sqrt(length).toInt) {\n            if (length % i ==\
    \ 0) return \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) =\
    \ interval1\n        val (start2, end2) = interval2\n        if (start1 > end2\
    \ || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n \
    \       val end = min(end1, end2)\n        if (start == end) return \"NO\"\n \
    \       val length = end - start\n        if (length == 1) return \"NO\"\n   \
    \     if (length == 2) return \"YES\"\n        if (length % 2 == 0) return \"\
    NO\"\n        if (length % 3 == 0) return \"NO\"\n        if (length % 5 == 0)\
    \ return \"NO\"\n        if (length % 7 == 0) return \"NO\"\n        if (length\
    \ % 11 == 0) return \"NO\"\n        if (length % 13 == 0) return \"NO\"\n    \
    \    if (length % 17 == 0) return \"NO\"\n        if (length % 19 == 0) return\
    \ \"NO\"\n        if (length % 23 == 0) return \"NO\"\n        if (length % 29\
    \ == 0) return \"NO\"\n        if (length % 31 == 0) return \"NO\"\n        if\
    \ (length % 37 == 0) return \"NO\"\n        if (length % 41 == 0) return \"NO\"\
    \n        if (length % 43 == 0) return \"NO\"\n        if (length % 47 == 0) return\
    \ \"NO\"\n        if (length % 53 == 0) return \"NO\"\n        if (length % 59\
    \ == 0) return \"NO\"\n        if (length % 61 == 0) return \"NO\"\n        if\
    \ (length % 67 == 0) return \"NO\"\n        if (length % 71 == 0) return \"NO\"\
    \n        if (length % 73 == 0) return \"NO\"\n        if (length % 79 == 0) return\
    \ \"NO\"\n        if (length % 83 == 0) return \"NO\"\n        if (length % 89\
    \ == 0) return \"NO\"\n        if (length % 97 == 0) return \"NO\"\n        \"\
    YES\"", "        val (start1, end1) = interval1\n        val (start2, end2) =\
    \ interval2\n        if (start1 > end2 || start2 > end1) return \"NO\"\n     \
    \   val start = max(start1, start2)\n        val end = min(end1, end2)\n     \
    \   if (isPrime(end - start + 1)) \"YES\" else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        val length = end - start + 1\n   \
    \     if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n\
    \        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end2 || start2 > end1) return \"NO\"\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start == end) return \"NO\"\n\
    \        if (isPrime(end - start + 1)) return \"YES\"\n        \"NO\""]
stop_tokens:
- "\n    }\n"
