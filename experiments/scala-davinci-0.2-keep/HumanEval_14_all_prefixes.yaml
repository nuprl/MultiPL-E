name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
  \ : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        val n = string.length\n        (0 to n).map(i => string.substring(0,\
    \ i)).toList", "        var result = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            result = result :+ string.substring(0, i + 1)\n        }\n\
    \        return result", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) result = result :+ string.substring(0,\
    \ i + 1)\n        result", "        val n = string.length\n        var result\
    \ = List[String]()\n        for (i <- 0 until n) {\n            result = string.substring(0,\
    \ i + 1) :: result\n        }\n        result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  if (string.length == 0) return List()\n        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val n = string.length\n    \
    \    (0 to n).map(i => string.substring(0, i)).toList", '        (1 to string.length).map(string.substring(0,
    _)).toList', "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = result :+ string.substring(0, i)\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length - 1) {\n            result = result :+ string.substring(0, i +\
    \ 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) prefixes = string.substring(0, i) :: prefixes\n\
    \        prefixes", "        var result = List[String]()\n        for (i <- 0\
    \ to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = string.substring(0,\
    \ i + 1) :: result\n        }\n        return result", "        var prefixes =\
    \ List[String]()\n        for (i <- 0 to string.length - 1) {\n            prefixes\
    \ = prefixes :+ string.substring(0, i + 1)\n        }\n        return prefixes",
  "        var result = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            result = result :+ string.substring(0, i + 1)\n        }\n  \
    \      return result", "        val n = string.length\n        (for (i <- 1 to\
    \ n) yield string.substring(0, i)).toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val n = string.length\n    \
    \    (0 to n).map(i => string.substring(0, i)).toList", "        var result =\
    \ List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     var result = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            result = result :+ string.substring(0, i + 1)\n        }\n      \
    \  return result", "        var prefixes = List[String]()\n        for (i <- 0\
    \ to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result ::= string.substring(0,\
    \ i + 1)\n        }\n        result.reverse", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val n = string.length\n    \
    \    val result = new ListBuffer[String]\n        for (i <- 0 until n) {\n   \
    \         result += string.substring(0, i + 1)\n        }\n        result.toList",
  "        var result = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            result = result :+ string.substring(0, i + 1)\n        }\n  \
    \      return result", "        var prefixes = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val n = string.length\n\
    \        (0 to n).map(i => string.substring(0, i)).toList", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length - 1) result = result\
    \ :+ string.substring(0, i + 1)\n        result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) result = string.substring(0, i) :: result\n\
    \        result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length - 1) {\n            result = result :+ string.substring(0, i +\
    \ 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 1 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            result = result :+ string.substring(0, i + 1)\n        }\n      \
    \  return result", "        if (string.length == 0) return List()\n        val\
    \ prefixes = new ListBuffer[String]\n        for (i <- 0 to string.length - 1)\
    \ {\n            prefixes += string.substring(0, i + 1)\n        }\n        prefixes.toList",
  "        var result = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            result = result :+ string.substring(0, i + 1)\n        }\n  \
    \      return result", "        var prefixes = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var prefixes = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            prefixes = prefixes :+ string.substring(0, i + 1)\n        }\n  \
    \      return prefixes", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) prefixes ::= string.substring(0, i\
    \ + 1)\n        prefixes.reverse", "        var result = List[String]()\n    \
    \    for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            result += string.substring(0,\
    \ i)\n        }\n        result.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length - 1) result\
    \ = result :+ string.substring(0, i + 1)\n        result", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     var result = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            result = result :+ string.substring(0, i + 1)\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length) {\n            result = result :+ string.substring(0, i)\n  \
    \      }\n        return result", "        var prefixes = List[String]()\n   \
    \     for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var list = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            list = list :+ string.substring(0,\
    \ i + 1)\n        }\n        return list", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            result = result :+ string.substring(0, i + 1)\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length - 1) {\n            result = result :+ string.substring(0, i +\
    \ 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = string.substring(0,\
    \ i + 1) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        if (string.length == 0)\
    \ List()\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            allPrefixes(prefix) :+ string\n        }", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     var result = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            result = result :+ string.substring(0, i + 1)\n        }\n      \
    \  return result", "        var prefixes = List[String]()\n        for (i <- 0\
    \ to string.length - 1) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i + 1)\n        }\n        return prefixes", "        val n = string.length\n\
    \        var result = List[String]()\n        for (i <- 1 to n) {\n          \
    \  result = string.substring(0, i) :: result\n        }\n        result", "  \
    \      var prefixes = List[String]()\n        for (i <- 1 to string.length) {\n\
    \            prefixes = prefixes :+ string.substring(0, i)\n        }\n      \
    \  return prefixes", "        var result = List[String]()\n        for (i <- 0\
    \ to string.length) {\n            result = result :+ string.substring(0, i)\n\
    \        }\n        return result", "        var result = List[String]()\n   \
    \     for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) prefixes += string.substring(0, i)\n  \
    \      prefixes.toList", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        val prefixes = new\
    \ ListBuffer[String]\n        for (i <- 0 to string.length - 1) {\n          \
    \  prefixes += string.substring(0, i + 1)\n        }\n        prefixes.toList",
  "        var prefixes = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            prefixes = prefixes :+ string.substring(0, i + 1)\n        }\n\
    \        return prefixes", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val n = string.length\n    \
    \    (for (i <- 1 to n) yield string.substring(0, i)).toList", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     var prefixes = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            prefixes = prefixes :+ string.substring(0, i + 1)\n        }\n\
    \        return prefixes", "        var prefixes = List[String]()\n        for\
    \ (i <- 1 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        def helper(string : String,\
    \ acc : List[String]) : List[String] = {\n            if (string.length == 0)\
    \ acc\n            else helper(string.substring(0, string.length - 1), string.substring(0,\
    \ string.length) :: acc)\n        }\n        helper(string, List())", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length) {\n    \
    \        result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        var prefixes = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            prefixes = prefixes :+ string.substring(0, i + 1)\n    \
    \    }\n        return prefixes", "        var result = List[String]()\n     \
    \   for (i <- 1 to string.length) result = string.substring(0, i) :: result\n\
    \        result", "        val prefixes = new ListBuffer[String]\n        for\
    \ (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) result = result :+ string.substring(0,\
    \ i + 1)\n        result", "        var result = List[String]()\n        for (i\
    \ <- 1 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) prefixes = string.substring(0, i) :: prefixes\n\
    \        prefixes", "        var result = List[String]()\n        for (i <- 0\
    \ to string.length - 1) result = result :+ string.substring(0, i + 1)\n      \
    \  result", "        var result = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            result = result :+ string.substring(0, i + 1)\n        }\n\
    \        return result", "        var prefixes = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length) {\n    \
    \        result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        var result = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            result = result :+ string.substring(0, i + 1)\n        }\n\
    \        return result", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val prefixes = ListBuffer[String]()\n\
    \        for (i <- 1 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val n = string.length\n\
    \        val prefixes = new ListBuffer[String]\n        for (i <- 0 until n) {\n\
    \            prefixes += string.substring(0, i + 1)\n        }\n        prefixes.toList",
  "        var result = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            result = string.substring(0, i) :: result\n        }\n        return\
    \ result", "        var prefixes = List[String]()\n        for (i <- 1 to string.length)\
    \ {\n            prefixes = prefixes :+ string.substring(0, i)\n        }\n  \
    \      return prefixes", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) result = result :+ string.substring(0,\
    \ i)\n        result", "        var result = List[String]()\n        for (i <-\
    \ 0 to string.length) result = string.substring(0, i) :: result\n        result",
  "        var result = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            result = result :+ string.substring(0, i + 1)\n        }\n  \
    \      return result", "        var result = List[String]()\n        for (i <-\
    \ 0 to string.length) result = string.substring(0, i) :: result\n        result",
  "        var result = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            result = string.substring(0, i) :: result\n        }\n        return\
    \ result", "        val prefixes = new ListBuffer[String]\n        for (i <- 0\
    \ to string.length) {\n            prefixes += string.substring(0, i)\n      \
    \  }\n        prefixes.toList", "        var result = List[String]()\n       \
    \ for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
