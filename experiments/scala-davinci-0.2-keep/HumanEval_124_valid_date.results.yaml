language: scala
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case dateRegex(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                return true\n\
    \            }\n            case _ => return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        pattern.findFirstIn(date) match {\n            case Some(s) => {\n\
    \                val dateArray = s.split(\"-\")\n                val month = dateArray(0).toInt\n\
    \                val day = dateArray(1).toInt\n                val year = dateArray(2).toInt\n\
    \                if (month < 1 || month > 12) return false\n                if\
    \ (day < 1 || day > 31) return false\n                if (month == 2) {\n    \
    \                if (day > 29) return false\n                    if (day == 29)\
    \ {\n                        if (year % 4 != 0) return false\n               \
    \         if (year % 100 == 0 && year % 400 != 0) return false\n             \
    \       }\n                }\n                if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n                    if (day > 30) return false\n\
    \                }\n                true\n            }\n            case None\
    \ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                return true\n\
    \            }\n            case _ => return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val days = day.toInt\n\
    \        val months = month.toInt\n        val years = year.toInt\n        if\
    \ (months == 2) {\n            if (days > 29) return false\n            if (days\
    \ == 29) {\n                if (years % 4 != 0) return false\n               \
    \ if (years % 100 == 0 && years % 400 != 0) return false\n            }\n    \
    \    }\n        else if (months == 4 || months == 6 || months == 9 || months ==\
    \ 11) {\n            if (days > 30) return false\n        }\n        else if (months\
    \ == 1 || months == 3 || months == 5 || months == 7 || months == 8 || months ==\
    \ 10 || months == 12) {\n            if (days > 31) return false\n        }\n\
    \        else return false\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpzoinbgxc.scala:19)\n\
    \tat Problem$.main(tmpzoinbgxc.scala:40)\n\tat Problem.main(tmpzoinbgxc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.isEmpty) return\
    \ false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case dateRegex(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(m,\
    \ d, y) => {\n                val month = m.toInt\n                val day = d.toInt\n\
    \                val year = y.toInt\n                if (month < 1 || month >\
    \ 12) return false\n                if (day < 1 || day > 31) return false\n  \
    \              if (month == 2) {\n                    if (day > 29) return false\n\
    \                    if (day == 29) {\n                        if (year % 4 !=\
    \ 0) return false\n                        if (year % 100 == 0 && year % 400 !=\
    \ 0) return false\n                    }\n                }\n                if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n                \
    \    if (day > 30) return false\n                }\n                true\n   \
    \         }\n            case _ => false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        date match {\n            case dateRegex(month, day, year) => {\n\
    \                val monthInt = month.toInt\n                val dayInt = day.toInt\n\
    \                val yearInt = year.toInt\n                if (monthInt == 2)\
    \ {\n                    if (yearInt % 4 == 0) {\n                        if (dayInt\
    \ <= 29) true else false\n                    } else {\n                     \
    \   if (dayInt <= 28) true else false\n                    }\n               \
    \ } else if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11)\
    \ {\n                    if (dayInt <= 30) true else false\n                }\
    \ else {\n                    if (dayInt <= 31) true else false\n            \
    \    }\n            }\n            case _ => false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc0sgtukc.scala:40)\n\tat Problem.main(tmpc0sgtukc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ > 29) return false\n            } else {\n                if (dayInt > 28) return\
    \ false\n            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n            if (dayInt > 30) return false\n     \
    \   } else {\n            if (dayInt > 31) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpmrs19q2w.scala:19)\n\
    \tat Problem$.main(tmpmrs19q2w.scala:37)\n\tat Problem.main(tmpmrs19q2w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(m,\
    \ d, y) => {\n                val month = m.toInt\n                val day = d.toInt\n\
    \                val year = y.toInt\n                if (month < 1 || month >\
    \ 12) false\n                else if (day < 1 || day > 31) false\n           \
    \     else if (month == 2 && day > 29) false\n                else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n                    if (day\
    \ > 30) false\n                    else true\n                }\n            \
    \    else true\n            }\n            case _ => false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    .r\n        date match {\n            case pattern(month, day, year) => {\n  \
    \              val monthInt = month.toInt\n                val dayInt = day.toInt\n\
    \                val yearInt = year.toInt\n                if (monthInt == 2)\
    \ {\n                    if (yearInt % 4 == 0) {\n                        if (dayInt\
    \ > 29) return false\n                    } else {\n                        if\
    \ (dayInt > 28) return false\n                    }\n                } else if\
    \ (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n    \
    \                if (dayInt > 30) return false\n                } else {\n   \
    \                 if (dayInt > 31) return false\n                }\n         \
    \       true\n            }\n            case _ => false\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        date match {\n            case pattern() => {\n                val\
    \ dateArray = date.split(\"-\")\n                val month = dateArray(0).toInt\n\
    \                val day = dateArray(1).toInt\n                val year = dateArray(2).toInt\n\
    \                if (month < 1 || month > 12) return false\n                if\
    \ (day < 1 || day > 31) return false\n                if (month == 2) {\n    \
    \                if (day > 29) return false\n                    if (day == 29)\
    \ {\n                        if (year % 4 != 0) return false\n               \
    \         if (year % 100 == 0 && year % 400 != 0) return false\n             \
    \       }\n                }\n                if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n                    if (day > 30) return false\n\
    \                }\n                true\n            }\n            case _ =>\
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfyr8an87.scala:43)\n\tat Problem.main(tmpfyr8an87.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (pattern.findFirstIn(date) == None) return false\n        val Array(month,\
    \ day, year) = date.split(\"-\").map(_.toInt)\n        if (month < 1 || month\
    \ > 12) return false\n        if (day < 1 || day > 31) return false\n        if\
    \ (month == 2) {\n            if (day > 29) return false\n            if (day\
    \ == 29) {\n                if (year % 4 != 0) return false\n                if\
    \ (year % 100 == 0 && year % 400 != 0) return false\n            }\n        }\n\
    \        if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \      if (day > 30) return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    .r\n        date match {\n            case pattern(month, day, year) => {\n  \
    \              if (month.toInt == 2) {\n                    if (day.toInt > 29)\
    \ return false\n                    else if (day.toInt == 29) {\n            \
    \            if (year.toInt % 4 != 0) return false\n                        else\
    \ if (year.toInt % 100 == 0 && year.toInt % 400 != 0) return false\n         \
    \           }\n                }\n                else if (month.toInt == 4 ||\
    \ month.toInt == 6 || month.toInt == 9 || month.toInt == 11) {\n             \
    \       if (day.toInt > 30) return false\n                }\n                else\
    \ if (day.toInt > 31) return false\n                true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val months = List(1,\
    \ 3, 5, 7, 8, 10, 12)\n        val months2 = List(4, 6, 9, 11)\n        val dateArray\
    \ = date.split(\"-\")\n        if (dateArray.length != 3) return false\n     \
    \   val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        if (month < 1 || month > 12) return\
    \ false\n        if (months.contains(month)) {\n            if (day < 1 || day\
    \ > 31) return false\n        } else if (months2.contains(month)) {\n        \
    \    if (day < 1 || day > 30) return false\n        } else {\n            if (day\
    \ < 1 || day > 29) return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val months = Map(1 ->\
    \ 31, 3 -> 31, 5 -> 31, 7 -> 31, 8 -> 31, 10 -> 31, 12 -> 31, 4 -> 30, 6 -> 30,\
    \ 9 -> 30, 11 -> 30, 2 -> 29)\n        val dateArray = date.split(\"-\")\n   \
    \     if (dateArray.length != 3) return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > months(month)) return false\n        if (year < 1) return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        date match\
    \ {\n            case datePattern() => {\n                val dateArray = date.split(\"\
    -\")\n                val month = dateArray(0).toInt\n                val day\
    \ = dateArray(1).toInt\n                val year = dateArray(2).toInt\n      \
    \          if (month < 1 || month > 12) return false\n                if (month\
    \ == 2) {\n                    if (year % 4 == 0) {\n                        if\
    \ (day < 1 || day > 29) return false\n                    } else {\n         \
    \               if (day < 1 || day > 28) return false\n                    }\n\
    \                } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n                    if (day\
    \ < 1 || day > 31) return false\n                } else {\n                  \
    \  if (day < 1 || day > 30) return false\n                }\n                return\
    \ true\n            }\n            case _ => return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptkcj8prh.scala:43)\n\tat Problem.main(tmptkcj8prh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val months = Map(1 ->\
    \ 31, 2 -> 29, 3 -> 31, 4 -> 30, 5 -> 31, 6 -> 30, 7 -> 31, 8 -> 31, 9 -> 30,\
    \ 10 -> 31, 11 -> 30, 12 -> 31)\n        val dateArray = date.split(\"-\")\n \
    \       if (dateArray.length != 3) return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > months(month)) return false\n        if (year < 0) return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    .r\n        date match {\n            case pattern(month, day, year) => {\n  \
    \              val monthInt = month.toInt\n                val dayInt = day.toInt\n\
    \                val yearInt = year.toInt\n                if (monthInt == 2)\
    \ {\n                    if (yearInt % 4 == 0) {\n                        if (dayInt\
    \ <= 29) return true\n                    } else {\n                        if\
    \ (dayInt <= 28) return true\n                    }\n                } else if\
    \ (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n    \
    \                if (dayInt <= 30) return true\n                } else {\n   \
    \                 if (dayInt <= 31) return true\n                }\n         \
    \       false\n            }\n            case _ => false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ([0-9]{2})-([0-9]{2})-([0-9]{4})\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                return true\n\
    \            }\n            case _ => return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val m = month.toInt\n\
    \        val d = day.toInt\n        val y = year.toInt\n        if (m == 2) {\n\
    \            if (y % 4 == 0) {\n                if (d > 29) return false\n   \
    \         } else {\n                if (d > 28) return false\n            }\n\
    \        } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n            if (d\
    \ > 30) return false\n        } else {\n            if (d > 31) return false\n\
    \        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpzudjfvm1.scala:19)\n\
    \tat Problem$.main(tmpzudjfvm1.scala:37)\n\tat Problem.main(tmpzudjfvm1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.isEmpty) return\
    \ false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val m = month.toInt\n\
    \        val d = day.toInt\n        val y = year.toInt\n        if (m == 2) {\n\
    \            if (y % 4 == 0) {\n                if (d <= 29) true else false\n\
    \            } else {\n                if (d <= 28) true else false\n        \
    \    }\n        } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n        \
    \    if (d <= 30) true else false\n        } else {\n            if (d <= 31)\
    \ true else false\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmp9v8mp8ll.scala:19)\n\
    \tat Problem$.main(tmp9v8mp8ll.scala:36)\n\tat Problem.main(tmp9v8mp8ll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val months = Map(\"01\"\
    \ -> 31, \"02\" -> 29, \"03\" -> 31, \"04\" -> 30, \"05\" -> 31, \"06\" -> 30,\
    \ \"07\" -> 31, \"08\" -> 31, \"09\" -> 30, \"10\" -> 31, \"11\" -> 30, \"12\"\
    \ -> 31)\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0)\n        val day = dateArray(1)\n\
    \        val year = dateArray(2)\n        if (year.length != 4) return false\n\
    \        if (month.length != 2 || day.length != 2) return false\n        if (!months.contains(month))\
    \ return false\n        if (day.toInt > months(month)) return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ > 29) return false\n            } else {\n                if (dayInt > 28) return\
    \ false\n            }\n        } else if (monthInt % 2 == 0) {\n            if\
    \ (dayInt > 30) return false\n        } else {\n            if (dayInt > 31) return\
    \ false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmphsrydo8i.scala:19)\n\
    \tat Problem$.main(tmphsrydo8i.scala:37)\n\tat Problem.main(tmphsrydo8i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case dateRegex(month,\
    \ day, year) => {\n                val monthNum = month.toInt\n              \
    \  val dayNum = day.toInt\n                val yearNum = year.toInt\n        \
    \        if (monthNum < 1 || monthNum > 12) return false\n                if (dayNum\
    \ < 1 || dayNum > 31) return false\n                if (monthNum == 2) {\n   \
    \                 if (dayNum > 29) return false\n                    if (dayNum\
    \ == 29) {\n                        if (yearNum % 4 != 0) return false\n     \
    \                   if (yearNum % 100 == 0 && yearNum % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthNum == 4 ||\
    \ monthNum == 6 || monthNum == 9 || monthNum == 11) {\n                    if\
    \ (dayNum > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (pattern.findFirstIn(date) == None) return false\n        val Array(month,\
    \ day, year) = date.split(\"-\").map(_.toInt)\n        if (month < 1 || month\
    \ > 12) return false\n        if (day < 1 || day > 31) return false\n        if\
    \ (month == 2) {\n            if (day > 29) return false\n            if (day\
    \ == 29) {\n                if (year % 4 != 0) return false\n                if\
    \ (year % 100 == 0 && year % 400 != 0) return false\n            }\n        }\n\
    \        if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \      if (day > 30) return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) =>\n                val m = month.toInt\n                val d =\
    \ day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  true\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        date match\
    \ {\n            case datePattern() => {\n                val dateArray = date.split(\"\
    -\")\n                val month = dateArray(0).toInt\n                val day\
    \ = dateArray(1).toInt\n                val year = dateArray(2).toInt\n      \
    \          if (month == 2) {\n                    if (year % 4 == 0) {\n     \
    \                   if (day > 29) return false\n                    } else {\n\
    \                        if (day > 28) return false\n                    }\n \
    \               } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n                    if (day > 30) return false\n                } else\
    \ {\n                    if (day > 31) return false\n                }\n     \
    \           return true\n            }\n            case _ => return false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptkd7ehhl.scala:42)\n\tat Problem.main(tmptkd7ehhl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\".r\n        date match\
    \ {\n            case datePattern(month, day, year) => {\n                val\
    \ monthInt = month.toInt\n                val dayInt = day.toInt\n           \
    \     val yearInt = year.toInt\n                if (monthInt == 2) {\n       \
    \             if (yearInt % 4 == 0) {\n                        if (dayInt > 29)\
    \ return false\n                    } else {\n                        if (dayInt\
    \ > 28) return false\n                    }\n                } else if (monthInt\
    \ == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n              \
    \      if (dayInt > 30) return false\n                } else {\n             \
    \       if (dayInt > 31) return false\n                }\n                true\n\
    \            }\n            case _ => false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(m,\
    \ d, y) => {\n                val month = m.toInt\n                val day = d.toInt\n\
    \                val year = y.toInt\n                if (month < 1 || month >\
    \ 12) return false\n                if (day < 1 || day > 31) return false\n  \
    \              if (month == 2) {\n                    if (year % 4 == 0) {\n \
    \                       if (day > 29) return false\n                    } else\
    \ {\n                        if (day > 28) return false\n                    }\n\
    \                } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n                    if (day > 30) return false\n                }\n \
    \               true\n            }\n            case _ => false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\".r\n        date match\
    \ {\n            case datePattern(month, day, year) => {\n                val\
    \ monthInt = month.toInt\n                val dayInt = day.toInt\n           \
    \     val yearInt = year.toInt\n                if (monthInt == 2) {\n       \
    \             if (yearInt % 4 == 0) {\n                        if (dayInt > 29)\
    \ return false\n                    } else {\n                        if (dayInt\
    \ > 28) return false\n                    }\n                } else if (monthInt\
    \ == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n              \
    \      if (dayInt > 30) return false\n                } else {\n             \
    \       if (dayInt > 31) return false\n                }\n                return\
    \ true\n            }\n            case _ => return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        date match\
    \ {\n            case datePattern() => {\n                val dateArray = date.split(\"\
    -\")\n                val month = dateArray(0).toInt\n                val day\
    \ = dateArray(1).toInt\n                val year = dateArray(2).toInt\n      \
    \          if (month == 2) {\n                    if (year % 4 == 0) {\n     \
    \                   if (day > 29) return false\n                    } else {\n\
    \                        if (day > 28) return false\n                    }\n \
    \               } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n                    if (day > 30) return false\n                } else\
    \ {\n                    if (day > 31) return false\n                }\n     \
    \           return true\n            }\n            case _ => return false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptkd7ehhl.scala:42)\n\tat Problem.main(tmptkd7ehhl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        if (datePattern.findFirstIn(date)\
    \ == None) return false\n        val dateArray = date.split(\"-\")\n        val\
    \ month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n        val\
    \ year = dateArray(2).toInt\n        if (month < 1 || month > 12) return false\n\
    \        if (day < 1 || day > 31) return false\n        if (month == 2) {\n  \
    \          if (day > 29) return false\n            if (day == 29) {\n        \
    \        if (year % 4 != 0) return false\n                if (year % 100 == 0\
    \ && year % 400 != 0) return false\n            }\n        }\n        if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ return false\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ > 29) return false\n            } else {\n                if (dayInt > 28) return\
    \ false\n            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n            if (dayInt > 30) return false\n     \
    \   } else {\n            if (dayInt > 31) return false\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpz_lohyrd.scala:19)\n\
    \tat Problem$.main(tmpz_lohyrd.scala:37)\n\tat Problem.main(tmpz_lohyrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        if (datePattern.findFirstIn(date)\
    \ == None) return false\n        val dateArray = date.split(\"-\")\n        val\
    \ month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n        val\
    \ year = dateArray(2).toInt\n        if (month < 1 || month > 12) return false\n\
    \        if (month == 2) {\n            if (year % 4 == 0) {\n               \
    \ if (day < 1 || day > 29) return false\n            } else {\n              \
    \  if (day < 1 || day > 28) return false\n            }\n        } else if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n            if (day < 1 || day > 31) return false\n     \
    \   } else {\n            if (day < 1 || day > 30) return false\n        }\n \
    \       return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (dayInt > 29) return false\n            if\
    \ (dayInt == 29) {\n                if (yearInt % 4 != 0) return false\n     \
    \           if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n     \
    \       }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt == 9\
    \ || monthInt == 11) {\n            if (dayInt > 30) return false\n        } else\
    \ {\n            if (dayInt > 31) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpj7c6dap3.scala:19)\n\
    \tat Problem$.main(tmpj7c6dap3.scala:37)\n\tat Problem.main(tmpj7c6dap3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (m == 2) {\n                    if (d\
    \ < 1 || d > 29) false\n                    else if (d == 29) {\n            \
    \            if (y % 4 != 0) false\n                        else if (y % 100 ==\
    \ 0 && y % 400 != 0) false\n                        else true\n              \
    \      }\n                    else true\n                }\n                else\
    \ if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n\
    \                    if (d < 1 || d > 31) false\n                    else true\n\
    \                }\n                else {\n                    if (d < 1 || d\
    \ > 30) false\n                    else true\n                }\n            }\n\
    \            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (pattern.findFirstIn(date) == None) return false\n        val Array(month,\
    \ day, year) = date.split(\"-\").map(_.toInt)\n        if (month < 1 || month\
    \ > 12) return false\n        if (day < 1 || day > 31) return false\n        if\
    \ (month == 2) {\n            if (day > 29) return false\n            if (day\
    \ == 29) {\n                if (year % 4 != 0) return false\n                if\
    \ (year % 100 == 0 && year % 400 != 0) return false\n            }\n        }\n\
    \        if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \      if (day > 30) return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    .r\n        date match {\n            case pattern(month, day, year) => {\n  \
    \              val m = month.toInt\n                val d = day.toInt\n      \
    \          val y = year.toInt\n                if (m == 2) {\n               \
    \     if (d > 29) return false\n                    if (d == 29) {\n         \
    \               if (y % 4 != 0) return false\n                        if (y %\
    \ 100 == 0 && y % 400 != 0) return false\n                    }\n            \
    \    } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                   \
    \ if (d > 30) return false\n                } else if (m == 1 || m == 3 || m ==\
    \ 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n                    if (d >\
    \ 31) return false\n                } else {\n                    return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (d < 1 || d > 31) false\n           \
    \     else if (m == 2 && d > 29) false\n                else if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n                    if (d > 30) false\n         \
    \           else true\n                }\n                else true\n        \
    \    }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(m,\
    \ d, y) => {\n                val month = m.toInt\n                val day = d.toInt\n\
    \                val year = y.toInt\n                if (month < 1 || month >\
    \ 12) false\n                else if (day < 1 || day > 31) false\n           \
    \     else if (month == 2 && day > 29) false\n                else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n                    if (day\
    \ > 30) false\n                    else true\n                }\n            \
    \    else true\n            }\n            case _ => false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (pattern.findFirstIn(date) == None) return false\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (pattern.findFirstIn(date) == None) return false\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (month == 2) {\n            if (year\
    \ % 4 == 0) {\n                if (day < 1 || day > 29) return false\n       \
    \     } else {\n                if (day < 1 || day > 28) return false\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) return false\n        } else {\n            if (day < 1 || day > 30)\
    \ return false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case dateRegex(month,\
    \ day, year) => {\n                val monthNum = month.toInt\n              \
    \  val dayNum = day.toInt\n                val yearNum = year.toInt\n        \
    \        if (monthNum < 1 || monthNum > 12) return false\n                if (dayNum\
    \ < 1 || dayNum > 31) return false\n                if (monthNum == 2) {\n   \
    \                 if (dayNum > 29) return false\n                    if (dayNum\
    \ == 29) {\n                        if (yearNum % 4 != 0) return false\n     \
    \                   if (yearNum % 100 == 0 && yearNum % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthNum == 4 ||\
    \ monthNum == 6 || monthNum == 9 || monthNum == 11) {\n                    if\
    \ (dayNum > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if (dateArray.length != 3) return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > 31) return false\n        if (month == 2) {\n            if (day > 29) return\
    \ false\n            if (day == 29) {\n                if (year % 4 != 0) return\
    \ false\n                if (year % 100 == 0 && year % 400 != 0) return false\n\
    \            }\n        }\n        if (month == 4 || month == 6 || month == 9\
    \ || month == 11) {\n            if (day > 30) return false\n        }\n     \
    \   true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case dateRegex(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthNum = month.toInt\n\
    \        val dayNum = day.toInt\n        val yearNum = year.toInt\n        if\
    \ (monthNum == 2) {\n            if (yearNum % 4 == 0) {\n                if (dayNum\
    \ > 29) return false\n            } else {\n                if (dayNum > 28) return\
    \ false\n            }\n        } else if (monthNum == 4 || monthNum == 6 || monthNum\
    \ == 9 || monthNum == 11) {\n            if (dayNum > 30) return false\n     \
    \   } else {\n            if (dayNum > 31) return false\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpeb70s_i0.scala:19)\n\
    \tat Problem$.main(tmpeb70s_i0.scala:37)\n\tat Problem.main(tmpeb70s_i0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (pattern.findFirstIn(date) == None) return false\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    .r\n        date match {\n            case pattern(month, day, year) => {\n  \
    \              val m = month.toInt\n                val d = day.toInt\n      \
    \          val y = year.toInt\n                if (m < 1 || m > 12) return false\n\
    \                if (m == 2) {\n                    if (d < 1 || d > 29) return\
    \ false\n                } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n\
    \                    if (d < 1 || d > 30) return false\n                } else\
    \ {\n                    if (d < 1 || d > 31) return false\n                }\n\
    \                return true\n            }\n            case _ => return false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(m,\
    \ d, y) => {\n                if (m.toInt < 1 || m.toInt > 12) return false\n\
    \                if (m.toInt == 2) {\n                    if (d.toInt < 1 || d.toInt\
    \ > 29) return false\n                } else if (m.toInt == 4 || m.toInt == 6\
    \ || m.toInt == 9 || m.toInt == 11) {\n                    if (d.toInt < 1 ||\
    \ d.toInt > 30) return false\n                } else {\n                    if\
    \ (d.toInt < 1 || d.toInt > 31) return false\n                }\n            \
    \    return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                if (month.toInt < 1 || month.toInt > 12) return\
    \ false\n                if (month.toInt == 2) {\n                    if (day.toInt\
    \ < 1 || day.toInt > 29) return false\n                } else if (month.toInt\
    \ == 4 || month.toInt == 6 || month.toInt == 9 || month.toInt == 11) {\n     \
    \               if (day.toInt < 1 || day.toInt > 30) return false\n          \
    \      } else {\n                    if (day.toInt < 1 || day.toInt > 31) return\
    \ false\n                }\n                return true\n            }\n     \
    \       case _ => return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (pattern.findFirstIn(date) == None) return false\n        val Array(month,\
    \ day, year) = date.split(\"-\").map(_.toInt)\n        if (month < 1 || month\
    \ > 12) return false\n        if (day < 1 || day > 31) return false\n        if\
    \ (month == 2) {\n            if (day > 29) return false\n            if (day\
    \ == 29) {\n                if (year % 4 != 0) return false\n                if\
    \ (year % 100 == 0 && year % 400 != 0) return false\n            }\n        }\n\
    \        if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \      if (day > 30) return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ <= 29) return true\n            } else {\n                if (dayInt <= 28)\
    \ return true\n            }\n        } else if (monthInt == 4 || monthInt ==\
    \ 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt <= 30) return\
    \ true\n        } else {\n            if (dayInt <= 31) return true\n        }\n\
    \        false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpe2g2aymi.scala:19)\n\
    \tat Problem$.main(tmpe2g2aymi.scala:37)\n\tat Problem.main(tmpe2g2aymi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        date match {\n            case dateRegex(month, day, year) => {\n\
    \                val monthInt = month.toInt\n                val dayInt = day.toInt\n\
    \                val yearInt = year.toInt\n                if (monthInt == 2)\
    \ {\n                    if (yearInt % 4 == 0) {\n                        if (dayInt\
    \ <= 29) true else false\n                    } else {\n                     \
    \   if (dayInt <= 28) true else false\n                    }\n               \
    \ } else if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11)\
    \ {\n                    if (dayInt <= 30) true else false\n                }\
    \ else {\n                    if (dayInt <= 31) true else false\n            \
    \    }\n            }\n            case _ => false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc0sgtukc.scala:40)\n\tat Problem.main(tmpc0sgtukc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val months = List(1,\
    \ 3, 5, 7, 8, 10, 12)\n        val months2 = List(4, 6, 9, 11)\n        val dateList\
    \ = date.split(\"-\").toList\n        if (dateList.length != 3) return false\n\
    \        val month = dateList(0).toInt\n        val day = dateList(1).toInt\n\
    \        val year = dateList(2).toInt\n        if (month < 1 || month > 12) return\
    \ false\n        if (months.contains(month)) {\n            if (day < 1 || day\
    \ > 31) return false\n        } else if (months2.contains(month)) {\n        \
    \    if (day < 1 || day > 30) return false\n        } else {\n            if (year\
    \ % 4 == 0) {\n                if (day < 1 || day > 29) return false\n       \
    \     } else {\n                if (day < 1 || day > 28) return false\n      \
    \      }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        if (datePattern.findFirstIn(date)\
    \ == None) return false\n        val Array(month, day, year) = date.split(\"-\"\
    ).map(_.toInt)\n        if (month < 1 || month > 12) return false\n        if\
    \ (day < 1 || day > 31) return false\n        if (month == 2) {\n            if\
    \ (day > 29) return false\n            if (day == 29) {\n                if (year\
    \ % 4 != 0) return false\n                if (year % 100 == 0 && year % 400 !=\
    \ 0) return false\n            }\n        }\n        else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n            if (day > 30) return false\n\
    \        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val days = Map(1 ->\
    \ 31, 2 -> 29, 3 -> 31, 4 -> 30, 5 -> 31, 6 -> 30, 7 -> 31, 8 -> 31, 9 -> 30,\
    \ 10 -> 31, 11 -> 30, 12 -> 31)\n        if (month.toInt < 1 || month.toInt >\
    \ 12) return false\n        if (day.toInt < 1 || day.toInt > days(month.toInt))\
    \ return false\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpx0sgc2tp.scala:19)\n\
    \tat Problem$.main(tmpx0sgc2tp.scala:26)\n\tat Problem.main(tmpx0sgc2tp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    ([0-9]{2})-([0-9]{2})-([0-9]{4})\"\"\".r\n        date match {\n            case\
    \ pattern(month, day, year) => {\n                val m = month.toInt\n      \
    \          val d = day.toInt\n                val y = year.toInt\n           \
    \     if (m < 1 || m > 12) return false\n                if (d < 1 || d > 31)\
    \ return false\n                if (m == 2) {\n                    if (d > 29)\
    \ return false\n                    if (d == 29) {\n                        if\
    \ (y % 4 != 0) return false\n                        if (y % 100 == 0 && y % 400\
    \ != 0) return false\n                    }\n                }\n             \
    \   if (m == 4 || m == 6 || m == 9 || m == 11) {\n                    if (d >\
    \ 30) return false\n                }\n                return true\n         \
    \   }\n            case _ => return false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (pattern.findFirstIn(date) == None) return false\n        val Array(month,\
    \ day, year) = date.split(\"-\").map(_.toInt)\n        if (month < 1 || month\
    \ > 12) return false\n        if (day < 1 || day > 31) return false\n        if\
    \ (month == 2) {\n            if (day > 29) return false\n            if (day\
    \ == 29) {\n                if (year % 4 != 0) return false\n                if\
    \ (year % 100 == 0 && year % 400 != 0) return false\n            }\n        }\n\
    \        if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \      if (day > 30) return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        date match\
    \ {\n            case datePattern() => {\n                val dateArray = date.split(\"\
    -\")\n                val month = dateArray(0).toInt\n                val day\
    \ = dateArray(1).toInt\n                val year = dateArray(2).toInt\n      \
    \          if (month == 2) {\n                    if (year % 4 == 0) {\n     \
    \                   if (day >= 1 && day <= 29) true else false\n             \
    \       } else {\n                        if (day >= 1 && day <= 28) true else\
    \ false\n                    }\n                } else if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n                    if (day >= 1 && day <= 31) true else false\n        \
    \        } else {\n                    if (day >= 1 && day <= 30) true else false\n\
    \                }\n            }\n            case _ => false\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjhj4d2dl.scala:41)\n\tat Problem.main(tmpjhj4d2dl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (month == 2) {\n            if (day\
    \ < 1 || day > 29) return false\n        } else if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false\n\
    \        } else {\n            if (day < 1 || day > 31) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    .r\n        date match {\n            case pattern(month, day, year) => {\n  \
    \              val m = month.toInt\n                val d = day.toInt\n      \
    \          val y = year.toInt\n                if (m < 1 || m > 12) return false\n\
    \                if (m == 2) {\n                    if (y % 4 == 0) {\n      \
    \                  if (d < 1 || d > 29) return false\n                    } else\
    \ {\n                        if (d < 1 || d > 28) return false\n             \
    \       }\n                } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n\
    \                    if (d < 1 || d > 30) return false\n                } else\
    \ {\n                    if (d < 1 || d > 31) return false\n                }\n\
    \                return true\n            }\n            case _ => return false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (dateRegex.findFirstIn(date) == None) return false\n        val\
    \ dateArray = date.split(\"-\")\n        val month = dateArray(0).toInt\n    \
    \    val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n   \
    \     if (month < 1 || month > 12) return false\n        if (month == 2) {\n \
    \           if (year % 4 == 0) {\n                if (day < 1 || day > 29) return\
    \ false\n            } else {\n                if (day < 1 || day > 28) return\
    \ false\n            }\n        } else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n           \
    \ if (day < 1 || day > 31) return false\n        } else {\n            if (day\
    \ < 1 || day > 30) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ > 29) return false\n            } else {\n                if (dayInt > 28) return\
    \ false\n            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n            if (dayInt > 30) return false\n     \
    \   } else {\n            if (dayInt > 31) return false\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpz_lohyrd.scala:19)\n\
    \tat Problem$.main(tmpz_lohyrd.scala:37)\n\tat Problem.main(tmpz_lohyrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        val datePattern(month,\
    \ day, year) = date\n        val monthInt = month.toInt\n        val dayInt =\
    \ day.toInt\n        val yearInt = year.toInt\n        if (monthInt == 2) {\n\
    \            if (yearInt % 4 == 0) {\n                if (dayInt > 29) return\
    \ false\n            } else {\n                if (dayInt > 28) return false\n\
    \            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n            if (dayInt > 30) return false\n     \
    \   } else {\n            if (dayInt > 31) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpqwhcdk77.scala:19)\n\
    \tat Problem$.main(tmpqwhcdk77.scala:37)\n\tat Problem.main(tmpqwhcdk77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val months = Map(1 ->\
    \ 31, 2 -> 29, 3 -> 31, 4 -> 30, 5 -> 31, 6 -> 30, 7 -> 31, 8 -> 31, 9 -> 30,\
    \ 10 -> 31, 11 -> 30, 12 -> 31)\n        val datePattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        date match {\n            case datePattern(month, day, year) => {\n\
    \                val m = month.toInt\n                val d = day.toInt\n    \
    \            if (months.contains(m) && d <= months(m)) true else false\n     \
    \       }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfw82kelw.scala:30)\n\tat Problem.main(tmpfw82kelw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (month == 2) {\n            if (year\
    \ % 4 == 0) {\n                if (day < 1 || day > 29) return false\n       \
    \     } else {\n                if (day < 1 || day > 28) return false\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) return false\n        } else {\n            if (day < 1 || day > 30)\
    \ return false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        date match\
    \ {\n            case datePattern() => {\n                val dateArray = date.split(\"\
    -\")\n                val month = dateArray(0).toInt\n                val day\
    \ = dateArray(1).toInt\n                val year = dateArray(2).toInt\n      \
    \          if (month < 1 || month > 12) return false\n                if (month\
    \ == 2) {\n                    if (year % 4 == 0) {\n                        if\
    \ (day < 1 || day > 29) return false\n                    } else {\n         \
    \               if (day < 1 || day > 28) return false\n                    }\n\
    \                } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n                    if (day\
    \ < 1 || day > 31) return false\n                } else {\n                  \
    \  if (day < 1 || day > 30) return false\n                }\n                return\
    \ true\n            }\n            case _ => return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptkcj8prh.scala:43)\n\tat Problem.main(tmptkcj8prh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                if (month.toInt < 1 || month.toInt > 12) return\
    \ false\n                if (month.toInt == 2) {\n                    if (day.toInt\
    \ < 1 || day.toInt > 29) return false\n                } else if (month.toInt\
    \ == 4 || month.toInt == 6 || month.toInt == 9 || month.toInt == 11) {\n     \
    \               if (day.toInt < 1 || day.toInt > 30) return false\n          \
    \      } else {\n                    if (day.toInt < 1 || day.toInt > 31) return\
    \ false\n                }\n                return true\n            }\n     \
    \       case _ => return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        val datePattern(month,\
    \ day, year) = date\n        val monthInt = month.toInt\n        val dayInt =\
    \ day.toInt\n        val yearInt = year.toInt\n        if (monthInt == 2) {\n\
    \            if (yearInt % 4 == 0) {\n                if (dayInt <= 29) return\
    \ true\n            } else {\n                if (dayInt <= 28) return true\n\
    \            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n            if (dayInt <= 30) return true\n     \
    \   } else {\n            if (dayInt <= 31) return true\n        }\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpzjsz4ux2.scala:19)\n\
    \tat Problem$.main(tmpzjsz4ux2.scala:37)\n\tat Problem.main(tmpzjsz4ux2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case dateRegex(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                return true\n\
    \            }\n            case _ => return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case dateRegex(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                return true\n\
    \            }\n            case _ => return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val months = Map(1 ->\
    \ 31, 2 -> 29, 3 -> 31, 4 -> 30, 5 -> 31, 6 -> 30, 7 -> 31, 8 -> 31, 9 -> 30,\
    \ 10 -> 31, 11 -> 30, 12 -> 31)\n        val dateArray = date.split(\"-\")\n \
    \       if (dateArray.length != 3) return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > months(month)) return false\n        if (year < 0) return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ <= 29) true else false\n            } else {\n                if (dayInt <=\
    \ 28) true else false\n            }\n        } else if (monthInt == 4 || monthInt\
    \ == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt <= 30) true\
    \ else false\n        } else {\n            if (dayInt <= 31) true else false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpfke2xxfs.scala:19)\n\
    \tat Problem$.main(tmpfke2xxfs.scala:36)\n\tat Problem.main(tmpfke2xxfs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case dateRegex(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (d < 1 || d > 31) false\n           \
    \     else if (m == 2 && d > 29) false\n                else if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n                    if (d > 30) false\n         \
    \           else true\n                }\n                else true\n        \
    \    }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (m == 2) {\n                    if (y\
    \ % 4 == 0) {\n                        if (d < 1 || d > 29) false\n          \
    \              else true\n                    }\n                    else {\n\
    \                        if (d < 1 || d > 28) false\n                        else\
    \ true\n                    }\n                }\n                else if (m ==\
    \ 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n       \
    \             if (d < 1 || d > 31) false\n                    else true\n    \
    \            }\n                else {\n                    if (d < 1 || d > 30)\
    \ false\n                    else true\n                }\n            }\n   \
    \         case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        pattern.findFirstIn(date) match {\n            case Some(x) => {\n\
    \                val Array(month, day, year) = date.split(\"-\").map(_.toInt)\n\
    \                if (month > 12 || month < 1) false\n                else if (day\
    \ > 31 || day < 1) false\n                else if (month == 2 && day > 29) false\n\
    \                else if (month == 2 && day == 29 && !isLeapYear(year)) false\n\
    \                else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n                    if (day > 30) false\n                    else true\n\
    \                }\n                else true\n            }\n            case\
    \ None => false\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd6geje95.scala:25:53 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (month\
    \ == \e[31m2\e[0m && day == \e[31m29\e[0m && !isLeapYear(year)) \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \         Not found: isLeapYear\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800343
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 1 || m == 3 ||\
    \ m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n                    if\
    \ (d < 1 || d > 31) return false\n                } else {\n                 \
    \   if (d < 1 || d > 30) return false\n                }\n                return\
    \ true\n            }\n            case _ => return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (d < 1 || d > 31) false\n           \
    \     else if (m == 2 && d > 29) false\n                else if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n                    if (d > 30) false\n         \
    \           else true\n                }\n                else true\n        \
    \    }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (d < 1 || d > 31) false\n           \
    \     else if (m == 2 && d > 29) false\n                else if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n                    if (d > 30) false\n         \
    \           else true\n                }\n                else true\n        \
    \    }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (m == 2) {\n                    if (y\
    \ % 4 == 0) {\n                        if (d < 1 || d > 29) false\n          \
    \              else true\n                    }\n                    else {\n\
    \                        if (d < 1 || d > 28) false\n                        else\
    \ true\n                    }\n                }\n                else if (m ==\
    \ 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n       \
    \             if (d < 1 || d > 31) false\n                    else true\n    \
    \            }\n                else {\n                    if (d < 1 || d > 30)\
    \ false\n                    else true\n                }\n            }\n   \
    \         case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(m,\
    \ d, y) => {\n                val month = m.toInt\n                val day = d.toInt\n\
    \                val year = y.toInt\n                if (month < 1 || month >\
    \ 12) false\n                else if (day < 1 || day > 31) false\n           \
    \     else if (month == 2 && day > 29) false\n                else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n                    if (day\
    \ > 30) false\n                    else true\n                }\n            \
    \    else true\n            }\n            case _ => false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (d < 1 || d > 31) false\n           \
    \     else if (m == 2 && d > 29) false\n                else if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n                    if (d > 30) false\n         \
    \           else true\n                }\n                else true\n        \
    \    }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        date match {\n            case pattern() => {\n                val\
    \ dateArray = date.split(\"-\")\n                val month = dateArray(0).toInt\n\
    \                val day = dateArray(1).toInt\n                val year = dateArray(2).toInt\n\
    \                if (month == 2) {\n                    if (year % 4 == 0) {\n\
    \                        if (day <= 29) return true\n                    } else\
    \ {\n                        if (day <= 28) return true\n                    }\n\
    \                } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n                    if (day\
    \ <= 31) return true\n                } else {\n                    if (day <=\
    \ 30) return true\n                }\n                false\n            }\n \
    \           case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcf1lk107.scala:42)\n\tat Problem.main(tmpcf1lk107.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.isEmpty) return\
    \ false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if (dateArray.length != 3) return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > 31) return false\n        if (month == 2) {\n            if (day > 29) return\
    \ false\n            if (day == 29) {\n                if (year % 4 != 0) return\
    \ false\n                if (year % 100 == 0 && year % 400 != 0) return false\n\
    \            }\n        }\n        if (month == 4 || month == 6 || month == 9\
    \ || month == 11) {\n            if (day > 30) return false\n        }\n     \
    \   true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(m,\
    \ d, y) => {\n                val month = m.toInt\n                val day = d.toInt\n\
    \                val year = y.toInt\n                if (month < 1 || month >\
    \ 12) return false\n                if (month == 2) {\n                    if\
    \ (year % 4 == 0) {\n                        if (day < 1 || day > 29) return false\n\
    \                    } else {\n                        if (day < 1 || day > 28)\
    \ return false\n                    }\n                } else if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n                    if (day < 1\
    \ || day > 30) return false\n                } else {\n                    if\
    \ (day < 1 || day > 31) return false\n                }\n                return\
    \ true\n            }\n            case _ => return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        date match {\n            case pattern() => {\n                val\
    \ dateArray = date.split(\"-\")\n                val month = dateArray(0).toInt\n\
    \                val day = dateArray(1).toInt\n                val year = dateArray(2).toInt\n\
    \                if (month < 1 || month > 12) return false\n                if\
    \ (month == 2) {\n                    if (year % 4 == 0) {\n                 \
    \       if (day < 1 || day > 29) return false\n                    } else {\n\
    \                        if (day < 1 || day > 28) return false\n             \
    \       }\n                } else if (month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) {\n                \
    \    if (day < 1 || day > 31) return false\n                } else {\n       \
    \             if (day < 1 || day > 30) return false\n                }\n     \
    \           return true\n            }\n            case _ => return false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkfgcbyw7.scala:43)\n\tat Problem.main(tmpkfgcbyw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ <= 29) return true\n            } else {\n                if (dayInt <= 28)\
    \ return true\n            }\n        } else if (monthInt == 4 || monthInt ==\
    \ 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt <= 30) return\
    \ true\n        } else {\n            if (dayInt <= 31) return true\n        }\n\
    \        false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpe2g2aymi.scala:19)\n\
    \tat Problem$.main(tmpe2g2aymi.scala:37)\n\tat Problem.main(tmpe2g2aymi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\".r\n        date match\
    \ {\n            case datePattern(month, day, year) => {\n                val\
    \ monthInt = month.toInt\n                val dayInt = day.toInt\n           \
    \     val yearInt = year.toInt\n                if (monthInt == 2) {\n       \
    \             if (dayInt > 29) return false\n                    if (dayInt ==\
    \ 29) {\n                        if (yearInt % 4 != 0) return false\n        \
    \                if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                } else if (monthInt == 4 || monthInt ==\
    \ 6 || monthInt == 9 || monthInt == 11) {\n                    if (dayInt > 30)\
    \ return false\n                } else {\n                    if (dayInt > 31)\
    \ return false\n                }\n                true\n            }\n     \
    \       case _ => false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        date match\
    \ {\n            case datePattern() => {\n                val dateArray = date.split(\"\
    -\")\n                val month = dateArray(0).toInt\n                val day\
    \ = dateArray(1).toInt\n                val year = dateArray(2).toInt\n      \
    \          if (month < 1 || month > 12) return false\n                if (month\
    \ == 2) {\n                    if (day < 1 || day > 29) return false\n       \
    \             if (day == 29) {\n                        if (year % 4 != 0) return\
    \ false\n                        if (year % 100 == 0 && year % 400 != 0) return\
    \ false\n                    }\n                } else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n                    if (day < 1 || day\
    \ > 30) return false\n                } else {\n                    if (day <\
    \ 1 || day > 31) return false\n                }\n                return true\n\
    \            }\n            case _ => return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfgxaiaag.scala:43)\n\tat Problem.main(tmpfgxaiaag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val parts = date.split(\"-\")\n        if (parts.length\
    \ != 3) return false\n        val month = parts(0).toInt\n        val day = parts(1).toInt\n\
    \        val year = parts(2).toInt\n        if (month < 1 || month > 12) return\
    \ false\n        if (day < 1 || day > 31) return false\n        if (month == 2)\
    \ {\n            if (day > 29) return false\n            if (day == 29) {\n  \
    \              if (year % 4 != 0) return false\n                if (year % 100\
    \ == 0 && year % 400 != 0) return false\n            }\n        }\n        else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if\
    \ (day > 30) return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        date match {\n            case pattern() => {\n                val\
    \ dateArray = date.split(\"-\")\n                val month = dateArray(0).toInt\n\
    \                val day = dateArray(1).toInt\n                val year = dateArray(2).toInt\n\
    \                if (month == 2) {\n                    if (isLeapYear(year))\
    \ {\n                        if (day <= 29) true else false\n                \
    \    } else {\n                        if (day <= 28) true else false\n      \
    \              }\n                } else if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        \
    \            if (day <= 31) true else false\n                } else {\n      \
    \              if (day <= 30) true else false\n                }\n           \
    \ }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpas4_deg_.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    \e[33mif\e[0m (isLeapYear(year))\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: isLeapYear\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ > 29) return false\n            } else {\n                if (dayInt > 28) return\
    \ false\n            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n            if (dayInt > 30) return false\n     \
    \   } else {\n            if (dayInt > 31) return false\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpz_lohyrd.scala:19)\n\
    \tat Problem$.main(tmpz_lohyrd.scala:37)\n\tat Problem.main(tmpz_lohyrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ <= 29) {\n                    return true\n                }\n            }\
    \ else {\n                if (dayInt <= 28) {\n                    return true\n\
    \                }\n            }\n        } else if (monthInt == 1 || monthInt\
    \ == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 ||\
    \ monthInt == 12) {\n            if (dayInt <= 31) {\n                return true\n\
    \            }\n        } else {\n            if (dayInt <= 30) {\n          \
    \      return true\n            }\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpd_0nfipv.scala:19)\n\
    \tat Problem$.main(tmpd_0nfipv.scala:45)\n\tat Problem.main(tmpd_0nfipv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (d < 1 || d > 31) return false\n  \
    \              if (m == 2) {\n                    if (y % 4 == 0) {\n        \
    \                if (d > 29) return false\n                    } else {\n    \
    \                    if (d > 28) return false\n                    }\n       \
    \         } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n              \
    \      if (d > 30) return false\n                }\n                return true\n\
    \            }\n            case _ => return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ([0-9]{2})-([0-9]{2})-([0-9]{4})\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        date match {\n            case pattern() => {\n                val\
    \ Array(month, day, year) = date.split(\"-\").map(_.toInt)\n                if\
    \ (month < 1 || month > 12) return false\n                if (day < 1 || day >\
    \ 31) return false\n                if (month == 2) {\n                    if\
    \ (day > 29) return false\n                    if (day == 29) {\n            \
    \            if (year % 4 != 0) return false\n                        if (year\
    \ % 100 == 0 && year % 400 != 0) return false\n                    }\n       \
    \         }\n                else if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n                    if (day > 30) return false\n           \
    \     }\n                true\n            }\n            case _ => false\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe9twhu51.scala:40)\n\tat Problem.main(tmpe9twhu51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        if (pattern.findFirstIn(date) == None) return false\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (month == 2) {\n            if (year\
    \ % 4 == 0) {\n                if (day < 1 || day > 29) return false\n       \
    \     } else {\n                if (day < 1 || day > 28) return false\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) return false\n        } else {\n            if (day < 1 || day > 30)\
    \ return false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        if\
    \ (monthInt == 2) {\n            if (yearInt % 4 == 0) {\n                if (dayInt\
    \ > 29) return false\n            } else {\n                if (dayInt > 28) return\
    \ false\n            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n            if (dayInt > 30) return false\n     \
    \   } else {\n            if (dayInt > 31) return false\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpz_lohyrd.scala:19)\n\
    \tat Problem$.main(tmpz_lohyrd.scala:37)\n\tat Problem.main(tmpz_lohyrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val daysInMonth = Map(1\
    \ -> 31, 2 -> 28, 3 -> 31, 4 -> 30, 5 -> 31, 6 -> 30, 7 -> 31, 8 -> 31, 9 -> 30,\
    \ 10 -> 31, 11 -> 30, 12 -> 31)\n        val isLeapYear = (year.toInt % 4 == 0\
    \ && year.toInt % 100 != 0) || year.toInt % 400 == 0\n        if (isLeapYear)\
    \ daysInMonth(2) = 29\n        if (daysInMonth(month.toInt) >= day.toInt) true\
    \ else false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmp3bd281ed.scala:19)\n\
    \tat Problem$.main(tmp3bd281ed.scala:26)\n\tat Problem.main(tmp3bd281ed.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ([0-1][0-9])-([0-3][0-9])-([0-9]{4})\".r\n        val datePattern(month, day,\
    \ year) = date\n        val monthNum = month.toInt\n        val dayNum = day.toInt\n\
    \        val yearNum = year.toInt\n        val isLeapYear = (yearNum % 4 == 0\
    \ && yearNum % 100 != 0) || (yearNum % 400 == 0)\n        if (monthNum < 1 ||\
    \ monthNum > 12) return false\n        if (dayNum < 1 || dayNum > 31) return false\n\
    \        if (monthNum == 2) {\n            if (isLeapYear) {\n               \
    \ if (dayNum > 29) return false\n            } else {\n                if (dayNum\
    \ > 28) return false\n            }\n        } else if (monthNum == 4 || monthNum\
    \ == 6 || monthNum == 9 || monthNum == 11) {\n            if (dayNum > 30) return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 04-0-2040 (of class java.lang.String)\n\tat Problem$.validDate(tmp6g35vqst.scala:19)\n\
    \tat Problem$.main(tmp6g35vqst.scala:40)\n\tat Problem.main(tmp6g35vqst.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (m == 2) {\n                    if (y\
    \ % 4 == 0) {\n                        if (d < 1 || d > 29) false\n          \
    \              else true\n                    }\n                    else {\n\
    \                        if (d < 1 || d > 28) false\n                        else\
    \ true\n                    }\n                }\n                else if (m ==\
    \ 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n       \
    \             if (d < 1 || d > 31) false\n                    else true\n    \
    \            }\n                else {\n                    if (d < 1 || d > 30)\
    \ false\n                    else true\n                }\n            }\n   \
    \         case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val d = date.split(\"-\")\n        if (d.length != 3)\
    \ return false\n        val month = d(0).toInt\n        val day = d(1).toInt\n\
    \        val year = d(2).toInt\n        if (month < 1 || month > 12) return false\n\
    \        if (day < 1 || day > 31) return false\n        if (month == 2) {\n  \
    \          if (day > 29) return false\n            if (day == 29) {\n        \
    \        if (year % 4 != 0) return false\n                if (year % 100 == 0\
    \ && year % 400 != 0) return false\n            }\n        }\n        if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ return false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if (dateArray.length != 3) return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > 31) return false\n        if (month == 2) {\n            if (year % 4 == 0)\
    \ {\n                if (day > 29) return false\n            } else {\n      \
    \          if (day > 28) return false\n            }\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ return false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    .r\n        date match {\n            case pattern(month, day, year) => {\n  \
    \              val m = month.toInt\n                val d = day.toInt\n      \
    \          val y = year.toInt\n                if (m == 2) {\n               \
    \     if (y % 4 == 0) d <= 29\n                    else d <= 28\n            \
    \    }\n                else if (m == 4 || m == 6 || m == 9 || m == 11) d <= 30\n\
    \                else d <= 31\n            }\n            case _ => false\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(m,\
    \ d, y) => {\n                val month = m.toInt\n                val day = d.toInt\n\
    \                val year = y.toInt\n                if (month < 1 || month >\
    \ 12) return false\n                if (day < 1 || day > 31) return false\n  \
    \              if (month == 2) {\n                    if (year % 4 == 0) {\n \
    \                       if (day > 29) return false\n                    } else\
    \ {\n                        if (day > 28) return false\n                    }\n\
    \                } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n                    if (day > 30) return false\n                }\n \
    \               true\n            }\n            case _ => false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        date match\
    \ {\n            case datePattern() => {\n                val dateArray = date.split(\"\
    -\")\n                val month = dateArray(0).toInt\n                val day\
    \ = dateArray(1).toInt\n                val year = dateArray(2).toInt\n      \
    \          if (month == 2) {\n                    if (year % 4 == 0) {\n     \
    \                   if (day <= 29) return true\n                    } else {\n\
    \                        if (day <= 28) return true\n                    }\n \
    \               } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n                    if (day\
    \ <= 31) return true\n                } else {\n                    if (day <=\
    \ 30) return true\n                }\n                false\n            }\n \
    \           case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeqgtprw6.scala:42)\n\tat Problem.main(tmpeqgtprw6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        val\
    \ isLeapYear = (yearInt % 4 == 0 && yearInt % 100 != 0) || (yearInt % 400 == 0)\n\
    \        if (monthInt == 2) {\n            if (isLeapYear) {\n               \
    \ dayInt <= 29\n            } else {\n                dayInt <= 28\n         \
    \   }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt\
    \ == 11) {\n            dayInt <= 30\n        } else {\n            dayInt <=\
    \ 31\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpyct43ilj.scala:19)\n\
    \tat Problem$.main(tmpyct43ilj.scala:37)\n\tat Problem.main(tmpyct43ilj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val pattern(month, day, year) = date\n        val monthInt = month.toInt\n\
    \        val dayInt = day.toInt\n        val yearInt = year.toInt\n        val\
    \ isLeapYear = (yearInt % 4 == 0 && yearInt % 100 != 0) || (yearInt % 400 == 0)\n\
    \        if (monthInt == 2) {\n            if (isLeapYear) {\n               \
    \ dayInt <= 29\n            } else {\n                dayInt <= 28\n         \
    \   }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt\
    \ == 11) {\n            dayInt <= 30\n        } else {\n            dayInt <=\
    \ 31\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpyct43ilj.scala:19)\n\
    \tat Problem$.main(tmpyct43ilj.scala:37)\n\tat Problem.main(tmpyct43ilj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (monthInt\
    \ == 2) {\n                    if (yearInt % 4 == 0) {\n                     \
    \   if (dayInt < 1 || dayInt > 29) return false\n                    } else {\n\
    \                        if (dayInt < 1 || dayInt > 28) return false\n       \
    \             }\n                } else if (monthInt == 4 || monthInt == 6 ||\
    \ monthInt == 9 || monthInt == 11) {\n                    if (dayInt < 1 || dayInt\
    \ > 30) return false\n                } else {\n                    if (dayInt\
    \ < 1 || dayInt > 31) return false\n                }\n                return\
    \ true\n            }\n            case _ => return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.isEmpty) return\
    \ false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        val datePattern(month,\
    \ day, year) = date\n        val monthInt = month.toInt\n        val dayInt =\
    \ day.toInt\n        val yearInt = year.toInt\n        if (monthInt == 2) {\n\
    \            if (yearInt % 4 == 0) {\n                if (dayInt <= 29) return\
    \ true\n            } else {\n                if (dayInt <= 28) return true\n\
    \            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n            if (dayInt <= 30) return true\n     \
    \   } else {\n            if (dayInt <= 31) return true\n        }\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 03-11-2000 (of class java.lang.String)\n\tat Problem$.validDate(tmpzjsz4ux2.scala:19)\n\
    \tat Problem$.main(tmpzjsz4ux2.scala:37)\n\tat Problem.main(tmpzjsz4ux2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\".r\n        date match\
    \ {\n            case datePattern() => {\n                val dateArray = date.split(\"\
    -\")\n                val month = dateArray(0).toInt\n                val day\
    \ = dateArray(1).toInt\n                val year = dateArray(2).toInt\n      \
    \          if (month < 1 || month > 12) return false\n                if (day\
    \ < 1 || day > 31) return false\n                if (month == 2) {\n         \
    \           if (day > 29) return false\n                    if (day == 29) {\n\
    \                        if (year % 4 != 0) return false\n                   \
    \     if (year % 100 == 0 && year % 400 != 0) return false\n                 \
    \   }\n                }\n                if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n                    if (day > 30) return false\n   \
    \             }\n                true\n            }\n            case _ => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxmjg9uuk.scala:43)\n\tat Problem.main(tmpxmjg9uuk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val months = Array(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val dateArray = date.split(\"\
    -\")\n        if (dateArray.length != 3) return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > months(month - 1)) return false\n        if (month == 2 && day == 29) {\n\
    \            if (year % 4 != 0) return false\n            if (year % 100 == 0\
    \ && year % 400 != 0) return false\n        }\n        return true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateRegex = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case dateRegex(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) return false\n                if (dayInt\
    \ < 1 || dayInt > 31) return false\n                if (monthInt == 2) {\n   \
    \                 if (dayInt > 29) return false\n                    if (dayInt\
    \ == 29) {\n                        if (yearInt % 4 != 0) return false\n     \
    \                   if (yearInt % 100 == 0 && yearInt % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthInt == 4 ||\
    \ monthInt == 6 || monthInt == 9 || monthInt == 11) {\n                    if\
    \ (dayInt > 30) return false\n                }\n                return true\n\
    \            }\n            case _ => return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (d < 1 || d > 31) false\n           \
    \     else if (m == 2 && d > 29) false\n                else if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n                    if (d > 30) false\n         \
    \           else true\n                }\n                else true\n        \
    \    }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (m == 2) {\n                    if (y\
    \ % 4 == 0) {\n                        if (d < 1 || d > 29) false\n          \
    \              else true\n                    }\n                    else {\n\
    \                        if (d < 1 || d > 28) false\n                        else\
    \ true\n                    }\n                }\n                else if (m ==\
    \ 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n       \
    \             if (d < 1 || d > 31) false\n                    else true\n    \
    \            }\n                else {\n                    if (d < 1 || d > 30)\
    \ false\n                    else true\n                }\n            }\n   \
    \         case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val regex = \"\"\"(\\\
    d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case regex(month,\
    \ day, year) => {\n                val monthNum = month.toInt\n              \
    \  val dayNum = day.toInt\n                val yearNum = year.toInt\n        \
    \        if (monthNum < 1 || monthNum > 12) return false\n                if (dayNum\
    \ < 1 || dayNum > 31) return false\n                if (monthNum == 2) {\n   \
    \                 if (dayNum > 29) return false\n                    if (dayNum\
    \ == 29) {\n                        if (yearNum % 4 != 0) return false\n     \
    \                   if (yearNum % 100 == 0 && yearNum % 400 != 0) return false\n\
    \                    }\n                }\n                if (monthNum == 4 ||\
    \ monthNum == 6 || monthNum == 9 || monthNum == 11) {\n                    if\
    \ (dayNum > 30) return false\n                }\n                true\n      \
    \      }\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (y % 4 == 0) {\n                        if (d < 1 || d > 29) return false\n\
    \                    } else {\n                        if (d < 1 || d > 28) return\
    \ false\n                    }\n                } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n                    if (d < 1 || d > 30) return false\n\
    \                } else {\n                    if (d < 1 || d > 31) return false\n\
    \                }\n                return true\n            }\n            case\
    \ _ => return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) return false\n                if (m == 2) {\n                    if\
    \ (d < 1 || d > 29) return false\n                    if (d == 29) {\n       \
    \                 if (y % 4 != 0) return false\n                        if (y\
    \ % 100 == 0 && y % 400 != 0) return false\n                    }\n          \
    \      } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                 \
    \   if (d < 1 || d > 30) return false\n                } else {\n            \
    \        if (d < 1 || d > 31) return false\n                }\n              \
    \  return true\n            }\n            case _ => false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        if (date.length == 0)\
    \ return false\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val datePattern = \"\"\
    \"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case datePattern(month,\
    \ day, year) => {\n                val monthInt = month.toInt\n              \
    \  val dayInt = day.toInt\n                val yearInt = year.toInt\n        \
    \        if (monthInt < 1 || monthInt > 12) false\n                else if (dayInt\
    \ < 1 || dayInt > 31) false\n                else if (monthInt == 2 && dayInt\
    \ > 29) false\n                else if (monthInt == 4 && dayInt > 30) false\n\
    \                else if (monthInt == 6 && dayInt > 30) false\n              \
    \  else if (monthInt == 9 && dayInt > 30) false\n                else if (monthInt\
    \ == 11 && dayInt > 30) false\n                else true\n            }\n    \
    \        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val pattern = \"\"\"\
    (\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        date match {\n            case pattern(month,\
    \ day, year) => {\n                val m = month.toInt\n                val d\
    \ = day.toInt\n                val y = year.toInt\n                if (m < 1 ||\
    \ m > 12) false\n                else if (m == 2) {\n                    if (y\
    \ % 4 == 0) {\n                        if (d < 1 || d > 29) false\n          \
    \              else true\n                    }\n                    else {\n\
    \                        if (d < 1 || d > 28) false\n                        else\
    \ true\n                    }\n                }\n                else if (m ==\
    \ 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n       \
    \             if (d < 1 || d > 31) false\n                    else true\n    \
    \            }\n                else {\n                    if (d < 1 || d > 30)\
    \ false\n                    else true\n                }\n            }\n   \
    \         case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800337
