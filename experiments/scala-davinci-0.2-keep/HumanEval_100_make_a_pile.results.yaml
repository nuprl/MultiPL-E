language: scala
name: HumanEval_100_make_a_pile
results:
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var stones = ListBuffer[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            stones +=\
    \ current\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu6ht3nc.scala:25)\n\tat Problem.main(tmpsu6ht3nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2\n            else i = (i - 1) / 2\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph7icv5xr.scala:25)\n\tat Problem.main(tmph7icv5xr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else i / 2 + 1\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var num = n\n        while (num > 0) {\n            result = num :: result\n\
    \            if (num % 2 == 0) num -= 1\n            num /= 2\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8i3pw7z.scala:25)\n\tat Problem.main(tmpf8i3pw7z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result += i\n       \
    \     i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, level : Long, acc : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) acc\n            else makeAPile(n - 1, level + 2, acc :+ level)\n    \
    \    }\n        makeAPile(n, n, List())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var l = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l = i :: l\n        \
    \    if (i % 2 == 0) i = i / 2 else i = i / 2 + 1\n        }\n        l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) n + 2 else n + 1\n\
    \                makeAPile(next, n :: acc)\n            }\n        }\n       \
    \ makeAPile(n, Nil).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            if\
    \ (m % 2 == 0) m -= 1\n            m /= 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6gihj2cq.scala:25)\n\tat Problem.main(tmp6gihj2cq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var x = n\n        while (x > 0) {\n            result = x :: result\n\
    \            if (x % 2 == 0) x = x / 2 else x = x / 2 + 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) n + 2 else n + 1\n\
    \                makeAPile(next, n :: acc)\n            }\n        }\n       \
    \ makeAPile(n, Nil).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var lst = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            lst += i\n          \
    \  i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        lst.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 1) List(1)\n\
    \        else {\n            val next = if (n % 2 == 0) n + 2 else n + 1\n   \
    \         n :: makeAPile(next)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var list = List[Long]()\n\
    \        var num = n\n        while (num > 0) {\n            list = num :: list\n\
    \            if (num % 2 == 0) num = num / 2 - 1\n            else num = num /\
    \ 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = ListBuffer[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i -= 1\n            i -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_nscm422.scala:25)\n\tat Problem.main(tmp_nscm422.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = ListBuffer[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var stones = ListBuffer[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            stones +=\
    \ current\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result += i\n       \
    \     i = if (i % 2 == 0) i / 2 else i / 2 + 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000082000000,
    2113929216, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 2113929216 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid7480.log

    '
  timestamp: 1659794441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPileHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPileHelper(n - 1, (n + 1) :: acc)\n     \
    \       else makeAPileHelper(n - 1, (n + 2) :: acc)\n        }\n        makeAPileHelper(n,\
    \ List(n)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwbby6uv6.scala:23)\n\tat Problem.main(tmpwbby6uv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var x = n\n        while (x > 0) {\n            result = x :: result\n\
    \            if (x % 2 == 0) x = x / 2 - 1\n            else x = x / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000082000000,
    2113929216, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 2113929216 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid7508.log

    '
  timestamp: 1659794441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n            result\
    \ += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n  \
    \      result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794452
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result += i\n       \
    \     i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            m\
    \ = if (m % 2 == 0) m / 2 else (m + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794456
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else i / 2 + 1\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794454
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794453
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val list = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            list += i\n         \
    \   if (i % 2 == 0) i = i / 2\n            else i = (i - 1) / 2\n        }\n \
    \       list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmjf2jsgl.scala:25)\n\tat Problem.main(tmpmjf2jsgl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu6ht3nc.scala:25)\n\tat Problem.main(tmpsu6ht3nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var level = n\n        while (level > 0) {\n            result = level\
    \ :: result\n            if (level % 2 == 0) level += 1 else level += 2\n    \
    \    }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794449
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPileHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPileHelper(n - 1, (n + 1) :: acc)\n     \
    \       else makeAPileHelper(n - 1, (n + 2) :: acc)\n        }\n        makeAPileHelper(n,\
    \ List(n)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwbby6uv6.scala:23)\n\tat Problem.main(tmpwbby6uv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 else i = i / 2 + 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794453
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var level = n\n        while (level > 0) {\n            result = level\
    \ :: result\n            if (level % 2 == 0) level += 1 else level += 2\n    \
    \    }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2\n            else i = (i - 1) / 2\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph7icv5xr.scala:25)\n\tat Problem.main(tmph7icv5xr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var num = n\n        while (num > 0) {\n            result = num :: result\n\
    \            if (num % 2 == 0) num -= 1\n            num /= 2\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8i3pw7z.scala:25)\n\tat Problem.main(tmpf8i3pw7z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var stones = n\n        while (stones > 0) {\n   \
    \         result += stones\n            stones = if (stones % 2 == 0) stones +\
    \ 1 else stones + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000082000000,
    2113929216, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 2113929216 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid7408.log

    '
  timestamp: 1659794440
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) n + 2 else n + 1\n\
    \                makeAPile(next, n :: acc)\n            }\n        }\n       \
    \ makeAPile(n, Nil).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPileRec(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPileRec(n - 1, (n + 1) :: acc)\n        \
    \    else makeAPileRec(n - 1, (n + 2) :: acc)\n        }\n        makeAPileRec(n,\
    \ List(n)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd1stnat7.scala:23)\n\tat Problem.main(tmpd1stnat7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794452
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, acc :+ n)\n            else makeAPile(n\
    \ - 2, acc :+ n)\n        }\n        makeAPile(n, List())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794446
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794453
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n            result\
    \ += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n  \
    \      result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPileHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) n + 1 else n + 2\n\
    \                makeAPileHelper(next, acc :+ n)\n            }\n        }\n \
    \       makeAPileHelper(n, List())\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794452
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            if\
    \ (i % 2 == 0) i = i / 2\n            else i = (i - 1) / 2\n        }\n      \
    \  l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmputct_cea.scala:25)\n\tat Problem.main(tmputct_cea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794454
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            m\
    \ = if (m % 2 == 0) m + 1 else m + 2\n        }\n        l.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu6ht3nc.scala:25)\n\tat Problem.main(tmpsu6ht3nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var x = n\n        while (x > 0) {\n            result = x :: result\n\
    \            if (x % 2 == 0) x -= 1\n            x /= 2\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzg28jj.scala:25)\n\tat Problem.main(tmpjwzg28jj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result += i\n       \
    \     i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794456
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n            result\
    \ += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n  \
    \      result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794452
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2\n            else i = (i - 1) / 2\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph7icv5xr.scala:25)\n\tat Problem.main(tmph7icv5xr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val list = new\
    \ ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n            list\
    \ += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n  \
    \      list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794454
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu6ht3nc.scala:25)\n\tat Problem.main(tmpsu6ht3nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            if\
    \ (m % 2 == 0) m -= 1\n            m /= 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6gihj2cq.scala:25)\n\tat Problem.main(tmp6gihj2cq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var l = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l = i :: l\n        \
    \    if (i % 2 == 0) i += 1 else i += 2\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794455
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            m\
    \ = if (m % 2 == 0) m / 2 else (m + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794456
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPileHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPileHelper(n - 1, (n + 1) :: acc)\n     \
    \       else makeAPileHelper(n - 1, (n + 2) :: acc)\n        }\n        makeAPileHelper(n,\
    \ List(n)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwbby6uv6.scala:23)\n\tat Problem.main(tmpwbby6uv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val list = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            list += i\n         \
    \   if (i % 2 == 0) i = i / 2\n            else i = (i + 1) / 2\n        }\n \
    \       list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794448
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794453
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n            result\
    \ += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n  \
    \      result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794452
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794453
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var list = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            list = i :: list\n  \
    \          if (i % 2 == 0) i -= 1 else i -= 2\n        }\n        list\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmply576wg9.scala:24)\n\tat Problem.main(tmply576wg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) n + 1 else n + 2\n\
    \                makeAPile(next, n :: acc)\n            }\n        }\n       \
    \ makeAPile(n, Nil).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794452
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) n + 1 else n + 2\n\
    \                makeAPile(next, n :: acc)\n            }\n        }\n       \
    \ makeAPile(n, Nil).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var x = n\n        while (x > 0) {\n            result = x :: result\n\
    \            if (x % 2 == 0) x = x / 2 - 1\n            else x = x / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000082000000,
    2113929216, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 2113929216 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid7508.log

    '
  timestamp: 1659794441
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var count = n\n        while (count > 0) {\n            result = count\
    \ :: result\n            if (count % 2 == 0) count -= 1\n            count -=\
    \ 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbh1bfhl5.scala:25)\n\tat Problem.main(tmpbh1bfhl5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000082000000,
    2113929216, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 2113929216 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid9826.log

    '
  timestamp: 1659794461
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var l = List[Long]()\n\
    \        var m = n\n        while (m > 0) {\n            l = m :: l\n        \
    \    if (m % 2 == 0) m = m / 2 - 1\n            else m = m / 2\n        }\n  \
    \      l\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000082000000,
    2113929216, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 2113929216 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid9964.log

    '
  timestamp: 1659794464
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            m\
    \ = if (m % 2 == 0) m / 2 else (m + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPileHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPileHelper(n - 1, (n + 1) :: acc)\n     \
    \       else makeAPileHelper(n - 1, (n + 2) :: acc)\n        }\n        makeAPileHelper(n,\
    \ List(n)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwbby6uv6.scala:23)\n\tat Problem.main(tmpwbby6uv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000082000000,
    2113929216, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 2113929216 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid9826.log

    '
  timestamp: 1659794461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPileHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) n + 1 else n + 2\n\
    \                makeAPileHelper(next, n :: acc)\n            }\n        }\n \
    \       makeAPileHelper(n, Nil)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794474
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794474
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPileHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPileHelper(n - 1, (n + 1) :: acc)\n     \
    \       else makeAPileHelper(n - 1, (n + 2) :: acc)\n        }\n        makeAPileHelper(n,\
    \ List(n)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwbby6uv6.scala:23)\n\tat Problem.main(tmpwbby6uv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 else i = (i + 1) / 2\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000100000000,
    4294967296, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 4294967296 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid10193.log

    '
  timestamp: 1659794475
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000082000000,
    2113929216, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 2113929216 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid9826.log

    '
  timestamp: 1659794461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result += i\n       \
    \     i = if (i % 2 == 0) i / 2 else i / 2 + 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000082000000,
    2113929216, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 2113929216 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid7480.log

    '
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result += i\n       \
    \     i = if (i % 2 == 0) i + 1 else i + 2\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000100000000,
    4294967296, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 4294967296 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid10242.log

    '
  timestamp: 1659794475
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n            result\
    \ += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n  \
    \      result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, acc :+ n)\n            else makeAPile(n\
    \ - 2, acc :+ n)\n        }\n        makeAPile(n, List())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var lst = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            lst = i :: lst\n    \
    \        if (i % 2 == 0) i = i / 2\n            else i = i / 2 + 1\n        }\n\
    \        lst\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000100000000,
    4294967296, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 4294967296 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid10316.log

    '
  timestamp: 1659794475
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var a = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            a = i :: a\n        \
    \    if (i % 2 == 0) i -= 1\n            i /= 2\n        }\n        a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo_1i1s_n.scala:25)\n\tat Problem.main(tmpo_1i1s_n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val list = new\
    \ ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n            list\
    \ += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n  \
    \      list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794454
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) n + 2 else n + 1\n\
    \                makeAPile(next, n :: acc)\n            }\n        }\n       \
    \ makeAPile(n, Nil).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPileHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPileHelper(n - 1, acc :+ n)\n           \
    \ else makeAPileHelper(n - 2, acc :+ n)\n        }\n        makeAPileHelper(n,\
    \ List())\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794478
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu6ht3nc.scala:25)\n\tat Problem.main(tmpsu6ht3nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu6ht3nc.scala:25)\n\tat Problem.main(tmpsu6ht3nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) n + 2 else n + 1\n\
    \                makeAPile(next, n :: acc)\n            }\n        }\n       \
    \ makeAPile(n, Nil).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n + 2) :: acc)\n        }\n        makeAPile(n, List(n)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1zszar7.scala:23)\n\tat Problem.main(tmpj1zszar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794474
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            current = if (current % 2 == 0) current\
    \ + 1 else current + 2\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val result = new\
    \ ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n            result\
    \ += i\n            i = if (i % 2 == 0) i / 2 else i / 2 + 1\n        }\n    \
    \    result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000100000000,
    4294967296, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 4294967296 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid10455.log

    '
  timestamp: 1659794476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu6ht3nc.scala:25)\n\tat Problem.main(tmpsu6ht3nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794397
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794453
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current += 1 else current\
    \ += 2\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn488ucgf.scala:25)\n\tat Problem.main(tmpn488ucgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794398
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794396
