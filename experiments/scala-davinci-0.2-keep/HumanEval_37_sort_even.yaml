name: HumanEval_37_sort_even
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes a list l and returns a list l' such that\n    // l'\
  \ is identical to l in the odd indicies, while its values at the even indicies are\
  \ equal\n    // to the values of the even indicies of l, but sorted.\n    // >>>\
  \ sort_even([1, 2, 3])\n    // [1, 2, 3]\n    // >>> sort_even([5, 6, 3, 4])\n \
  \   // [3, 6, 5, 4]\n    def sortEven(l : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
  \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong,\
  \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
  \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
  \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
  \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var result = new ListBuffer[Long]\n        for (i <- 0 until\
    \ l.length) {\n            if (i % 2 == 0) result += l(i)\n            else {\n\
    \                val even = l.slice(i, i + 2).sorted\n                result +=\
    \ even(0)\n                result += even(1)\n            }\n        }\n     \
    \   result.toList", "        def sortEvenHelper(l : List[Long], result : List[Long])\
    \ : List[Long] = {\n            if (l.length == 0) result\n            else if\
    \ (l.length == 1) result :+ l(0)\n            else sortEvenHelper(l.drop(2), result\
    \ :+ l(0) :+ l(1).toString.sorted.toLong)\n        }\n        sortEvenHelper(l,\
    \ List())", "        def sortEvenHelper(l : List[Long], acc : List[Long]) : List[Long]\
    \ = {\n            if (l.length == 0) acc\n            else if (l.length == 1)\
    \ acc :+ l(0)\n            else {\n                val (even, odd) = l.splitAt(2)\n\
    \                sortEvenHelper(odd, acc :+ even(0) :+ even(1).min(even(0)))\n\
    \            }\n        }\n        sortEvenHelper(l, List())", "        val evens\
    \ = l.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).sorted\n        val odds =\
    \ l.zipWithIndex.filter(_._2 % 2 == 1).map(_._1)\n        evens.zip(odds).flatMap(x\
    \ => List(x._1, x._2))", "        if (l.length == 0) return l\n        var even\
    \ = l.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        var odd\
    \ = l.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1)\n        even = even.sorted\n\
    \        var result = List[Long]()\n        for (i <- 0 until l.length) {\n  \
    \          if (i % 2 == 0) result = result :+ even(i / 2)\n            else result\
    \ = result :+ odd(i / 2)\n        }\n        return result", "        if (l.length\
    \ == 0) return l\n        if (l.length == 1) return l\n        if (l.length ==\
    \ 2) return List(l(0), l(1))\n        if (l.length == 3) return List(l(0), l(1),\
    \ l(2))\n        val (even, odd) = l.splitAt(2)\n        even.sortWith(_ < _)\
    \ ::: sortEven(odd)", "        if (l.length == 0) return l\n        val even =\
    \ l.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        val odd =\
    \ l.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1)\n        even.sorted\
    \ ++ odd", "        var result = List[Long]()\n        for (i <- 0 until l.length)\
    \ {\n            if (i % 2 == 0) result = result :+ l(i)\n            else {\n\
    \                val sorted = l.slice(i, i + 2).sorted\n                result\
    \ = result :+ sorted(1) :+ sorted(0)\n            }\n        }\n        result",
  "        val even = l.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n \
    \       val odd = l.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1)\n \
    \       val sortedEven = even.sorted\n        val result = odd.zip(sortedEven).flatMap(x\
    \ => List(x._1, x._2))\n        return result", "        def sortEvenHelper(l\
    \ : List[Long], l2 : List[Long], even : Boolean) : List[Long] = {\n          \
    \  if (l.isEmpty) l2\n            else if (even) sortEvenHelper(l.tail, l2 :+\
    \ l.head, false)\n            else sortEvenHelper(l.tail, l2 :+ l.head.toString.sorted.toLong,\
    \ true)\n        }\n        sortEvenHelper(l, List(), true)", "        if (l.length\
    \ == 0) return l\n        if (l.length == 1) return l\n        val even = l.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        val odd = l.zipWithIndex.filter(_._2 % 2 == 1).map(_._1)\n\
    \        even.sorted ++ odd", "        def sortEvenHelper(l : List[Long], even\
    \ : Boolean) : List[Long] = {\n            if (l.isEmpty) Nil\n            else\
    \ if (even) l.head :: sortEvenHelper(l.tail, false)\n            else {\n    \
    \            val (evens, odds) = l.tail.partition(_ % 2 == 0)\n              \
    \  (evens ::: odds).head :: sortEvenHelper(l.tail.tail, true)\n            }\n\
    \        }\n        sortEvenHelper(l, true)", "        val even = l.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).sorted\n        val odd = l.zipWithIndex.filter(_._2 % 2\
    \ == 1).map(_._1)\n        even.zip(odd).flatMap(x => List(x._1, x._2))", "  \
    \      val even = l.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).sorted\n    \
    \    val odd = l.zipWithIndex.filter(_._2 % 2 == 1).map(_._1)\n        even.zip(odd).flatMap(x\
    \ => List(x._1, x._2))", "        val evens = l.zipWithIndex.filter(_._2 % 2 ==\
    \ 0).map(_._1).sorted\n        val odds = l.zipWithIndex.filter(_._2 % 2 == 1).map(_._1)\n\
    \        evens.zip(odds).flatMap(x => List(x._1, x._2))", "        var result\
    \ = List[Long]()\n        for (i <- 0 until l.length) {\n            if (i % 2\
    \ == 0) result = result :+ l(i)\n            else {\n                val temp\
    \ = l.slice(i, i + 2).sorted\n                result = result :+ temp(0)\n   \
    \             result = result :+ temp(1)\n            }\n        }\n        return\
    \ result", "        val evens = l.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1)\n        val odds = l.zipWithIndex.filter(x => x._2 % 2 == 1).map(x\
    \ => x._1)\n        val sortedEvens = evens.sorted\n        val result = ListBuffer[Long]()\n\
    \        for (i <- 0 until l.length) {\n            if (i % 2 == 0) result +=\
    \ sortedEvens(i / 2)\n            else result += odds(i / 2)\n        }\n    \
    \    result.toList", "        if (l.length == 0) return l\n        if (l.length\
    \ == 1) return l\n        if (l.length == 2) return List(l(0), l(1))\n       \
    \ if (l.length == 3) return List(l(0), l(1), l(2))\n        val even = l.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1)\n        val odd = l.zipWithIndex.filter(x\
    \ => x._2 % 2 == 1).map(x => x._1)\n        val sortedEven = even.sorted\n   \
    \     val sortedOdd = odd.sorted\n        val result = ListBuffer[Long]()\n  \
    \      for (i <- 0 until l.length) {\n            if (i % 2 == 0) result += sortedEven(i\
    \ / 2)\n            else result += sortedOdd((i - 1) / 2)\n        }\n       \
    \ return result.toList", "        def sortEvenHelper(l : List[Long], acc : List[Long])\
    \ : List[Long] = {\n            if (l.isEmpty) acc\n            else if (l.length\
    \ == 1) acc :+ l.head\n            else {\n                val (even, odd) = l.splitAt(2)\n\
    \                val sortedEven = even.sorted\n                sortEvenHelper(odd,\
    \ acc :+ sortedEven.head :+ sortedEven.last)\n            }\n        }\n     \
    \   sortEvenHelper(l, List())", "        def sortEvenHelper(l : List[Long], result\
    \ : List[Long]) : List[Long] = {\n            if (l.isEmpty) result\n        \
    \    else if (l.length == 1) result :+ l.head\n            else {\n          \
    \      val (first, second) = (l.head, l.tail.head)\n                if (first\
    \ > second) sortEvenHelper(l.tail.tail, result :+ second :+ first)\n         \
    \       else sortEvenHelper(l.tail.tail, result :+ first :+ second)\n        \
    \    }\n        }\n        sortEvenHelper(l, List())"]
stop_tokens:
- "\n    }\n"
