name: HumanEval_0_has_close_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Check if in given list of numbers, are any two numbers closer to each other\
  \ than\n    // given threshold.\n    // >>> has_close_elements([1.0, 2.0, 3.0],\
  \ 0.5)\n    // False\n    // >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0],\
  \ 0.3)\n    // True\n    def hasCloseElements(numbers : List[Float], threshold :\
  \ Float) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
  \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
  \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
  \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
  \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
  \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
  \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
  \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
completions: ["        if (numbers.length < 2) return false\n        var minDist =\
    \ Float.MaxValue\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  for (j <- i + 1 until numbers.length) {\n                val dist = abs(numbers(i)\
    \ - numbers(j))\n                if (dist < minDist) minDist = dist\n        \
    \    }\n        }\n        return minDist < threshold", "        var minDistance\
    \ = Float.MaxValue\n        for (i <- 0 until numbers.length - 1) {\n        \
    \    for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) minDistance = distance\n\
    \            }\n        }\n        minDistance < threshold", "        var min\
    \ = Float.MaxValue\n        for (i <- 0 until numbers.length - 1) {\n        \
    \    for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < min) min = diff\n            }\n \
    \       }\n        min < threshold", "        var min = Float.MaxValue\n     \
    \   for (i <- 0 until numbers.length) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) min = diff\n            }\n        }\n        return min < threshold",
  "        var sorted = numbers.sorted\n        for (i <- 1 until sorted.length) {\n\
    \            if (sorted(i) - sorted(i - 1) < threshold) return true\n        }\n\
    \        return false", "        var min = Float.MaxValue\n        for (i <- 0\
    \ until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) min = diff\n            }\n        }\n        min < threshold",
  "        val sorted = numbers.sorted\n        for (i <- 0 until sorted.length -\
    \ 1) {\n            if (abs(sorted(i) - sorted(i + 1)) < threshold) return true\n\
    \        }\n        return false", "        var min = Float.MaxValue\n       \
    \ for (i <- 0 until numbers.length) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) min = diff\n            }\n        }\n        min < threshold",
  "        var hasCloseElements = false\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  if (abs(numbers(i) - numbers(j)) < threshold) {\n                    hasCloseElements\
    \ = true\n                }\n            }\n        }\n        hasCloseElements",
  "        var i = 0\n        while (i < numbers.length) {\n            var j = i\
    \ + 1\n            while (j < numbers.length) {\n                if (abs(numbers(i)\
    \ - numbers(j)) < threshold) return true\n                j += 1\n           \
    \ }\n            i += 1\n        }\n        return false", "        var sorted\
    \ = numbers.sorted\n        for (i <- 0 until sorted.length - 1) {\n         \
    \   if (abs(sorted(i) - sorted(i + 1)) < threshold) return true\n        }\n \
    \       return false", "        var sorted = numbers.sorted\n        for (i <-\
    \ 0 until sorted.length - 1) {\n            if (abs(sorted(i) - sorted(i + 1))\
    \ < threshold) return true\n        }\n        return false", "        var min_diff\
    \ = Float.MaxValue\n        for (i <- 0 until numbers.length - 1) {\n        \
    \    for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < min_diff) min_diff = diff\n      \
    \      }\n        }\n        return min_diff < threshold", "        var sorted\
    \ = numbers.sorted\n        for (i <- 0 until sorted.length - 1) {\n         \
    \   if (abs(sorted(i) - sorted(i + 1)) < threshold) return true\n        }\n \
    \       return false", "        var minDistance = Float.MaxValue\n        for\
    \ (i <- 0 until numbers.length) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) minDistance = distance\n            }\n    \
    \    }\n        minDistance < threshold", "        val sorted = numbers.sorted\n\
    \        for (i <- 0 until sorted.length - 1) {\n            if (abs(sorted(i)\
    \ - sorted(i + 1)) < threshold) return true\n        }\n        return false",
  "        var sorted = numbers.sorted\n        for (i <- 0 until sorted.length -\
    \ 1) {\n            if (abs(sorted(i) - sorted(i + 1)) < threshold) return true\n\
    \        }\n        return false", "        var i = 0\n        var j = 1\n   \
    \     while (i < numbers.length) {\n            while (j < numbers.length) {\n\
    \                if (abs(numbers(i) - numbers(j)) < threshold) return true\n \
    \               j += 1\n            }\n            i += 1\n            j = i +\
    \ 1\n        }\n        return false", "        if (numbers.length < 2) return\
    \ false\n        var sortedNumbers = numbers.sorted\n        for (i <- 0 until\
    \ sortedNumbers.length - 1) {\n            if (sortedNumbers(i + 1) - sortedNumbers(i)\
    \ < threshold) return true\n        }\n        return false", "        var result\
    \ = false\n        for (i <- 0 until numbers.length - 1) {\n            for (j\
    \ <- i + 1 until numbers.length) {\n                if (abs(numbers(i) - numbers(j))\
    \ < threshold) {\n                    result = true\n                }\n     \
    \       }\n        }\n        result"]
stop_tokens:
- "\n    }\n"
