name: HumanEval_79_decimal_to_binary
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a number in decimal form and your task is to convert it\
  \ to\n    // binary format. The function should return a string, with each character\
  \ representing a binary\n    // number. Each character in the string will be '0'\
  \ or '1'.\n    // There will be an extra couple of characters 'db' at the beginning\
  \ and at the end of the string.\n    // The extra characters are there to help with\
  \ the format.\n    // Examples:\n    // decimal_to_binary(15)   # returns \"db1111db\"\
  \n    // decimal_to_binary(32)   # returns \"db100000db\"\n    def decimalToBinary(decimal\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
  db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
  db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
  \    }\n\n}\n"
completions: ['        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        val binary = new StringBuilder\n        var n = decimal\n  \
    \      while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        \"db\" + binary.reverse.toString + \"db\"", "        val binary\
    \ = new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString", " \
    \       val binary = new StringBuilder\n        binary.append(\"db\")\n      \
    \  var n = decimal\n        while (n > 0) {\n            binary.append(n % 2)\n\
    \            n /= 2\n        }\n        binary.append(\"db\")\n        binary.reverse.toString",
  "        val binary = decimal.toBinaryString\n        \"db\" + binary + \"db\"",
  "        var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n \
    \           binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        var binary = \"\"\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary = (n % 2).toString + binary\n            n /= 2\n\
    \        }\n        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        binary.append(\"db\")\n        var num = decimal\n        while (num\
    \ > 0) {\n            binary.append(num % 2)\n            num /= 2\n        }\n\
    \        binary.append(\"db\")\n        binary.reverse.toString", "        var\
    \ binary = \"\"\n        var n = decimal\n        while (n > 0) {\n          \
    \  binary = (n % 2).toString + binary\n            n /= 2\n        }\n       \
    \ \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString + "db"', '        "db"
    + decimal.toBinaryString + "db"', "        val binary = new StringBuilder\n  \
    \      var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.reverse.toString", "     \
    \   var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary = (n % 2).toString + binary\n            n /= 2\n        }\n \
    \       \"db\" + binary + \"db\"", "        val binary = new StringBuilder(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        var binary =\
    \ \"\"\n        var temp = decimal\n        while (temp > 0) {\n            binary\
    \ = (temp % 2).toString + binary\n            temp /= 2\n        }\n        \"\
    db\" + binary + \"db\"", "        val binary = new StringBuilder(\"db\")\n   \
    \     var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  "        val binary = new StringBuilder\n        binary.append(\"db\")\n       \
    \ var n = decimal\n        while (n > 0) {\n            binary.append(n % 2)\n\
    \            n /= 2\n        }\n        binary.append(\"db\")\n        binary.reverse.toString",
  '        "db" + decimal.toBinaryString + "db"', "        val binary = new StringBuilder(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  '        "db" + decimal.toBinaryString + "db"', "        val binary = decimal.toBinaryString\n\
    \        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString + "db"',
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        val binary =\
    \ new StringBuilder(\"db\")\n        var temp = decimal\n        while (temp >\
    \ 0) {\n            binary.append(temp % 2)\n            temp /= 2\n        }\n\
    \        binary.append(\"db\").reverse.toString", "        var binary = \"\"\n\
    \        var n = decimal\n        while (n > 0) {\n            binary = (n % 2).toString\
    \ + binary\n            n /= 2\n        }\n        \"db\" + binary + \"db\"",
  '        return "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        var result = \"db\"\n        var temp = decimal\n        while\
    \ (temp > 0) {\n            result += (temp % 2).toString\n            temp /=\
    \ 2\n        }\n        result += \"db\"\n        result.reverse", '        "db"
    + decimal.toBinaryString + "db"', "        val binary = new StringBuilder\n  \
    \      binary.append(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\")\n        binary.reverse.toString", "        var binary = \"\"\n        var\
    \ n = decimal\n        while (n > 0) {\n            binary = (n % 2).toString\
    \ + binary\n            n /= 2\n        }\n        \"db\" + binary + \"db\"",
  "        var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n \
    \           binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = decimal.toBinaryString\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  "        val binary = new StringBuilder(\"db\")\n        var n = decimal\n     \
    \   while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n  \
    \      }\n        binary.append(\"db\").reverse.toString", "        val binary\
    \ = decimal.toBinaryString\n        \"db\" + binary + \"db\"", '        "db" +
    decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString + "db"',
  "        val binary = decimal.toBinaryString\n        \"db\" + binary + \"db\"",
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"", '        "db" + decimal.toBinaryString + "db"', "        val binary\
    \ = new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString", " \
    \       val binary = new StringBuilder(\"db\")\n        var n = decimal\n    \
    \    while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n \
    \       }\n        binary.append(\"db\").reverse.toString", '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"", '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        var binary = \"\"\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary = (n % 2).toString + binary\n            n /= 2\n\
    \        }\n        \"db\" + binary + \"db\"", "        var result = \"db\"\n\
    \        var temp = decimal\n        while (temp > 0) {\n            result +=\
    \ (temp % 2).toString\n            temp /= 2\n        }\n        result += \"\
    db\"\n        result.reverse", '        "db" + decimal.toBinaryString + "db"',
  "        var binary = \"\"\n        var num = decimal\n        while (num > 0) {\n\
    \            binary = (num % 2).toString + binary\n            num /= 2\n    \
    \    }\n        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString
    + "db"', "        var binary = \"db\"\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary += (n % 2).toString\n            n /= 2\n    \
    \    }\n        binary += \"db\"\n        binary.reverse", "        val binary\
    \ = new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString", '        "db"
    + decimal.toBinaryString + "db"', "        val binary = new StringBuilder(\"db\"\
    )\n        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  "        val s = \"db\" + decimal.toBinaryString + \"db\"\n        s", '        "db"
    + decimal.toBinaryString + "db"', "        val binary = decimal.toBinaryString\n\
    \        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString + "db"',
  '        "db" + decimal.toBinaryString + "db"', "        val binary = new StringBuilder(\"\
    db\")\n        var remainder = decimal\n        while (remainder > 0) {\n    \
    \        binary.append(remainder % 2)\n            remainder /= 2\n        }\n\
    \        binary.append(\"db\").reverse.toString", "        var binary = \"\"\n\
    \        var n = decimal\n        while (n != 0) {\n            binary = (n %\
    \ 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"", "        var binary = \"\"\n        var n = decimal\n        while\
    \ (n != 0) {\n            binary = (n % 2).toString + binary\n            n /=\
    \ 2\n        }\n        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        val binary =\
    \ new StringBuilder()\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString", '        "db"
    + decimal.toBinaryString + "db"', "        val binary = new StringBuilder\n  \
    \      binary.append(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\")\n        binary.reverse.toString", "        val binary = decimal.toBinaryString\n\
    \        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString + "db"',
  '        "db" + decimal.toBinaryString + "db"', "        val binary = decimal.toBinaryString\n\
    \        \"db\" + binary + \"db\"", "        var result = \"db\"\n        var\
    \ n = decimal\n        while (n > 0) {\n            result += (n % 2).toString\n\
    \            n /= 2\n        }\n        result += \"db\"\n        result.reverse",
  "        val binary = new StringBuilder\n        binary.append(\"db\")\n       \
    \ var n = decimal\n        while (n > 0) {\n            binary.append(n % 2)\n\
    \            n /= 2\n        }\n        binary.append(\"db\")\n        binary.reverse.toString",
  '        "db" + decimal.toBinaryString + "db"', "        var result = \"db\"\n \
    \       var temp = decimal\n        while (temp > 0) {\n            result +=\
    \ temp % 2\n            temp /= 2\n        }\n        result += \"db\"\n     \
    \   result.reverse", "        var binary = \"\"\n        var n = decimal\n   \
    \     while (n > 0) {\n            binary = (n % 2).toString + binary\n      \
    \      n /= 2\n        }\n        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        val binary = new StringBuilder(\"db\")\n        var num = decimal\n\
    \        while (num > 0) {\n            binary.append(num % 2)\n            num\
    \ /= 2\n        }\n        binary.append(\"db\").reverse.toString", '        "db"
    + decimal.toBinaryString + "db"', "        var binary = \"\"\n        var n =\
    \ decimal\n        while (n > 0) {\n            binary = (n % 2).toString + binary\n\
    \            n /= 2\n        }\n        \"db\" + binary + \"db\"", "        var\
    \ binary = \"\"\n        var n = decimal\n        while (n > 0) {\n          \
    \  binary = (n % 2).toString + binary\n            n /= 2\n        }\n       \
    \ \"db\" + binary + \"db\"", "        var binary = \"\"\n        var n = decimal\n\
    \        while (n > 0) {\n            binary = (n % 2).toString + binary\n   \
    \         n /= 2\n        }\n        \"db\" + binary + \"db\"", "        val binary\
    \ = new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString", '        "db"
    + decimal.toBinaryString + "db"', "        var binary = \"\"\n        var n =\
    \ decimal\n        while (n > 0) {\n            binary = (n % 2).toString + binary\n\
    \            n /= 2\n        }\n        \"db\" + binary + \"db\"", '        "db"
    + decimal.toBinaryString + "db"', "        val binary = decimal.toBinaryString\n\
    \        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString + "db"',
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString", '        "db"
    + decimal.toBinaryString + "db"', "        val binary = new StringBuilder\n  \
    \      binary.append(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\")\n        binary.reverse.toString", '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString", '        "db"
    + decimal.toBinaryString + "db"', "        val binary = new StringBuilder(\"db\"\
    )\n        var temp = decimal\n        while (temp > 0) {\n            binary.append(temp\
    \ % 2)\n            temp /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        val binary = new StringBuilder(\"db\")\n        var temp = decimal\n\
    \        while (temp > 0) {\n            binary.append(temp % 2)\n           \
    \ temp /= 2\n        }\n        binary.append(\"db\").reverse.toString", '        "db"
    + decimal.toBinaryString + "db"', "        val binary = new StringBuilder(\"db\"\
    )\n        var d = decimal\n        while (d > 0) {\n            binary.append(d\
    \ % 2)\n            d /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  "        var result = \"db\"\n        var num = decimal\n        while (num > 0)\
    \ {\n            result += (num % 2).toString\n            num /= 2\n        }\n\
    \        result += \"db\"\n        result.reverse", "        val binary = decimal.toBinaryString\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  '        "db" + decimal.toBinaryString + "db"', "        val binary = new StringBuilder\n\
    \        binary.append(\"db\")\n        var n = decimal\n        while (n > 0)\
    \ {\n            binary.append(n % 2)\n            n /= 2\n        }\n       \
    \ binary.append(\"db\")\n        binary.reverse.toString", '        "db" + decimal.toBinaryString
    + "db"', "        val binary = new StringBuilder\n        binary.append(\"db\"\
    )\n        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.append(\"db\")\n       \
    \ binary.reverse.toString", "        var binary = \"\"\n        var n = decimal\n\
    \        while (n > 0) {\n            binary = (n % 2).toString + binary\n   \
    \         n /= 2\n        }\n        \"db\" + binary + \"db\"", '        "db"
    + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString + "db"',
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString", " \
    \       val binary = decimal.toBinaryString\n        \"db\" + binary + \"db\"",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        \"db\" + binary.reverse.toString + \"db\"", '        "db" + decimal.toBinaryString
    + "db"', "        val binary = new StringBuilder(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\").reverse.toString", "        val binary\
    \ = new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0)\
    \ {\n            binary.append(n % 2)\n            n /= 2\n        }\n       \
    \ binary.append(\"db\").reverse.toString", '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"", "        val binary = new StringBuilder(\"db\")\n        var n =\
    \ decimal\n        while (n > 0) {\n            binary.append(n % 2)\n       \
    \     n /= 2\n        }\n        binary.append(\"db\").reverse.toString", "  \
    \      var binary = \"db\"\n        var n = decimal\n        while (n > 0) {\n\
    \            binary += (n % 2).toString\n            n /= 2\n        }\n     \
    \   binary += \"db\"\n        binary.reverse", '        "db" + decimal.toBinaryString
    + "db"', "        val binary = new StringBuilder(\"db\")\n        var temp = decimal\n\
    \        while (temp > 0) {\n            binary.append(temp % 2)\n           \
    \ temp /= 2\n        }\n        binary.append(\"db\").reverse.toString", "   \
    \     val binary = new StringBuilder(\"db\")\n        var n = decimal\n      \
    \  while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n   \
    \     }\n        binary.append(\"db\").reverse.toString", "        val binary\
    \ = new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0)\
    \ {\n            binary.append(n % 2)\n            n /= 2\n        }\n       \
    \ binary.append(\"db\").reverse.toString", "        var binary = \"\"\n      \
    \  var d = decimal\n        while (d > 0) {\n            binary = (d % 2).toString\
    \ + binary\n            d /= 2\n        }\n        \"db\" + binary + \"db\"",
  "        var binary = \"\"\n        var num = decimal\n        while (num > 0) {\n\
    \            binary = (num % 2).toString + binary\n            num /= 2\n    \
    \    }\n        \"db\" + binary + \"db\"", "        var binary = \"\"\n      \
    \  var n = decimal\n        while (n > 0) {\n            binary = (n % 2).toString\
    \ + binary\n            n /= 2\n        }\n        \"db\" + binary + \"db\"",
  '        return "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        val binary =\
    \ new StringBuilder(\"db\")\n        var temp = decimal\n        while (temp >\
    \ 0) {\n            binary.append(temp % 2)\n            temp /= 2\n        }\n\
    \        binary.append(\"db\").reverse.toString", "        var binary = \"\"\n\
    \        var n = decimal\n        while (n > 0) {\n            binary = (n % 2).toString\
    \ + binary\n            n /= 2\n        }\n        \"db\" + binary + \"db\"",
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        val binary = new StringBuilder\n        binary.append(\"db\"\
    )\n        var temp = decimal\n        while (temp > 0) {\n            binary.append(temp\
    \ % 2)\n            temp /= 2\n        }\n        binary.append(\"db\")\n    \
    \    binary.reverse.toString", "        val binary = new StringBuilder\n     \
    \   binary.append(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\")\n        binary.reverse.toString", "        val binary = decimal.toBinaryString\n\
    \        \"db\" + binary + \"db\"", "        def decimalToBinaryHelper(decimal\
    \ : Long, binary : String) : String = {\n            if (decimal == 0) binary\n\
    \            else decimalToBinaryHelper(decimal / 2, (decimal % 2).toString +\
    \ binary)\n        }\n        \"db\" + decimalToBinaryHelper(decimal, \"\") +\
    \ \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        \"db\" + binary.reverse.toString + \"db\"", '        "db"
    + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString + "db"',
  "        var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n \
    \           binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString + "db"',
  "        var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n \
    \           binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString + "db"',
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        val binary = new StringBuilder(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\").reverse.toString", "        var result\
    \ = \"db\"\n        var n = decimal\n        while (n > 0) {\n            result\
    \ += (n % 2).toString\n            n /= 2\n        }\n        result += \"db\"\
    \n        result.reverse", '        "db" + decimal.toBinaryString + "db"', " \
    \       val binary = decimal.toBinaryString\n        \"db\" + binary + \"db\"",
  '        "db" + decimal.toBinaryString + "db"', "        var binary = \"\"\n   \
    \     var temp = decimal\n        while (temp > 0) {\n            binary = (temp\
    \ % 2).toString + binary\n            temp /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"", "        var binary = \"\"\n        var temp = decimal\n        while\
    \ (temp > 0) {\n            binary = (temp % 2).toString + binary\n          \
    \  temp /= 2\n        }\n        \"db\" + binary + \"db\"", "        var binary\
    \ = \"\"\n        var n = decimal\n        while (n > 0) {\n            binary\
    \ = (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" +\
    \ binary + \"db\"", "        // your code here\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"", '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString", '        "db"
    + decimal.toBinaryString + "db"']
stop_tokens:
- "\n    }\n"
