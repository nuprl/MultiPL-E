name: HumanEval_159_eat
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n\
  \    // but now you need to eat more carrots to complete the day's meals.\n    //\
  \ you should return an array of [ total number of eaten carrots after your meals,\n\
  \    // the number of carrots left after your meals ]\n    // if there are not enough\
  \ remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\
  \    // Example:\n    // * eat(5, 6, 10) -> [11, 4]\n    // * eat(4, 8, 9) -> [12,\
  \ 1]\n    // * eat(1, 10, 10) -> [11, 0]\n    // * eat(2, 11, 5) -> [7, 0]\n   \
  \ // Variables:\n    // @number : integer\n    // the number of carrots that you\
  \ have eaten.\n    // @need : integer\n    // the number of carrots that you need\
  \ to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet\
  \ exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <=\
  \ need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    def eat(number\
  \ : Long, need : Long, remaining : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong,\
  \ 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong,\
  \ 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong,\
  \ 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong,\
  \ 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong,\
  \ 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong,\
  \ 0l.toLong))));\n    }\n\n}\n"
completions: ["        // your code here\n        val eaten = number + min(need, remaining)\n\
    \        List(eaten, remaining - min(need, remaining))", "        var result =\
    \ List[Long]()\n        if (number + need <= remaining) {\n            result\
    \ = List(number + need, remaining - (number + need))\n        } else {\n     \
    \       result = List(remaining, 0)\n        }\n        return result", "    \
    \    // your code here\n        List(0, 0)", "        // Your code here\n    \
    \    List(0, 0)", '        List(number + min(need, remaining), max(remaining -
    need, 0))', "        // your code here\n        List(0, 0)", "        // Write\
    \ your code here\n        // Return the result in the form of a list\n       \
    \ // Good luck!\n        if (number + need <= remaining) List(number + need, remaining\
    \ - (number + need))\n        else List(remaining + number, 0)", "        // Your\
    \ code here\n        List(number + min(need, remaining), max(remaining - need,\
    \ 0))", "        // your code here\n        List(0, 0)", "        // your code\
    \ here\n        List(0, 0)", "        // Your code here\n        List(0, 0)",
  "        // your code here\n        List(0, 0)", "        // Your code here\n  \
    \      val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        // Write your code here\n        var result\
    \ : List[Long] = List()\n        var total : Long = number\n        if (remaining\
    \ >= need) {\n            total += need\n            result = List(total, remaining\
    \ - need)\n        } else {\n            total += remaining\n            result\
    \ = List(total, 0)\n        }\n        return result", "        // your code here\n\
    \        List(0, 0)", "        if (remaining >= need) {\n            List(number\
    \ + need, remaining - need)\n        } else {\n            List(number + remaining,\
    \ 0)\n        }", "        // Your code here\n        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", '        List(number + min(need, remaining), max(remaining
    - need, 0))', "        var result = List[Long]()\n        if (remaining >= need)\
    \ {\n            result = List(number + need, remaining - need)\n        } else\
    \ {\n            result = List(number + remaining, 0)\n        }\n        return\
    \ result", "        // your code here\n        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))"]
stop_tokens:
- "\n    }\n"
