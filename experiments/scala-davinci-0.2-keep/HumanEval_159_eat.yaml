name: HumanEval_159_eat
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n\
  \    // but now you need to eat more carrots to complete the day's meals.\n    //\
  \ you should return an array of [ total number of eaten carrots after your meals,\n\
  \    // the number of carrots left after your meals ]\n    // if there are not enough\
  \ remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\
  \    // Example:\n    // * eat(5, 6, 10) -> [11, 4]\n    // * eat(4, 8, 9) -> [12,\
  \ 1]\n    // * eat(1, 10, 10) -> [11, 0]\n    // * eat(2, 11, 5) -> [7, 0]\n   \
  \ // Variables:\n    // @number : integer\n    // the number of carrots that you\
  \ have eaten.\n    // @need : integer\n    // the number of carrots that you need\
  \ to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet\
  \ exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <=\
  \ need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    def eat(number\
  \ : Long, need : Long, remaining : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong,\
  \ 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong,\
  \ 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong,\
  \ 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong,\
  \ 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong,\
  \ 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong,\
  \ 0l.toLong))));\n    }\n\n}\n"
completions: ["        // your code here\n        val eaten = number + min(need, remaining)\n\
    \        List(eaten, remaining - min(need, remaining))", "        var result =\
    \ List[Long]()\n        if (number + need <= remaining) {\n            result\
    \ = List(number + need, remaining - (number + need))\n        } else {\n     \
    \       result = List(remaining, 0)\n        }\n        return result", "    \
    \    // your code here\n        List(0, 0)", "        // Your code here\n    \
    \    List(0, 0)", '        List(number + min(need, remaining), max(remaining -
    need, 0))', "        // your code here\n        List(0, 0)", "        // Write\
    \ your code here\n        // Return the result in the form of a list\n       \
    \ // Good luck!\n        if (number + need <= remaining) List(number + need, remaining\
    \ - (number + need))\n        else List(remaining + number, 0)", "        // Your\
    \ code here\n        List(number + min(need, remaining), max(remaining - need,\
    \ 0))", "        // your code here\n        List(0, 0)", "        // your code\
    \ here\n        List(0, 0)", "        // Your code here\n        List(0, 0)",
  "        // your code here\n        List(0, 0)", "        // Your code here\n  \
    \      val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        // Write your code here\n        var result\
    \ : List[Long] = List()\n        var total : Long = number\n        if (remaining\
    \ >= need) {\n            total += need\n            result = List(total, remaining\
    \ - need)\n        } else {\n            total += remaining\n            result\
    \ = List(total, 0)\n        }\n        return result", "        // your code here\n\
    \        List(0, 0)", "        if (remaining >= need) {\n            List(number\
    \ + need, remaining - need)\n        } else {\n            List(number + remaining,\
    \ 0)\n        }", "        // Your code here\n        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", '        List(number + min(need, remaining), max(remaining
    - need, 0))', "        var result = List[Long]()\n        if (remaining >= need)\
    \ {\n            result = List(number + need, remaining - need)\n        } else\
    \ {\n            result = List(number + remaining, 0)\n        }\n        return\
    \ result", "        // your code here\n        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  // Your code here\n        List(number + min(need, remaining), max(remaining\
    \ - need, 0))", "        // Your code here\n        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", "        // your code here\n        List(0, 0)",
  "        // Your code here\n        List(0, 0)", "        // your code here\n  \
    \      var total = number + remaining\n        var left = 0L\n        if (total\
    \ < need) {\n            total = total\n            left = 0L\n        } else\
    \ {\n            total = need\n            left = total - need\n        }\n  \
    \      List(total, left)", "        // your code here\n        List(0, 0)", " \
    \       // your code here\n        List(0, 0)", "        // your code here\n \
    \       val total = number + min(need, remaining)\n        val left = max(remaining\
    \ - need, 0)\n        List(total, left)", "        // Your code here\n       \
    \ return List(number + min(need, remaining), max(remaining - need, 0))", "   \
    \     var result = List[Long]()\n        var total = number + remaining\n    \
    \    if (total >= need) {\n            result = List(need, total - need)\n   \
    \     } else {\n            result = List(total, 0)\n        }\n        result",
  "        val total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        // Your code here\n        List(0, 0)", "        val total\
    \ = number + min(need, remaining)\n        List(total, remaining - min(need, remaining))",
  "        var result = List[Long]()\n        if (remaining >= need) {\n         \
    \   result = List(number + need, remaining - need)\n        } else {\n       \
    \     result = List(number + remaining, 0)\n        }\n        return result",
  "        // your code here\n        List(0, 0)", "        // your code here\n  \
    \      List(0, 0)", "        // Write your code here\n        // Return a list\
    \ of two elements\n        // The first element is the total number of carrots\
    \ that you have eaten\n        // The second element is the number of carrots\
    \ left after your meals\n        // If there are not enough remaining carrots,\
    \ you will eat all remaining carrots, but will still be hungry.\n        // Example:\n\
    \        // * eat(5, 6, 10) -> [11, 4]\n        // * eat(4, 8, 9) -> [12, 1]\n\
    \        // * eat(1, 10, 10) -> [11, 0]\n        // * eat(2, 11, 5) -> [7, 0]\n\
    \        // Variables:\n        // @number : integer\n        // the number of\
    \ carrots that you have eaten.\n        // @need : integer\n        // the number\
    \ of carrots that you need to eat.\n        // @remaining : integer\n        //\
    \ the number of remaining carrots thet exist in stock\n        // Constrain:\n\
    \        // * 0 <= number <= 1000\n        // * 0 <= need <= 1000\n        //\
    \ * 0 <= remaining <= 1000\n        // Have fun :)\n        var total = number\
    \ + need\n        var left = remaining - need\n        if (left < 0) {\n     \
    \       total = total + left\n            left = 0\n        }\n        List(total,\
    \ left)", "        // Your code here\n        return List(0, 0)", "        //\
    \ Your code here\n        List(0, 0)", "        // your code here\n        val\
    \ result = number + need\n        if (result > remaining) {\n            List(remaining,\
    \ 0)\n        } else {\n            List(result, remaining - result)\n       \
    \ }", "        // Write your code here\n        var result = List[Long]()\n  \
    \      if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", "        var result = List[Long]()\n        if (remaining\
    \ >= need) {\n            result = List(number + need, remaining - need)\n   \
    \     } else {\n            result = List(number + remaining, 0)\n        }\n\
    \        result", "        // Write your code here\n        var total = number\
    \ + min(need, remaining)\n        var left = max(remaining - need, 0)\n      \
    \  List(total, left)", "        val total = number + min(need, remaining)\n  \
    \      List(total, remaining - min(need, remaining))", "        // your code here\n\
    \        val total = number + need\n        if (total <= remaining) List(total,\
    \ remaining - total)\n        else List(remaining + number, 0)", "        // your\
    \ code here\n        List(0, 0)", "        // Your code here\n        List(0,\
    \ 0)", "        if (remaining >= need) {\n            List(number + need, remaining\
    \ - need)\n        } else {\n            List(number + remaining, 0)\n       \
    \ }", "        // Your code here\n        if (number + need > remaining) {\n \
    \           List(remaining, 0)\n        } else {\n            List(number + need,\
    \ remaining - (number + need))\n        }", "        val total = number + min(need,\
    \ remaining)\n        List(total, max(0, remaining - need))", "        // Your\
    \ code here\n        List(0, 0)", "        // Write your code here\n        List(0,\
    \ 0)", "        // Write your code here\n        List(0, 0)", "        var result\
    \ = List[Long]()\n        if (remaining >= need) {\n            result = List(number\
    \ + need, remaining - need)\n        } else {\n            result = List(number\
    \ + remaining, 0)\n        }\n        result", "        // your code here\n  \
    \      List(0, 0)", '        List(number + min(need, remaining), max(remaining
    - need, 0))', "        var result = List[Long]()\n        if (number >= need)\
    \ {\n            result = List(number, remaining)\n        } else {\n        \
    \    if (remaining >= need - number) {\n                result = List(need, remaining\
    \ - (need - number))\n            } else {\n                result = List(number\
    \ + remaining, 0)\n            }\n        }\n        result", "        if (remaining\
    \ < need) {\n            List(number + remaining, 0)\n        } else {\n     \
    \       List(number + need, remaining - need)\n        }", "        val total\
    \ = number + remaining\n        val eaten = if (total >= need) need else total\n\
    \        List(eaten, total - eaten)", "        // your code here\n        List(0,\
    \ 0)", "        // your code here\n        List(0, 0)", "        // Your code\
    \ here\n        List(0, 0)", "        // your code here\n        List(0, 0)",
  "        // Your code here\n        var result : List[Long] = List()\n        if\
    \ (number + need <= remaining) {\n            result = List(number + need, remaining\
    \ - (number + need))\n        } else {\n            result = List(remaining, 0)\n\
    \        }\n        result", "        // Your code here\n        val total = number\
    \ + need\n        val left = total - remaining\n        if (left > 0) List(total\
    \ - left, 0)\n        else List(total, -left)", "        if (number + need <=\
    \ remaining) List(number + need, remaining - (number + need))\n        else List(remaining\
    \ + number, 0)", "        // your code here\n        val total = number + need\n\
    \        if (total <= remaining) {\n            List(total, remaining - total)\n\
    \        } else {\n            List(remaining + number, 0)\n        }", "    \
    \    // Your code here\n        List(number + min(need, remaining), max(remaining\
    \ - need, 0))", "        // Your code here\n        List(number + min(need, remaining),\
    \ max(remaining - need, 0))", "        // Your code here\n        List(0, 0)",
  "        // Write your code here\n        var result = List[Long]()\n        if\
    \ (number + need <= remaining) {\n            result = List(number + need, remaining\
    \ - (number + need))\n        } else {\n            result = List(remaining +\
    \ number, 0)\n        }\n        result", "        // your code here\n       \
    \ return List(0, 0)", "        // your code here\n        List(0, 0)", "     \
    \   // your code here\n        List(0, 0)", "        // your code here\n     \
    \   val total = number + need\n        if (total <= remaining) List(total, remaining\
    \ - total)\n        else List(remaining + number, 0)", "        val total = number\
    \ + min(need, remaining)\n        List(total, remaining - min(need, remaining))",
  "        // Your code here\n        List(0, 0)", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", "        // Your code here\n        return List(0,\
    \ 0)", "        var result = List[Long]()\n        if (remaining >= need) {\n\
    \            result = List(number + need, remaining - need)\n        } else {\n\
    \            result = List(number + remaining, 0)\n        }\n        result",
  "        // Your code here\n        List(number + min(need, remaining), max(remaining\
    \ - need, 0))", "        var result = List(0L, 0L)\n        if (remaining < need)\
    \ {\n            result = List(number + remaining, 0L)\n        } else {\n   \
    \         result = List(number + need, remaining - need)\n        }\n        return\
    \ result", "        // your code here\n        var result = List[Long]()\n   \
    \     if (number + need > remaining) {\n            result = List(remaining, 0)\n\
    \        } else {\n            result = List(number + need, remaining - (number\
    \ + need))\n        }\n        result", "        // your code here\n        List(0,\
    \ 0)", "        // your code here\n        List(0, 0)", "        // your code\
    \ here\n        var result = List[Long]()\n        if (number + need <= remaining)\
    \ {\n            result = List(number + need, remaining - (number + need))\n \
    \       } else {\n            result = List(remaining, 0)\n        }\n       \
    \ result", "        // Your code here\n        List(number + min(need, remaining),\
    \ max(remaining - need, 0))", "        // Your code here\n        List(0, 0)",
  "        var result = List[Long]()\n        if (number + need <= remaining) {\n\
    \            result = List(number + need, remaining - (number + need))\n     \
    \   } else {\n            result = List(remaining, 0)\n        }\n        return\
    \ result", "        if (remaining < need) {\n            List(number + remaining,\
    \ 0)\n        } else {\n            List(number + need, remaining - need)\n  \
    \      }", "        // Your code here\n        List(0, 0)", "        if (remaining\
    \ < need) List(number + remaining, 0)\n        else List(number + need, remaining\
    \ - need)", "        val total = number + min(need, remaining)\n        List(total,\
    \ max(0, remaining - need))", "        // your code here\n        List(0, 0)",
  "        // your code here\n        List(number, need, remaining)", "        val\
    \ total = number + min(need, remaining)\n        val left = max(remaining - need,\
    \ 0)\n        List(total, left)", "        // Write your code here\n        if\
    \ (remaining < need) {\n            List(number + remaining, 0)\n        } else\
    \ {\n            List(number + need, remaining - need)\n        }", "        //\
    \ Your code here\n        val result = number + min(need, remaining)\n       \
    \ List(result, max(0, remaining - need))", "        // Your code here\n      \
    \  var result = List[Long]()\n        if (remaining >= need) {\n            result\
    \ = List(number + need, remaining - need)\n        } else {\n            result\
    \ = List(number + remaining, 0)\n        }\n        result", "        // Your\
    \ code here\n        var result = List[Long]()\n        if(number + need <= remaining)\
    \ {\n            result = List(number + need, remaining - (number + need))\n \
    \       } else {\n            result = List(remaining + number, 0)\n        }\n\
    \        result", "        // Your code here\n        List(0, 0)", "        if\
    \ (number >= need) {\n            List(number, remaining)\n        } else {\n\
    \            if (remaining >= need - number) {\n                List(need, remaining\
    \ - (need - number))\n            } else {\n                List(number + remaining,\
    \ 0)\n            }\n        }", "        // Write your code here\n        //\
    \ Return a list of two elements\n        // First element is the number of carrots\
    \ that you have eaten\n        // Second element is the number of remaining carrots\n\
    \        // Example:\n        // * eat(5, 6, 10) -> [11, 4]\n        // * eat(4,\
    \ 8, 9) -> [12, 1]\n        // * eat(1, 10, 10) -> [11, 0]\n        // * eat(2,\
    \ 11, 5) -> [7, 0]\n        // Variables:\n        // @number : integer\n    \
    \    // the number of carrots that you have eaten.\n        // @need : integer\n\
    \        // the number of carrots that you need to eat.\n        // @remaining\
    \ : integer\n        // the number of remaining carrots thet exist in stock\n\
    \        // Constrain:\n        // * 0 <= number <= 1000\n        // * 0 <= need\
    \ <= 1000\n        // * 0 <= remaining <= 1000\n        // Have fun :)\n     \
    \   var total = number + need\n        var left = remaining - need\n        if\
    \ (left < 0) {\n            total = total + left\n            left = 0\n     \
    \   }\n        List(total, left)", "        // your code here\n        List(0,\
    \ 0)", "        // your code here\n        List(0, 0)", "        // your code\
    \ here\n        List(0, 0)", "        if (remaining >= need) {\n            List(number\
    \ + need, remaining - need)\n        } else {\n            List(number + remaining,\
    \ 0)\n        }", "        // your code here\n        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  // Your code here\n        List(0, 0)", "        var result = List[Long]()\n\
    \        var total = number + min(need, remaining)\n        result = result :+\
    \ total\n        result = result :+ (remaining - min(need, remaining))\n     \
    \   return result", "        // Your code here\n        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  // Your code here\n        List(0, 0)", "        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  val total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        // Your code here\n        return List(0, 0)", "       \
    \ var result = List[Long]()\n        if (remaining >= need) {\n            result\
    \ = List(number + need, remaining - need)\n        } else {\n            result\
    \ = List(number + remaining, 0)\n        }\n        result", "        // your\
    \ code here\n        List(0, 0)", "        // your code here\n        List(0,\
    \ 0)", "        // Your code here\n        List(0, 0)", "        // Your code\
    \ here\n        val total = number + remaining\n        val eaten = if (total\
    \ >= need) need else total\n        List(eaten, total - eaten)", "        val\
    \ total = number + min(need, remaining)\n        List(total, remaining - min(need,\
    \ remaining))", "        var result = List[Long]()\n        if (number + need\
    \ <= remaining) {\n            result = List(number + need, remaining - (number\
    \ + need))\n        } else {\n            result = List(remaining, 0)\n      \
    \  }\n        return result", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        // Write your\
    \ code here\n        // Return an array of [ total number of eaten carrots after\
    \ your meals,\n        // the number of carrots left after your meals ]\n    \
    \    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n        // Example:\n        // * eat(5,\
    \ 6, 10) -> [11, 4]\n        // * eat(4, 8, 9) -> [12, 1]\n        // * eat(1,\
    \ 10, 10) -> [11, 0]\n        // * eat(2, 11, 5) -> [7, 0]\n        // Variables:\n\
    \        // @number : integer\n        // the number of carrots that you have\
    \ eaten.\n        // @need : integer\n        // the number of carrots that you\
    \ need to eat.\n        // @remaining : integer\n        // the number of remaining\
    \ carrots thet exist in stock\n        // Constrain:\n        // * 0 <= number\
    \ <= 1000\n        // * 0 <= need <= 1000\n        // * 0 <= remaining <= 1000\n\
    \        // Have fun :)\n        // Write your code here\n        // Return an\
    \ array of [ total number of eaten carrots after your meals,\n        // the number\
    \ of carrots left after your meals ]\n        // if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n   \
    \     // Example:\n        // * eat(5, 6, 10) -> [11, 4]\n        // * eat(4,\
    \ 8, 9) -> [12, 1]\n        // * eat(1, 10, 10) -> [11, 0]\n        // * eat(2,\
    \ 11, 5) -> [7, 0]\n        // Variables:\n        // @number : integer\n    \
    \    // the number of carrots that you have eaten.\n        // @need : integer\n\
    \        // the number of carrots that you need to eat.\n        // @remaining\
    \ : integer\n        // the number of remaining carrots thet exist in stock\n\
    \        // Constrain:\n        // * 0 <= number <= 1000\n        // * 0 <= need\
    \ <= 1000\n        // * 0 <= remaining <= 1000\n        // Have fun :)\n     \
    \   // Write your code here\n        // Return an array of [ total number of eaten\
    \ carrots after your meals,\n       ", "        // your code here\n        var\
    \ result = List[Long]()\n        if(remaining >= need) {\n            result =\
    \ List(number + need, remaining - need)\n        } else {\n            result\
    \ = List(number + remaining, 0)\n        }\n        result", "        // Your\
    \ code here\n        List(0, 0)", "        // your code here\n        List(0,\
    \ 0)", "        val total = number + min(need, remaining)\n        List(total,\
    \ max(0, remaining - need))", "        val total = number + min(need, remaining)\n\
    \        List(total, max(0, remaining - need))", "        // your code here\n\
    \        val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        // Write your code here\n        val total\
    \ = number + min(need, remaining)\n        List(total, max(0, remaining - need))",
  "        // your code here\n        List(0, 0)", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", "        // Your code here\n        List(0, 0)",
  "        // your code here\n        List(0, 0)", "        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  // your code here\n        val total = number + min(need, remaining)\n    \
    \    List(total, max(0, remaining - need))", "        // your code here\n    \
    \    List(0, 0)", "        val total = number + min(need, remaining)\n       \
    \ List(total, max(0, remaining - need))", "        // Your code here\n       \
    \ List(0, 0)", "        // your code here\n        List(0, 0)", "        // Write\
    \ your code here\n        List(0, 0)", "        if (remaining < need) {\n    \
    \        List(number + remaining, 0)\n        } else {\n            List(number\
    \ + need, remaining - need)\n        }", "        // Write your code here\n  \
    \      val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        // Write your code here\n        val total\
    \ = number + remaining\n        val eaten = if (total >= need) need else total\n\
    \        List(eaten, total - eaten)", "        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  // your code here\n        List(0, 0)", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        return result", "        // Write your code here\n       \
    \ List(number + min(need, remaining), max(remaining - need, 0))", "        //\
    \ Your code here\n        List(0, 0)", "        // Write your code here\n    \
    \    // Return a list of two elements\n        // First element is the total number\
    \ of eaten carrots after your meals\n        // Second element is the number of\
    \ carrots left after your meals\n        val total = number + need\n        val\
    \ left = if (total > remaining) 0 else remaining - total\n        List(total,\
    \ left)", "        // Your code here\n        List(0, 0)", "        // Write your\
    \ code here\n        List(number + min(need, remaining), max(remaining - need,\
    \ 0))", "        val eaten = number + min(need, remaining)\n        List(eaten,\
    \ max(0, remaining - need))", "        // Your code here\n        List(0, 0)",
  "        val total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        // Your code here\n        List(0, 0)", "        // Write\
    \ your code here\n        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", "        // your code here\n        List()",
  "        var result = List[Long]()\n        result = result :+ (number + min(need,\
    \ remaining))\n        result = result :+ (max(remaining - need, 0))\n       \
    \ return result", "        val total = number + min(need, remaining)\n       \
    \ val left = max(remaining - need, 0)\n        List(total, left)", "        val\
    \ total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        // your code here\n        List(0, 0)", "        // Write\
    \ your code here\n        var result = List[Long]()\n        if (remaining >=\
    \ need) {\n            result = List(number + need, remaining - need)\n      \
    \  } else {\n            result = List(number + remaining, 0)\n        }\n   \
    \     result", "        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", "        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  // Your code here\n        return List(0, 0)", "        // your code here\n\
    \        List(0, 0)", "        // your code here\n        List(0, 0)", "     \
    \   // your code here\n        return List(0, 0)", "        // Your code here\n\
    \        List(0, 0)", "        // your code here\n        List(0, 0)", "     \
    \   // Your code here\n        var total = number + min(need, remaining)\n   \
    \     var left = max(remaining - need, 0)\n        List(total, left)", "     \
    \   val total = number + min(need, remaining)\n        List(total, remaining -\
    \ min(need, remaining))", "        // Write your code here\n        List(0, 0)",
  "        // your code here\n        List(0, 0)", "        // your code here\n  \
    \      return List(0, 0)", "        if (remaining >= need) List(number + need,\
    \ remaining - need)\n        else List(number + remaining, 0)", "        var result\
    \ = List[Long]()\n        var total = number + need\n        if (total > remaining)\
    \ {\n            result = List(remaining, 0)\n        } else {\n            result\
    \ = List(total, remaining - total)\n        }\n        result", "        if (number\
    \ + need <= remaining) {\n            List(number + need, remaining - (number\
    \ + need))\n        } else {\n            List(remaining + number, 0)\n      \
    \  }", "        val total = number + min(need, remaining)\n        List(total,\
    \ max(0, remaining - need))", "        // Write your code here\n        List(number\
    \ + min(need, remaining), max(remaining - need, 0))", "        // Your code here\n\
    \        List(0, 0)", "        // Your code here\n        List(0, 0)", "     \
    \   if (number + need <= remaining) List(number + need, remaining - (number +\
    \ need))\n        else List(remaining + number, 0)", "        val total = number\
    \ + min(need, remaining)\n        List(total, max(0, remaining - need))", "  \
    \      // Your code here\n        if (remaining >= need) {\n            List(number\
    \ + need, remaining - need)\n        } else {\n            List(number + remaining,\
    \ 0)\n        }", "        // your code here\n        List(0, 0)", "        if\
    \ (number + need > remaining) {\n            List(remaining, 0)\n        } else\
    \ {\n            List(number + need, remaining - (number + need))\n        }",
  "        // Write your code here\n        var result = List[Long]()\n        var\
    \ total = number + need\n        if (total > remaining) {\n            total =\
    \ remaining\n        }\n        result = List(total, remaining - total)\n    \
    \    return result", "        // Your code here\n        return List(0, 0)", " \
    \       // your code here\n        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        val total =\
    \ number + min(need, remaining)\n        List(total, remaining - min(need, remaining))",
  "        val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        var result = List[Long]()\n        if (remaining\
    \ >= need) {\n            result = List(number + need, remaining - need)\n   \
    \     } else {\n            result = List(number + remaining, 0)\n        }\n\
    \        result", "        // your code here\n        return List(0, 0)", "  \
    \      // Your code here\n        List(0, 0)", "        // your code here\n  \
    \      List(0, 0)", "        var result : List[Long] = List()\n        if (number\
    \ < 0 || need < 0 || remaining < 0) {\n            result = List(-1, -1)\n   \
    \     } else if (number + need > remaining) {\n            result = List(remaining,\
    \ 0)\n        } else {\n            result = List(number + need, remaining - (number\
    \ + need))\n        }\n        result", "        // your code here\n        List(0,\
    \ 0)"]
stop_tokens:
- "\n    }\n"
