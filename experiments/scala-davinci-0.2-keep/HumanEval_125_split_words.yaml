name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n\
  \    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    // split_words(\"\
  abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String], Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n  \
    \      else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else\
    \ Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1 >= 'a' && x._1 <= 'z'))", "        val words = txt.split(\"\\\\s+\"\
    )\n        if (words.length > 1) Left(words.toList)\n        else {\n        \
    \    val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z')\n        \
    \        Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\").toList\n        if (words.length > 1) Left(words)\n        else {\n\
    \            val chars = txt.split(\",\").toList\n            if (chars.length\
    \ > 1) Left(chars)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1 >= 'a' && x._1 <= 'z'))\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val chars = txt.split(\",\")\n            if (chars.length > 1) Left(chars.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.zipWithIndex.filter(x => x._2\
    \ % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z'))", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.map(x => x.toInt - 'a'.toInt).filter(x =>\
    \ x % 2 == 1).size)", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1.toInt >= 97 && x._1.toInt <= 122))\n     \
    \   }", "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n    \
    \    else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else\
    \ Right(txt.filter(c => c.isLower && c.toInt % 2 == 1).length)", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1.toInt >= 97 && x._1.toInt <= 122))\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toCharArray.map(x => x - 'a').filter(x => x % 2 ==\
    \ 0).length)\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).distinct.length)", "        val words = txt.split(\" \")\n\
    \        if (words.length > 1) Left(words.toList)\n        else {\n          \
    \  val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toList\n  \
    \              val oddLetters = letters.zipWithIndex.filter(x => x._2 % 2 == 1).map(_._1)\n\
    \                Right(oddLetters.length)\n            }\n        }", "      \
    \  if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toList.filter(c =>\
    \ c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)",
  "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if\
    \ (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z'))", "     \
    \   if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.count(x\
    \ => x._2 % 2 == 0))", "        if (txt.contains(\" \")) Left(txt.split(\" \"\
    ).toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).count(x => x._1.isLetter))", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.filter(c => c.isLower).map(c => (c - 'a') % 2).count(_\
    \ == 1))", "        val words = txt.split(\"\\\\s+\").toList\n        if (words.length\
    \ > 1) Left(words)\n        else {\n            val words = txt.split(\",\").toList\n\
    \            if (words.length > 1) Left(words)\n            else {\n         \
    \       val count = txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).length\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n         \
    \       val odd = alphabet.zipWithIndex.filter(x => x._2 % 2 == 1).map(_._1)\n\
    \                Right(txt.toLowerCase.filter(x => odd.contains(x)).length)\n\
    \            }\n        }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1.toInt - ord('a')).sum)\n        }", "      \
    \  if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).length)", "        val lst = txt.split(\"\\\
    \\s+\").toList\n        if (lst.length > 1) Left(lst)\n        else {\n      \
    \      val lst2 = txt.split(\",\").toList\n            if (lst2.length > 1) Left(lst2)\n\
    \            else {\n                val lst3 = txt.split(\"\").toList\n     \
    \           val lst4 = lst3.filter(x => x.matches(\"[a-z]\"))\n              \
    \  val lst5 = lst4.map(x => x.charAt(0).toInt - 'a'.toInt)\n                val\
    \ lst6 = lst5.filter(x => x % 2 == 1)\n                Right(lst6.length.toLong)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1.toLong - 'a'.toLong).sum)", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        val chars = txt.toCharArray()\n                var count = 0\n      \
    \          for (i <- 0 until chars.length) {\n                    if (chars(i)\
    \ >= 'a' && chars(i) <= 'z' && (chars(i) - 'a') % 2 == 1) {\n                \
    \        count += 1\n                    }\n                }\n              \
    \  Right(count)\n            }\n        }", "        if (txt.contains(' ')) {\n\
    \            Left(txt.split(' ').toList)\n        } else if (txt.contains(','))\
    \ {\n            Left(txt.split(',').toList)\n        } else {\n            Right(txt.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(x => x == 1).length)\n\
    \        }", "        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) - 'a' % 2 == 1) count += 1\n             \
    \   }\n                Right(count)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(x\
    \ => x >= 'a' && x <= 'z').map(x => x - 'a').filter(x => x % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.map(c\
    \ => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        val words = txt.split(\"\\\\s+\")\n      \
    \  if (words.length > 1) Left(words.toList)\n        else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n \
    \           else {\n                var cnt = 0\n                for (i <- 0 until\
    \ txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && i %\
    \ 2 == 0) cnt += 1\n                }\n                Right(cnt)\n          \
    \  }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.toList.zipWithIndex.filter(x => x._2\
    \ % 2 == 0).count(x => x._1 >= 'a' && x._1 <= 'z')\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.map(x => x - 'a').filter(x => x % 2 == 1).length)",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).count(_ == 1)\n           \
    \     Right(count)\n            }\n        }", "        if (txt.contains(\" \"\
    )) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.map(c => (c - 'a') % 2).filter(_\
    \ == 1).length)", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.toList.map(c => ord(c) - ord('a')).filter(i\
    \ => i % 2 == 0).length\n                Right(count)\n            }\n       \
    \ }", "        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1.toInt >= 97 && x._1.toInt <= 122))", "   \
    \     if (txt.contains(' ')) Left(txt.split(' ').toList)\n        else if (txt.contains(','))\
    \ Left(txt.split(',').toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z'))", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(t => t._2 % 2 == 0).length\n  \
    \              Right(count)\n            }\n        }", "        if (txt.contains('\
    \ ')) Left(txt.split(' ').toList)\n        else if (txt.contains(',')) Left(txt.split(',').toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).count(x => x._1 >= 'a' && x._1 <= 'z'))", "        if (txt.contains(\" \"\
    )) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.map(c => abs(ord(c) - ord('a'))\
    \ % 2).filter(x => x == 1).length)", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.map(c => ord(c) - ord('a')).filter(i => i\
    \ % 2 == 0).length)", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.toCharArray.filter(c => c >= 'a'\
    \ && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n            \
    \    Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.filter(c => c\
    \ >= 'a' && c <= 'z').zipWithIndex.filter(t => t._2 % 2 == 0).map(t => t._1).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val words = txt.split(\"\
    \")\n                Right(words.filter(x => x.toLowerCase == x && x.toInt % 2\
    \ == 1).length)\n            }\n        }", "        val words = txt.split(\"\\\
    \\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n  \
    \          val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toCharArray.map(c\
    \ => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.count(x => x._2 % 2 ==\
    \ 0 && x._1.isLetter))", "        if (txt.contains(\" \")) Left(txt.split(\" \"\
    ).toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toCharArray.filter(c => c - 'a' % 2 == 0).length)",
  "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if\
    \ (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1 >= 'a' && x._1 <= 'z'))", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.map(c\
    \ => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        if (txt.contains(' ')) {\n            Left(txt.split('\
    \ ').toList)\n        } else if (txt.contains(',')) {\n            Left(txt.split(',').toList)\n\
    \        } else {\n            Right(txt.toLowerCase.map(c => ord(c) - ord('a')).filter(i\
    \ => i % 2 == 0).length)\n        }", "        val words = txt.split(\"\\\\s+\"\
    )\n        if (words.length > 1) Left(words.toList)\n        else {\n        \
    \    val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.filter(c => c >= 'a' && c\
    \ <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1.toInt - 'a'.toInt).sum)", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val words = txt.split(\"\")\n           \
    \     var count = 0\n                for (i <- 0 until words.length) {\n     \
    \               if (words(i).toLowerCase.toCharArray()(0).toInt % 2 == 1) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toCharArray.map(x => x - 'a').filter(x\
    \ => x % 2 == 1).length)", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1.toInt - 'a'.toInt).sum)\n        }", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toCharArray\n                var count = 0\n               \
    \ for (i <- 0 until letters.length) {\n                    if (letters(i) - 'a'\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.map(c => c -\
    \ 'a').filter(i => i % 2 == 1).length)\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).map(x => x.toLong - 'a').sum)", "        if\
    \ (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z'))", "     \
    \   if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).map(x => x.toLong - 'a').sum)", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val sum = txt.toLowerCase.map(c\
    \ => if (c - 'a' >= 0 && c - 'a' <= 25) 1L << (c - 'a') else 0L).sum\n       \
    \         Right(Long.bitCount(sum))\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.map(x => x - 'a').filter(x =>\
    \ x % 2 == 1).length)", "        if (txt.contains(\" \")) Left(txt.split(\" \"\
    ).toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).map(x => x.toLong - 'a').sum)", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a')).filter(i => i % 2 == 0).length)\n\
    \        }", "        if (txt.contains(' ')) Left(txt.split(' ').toList)\n   \
    \     else if (txt.contains(',')) Left(txt.split(',').toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z'))", "     \
    \   if (txt.contains(' ')) Left(txt.split(' ').toList)\n        else if (txt.contains(','))\
    \ Left(txt.split(',').toList)\n        else Right(txt.map(c => c - 'a').filter(i\
    \ => i % 2 == 1).length)", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.map(c => ord(c) - ord('a')).filter(i => i\
    \ % 2 == 0).size)", "        if (txt.contains(' ')) Left(txt.split(' ').toList)\n\
    \        else if (txt.contains(',')) Left(txt.split(',').toList)\n        else\
    \ Right(txt.toLowerCase.map(c => ord(c) % 2).filter(_ == 1).length)", "      \
    \  if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1 >= 'a' && x._1 <= 'z'))", "        if (txt.contains('\
    \ ')) Left(txt.split(' ').toList)\n        else if (txt.contains(',')) Left(txt.split(',').toList)\n\
    \        else Right(txt.toLowerCase.toCharArray.filter(x => x - 'a' % 2 == 0).length)",
  "        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toCharArray.map(x => x -\
    \ 'a').filter(x => x % 2 == 0).length)\n        }", "        if (txt.contains('\
    \ ')) Left(txt.split(' ').toList)\n        else if (txt.contains(',')) Left(txt.split(',').toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).count(x => x._1 >= 'a' && x._1 <= 'z'))", "        if (txt.contains(\" \"\
    )) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).distinct.length)", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).count(_ == 1)\n           \
    \     Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.filter(c => c >= 'a' && c\
    \ <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).toSet.size)", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).map(x => x.toLong - 'a').sum)", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val words = txt.split(\"\
    \")\n                var count = 0\n                for (i <- 0 until words.length)\
    \ {\n                    if (words(i).toLowerCase()(0) - 'a' % 2 == 1) count +=\
    \ 1\n                }\n                Right(count)\n            }\n        }",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(b => b == 1).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.filter(c => c >= 'a' &&\
    \ c <= 'z').zipWithIndex.filter(t => t._2 % 2 == 0).map(t => t._1).length)", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\").toList\n        if (words.length > 1) Left(words)\n  \
    \      else {\n            val words = txt.split(\",\").toList\n            if\
    \ (words.length > 1) Left(words)\n            else {\n                val odd\
    \ = txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p =>\
    \ p._2 % 2 == 0).map(_._1).toSet\n                Right(odd.size)\n          \
    \  }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n\
    \        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n       \
    \ else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1).count(x => x >= 'a' && x <= 'z'))", "        if (txt.contains(\" \"\
    )) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1.toInt >= 97 && x._1.toInt <= 122))\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.map(c => (c - 'a')).filter(i\
    \ => i % 2 == 0).length)", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).distinct.length)", "        val words = txt.split(\"\\\\s+\"\
    )\n        if (words.length > 1) Left(words.toList)\n        else {\n        \
    \    val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1 >= 'a' && x._1 <= 'z')\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).count(x => x.isLetter))", "        if (txt.contains(\" \"\
    )) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.map(c => c - 'a').filter(i =>\
    \ i % 2 == 1).length)", "        if (txt.contains(\" \")) Left(txt.split(\" \"\
    ).toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1.toLong - 'a'.toLong).sum)", "        if (txt.contains(\" \"\
    )) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x.isLetter))", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val odd = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(odd)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val letters = txt.split(\",\")\n            if (letters.length\
    \ > 1) {\n                Left(letters.toList)\n            } else {\n       \
    \         Right(letters(0).toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1 - 'a' % 2 == 1))\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a')).filter(i => i % 2 == 0).length)\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toList.filter(c => c >= 'a' && c <= 'z').map(c\
    \ => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').map(c\
    \ => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).count(x => x._1 >= 'a' && x._1 <= 'z'))", "        if (txt.contains(\" \"\
    )) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toList.filter(x => x.isLower).map(x => x.toInt\
    \ - 'a'.toInt).filter(x => x % 2 == 1).size)", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toCharArray.filter(c => c - 'a' % 2 == 0).length)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\").toList\n\
    \        if (words.length > 1) Left(words)\n        else {\n            val words\
    \ = txt.split(\",\").toList\n            if (words.length > 1) Left(words)\n \
    \           else {\n                val count = txt.toLowerCase.map(c => c - 'a').filter(i\
    \ => i % 2 == 0).length\n                Right(count)\n            }\n       \
    \ }", "        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val words = txt.toList\n\
    \                val count = words.filter(c => c >= 'a' && c <= 'z').map(c =>\
    \ c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n \
    \           else {\n                val letters = txt.filter(c => c >= 'a' &&\
    \ c <= 'z')\n                val odd = letters.zipWithIndex.filter(t => t._2 %\
    \ 2 == 0).map(_._1)\n                Right(odd.length)\n            }\n      \
    \  }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.filter(c => c >= 'a' && c <= 'z').map(c => (c\
    \ - 'a') % 2).count(_ == 1)\n                Right(count)\n            }\n   \
    \     }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.toList.filter(c => c >= 'a' && c\
    \ <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val words = txt.split(\"\")\n           \
    \     val count = words.filter(x => x.matches(\"[a-z]\")).map(x => x.charAt(0)).map(x\
    \ => x.toInt - ord('a')).filter(x => x % 2 == 1).length\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val odd = txt.toLowerCase.toList.filter(c\
    \ => c.toInt % 2 == 1).length\n                Right(odd)\n            }\n   \
    \     }", "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n  \
    \      else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else\
    \ Right(txt.toLowerCase.toList.filter(c => c.toInt - 'a'.toInt % 2 == 1).length)",
  "        if (txt.contains(\" \")) {\n            val words = txt.split(\" \")\n\
    \            Left(words.toList)\n        } else if (txt.contains(\",\")) {\n \
    \           val words = txt.split(\",\")\n            Left(words.toList)\n   \
    \     } else {\n            val count = txt.toLowerCase.toCharArray.filter(c =>\
    \ c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n   \
    \         Right(count)\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).count(x => x._1 >= 'a' && x._1 <= 'z'))", "        if (txt.contains(\" \"\
    )) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.count(x =>\
    \ x._2 % 2 == 0))", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val words = txt.split(\"\")\n                val count = words.filter(x\
    \ => x.matches(\"[a-z]\")).map(x => x.toLowerCase).map(x => x.toCharArray()(0).toInt\
    \ - ord('a')).filter(x => x % 2 == 1).length\n                Right(count)\n \
    \           }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)", "        if (txt.contains(\" \"))\
    \ Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.map(c => ord(c) - ord('a')).filter(i\
    \ => i % 2 == 0).length)", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            val odd = txt.toLowerCase.map(c =>\
    \ c - 'a').filter(i => i % 2 == 1).length\n            Right(odd)\n        }",
  "        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1.toLong - 'a'.toLong).sum)", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1 >= 'a' && x._1 <= 'z')\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toList.filter(x => x.isLower).map(x\
    \ => x.toInt - 'a'.toInt).filter(x => x % 2 == 1).length)\n        }", "     \
    \   val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        if\
    \ (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).distinct.length)", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1.isLetter))", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val words = txt.split(\"\")\n           \
    \     val odd = words.filter(x => x.matches(\"[a-z]\")).map(x => x.charAt(0)).map(x\
    \ => x.toInt - ord('a')).filter(x => x % 2 == 1).length\n                Right(odd)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).map(x => x.toLong - 'a').sum)", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).distinct.length)", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c - 'a' % 2 == 0).length\n                Right(count)\n            }\n \
    \       }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                val letters = txt.toLowerCase.toCharArray.map(c\
    \ => ord(c) - ord('a'))\n                Right(letters.filter(i => i % 2 == 1).length)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n \
    \           else {\n                val count = txt.toList.filter(c => c >= 'a'\
    \ && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n            \
    \    Right(count)\n            }\n        }", "        if (txt.contains(\" \"\
    )) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(x => x - 'a').filter(x => x % 2 == 1).length)\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val oddCount = txt.toLowerCase.toCharArray.filter(c => c >= 'a'\
    \ && c <= 'z').map(c => (c - 'a') % 2).count(_ == 1)\n                Right(oddCount)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n \
    \           else {\n                val count = txt.toLowerCase.foldLeft(0L)((acc,\
    \ c) => if (c - 'a' % 2 == 0) acc + 1 else acc)\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.map(c => ord(c) - ord('a')).filter(i => i\
    \ % 2 == 0).length)", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.map(x => x -\
    \ 'a').filter(x => x % 2 == 1).length)\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1 >= 'a' && x._1 <= 'z'))", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n       \
    \ else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(x\
    \ => x >= 'a' && x <= 'z').map(x => x - 'a').filter(x => x % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) Left(chars.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).count(c\
    \ => c >= 'a' && c <= 'z')\n                Right(count)\n            }\n    \
    \    }", "        val words = txt.split(\" \")\n        if (words.length > 1)\
    \ Left(words.toList)\n        else {\n            val words = txt.split(\",\"\
    )\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toList.filter(c => c.isLower && c.toInt % 2 ==\
    \ 1).length\n                Right(count)\n            }\n        }", "      \
    \  if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n   \
    \     } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1.toLong - 'a'.toLong).sum)\n        }", "   \
    \     val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val words = txt.split(\"\
    \")\n                val oddLetters = words.filter(c => c.matches(\"[a-z]\") &&\
    \ (c.charAt(0) - 'a') % 2 == 0).length\n                Right(oddLetters)\n  \
    \          }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toList.map(c => ord(c) - ord('a')).filter(i =>\
    \ i % 2 == 0).length\n                Right(count)\n            }\n        }",
  "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if\
    \ (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.filter(x\
    \ => x >= 'a' && x <= 'z').zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1).length)",
  "        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.map(x\
    \ => x - 'a').filter(x => x % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.filter(c => c >= 'a' && c <= 'z').map(c => c\
    \ - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n      \
    \      }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n\
    \        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n       \
    \ else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1).map(x => x.toInt - 'a'.toInt).sum)", "        if (txt.contains(\" \"\
    )) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.map(x => x.toLong - 'a'.toLong).filter(x =>\
    \ x % 2 == 0).length)\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).count(x => x._1.toInt >= 97 && x._1.toInt <= 122))", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1.toLong - 'a'.toLong).sum)\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a')).filter(i => i % 2 == 0).length)\n\
    \        }", "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n\
    \        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n       \
    \ else Right(txt.toLowerCase.toList.filter(x => x.toInt % 2 == 1).length)", " \
    \       if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if\
    \ (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x.isLetter))", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toCharArray\n                val odds = letters.filter(x =>\
    \ x.toInt % 2 == 1)\n                Right(odds.length)\n            }\n     \
    \   }", "        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toCharArray.filter(x => x - 'a'\
    \ % 2 == 0).length)", "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n\
    \        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n       \
    \ else Right(txt.toList.filter(x => x.isLower).map(x => x.toInt - 'a'.toInt).filter(x\
    \ => x % 2 == 1).length)", "        val words = txt.split(\"\\\\s+\")\n      \
    \  if (words.length > 1) Left(words.toList)\n        else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n \
    \           else {\n                val count = txt.toLowerCase.toCharArray.map(c\
    \ => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.map(c => c - 'a').filter(i => i % 2 == 1).length)",
  "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if\
    \ (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).length)", "        if (txt.contains(\" \"))\
    \ Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1 >= 'a' && x._1 <= 'z'))", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val cnt = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(cnt)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.filter(c => c >= 'a' && c\
    \ <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).map(x => x.toLong - 'a'.toLong).sum)", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val letters = txt.toLowerCase.toList\n\
    \                val odds = letters.zipWithIndex.filter(x => x._2 % 2 == 1).map(x\
    \ => x._1)\n                Right(odds.length)\n            }\n        }", " \
    \       if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if\
    \ (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1.isLetter))", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a')).filter(i => i % 2 == 0).length)\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.toCharArray.map(c => c - 'a').filter(i\
    \ => i % 2 == 0).length\n                Right(count)\n            }\n       \
    \ }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).map(x => x.toInt - 'a'.toInt).sum)\n      \
    \  }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && (txt(i) - 'a')\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.toCharArray.filter(x => x - 'a' >=\
    \ 0 && x - 'a' < 26).map(x => x - 'a').filter(x => x % 2 == 0).length\n      \
    \          Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).distinct.length)", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).count(c\
    \ => txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').indexOf(c) % 2 ==\
    \ 1)\n                Right(count)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').count(i => i % 2 == 0)\n        \
    \        Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).count(_ == 1)\n           \
    \     Right(count)\n            }\n        }", "        if (txt.contains(\" \"\
    )) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     val odd = txt.toLowerCase.map(c => c - 'a').filter(i => i % 2 == 1).length\n\
    \            Right(odd)\n        }", "        val words = txt.split(\"\\\\s+\"\
    )\n        if (words.length > 1) Left(words.toList)\n        else {\n        \
    \    val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.map(c => c -\
    \ 'a').filter(i => i % 2 == 0).length\n                Right(count)\n        \
    \    }\n        }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            val odd = txt.toLowerCase.map(c =>\
    \ (c - 'a') % 2 == 1).count(b => b)\n            Right(odd)\n        }", "   \
    \     if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.zipWithIndex.filter(x =>\
    \ x._2 % 2 == 0).map(x => x._1.toInt - 'a'.toInt).sum)\n        }", "        if\
    \ (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toCharArray.filter(x\
    \ => x - 'a' % 2 == 0).length)", "        val words = txt.split(\"\\\\s+\")\n\
    \        if (words.length > 1) Left(words.toList)\n        else {\n          \
    \  val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => c - 'a').filter(i => i % 2 == 1).size)\n\
    \        }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1.toLong - ord('a')).sum)\n        }", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.filter(c => c.isLower).map(c => c.toLong\
    \ - 'a'.toLong).filter(i => i % 2 == 1).sum)", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(txt.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2\
    \ % 2 == 0).map(p => p._1).map(c => c - 'a').sum)\n            }\n        }",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) Left(chars.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).distinct.length)", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toCharArray.filter(c => c - 'a' % 2 == 0).length)\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.map(c => (c - 'a')).filter(i => i\
    \ % 2 == 0).length\n                Right(count)\n            }\n        }", " \
    \       if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if\
    \ (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.map(c\
    \ => (c - 'a')).filter(i => i % 2 == 0).length)", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.count(c => (c - 'a') % 2 == 1))",
  "        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x.toInt >= 97 && x.toInt <= 122))\n\
    \        }", "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n\
    \        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n       \
    \ else Right(txt.toLowerCase.toCharArray.map(x => ord(x) - ord('a')).filter(x\
    \ => x % 2 == 0).length)", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).count(x => x >= 'a' && x <= 'z'))", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1 >= 'a' && x._1 <= 'z')\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toList.map(c\
    \ => ord(c) - ord('a')).filter(i => i % 2 == 0).length\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).distinct.length)", "        val words = txt.split(\" \")\n\
    \        if (words.length > 1) {\n            Left(words.toList)\n        } else\
    \ {\n            val chars = txt.split(\",\")\n            if (chars.length >\
    \ 1) {\n                Left(chars.toList)\n            } else {\n           \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1.toInt - 'a'.toInt % 2 == 1))\n            }\n        }"]
stop_tokens:
- "\n    }\n"
