name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n\
  \    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    // split_words(\"\
  abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String], Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n  \
    \      else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else\
    \ Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1 >= 'a' && x._1 <= 'z'))", "        val words = txt.split(\"\\\\s+\"\
    )\n        if (words.length > 1) Left(words.toList)\n        else {\n        \
    \    val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z')\n        \
    \        Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\").toList\n        if (words.length > 1) Left(words)\n        else {\n\
    \            val chars = txt.split(\",\").toList\n            if (chars.length\
    \ > 1) Left(chars)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1 >= 'a' && x._1 <= 'z'))\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val chars = txt.split(\",\")\n            if (chars.length > 1) Left(chars.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.zipWithIndex.filter(x => x._2\
    \ % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z'))", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.map(x => x.toInt - 'a'.toInt).filter(x =>\
    \ x % 2 == 1).size)", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).count(x => x._1.toInt >= 97 && x._1.toInt <= 122))\n     \
    \   }", "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n    \
    \    else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else\
    \ Right(txt.filter(c => c.isLower && c.toInt % 2 == 1).length)", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1.toInt >= 97 && x._1.toInt <= 122))\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toCharArray.map(x => x - 'a').filter(x => x % 2 ==\
    \ 0).length)\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).distinct.length)", "        val words = txt.split(\" \")\n\
    \        if (words.length > 1) Left(words.toList)\n        else {\n          \
    \  val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toList\n  \
    \              val oddLetters = letters.zipWithIndex.filter(x => x._2 % 2 == 1).map(_._1)\n\
    \                Right(oddLetters.length)\n            }\n        }", "      \
    \  if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toList.filter(c =>\
    \ c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)",
  "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if\
    \ (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z'))", "     \
    \   if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.count(x\
    \ => x._2 % 2 == 0))", "        if (txt.contains(\" \")) Left(txt.split(\" \"\
    ).toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).count(x => x._1.isLetter))", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.filter(c => c.isLower).map(c => (c - 'a') % 2).count(_\
    \ == 1))", "        val words = txt.split(\"\\\\s+\").toList\n        if (words.length\
    \ > 1) Left(words)\n        else {\n            val words = txt.split(\",\").toList\n\
    \            if (words.length > 1) Left(words)\n            else {\n         \
    \       val count = txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).length\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n         \
    \       val odd = alphabet.zipWithIndex.filter(x => x._2 % 2 == 1).map(_._1)\n\
    \                Right(txt.toLowerCase.filter(x => odd.contains(x)).length)\n\
    \            }\n        }"]
stop_tokens:
- "\n    }\n"
