name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an array of numbers as input and returns \n\
  \    // the number of elements in the array that are greater than 10 and both \n\
  \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33, -2, -3,\
  \ 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ['        nums.filter(x => x > 10 && x.toString.head.toString.toInt %
    2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.charAt(0).toString.toInt % 2 == 1 && x.toString.charAt(x.toString.length
    - 1).toString.toInt % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).toString.toInt\
    \ % 2 == 1 && num.toString.charAt(num.toString.length - 1).toString.toInt % 2\
    \ == 1) count += 1\n        }\n        return count", '        nums.filter(x =>
    x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).toString.toInt\
    \ % 2 == 1 && num.toString.charAt(num.toString.length - 1).toString.toInt % 2\
    \ == 1) count += 1\n        }\n        return count", '        nums.filter(x =>
    x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).toString.toInt\
    \ % 2 == 1 && num.toString.charAt(num.toString.length - 1).toString.toInt % 2\
    \ == 1) count += 1\n        }\n        return count", '        nums.filter(x =>
    x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num > 10 && num.toString.charAt(0).toString.toInt % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).toString.toInt % 2 == 1) count += 1\n        }\n        return count",
  "        def isSpecial(num : Long) : Boolean = {\n            val firstDigit = num.toString.head.asDigit\n\
    \            val lastDigit = num.toString.last.asDigit\n            if (firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1 && num > 10) true else false\n        }\n   \
    \     nums.filter(isSpecial).length", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).toString.toInt\
    \ % 2 == 1 && num.toString.charAt(num.toString.length - 1).toString.toInt % 2\
    \ == 1) count += 1\n        }\n        return count", '        nums.filter(x =>
    x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        return nums.filter(x => x > 10 && x.toString.charAt(0).toString.toInt
    % 2 == 1 && x.toString.charAt(x.toString.length - 1).toString.toInt % 2 == 1).length',
  '        nums.filter(x => x > 10 && (x % 10) % 2 == 1 && (x / pow(10, floor(log10(x)).toInt)).toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && (x % 10) % 2 == 1 && (x / pow(10, floor(log10(x)).toInt)).toInt %
    2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x % 2 == 1 && x % 10 ==
    1).length', "        var count = 0\n        for (num <- nums) {\n            if\
    \ (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num > 10 && num.toString.charAt(0).toString.toInt % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).toString.toInt % 2 == 1) count += 1\n        }\n        return count",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        var count = 0\n        for (num <- nums) {\n       \
    \     if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (i <- nums) {\n            if (i > 10 && (i % 10) % 2 == 1\
    \ && i / pow(10, floor(log10(i)).toInt) % 2 == 1) count += 1\n        }\n    \
    \    count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && (x % 10) % 2 == 1 && (x
    / pow(10, floor(log10(x)).toInt)).toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        return nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(num : Long) : Boolean = {\n        \
    \    val firstDigit = num.toString.head.asDigit\n            val lastDigit = num.toString.last.asDigit\n\
    \            firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10\n        }\n\
    \        nums.filter(isSpecial).length", '        nums.filter(n => n > 10 && n.toString.head.toString.toInt
    % 2 == 1 && n.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(n
    => n > 10 && n.toString.head.toString.toInt % 2 == 1 && n.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num)).toInt)\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(n
    => n > 10 && n.toString.head.toString.toInt % 2 == 1 && n.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && (x % 10) % 2 == 1 && (x
    / pow(10, floor(log10(x)).toInt)).toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => (x > 10) && (x.toString.head.toString.toInt
    % 2 == 1) && (x.toString.last.toString.toInt % 2 == 1)).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && (x.toString.head.toString.toInt
    % 2 == 1) && (x.toString.last.toString.toInt % 2 == 1)).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && (x % 10) % 2 == 1 && (x
    / pow(10, floor(log10(x)).toInt)) % 2 == 1).length', '        nums.filter(x =>
    x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        var count = 0\n        for (num <- nums) {\n       \
    \     if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x % 2 == 1 && x % 10 == 1).length', '        nums.filter(x => x > 10 &&
    x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt % 2
    == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && (x.toString.head.toString.toInt
    % 2 != 0) && (x.toString.last.toString.toInt % 2 != 0)).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && (x % 10) % 2 == 1 && (x
    / pow(10, floor(log10(x)).toInt)).toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (n <- nums) {\n       \
    \     if (n > 10 && n.toString.head.toString.toInt % 2 == 1 && n.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            val firstDigit = n.toString.head.asDigit\n\
    \            val lastDigit = n.toString.last.asDigit\n            n > 10 && firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1\n        }\n        nums.filter(isSpecial).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length']
stop_tokens:
- "\n    }\n"
