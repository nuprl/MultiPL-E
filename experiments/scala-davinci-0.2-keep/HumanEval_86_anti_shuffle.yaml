name: HumanEval_86_anti_shuffle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a string and returns an ordered version of it.\n\
  \    // Ordered version of string, is a string where all words (separated by space)\n\
  \    // are replaced by a new word where all the characters arranged in\n    //\
  \ ascending order based on ascii value.\n    // Note: You should keep the order\
  \ of words and blank spaces in the sentence.\n    // For example:\n    // anti_shuffle('Hi')\
  \ returns 'Hi'\n    // anti_shuffle('hello') returns 'ehllo'\n    // anti_shuffle('Hello\
  \ World!!!') returns 'Hello !!!Wdlor'\n    def antiShuffle(s : String) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
  )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
  \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
  abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
  Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
  Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot\
  \ How aer ?ouy\")));\n    }\n\n}\n"
completions: ["        val words = s.split(\" \")\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            result.append(word.sorted)\n     \
    \       result.append(\" \")\n        }\n        result.toString.trim", "    \
    \    val words = s.split(\" \")\n        val newWords = words.map(word => word.sorted)\n\
    \        newWords.mkString(\" \")", "        val words = s.split(\" \")\n    \
    \    val sortedWords = words.map(w => w.toList.sorted.mkString)\n        sortedWords.mkString(\"\
    \ \")", "        val words = s.split(\" \")\n        val ans = new StringBuilder\n\
    \        for (word <- words) {\n            val sorted = word.sorted\n       \
    \     ans.append(sorted)\n            ans.append(\" \")\n        }\n        ans.toString",
  "        val words = s.split(\" \")\n        val newWords = words.map(x => x.sorted)\n\
    \        newWords.mkString(\" \")", "        var result = \"\"\n        for (word\
    \ <- s.split(\" \")) {\n            result += word.sorted\n            result\
    \ += \" \"\n        }\n        result.trim", "        val words = s.split(\" \"\
    )\n        val result = new StringBuilder\n        for (word <- words) {\n   \
    \         val sorted = word.toCharArray.sortWith(_ < _)\n            result.append(sorted)\n\
    \            result.append(\" \")\n        }\n        result.toString", '        s.split("
    ").map(x => x.toList.sorted.mkString).mkString(" ")', "        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            result.append(word.sorted)\n            result.append(\" \")\n  \
    \      }\n        result.toString.trim", '        s.split(" ").map(x => x.toList.sorted.mkString).mkString("
    ")', '        s.split(" ").map(x => x.toCharArray.sorted.mkString).mkString("
    ")', "        val words = s.split(\" \")\n        val sortedWords = words.map(word\
    \ => word.toList.sorted.mkString)\n        sortedWords.mkString(\" \")", "   \
    \     val words = s.split(\" \")\n        val sortedWords = words.map(word =>\
    \ word.sorted)\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ words.length) {\n            result.append(sortedWords(i))\n            if (i\
    \ != words.length - 1) result.append(\" \")\n        }\n        result.toString",
  "        val words = s.split(\" \")\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            val sortedWord = word.toCharArray.sortWith(_\
    \ < _).mkString\n            result.append(sortedWord)\n            result.append(\"\
    \ \")\n        }\n        result.toString.trim", '        s.split(" ").map(x =>
    x.sorted).mkString(" ")', "        val words = s.split(\" \")\n        val sortedWords\
    \ = words.map(word => word.sorted)\n        val sortedString = sortedWords.mkString(\"\
    \ \")\n        sortedString", '        s.split(" ").map(x => x.sorted).mkString("
    ")', "        val words = s.split(\" \")\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            result.append(word.sorted)\n     \
    \       result.append(\" \")\n        }\n        result.toString.trim", "    \
    \    val words = s.split(\" \")\n        val sortedWords = words.map(word => word.toList.sorted.mkString)\n\
    \        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            result.append(sortedWords(i))\n            if (i != words.length\
    \ - 1) result.append(\" \")\n        }\n        result.toString", "        var\
    \ result = \"\"\n        for (word <- s.split(\" \")) {\n            result +=\
    \ word.sorted\n            result += \" \"\n        }\n        result.trim"]
stop_tokens:
- "\n    }\n"
