name: HumanEval_9_rolling_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    def rollingMax(numbers :\
  \ List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
  \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
  \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
  \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
  \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
  \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
completions: ["        var max = numbers(0)\n        var result = List[Long]()\n \
    \       for (i <- 0 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var result = List[Long]()\n        var max = 0L\n        for (i <- 0 until\
    \ numbers.length) {\n            max = max(max, numbers(i))\n            result\
    \ = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List(max)\n        for (i <- 1 until numbers.length) {\n\
    \            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (i <- 0 until numbers.length) {\n            if\
    \ (numbers(i) > max) max = numbers(i)\n            result = result :+ max\n  \
    \      }\n        result", "        var max = numbers(0)\n        var result =\
    \ List[Long]()\n        for (i <- 0 until numbers.length) {\n            max =\
    \ max(numbers(i), max)\n            result = result :+ max\n        }\n      \
    \  result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            if (numbers(i) > max)\
    \ max = numbers(i)\n            result = result :+ max\n        }\n        result",
  "        var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            max = max(numbers(i), max)\n     \
    \       result = result :+ max\n        }\n        result", "        val result\
    \ = new ListBuffer[Long]\n        var max = numbers(0)\n        result += max\n\
    \        for (i <- 1 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result += max\n        }\n        result.toList", "      \
    \  var max = numbers(0)\n        var result = List[Long]()\n        for (number\
    \ <- numbers) {\n            max = max max number\n            result = result\
    \ :+ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = new ListBuffer[Long]\n        result += max\n        for (i <- 1 until\
    \ numbers.length) {\n            if (numbers(i) > max) max = numbers(i)\n    \
    \        result += max\n        }\n        result.toList", "        val result\
    \ = new ListBuffer[Long]()\n        var max = Long.MinValue\n        for (number\
    \ <- numbers) {\n            max = max(number, max)\n            result += max\n\
    \        }\n        result.toList", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        val result = new ListBuffer[Long]\n        var\
    \ max = Long.MinValue\n        for (number <- numbers) {\n            max = max(number,\
    \ max)\n            result += max\n        }\n        result.toList", "      \
    \  var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        val result = new ListBuffer[Long]\n    \
    \    var max = Long.MinValue\n        for (number <- numbers) {\n            max\
    \ = max(number, max)\n            result += max\n        }\n        result.toList",
  "        var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            if (numbers(i) > max) max = numbers(i)\n\
    \            result = result :+ max\n        }\n        result", "        val\
    \ result = new ListBuffer[Long]\n        var max = Long.MinValue\n        for\
    \ (number <- numbers) {\n            max = max max number\n            result\
    \ += max\n        }\n        result.toList", "        var max = numbers(0)\n \
    \       var result = List[Long]()\n        for (i <- 0 until numbers.length) {\n\
    \            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = Long.MinValue\n        var result\
    \ = List[Long]()\n        for (number <- numbers) {\n            max = max(number,\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = new ListBuffer[Long]\n        result += max\n        for\
    \ (i <- 1 until numbers.length) {\n            max = max(numbers(i), max)\n  \
    \          result += max\n        }\n        result.toList", "        var result\
    \ = List[Long]()\n        var max = Long.MinValue\n        for (number <- numbers)\
    \ {\n            max = max max number\n            result = result :+ max\n  \
    \      }\n        result", "        var max = numbers(0)\n        var result =\
    \ List(max)\n        for (i <- 1 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (number <- numbers) {\n      \
    \      max = max(number, max)\n            result = result :+ max\n        }\n\
    \        result", "        val maxes = new ListBuffer[Long]\n        var max =\
    \ Long.MinValue\n        for (number <- numbers) {\n            max = max(number,\
    \ max)\n            maxes += max\n        }\n        maxes.toList", "        var\
    \ max = 0L\n        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (i <- 0 until numbers.length) {\n            max\
    \ = max(numbers(i), max)\n            result = result :+ max\n        }\n    \
    \    result", "        var max = 0L\n        var result = List[Long]()\n     \
    \   for (i <- 0 until numbers.length) {\n            max = max(numbers(i), max)\n\
    \            result = result :+ max\n        }\n        result", "        val\
    \ result = new ListBuffer[Long]\n        var max = Long.MinValue\n        for\
    \ (number <- numbers) {\n            max = max(number, max)\n            result\
    \ += max\n        }\n        result.toList", "        var max = numbers(0)\n \
    \       var result = List[Long]()\n        for (number <- numbers) {\n       \
    \     if (number > max) max = number\n            result = result :+ max\n   \
    \     }\n        result", "        var max = numbers(0)\n        var result =\
    \ List[Long]()\n        for (i <- 0 until numbers.length) {\n            max =\
    \ max(numbers(i), max)\n            result = result :+ max\n        }\n      \
    \  result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var result = List[Long]()\n        var max = Long.MinValue\n        for (number\
    \ <- numbers) {\n            if (number > max) max = number\n            result\
    \ = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (number <- numbers) {\n      \
    \      max = max(number, max)\n            result = result :+ max\n        }\n\
    \        result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            if (numbers(i) > max)\
    \ max = numbers(i)\n            result = result :+ max\n        }\n        result",
  "        var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            if (numbers(i) > max) max = numbers(i)\n\
    \            result = result :+ max\n        }\n        result", "        var\
    \ max = numbers(0)\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length) {\n            max = max(numbers(i), max)\n            result\
    \ = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (number <- numbers) {\n      \
    \      max = max(number, max)\n            result = result :+ max\n        }\n\
    \        result", "        var result = List[Long]()\n        var max = 0L\n \
    \       for (number <- numbers) {\n            max = max max number\n        \
    \    result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            if (numbers(i) > max) max = numbers(i)\n            result =\
    \ result :+ max\n        }\n        result", "        var max = numbers(0)\n \
    \       var result = List[Long]()\n        for (i <- 0 until numbers.length) {\n\
    \            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (i <- 0 until numbers.length) {\n            max\
    \ = max(numbers(i), max)\n            result = result :+ max\n        }\n    \
    \    result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            if (numbers(i) > max)\
    \ max = numbers(i)\n            result = result :+ max\n        }\n        result",
  "        var max = 0L\n        var result = List[Long]()\n        for (number <-\
    \ numbers) {\n            max = max max number\n            result = result :+\
    \ max\n        }\n        result", "        var result = List[Long]()\n      \
    \  var max = 0L\n        for (number <- numbers) {\n            if (number > max)\
    \ max = number\n            result = result :+ max\n        }\n        result",
  "        var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            if (numbers(i) > max) max = numbers(i)\n\
    \            result = result :+ max\n        }\n        result", "        var\
    \ max = numbers(0)\n        var result = List[Long]()\n        for (number <-\
    \ numbers) {\n            if (number > max) max = number\n            result =\
    \ result :+ max\n        }\n        result", "        var max = numbers(0)\n \
    \       var result = List(max)\n        for (i <- 1 until numbers.length) {\n\
    \            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var result = List[Long]()\n        var max\
    \ = 0L\n        for (number <- numbers) {\n            max = max max number\n\
    \            result = result :+ max\n        }\n        result", "        var\
    \ max = numbers(0)\n        var result = List[Long]()\n        for (number <-\
    \ numbers) {\n            max = max(number, max)\n            result = result\
    \ :+ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        val result = new ListBuffer[Long]\n        var\
    \ max = 0L\n        for (number <- numbers) {\n            max = max max number\n\
    \            result += max\n        }\n        result.toList", "        var max\
    \ = numbers(0)\n        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List(max)\n        for (i <- 1 until numbers.length) {\n            if (numbers(i)\
    \ > max) {\n                max = numbers(i)\n            }\n            result\
    \ = result :+ max\n        }\n        result", "        val result = new ListBuffer[Long]\n\
    \        var max = numbers(0)\n        result += max\n        for (i <- 1 until\
    \ numbers.length) {\n            if (numbers(i) > max) max = numbers(i)\n    \
    \        result += max\n        }\n        result.toList", "        var max =\
    \ numbers(0)\n        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            if (numbers(i) > max) max = numbers(i)\n            result =\
    \ result :+ max\n        }\n        result", "        var max = numbers(0)\n \
    \       var result = List[Long]()\n        for (i <- 0 until numbers.length) {\n\
    \            if (numbers(i) > max) max = numbers(i)\n            result = result\
    \ :+ max\n        }\n        result", "        var max = 0L\n        var result\
    \ = List[Long]()\n        for (number <- numbers) {\n            max = max max\
    \ number\n            result = result :+ max\n        }\n        result", "  \
    \      var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            max = max(numbers(i), max)\n     \
    \       result = result :+ max\n        }\n        result", "        var max =\
    \ numbers(0)\n        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var result = List[Long]()\n        var max\
    \ = 0L\n        for (number <- numbers) {\n            if (number > max) max =\
    \ number\n            result = result :+ max\n        }\n        result", "  \
    \      var max = numbers(0)\n        var result = List[Long]()\n        for (number\
    \ <- numbers) {\n            max = max(number, max)\n            result = result\
    \ :+ max\n        }\n        result", "        var result = List[Long]()\n   \
    \     var max = 0L\n        for (i <- 0 until numbers.length) {\n            max\
    \ = max max numbers(i)\n            result = result :+ max\n        }\n      \
    \  result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        result = result :+ max\n        for (i <- 1 until numbers.length) {\n\
    \            if (numbers(i) > max) max = numbers(i)\n            result = result\
    \ :+ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var max = numbers(0)\n        var result = List(max)\n\
    \        for (i <- 1 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        val result = new ListBuffer[Long]\n    \
    \    var max = Long.MinValue\n        for (number <- numbers) {\n            max\
    \ = max max number\n            result += max\n        }\n        result.toList",
  "        val result = new ListBuffer[Long]\n        var max = Long.MinValue\n  \
    \      for (number <- numbers) {\n            max = max max number\n         \
    \   result += max\n        }\n        result.toList", "        var max = 0L\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (i <- 0 until numbers.length) {\n            if\
    \ (numbers(i) > max) max = numbers(i)\n            result = result :+ max\n  \
    \      }\n        result", "        var max = numbers(0)\n        var result =\
    \ List(max)\n        for (i <- 1 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var result = List[Long]()\n        var max = 0L\n        for (n <- numbers)\
    \ {\n            max = max max n\n            result = result :+ max\n       \
    \ }\n        result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List(max)\n        for (i <- 1 until numbers.length) {\n\
    \            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = new ListBuffer[Long]\n        result += max\n        for (i <- 1 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result += max\n     \
    \   }\n        result.toList", "        var max = 0L\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            max = max max number\n       \
    \     result = result :+ max\n        }\n        result", "        var max = 0L\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var result = List[Long]()\n        var max\
    \ = Long.MinValue\n        for (number <- numbers) {\n            max = max max\
    \ number\n            result = result :+ max\n        }\n        result", "  \
    \      var max = 0L\n        var result = List[Long]()\n        for (number <-\
    \ numbers) {\n            max = max max number\n            result = result :+\
    \ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var result = List[Long]()\n        var max = Long.MinValue\n        for (number\
    \ <- numbers) {\n            max = max max number\n            result = result\
    \ :+ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var max = 0L\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            max = max max number\n       \
    \     result = result :+ max\n        }\n        result", "        var result\
    \ = List[Long]()\n        var max = Long.MinValue\n        for (number <- numbers)\
    \ {\n            max = max max number\n            result = result :+ max\n  \
    \      }\n        result", "        var max = numbers(0)\n        var result =\
    \ List(max)\n        for (i <- 1 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            if (numbers(i) > max) max = numbers(i)\n            result =\
    \ result :+ max\n        }\n        result", "        var max = numbers(0)\n \
    \       var result = List[Long]()\n        for (i <- numbers) {\n            if\
    \ (i > max) max = i\n            result = result :+ max\n        }\n        result",
  "        var max = numbers(0)\n        var result = List[Long]()\n        result\
    \ = result :+ max\n        for (i <- 1 until numbers.length) {\n            if\
    \ (numbers(i) > max) max = numbers(i)\n            result = result :+ max\n  \
    \      }\n        result", "        var max = numbers(0)\n        var result =\
    \ List[Long]()\n        for (i <- numbers) {\n            max = max max i\n  \
    \          result = result :+ max\n        }\n        result", "        val result\
    \ = new ListBuffer[Long]\n        var max = Long.MinValue\n        for (number\
    \ <- numbers) {\n            max = max max number\n            result += max\n\
    \        }\n        result.toList", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var max = 0L\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            max = max max number\n       \
    \     result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            if (numbers(i) > max) max = numbers(i)\n            result =\
    \ result :+ max\n        }\n        result", "        var max = numbers(0)\n \
    \       var result = List(max)\n        for (i <- 1 until numbers.length) {\n\
    \            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        val result = new ListBuffer[Long]\n    \
    \    var max = 0L\n        for (i <- 0 until numbers.length) {\n            max\
    \ = max max numbers(i)\n            result += max\n        }\n        result.toList",
  "        var max = numbers(0)\n        var result = List(max)\n        for (i <-\
    \ 1 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (i <- numbers) {\n            max = max max i\n\
    \            result = result :+ max\n        }\n        result", "        val\
    \ result = new ListBuffer[Long]()\n        var max = 0L\n        for (number <-\
    \ numbers) {\n            max = max max number\n            result += max\n  \
    \      }\n        result.toList", "        val result = new ListBuffer[Long]\n\
    \        var max = numbers(0)\n        result += max\n        for (i <- 1 until\
    \ numbers.length) {\n            max = max(numbers(i), max)\n            result\
    \ += max\n        }\n        result.toList", "        val result = new ListBuffer[Long]()\n\
    \        var max = Long.MinValue\n        for (number <- numbers) {\n        \
    \    max = max max number\n            result += max\n        }\n        result.toList",
  "        var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            max = max(numbers(i), max)\n     \
    \       result = result :+ max\n        }\n        result", "        var max =\
    \ Long.MinValue\n        numbers.map(n => {\n            max = max max n\n   \
    \         max\n        })", "        var max = 0L\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            max = max max numbers(i)\n\
    \            result = result :+ max\n        }\n        result", "        var\
    \ max = numbers(0)\n        var result = List(max)\n        for (i <- 1 until\
    \ numbers.length) {\n            max = max(numbers(i), max)\n            result\
    \ = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var result = new ListBuffer[Long]\n    \
    \    var max = 0L\n        for (number <- numbers) {\n            max = max max\
    \ number\n            result += max\n        }\n        result.toList", "    \
    \    var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        var rollingMax\
    \ = ListBuffer[Long]()\n        var max = Long.MinValue\n        for (number <-\
    \ numbers) {\n            if (number > max) max = number\n            rollingMax\
    \ += max\n        }\n        rollingMax.toList", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (i <- 0 until numbers.length) {\n            max\
    \ = max(numbers(i), max)\n            result = result :+ max\n        }\n    \
    \    result", "        val result = new ListBuffer[Long]\n        var max = 0L\n\
    \        for (number <- numbers) {\n            max = max max number\n       \
    \     result += max\n        }\n        result.toList", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            if (numbers(i) > max) max = numbers(i)\n            result =\
    \ result :+ max\n        }\n        result", "        var max = numbers(0)\n \
    \       var result = List[Long]()\n        for (i <- 0 until numbers.length) {\n\
    \            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        val maxes = new ArrayBuffer[Long]\n    \
    \    var max = Long.MinValue\n        for (number <- numbers) {\n            max\
    \ = max(max, number)\n            maxes += max\n        }\n        maxes.toList",
  "        var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            max = max(numbers(i), max)\n     \
    \       result = result :+ max\n        }\n        result", "        val result\
    \ = new ListBuffer[Long]\n        var max = numbers(0)\n        result += max\n\
    \        for (i <- 1 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result += max\n        }\n        result.toList", "      \
    \  var max = numbers(0)\n        var result = List(max)\n        for (i <- 1 until\
    \ numbers.length) {\n            max = max(numbers(i), max)\n            result\
    \ = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            if (numbers(i) > max) max = numbers(i)\n            result =\
    \ result :+ max\n        }\n        result", "        var max = numbers(0)\n \
    \       var result = List[Long]()\n        for (i <- 0 until numbers.length) {\n\
    \            if (numbers(i) > max) max = numbers(i)\n            result = result\
    \ :+ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var max = numbers(0)\n        var result = List(max)\n\
    \        for (i <- 1 until numbers.length) {\n            if (numbers(i) > max)\
    \ max = numbers(i)\n            result = result :+ max\n        }\n        result",
  "        var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            max = max(numbers(i), max)\n     \
    \       result = result :+ max\n        }\n        result", "        var max =\
    \ numbers(0)\n        var result = List[Long]()\n        for (number <- numbers)\
    \ {\n            if (number > max) max = number\n            result = result :+\
    \ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var result = List[Long]()\n        var max = 0L\n\
    \        for (i <- 0 until numbers.length) {\n            max = max(max, numbers(i))\n\
    \            result = result :+ max\n        }\n        result", "        val\
    \ result = new ListBuffer[Long]\n        var max = Long.MinValue\n        for\
    \ (i <- 0 until numbers.length) {\n            max = max(max, numbers(i))\n  \
    \          result += max\n        }\n        result.toList", "        var max\
    \ = numbers(0)\n        var result = List[Long]()\n        for (number <- numbers)\
    \ {\n            max = max(number, max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (i <- 0 until numbers.length) {\n            if\
    \ (numbers(i) > max) max = numbers(i)\n            result = result :+ max\n  \
    \      }\n        result", "        var max = numbers(0)\n        var result =\
    \ List[Long]()\n        for (i <- 0 until numbers.length) {\n            max =\
    \ max(numbers(i), max)\n            result = result :+ max\n        }\n      \
    \  result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            max = max(number, max)\n     \
    \       result = result :+ max\n        }\n        result", "        var max =\
    \ numbers(0)\n        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            if (numbers(i) > max) max = numbers(i)\n            result =\
    \ result :+ max\n        }\n        result", "        val result = new ListBuffer[Long]\n\
    \        var max = Long.MinValue\n        for (number <- numbers) {\n        \
    \    max = max(number, max)\n            result += max\n        }\n        result.toList",
  "        val maxes = new ListBuffer[Long]\n        var currentMax = numbers(0)\n\
    \        for (i <- 0 until numbers.length) {\n            currentMax = max(currentMax,\
    \ numbers(i))\n            maxes += currentMax\n        }\n        maxes.toList",
  "        var max = numbers(0)\n        var result = List(max)\n        for (i <-\
    \ 1 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var result = List[Long]()\n        var max\
    \ = 0L\n        for (number <- numbers) {\n            if (number > max) max =\
    \ number\n            result = result :+ max\n        }\n        result", "  \
    \      var result = List[Long]()\n        var max = 0L\n        for (number <-\
    \ numbers) {\n            max = max max number\n            result = result :+\
    \ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var max = 0L\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            max = max max number\n       \
    \     result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (i <- 0 until numbers.length) {\n            max\
    \ = max(numbers(i), max)\n            result = result :+ max\n        }\n    \
    \    result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            if (number > max) max = number\n\
    \            result = result :+ max\n        }\n        result", "        val\
    \ result = new ListBuffer[Long]\n        var max = Long.MinValue\n        for\
    \ (number <- numbers) {\n            max = max(number, max)\n            result\
    \ += max\n        }\n        result.toList", "        var max = 0L\n        numbers.map(x\
    \ => {\n            if (x > max) max = x\n            max\n        })", "    \
    \    var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            max = max(numbers(i), max)\n        \
    \    result = result :+ max\n        }\n        result", "        val result =\
    \ new ListBuffer[Long]\n        var max = Long.MinValue\n        for (number <-\
    \ numbers) {\n            max = max max number\n            result += max\n  \
    \      }\n        result.toList", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (i <- 0 until numbers.length) {\n            max\
    \ = max(numbers(i), max)\n            result = result :+ max\n        }\n    \
    \    result", "        var max = 0L\n        var result = List[Long]()\n     \
    \   for (number <- numbers) {\n            if (number > max) max = number\n  \
    \          result = result :+ max\n        }\n        result", "        val result\
    \ = new ListBuffer[Long]\n        var max = 0L\n        for (number <- numbers)\
    \ {\n            max = max max number\n            result += max\n        }\n\
    \        result.toList", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            if (numbers(i) > max)\
    \ max = numbers(i)\n            result = result :+ max\n        }\n        result",
  "        var max = 0L\n        var result = List[Long]()\n        for (number <-\
    \ numbers) {\n            max = max max number\n            result = result :+\
    \ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            if (number > max) max = number\n\
    \            result = result :+ max\n        }\n        result", "        var\
    \ result = List[Long]()\n        var max = Long.MinValue\n        for (i <- 0\
    \ until numbers.length) {\n            max = max(max, numbers(i))\n          \
    \  result = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        val result = new ListBuffer[Long]\n    \
    \    var max = Long.MinValue\n        for (number <- numbers) {\n            if\
    \ (number > max) max = number\n            result += max\n        }\n        result.toList",
  "        var result = List[Long]()\n        var max = 0L\n        for (number <-\
    \ numbers) {\n            if (number > max) max = number\n            result =\
    \ result :+ max\n        }\n        result", "        var max = numbers(0)\n \
    \       var result = List[Long]()\n        for (number <- numbers) {\n       \
    \     max = max(number, max)\n            result = result :+ max\n        }\n\
    \        result", "        val result = new ListBuffer[Long]\n        var max\
    \ = Long.MinValue\n        for (number <- numbers) {\n            max = max(number,\
    \ max)\n            result += max\n        }\n        result.toList", "      \
    \  val result = new ListBuffer[Long]\n        var currentMax = Long.MinValue\n\
    \        for (number <- numbers) {\n            currentMax = max(currentMax, number)\n\
    \            result += currentMax\n        }\n        result.toList", "      \
    \  val result = new ListBuffer[Long]\n        var max = numbers(0)\n        result\
    \ += max\n        for (i <- 1 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result += max\n        }\n        result.toList", "      \
    \  var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            if (numbers(i) > max) max = numbers(i)\n\
    \            result = result :+ max\n        }\n        result", "        var\
    \ max = 0L\n        var result = List[Long]()\n        for (number <- numbers)\
    \ {\n            max = max max number\n            result = result :+ max\n  \
    \      }\n        result", "        var max = numbers(0)\n        var result =\
    \ List[Long]()\n        for (i <- 0 until numbers.length) {\n            max =\
    \ max(numbers(i), max)\n            result = result :+ max\n        }\n      \
    \  result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var max = numbers(0)\n        var result = List[Long]()\n        for (i <-\
    \ 0 until numbers.length) {\n            if (numbers(i) > max) max = numbers(i)\n\
    \            result = result :+ max\n        }\n        result", "        var\
    \ max = numbers(0)\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length) {\n            max = max(numbers(i), max)\n            result\
    \ = result :+ max\n        }\n        result", "        var max = numbers(0)\n\
    \        var result = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            if (numbers(i) > max) max = numbers(i)\n            result =\
    \ result :+ max\n        }\n        result", "        var max = numbers(0)\n \
    \       var result = List[Long]()\n        for (i <- 0 until numbers.length) {\n\
    \            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        var max = numbers(0)\n        var result\
    \ = List(max)\n        for (i <- 1 until numbers.length) {\n            max =\
    \ max(numbers(i), max)\n            result = result :+ max\n        }\n      \
    \  result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var max = -1L\n        var result = List[Long]()\n        for (n <- numbers)\
    \ {\n            max = max(n, max)\n            result = result :+ max\n     \
    \   }\n        result", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            if (numbers(i) > max)\
    \ max = numbers(i)\n            result = result :+ max\n        }\n        result",
  "        var max = 0L\n        numbers.map(x => {\n            if (x > max) max\
    \ = x\n            max\n        })", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        val result = new ListBuffer[Long]\n        var\
    \ currentMax = Long.MinValue\n        for (number <- numbers) {\n            currentMax\
    \ = max(currentMax, number)\n            result += currentMax\n        }\n   \
    \     result.toList", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            if (numbers(i) > max)\
    \ max = numbers(i)\n            result = result :+ max\n        }\n        result",
  "        val result = new ListBuffer[Long]()\n        var max = numbers(0)\n   \
    \     result += max\n        for (i <- 1 until numbers.length) {\n           \
    \ if (numbers(i) > max) max = numbers(i)\n            result += max\n        }\n\
    \        result.toList", "        var max = numbers(0)\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            result = result :+ max\n        }\n        result", "    \
    \    var result = List[Long]()\n        var max = 0L\n        for (number <- numbers)\
    \ {\n            max = max max number\n            result = result :+ max\n  \
    \      }\n        result", "        val result = new ListBuffer[Long]\n      \
    \  var max = Long.MinValue\n        for (number <- numbers) {\n            max\
    \ = max(number, max)\n            result += max\n        }\n        result.toList",
  "        var max = 0L\n        var result = List[Long]()\n        for (number <-\
    \ numbers) {\n            max = max(number, max)\n            result = result\
    \ :+ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var max = 0L\n        var result = List[Long]()\n\
    \        for (n <- numbers) {\n            max = max max n\n            result\
    \ = result :+ max\n        }\n        result", "        val result = new ListBuffer[Long]\n\
    \        var max = numbers(0)\n        result += max\n        for (i <- 1 until\
    \ numbers.length) {\n            max = max(numbers(i), max)\n            result\
    \ += max\n        }\n        result.toList", "        var max = numbers(0)\n \
    \       var result = List(max)\n        for (i <- 1 until numbers.length) {\n\
    \            max = max(numbers(i), max)\n            result = result :+ max\n\
    \        }\n        result", "        val result = new ListBuffer[Long]\n    \
    \    var max = Long.MinValue\n        for (number <- numbers) {\n            max\
    \ = max(number, max)\n            result += max\n        }\n        result.toList",
  "        var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            max = max(numbers(i), max)\n     \
    \       result = result :+ max\n        }\n        result", "        val result\
    \ = new ListBuffer[Long]\n        var max = Long.MinValue\n        for (number\
    \ <- numbers) {\n            max = max(number, max)\n            result += max\n\
    \        }\n        result.toList", "        var max = numbers(0)\n        var\
    \ result = new ListBuffer[Long]\n        result += max\n        for (i <- 1 until\
    \ numbers.length) {\n            max = max(numbers(i), max)\n            result\
    \ += max\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        var max = Long.MinValue\n        for (number <- numbers) {\n        \
    \    max = max(number, max)\n            result = result :+ max\n        }\n \
    \       result", "        val result = new ListBuffer[Long]\n        var max =\
    \ 0L\n        for (number <- numbers) {\n            max = max max number\n  \
    \          result += max\n        }\n        result.toList"]
stop_tokens:
- "\n    }\n"
