name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1, 'c':\
  \ 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a b c a\
  \ b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n    // histogram('')\
  \ == {}\n    def histogram(test : String) : Map[String,Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val letters = test.split(\" \")\n        val map\
    \ = new HashMap[String,Long]\n        for (letter <- letters) {\n            if\
    \ (map.contains(letter)) {\n                map(letter) += 1\n            } else\
    \ {\n                map(letter) = 1\n            }\n        }\n        val max\
    \ = map.values.max\n        val result = new HashMap[String,Long]\n        for\
    \ ((key,value) <- map) {\n            if (value == max) {\n                result(key)\
    \ = value\n            }\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) map(letter) += 1\n            else\
    \ map(letter) = 1\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val letters = test.split(\" \")\n        val map\
    \ = Map[String,Long]()\n        for (letter <- letters) {\n            if (map.contains(letter))\
    \ {\n                map(letter) += 1\n            } else {\n                map\
    \ += (letter -> 1)\n            }\n        }\n        map", "        val letters\
    \ = test.split(\" \")\n        val map = new HashMap[String,Long]\n        for\
    \ (letter <- letters) {\n            if (map.contains(letter)) {\n           \
    \     map(letter) += 1\n            } else {\n                map(letter) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val letters = test.split(\" \")\n        val map\
    \ = Map[String,Long]()\n        for (letter <- letters) {\n            if (map.contains(letter))\
    \ {\n                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.filter(x => x._2 == max).keys\n        val result = Map[String,Long]()\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result", "        val letters = test.split(\" \")\n        val letterCount\
    \ = Map[String,Long]()\n        for (letter <- letters) {\n            if (letterCount.contains(letter))\
    \ {\n                letterCount(letter) += 1\n            } else {\n        \
    \        letterCount(letter) = 1\n            }\n        }\n        val maxCount\
    \ = letterCount.values.max\n        val maxLetters = letterCount.filter(x => x._2\
    \ == maxCount)\n        maxLetters", "        val letters = test.split(\" \")\n\
    \        val letterCount = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (letterCount.contains(letter)) letterCount(letter) += 1\n\
    \            else letterCount(letter) = 1\n        }\n        val maxCount = letterCount.values.max\n\
    \        val maxLetters = letterCount.filter(x => x._2 == maxCount)\n        maxLetters",
  "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val letters = test.split(\" \")\n        val histogram = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        histogram", " \
    \       val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val maxLetters = new HashMap[String,Long]\n        for ((letter,count)\
    \ <- histogram) {\n            if (count == max) {\n                maxLetters(letter)\
    \ = count\n            }\n        }\n        maxLetters", "        val words =\
    \ test.split(\" \")\n        val map = new HashMap[String,Long]\n        for (word\
    \ <- words) {\n            if (map.contains(word)) {\n                map(word)\
    \ += 1\n            } else {\n                map(word) = 1\n            }\n \
    \       }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((key,value) <- map) {\n            if (value == max) {\n       \
    \         result(key) = value\n            }\n        }\n        result", "  \
    \      var result = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (result.contains(c)) result(c) += 1\n            else result +=\
    \ (c -> 1)\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        val testArray = test.split(\" \")\n        val testMap = Map[String,Long]()\n\
    \        for (i <- 0 until testArray.length) {\n            if (testMap.contains(testArray(i)))\
    \ {\n                testMap(testArray(i)) += 1\n            } else {\n      \
    \          testMap += (testArray(i) -> 1)\n            }\n        }\n        val\
    \ max = testMap.values.max\n        val result = Map[String,Long]()\n        for\
    \ ((k,v) <- testMap) {\n            if (v == max) {\n                result +=\
    \ (k -> v)\n            }\n        }\n        result", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) {\n                map(word) += 1\n \
    \           } else {\n                map(word) = 1\n            }\n        }\n\
    \        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((key,value) <- map) {\n            if (value == max) {\n       \
    \         result(key) = value\n            }\n        }\n        result", "  \
    \      val words = test.split(\" \")\n        val map = new HashMap[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n  \
    \      val max = counts.values.max\n        val result = counts.filter(x => x._2\
    \ == max)\n        return result", "        val letters = test.split(\" \")\n\
    \        val counts = letters.groupBy(identity).mapValues(_.length)\n        val\
    \ max = counts.values.max\n        counts.filter(_._2 == max)", "        val letters\
    \ = test.split(\" \")\n        val map = new HashMap[String,Long]()\n        for\
    \ (letter <- letters) {\n            if (map.contains(letter)) {\n           \
    \     map(letter) += 1\n            } else {\n                map += (letter ->\
    \ 1)\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]()\n        for ((letter,count) <- map) {\n\
    \            if (count == max) {\n                result += (letter -> count)\n\
    \            }\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val map = Map[String,Long]()\n        for (letter <- letters) {\n\
    \            if (map.contains(letter)) {\n                map(letter) += 1\n \
    \           } else {\n                map += (letter -> 1)\n            }\n  \
    \      }\n        map"]
stop_tokens:
- "\n    }\n"
