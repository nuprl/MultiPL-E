name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1, 'c':\
  \ 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a b c a\
  \ b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n    // histogram('')\
  \ == {}\n    def histogram(test : String) : Map[String,Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val letters = test.split(\" \")\n        val map\
    \ = new HashMap[String,Long]\n        for (letter <- letters) {\n            if\
    \ (map.contains(letter)) {\n                map(letter) += 1\n            } else\
    \ {\n                map(letter) = 1\n            }\n        }\n        val max\
    \ = map.values.max\n        val result = new HashMap[String,Long]\n        for\
    \ ((key,value) <- map) {\n            if (value == max) {\n                result(key)\
    \ = value\n            }\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) map(letter) += 1\n            else\
    \ map(letter) = 1\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val letters = test.split(\" \")\n        val map\
    \ = Map[String,Long]()\n        for (letter <- letters) {\n            if (map.contains(letter))\
    \ {\n                map(letter) += 1\n            } else {\n                map\
    \ += (letter -> 1)\n            }\n        }\n        map", "        val letters\
    \ = test.split(\" \")\n        val map = new HashMap[String,Long]\n        for\
    \ (letter <- letters) {\n            if (map.contains(letter)) {\n           \
    \     map(letter) += 1\n            } else {\n                map(letter) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val letters = test.split(\" \")\n        val map\
    \ = Map[String,Long]()\n        for (letter <- letters) {\n            if (map.contains(letter))\
    \ {\n                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.filter(x => x._2 == max).keys\n        val result = Map[String,Long]()\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result", "        val letters = test.split(\" \")\n        val letterCount\
    \ = Map[String,Long]()\n        for (letter <- letters) {\n            if (letterCount.contains(letter))\
    \ {\n                letterCount(letter) += 1\n            } else {\n        \
    \        letterCount(letter) = 1\n            }\n        }\n        val maxCount\
    \ = letterCount.values.max\n        val maxLetters = letterCount.filter(x => x._2\
    \ == maxCount)\n        maxLetters", "        val letters = test.split(\" \")\n\
    \        val letterCount = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (letterCount.contains(letter)) letterCount(letter) += 1\n\
    \            else letterCount(letter) = 1\n        }\n        val maxCount = letterCount.values.max\n\
    \        val maxLetters = letterCount.filter(x => x._2 == maxCount)\n        maxLetters",
  "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val letters = test.split(\" \")\n        val histogram = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        histogram", " \
    \       val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val maxLetters = new HashMap[String,Long]\n        for ((letter,count)\
    \ <- histogram) {\n            if (count == max) {\n                maxLetters(letter)\
    \ = count\n            }\n        }\n        maxLetters", "        val words =\
    \ test.split(\" \")\n        val map = new HashMap[String,Long]\n        for (word\
    \ <- words) {\n            if (map.contains(word)) {\n                map(word)\
    \ += 1\n            } else {\n                map(word) = 1\n            }\n \
    \       }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((key,value) <- map) {\n            if (value == max) {\n       \
    \         result(key) = value\n            }\n        }\n        result", "  \
    \      var result = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (result.contains(c)) result(c) += 1\n            else result +=\
    \ (c -> 1)\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        val testArray = test.split(\" \")\n        val testMap = Map[String,Long]()\n\
    \        for (i <- 0 until testArray.length) {\n            if (testMap.contains(testArray(i)))\
    \ {\n                testMap(testArray(i)) += 1\n            } else {\n      \
    \          testMap += (testArray(i) -> 1)\n            }\n        }\n        val\
    \ max = testMap.values.max\n        val result = Map[String,Long]()\n        for\
    \ ((k,v) <- testMap) {\n            if (v == max) {\n                result +=\
    \ (k -> v)\n            }\n        }\n        result", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) {\n                map(word) += 1\n \
    \           } else {\n                map(word) = 1\n            }\n        }\n\
    \        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((key,value) <- map) {\n            if (value == max) {\n       \
    \         result(key) = value\n            }\n        }\n        result", "  \
    \      val words = test.split(\" \")\n        val map = new HashMap[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n  \
    \      val max = counts.values.max\n        val result = counts.filter(x => x._2\
    \ == max)\n        return result", "        val letters = test.split(\" \")\n\
    \        val counts = letters.groupBy(identity).mapValues(_.length)\n        val\
    \ max = counts.values.max\n        counts.filter(_._2 == max)", "        val letters\
    \ = test.split(\" \")\n        val map = new HashMap[String,Long]()\n        for\
    \ (letter <- letters) {\n            if (map.contains(letter)) {\n           \
    \     map(letter) += 1\n            } else {\n                map += (letter ->\
    \ 1)\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]()\n        for ((letter,count) <- map) {\n\
    \            if (count == max) {\n                result += (letter -> count)\n\
    \            }\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val map = Map[String,Long]()\n        for (letter <- letters) {\n\
    \            if (map.contains(letter)) {\n                map(letter) += 1\n \
    \           } else {\n                map += (letter -> 1)\n            }\n  \
    \      }\n        map", "        var result = Map[String,Long]()\n        if (test.length()\
    \ > 0) {\n            var max = 0\n            var maxLetters = List[String]()\n\
    \            var letters = test.split(\" \")\n            for (letter <- letters)\
    \ {\n                if (result.contains(letter)) {\n                    var count\
    \ = result(letter)\n                    result += (letter -> (count + 1))\n  \
    \                  if (count + 1 > max) {\n                        max = count\
    \ + 1\n                        maxLetters = List(letter)\n                   \
    \ } else if (count + 1 == max) {\n                        maxLetters = letter\
    \ :: maxLetters\n                    }\n                } else {\n           \
    \         result += (letter -> 1)\n                    if (1 > max) {\n      \
    \                  max = 1\n                        maxLetters = List(letter)\n\
    \                    } else if (1 == max) {\n                        maxLetters\
    \ = letter :: maxLetters\n                    }\n                }\n         \
    \   }\n            result = Map[String,Long]()\n            for (letter <- maxLetters)\
    \ {\n                result += (letter -> max)\n            }\n        }\n   \
    \     return result", "        var result = Map[String,Long]()\n        if (test.length\
    \ > 0) {\n            val letters = test.split(\" \")\n            var max = 0\n\
    \            for (letter <- letters) {\n                if (result.contains(letter))\
    \ result(letter) += 1\n                else result(letter) = 1\n             \
    \   if (result(letter) > max) max = result(letter).toInt\n            }\n    \
    \        result = result.filter(x => x._2 == max)\n        }\n        result",
  "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        val letters = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map(letter) = 1\n            }\n      \
    \  }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((key,value) <- map) {\n            if (value == max) result(key)\
    \ = value\n        }\n        result", "        val words = test.split(\" \")\n\
    \        val map = new HashMap[String,Long]\n        for (word <- words) {\n \
    \           if (map.contains(word)) map(word) += 1\n            else map(word)\
    \ = 1\n        }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((key,value) <- map) {\n            if (value == max) result(key)\
    \ = value\n        }\n        result", "        val letters = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map(letter) = 1\n            }\n      \
    \  }\n        val max = map.values.max\n        map.filter(x => x._2 == max)",
  "        val letters = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        letterCounts.filter(_._2\
    \ == maxCount)", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.groupBy(identity).mapValues(_.length)\n        val max = counts.values.max\n\
    \        counts.filter(x => x._2 == max)", "        val letters = test.split(\"\
    \ \")\n        val histogram = new HashMap[String,Long]\n        for (letter <-\
    \ letters) {\n            val count = histogram.getOrElse(letter, 0)\n       \
    \     histogram.put(letter, count + 1)\n        }\n        histogram", "     \
    \   val words = test.split(\" \")\n        val wordCount = words.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = wordCount.values.max\n        wordCount.filter(x => x._2\
    \ == maxCount)", "        val tokens = test.split(\" \")\n        val map = new\
    \ HashMap[String,Long]\n        for (token <- tokens) {\n            if (map.contains(token))\
    \ {\n                map(token) += 1\n            } else {\n                map(token)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.keys.filter(key => map(key) == max)\n        val result = new HashMap[String,Long]\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result", "        val list = test.split(\" \").toList\n        val map = list.groupBy(x\
    \ => x).mapValues(x => x.length)\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val words = test.split(\" \")\n        val wordCounts\
    \ = words.groupBy(word => word).mapValues(_.length)\n        val maxCount = wordCounts.values.max\n\
    \        wordCounts.filter(wordCount => wordCount._2 == maxCount)", "        val\
    \ words = test.split(\" \")\n        val map = new HashMap[String,Long]\n    \
    \    for (word <- words) {\n            if (map.contains(word)) {\n          \
    \      map(word) += 1\n            } else {\n                map(word) = 1\n \
    \           }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v\
    \ == max) result(k) = v\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n  \
    \      val max = counts.values.max\n        counts.filter(_._2 == max)", "   \
    \     val map = new HashMap[String,Long]\n        for (c <- test.split(\" \"))\
    \ {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n\
    \        }\n        var max = 0L\n        for (c <- map.keys) {\n            if\
    \ (map(c) > max) max = map(c)\n        }\n        val result = new HashMap[String,Long]\n\
    \        for (c <- map.keys) {\n            if (map(c) == max) result(c) = max\n\
    \        }\n        result", "        val words = test.split(\" \")\n        val\
    \ map = new HashMap[String,Long]\n        for (word <- words) {\n            if\
    \ (map.contains(word)) {\n                map(word) += 1\n            } else {\n\
    \                map(word) = 1\n            }\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((k,v) <- map) {\n\
    \            if (v == max) result(k) = v\n        }\n        result", "      \
    \  val arr = test.split(\" \")\n        val map = new HashMap[String,Long]\n \
    \       for (i <- 0 until arr.length) {\n            if (map.contains(arr(i)))\
    \ {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i))\
    \ = 1\n            }\n        }\n        var max = 0\n        for (i <- map.values)\
    \ {\n            if (i > max) max = i.toInt\n        }\n        val result = new\
    \ HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v == max)\
    \ result(k) = v\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map(letter) = 1\n            }\n      \
    \  }\n        val max = map.values.max\n        val keys = map.keys.filter(key\
    \ => map(key) == max)\n        val result = new HashMap[String,Long]\n       \
    \ for (key <- keys) {\n            result(key) = max\n        }\n        result",
  "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result", "        val list = test.split(\" \").toList\n    \
    \    val map = list.groupBy(identity).mapValues(_.size)\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        val letters = test.split(\" \"\
    )\n        val histogram = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        val max = histogram.values.max\n        val maxKeys\
    \ = histogram.filter(x => x._2 == max).keys\n        val result = new HashMap[String,Long]\n\
    \        for (key <- maxKeys) {\n            result(key) = max\n        }\n  \
    \      result", "        val letters = test.split(\" \")\n        val counts =\
    \ letters.groupBy(identity).mapValues(_.length.toLong)\n        val max = counts.values.max\n\
    \        counts.filter(p => p._2 == max)", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) {\n                map(word) += 1\n \
    \           } else {\n                map(word) = 1\n            }\n        }\n\
    \        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((key,value) <- map) {\n            if (value == max) {\n       \
    \         result(key) = value\n            }\n        }\n        result", "  \
    \      val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ map) {\n            if (count == max) result(letter) = count\n        }\n  \
    \      result", "        val list = test.split(\" \").toList\n        val map\
    \ = list.groupBy(identity).mapValues(_.size)\n        val max = map.values.max\n\
    \        map.filter(_._2 == max)", "        val words = test.split(\" \")\n  \
    \      val map = Map[String,Long]()\n        for (word <- words) {\n         \
    \   if (map.contains(word)) {\n                map(word) += 1\n            } else\
    \ {\n                map(word) = 1\n            }\n        }\n        map", " \
    \       val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val result = new HashMap[String,Long]()\n        for ((letter,count)\
    \ <- histogram) {\n            if (count == max) {\n                result(letter)\
    \ = count\n            }\n        }\n        result", "        val m = new HashMap[String,Long]\n\
    \        for (c <- test.split(\" \")) {\n            if (m.contains(c)) m(c) +=\
    \ 1\n            else m(c) = 1\n        }\n        val max = m.values.max\n  \
    \      m.filter(x => x._2 == max)", "        val result = new HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ result(x) += 1\n            else result(x) = 1\n        })\n        result.filter(x\
    \ => x._2 == result.values.max)", "        val letters = test.split(\" \")\n \
    \       val counts = letters.groupBy(identity).mapValues(_.length)\n        val\
    \ max = counts.values.max\n        counts.filter(_._2 == max)", "        val letters\
    \ = test.split(\" \")\n        val map = Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            if (map.contains(letter)) {\n                map(letter)\
    \ += 1\n            } else {\n                map(letter) = 1\n            }\n\
    \        }\n        map", "        val words = test.split(\" \")\n        val\
    \ map = new HashMap[String,Long]()\n        for (word <- words) {\n          \
    \  if (map.contains(word)) map(word) += 1\n            else map(word) = 1\n  \
    \      }\n        val max = map.values.max\n        val keys = map.filter(x =>\
    \ x._2 == max).keys\n        keys.map(x => (x,max)).toMap", "        var map =\
    \ Map[String,Long]()\n        for (i <- test.split(\" \")) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map += (i -> 1)\n        }\n        var max =\
    \ 0\n        for (i <- map.values) max = max.max(i)\n        var result = Map[String,Long]()\n\
    \        for ((k,v) <- map) if (v == max) result += (k -> v)\n        return result",
  "        var map = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n\
    \        }\n        var max = 0L\n        for (c <- map.keys) max = max max map(c)\n\
    \        var result = Map[String,Long]()\n        for (c <- map.keys) if (map(c)\
    \ == max) result += (c -> max)\n        return result", "        val letters =\
    \ test.split(\" \")\n        val map = new HashMap[String,Long]\n        for (letter\
    \ <- letters) {\n            if (map.contains(letter)) {\n                map(letter)\
    \ += 1\n            } else {\n                map(letter) = 1\n            }\n\
    \        }\n        val max = map.values.max\n        map.filter(x => x._2 ==\
    \ max)", "        val letters = test.split(\" \")\n        var map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map += (letter -> 1)\n        }\n        var max = 0\n\
    \        for (letter <- map.keys) {\n            if (map(letter) > max) max =\
    \ map(letter).toInt\n        }\n        var result = Map[String,Long]()\n    \
    \    for (letter <- map.keys) {\n            if (map(letter) == max) result +=\
    \ (letter -> max)\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val map = Map[String,Long]()\n        for (letter <- letters) {\n\
    \            if (map.contains(letter)) {\n                map(letter) += 1\n \
    \           } else {\n                map += (letter -> 1)\n            }\n  \
    \      }\n        map", "        val map = new HashMap[String,Long]\n        for\
    \ (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c) += 1\n \
    \           else map(c) = 1\n        }\n        val max = map.values.max\n   \
    \     map.filter(x => x._2 == max)", "        var map = Map[String,Long]()\n \
    \       test.split(\" \").foreach(x => {\n            if (map.contains(x)) {\n\
    \                map(x) += 1\n            } else {\n                map += (x\
    \ -> 1)\n            }\n        })\n        map", "        val map = new HashMap[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c)\
    \ += 1\n            else map(c) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        val letters = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map(letter) = 1\n            }\n      \
    \  }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((letter,count) <- map) {\n            if (count == max) {\n    \
    \            result(letter) = count\n            }\n        }\n        result",
  "        val testArray = test.split(\" \")\n        val testMap = Map[String,Long]()\n\
    \        for (i <- 0 until testArray.length) {\n            if (testMap.contains(testArray(i)))\
    \ {\n                testMap(testArray(i)) += 1\n            } else {\n      \
    \          testMap += (testArray(i) -> 1)\n            }\n        }\n        testMap",
  "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)",
  "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ letter -> 1\n            }\n        }\n        map", "        val letters =\
    \ test.split(\" \")\n        val map = Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            if (map.contains(letter)) {\n                map(letter)\
    \ += 1\n            } else {\n                map(letter) = 1\n            }\n\
    \        }\n        map", "        val tokens = test.split(\" \")\n        val\
    \ map = new HashMap[String,Long]\n        for (token <- tokens) {\n          \
    \  if (map.contains(token)) map(token) += 1\n            else map(token) = 1\n\
    \        }\n        val max = map.values.max\n        map.filter(x => x._2 ==\
    \ max)", "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        val words = test.split(\" \"\
    )\n        val map = Map[String,Long]()\n        for (word <- words) {\n     \
    \       if (map.contains(word)) {\n                map(word) += 1\n          \
    \  } else {\n                map(word) = 1\n            }\n        }\n       \
    \ map", "        val map = Map[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map(c)\
    \ = 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)",
  "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val letterCount = Map[String,Long]()\n        test.split(\" \").foreach(letter\
    \ => {\n            if (letterCount.contains(letter)) {\n                letterCount(letter)\
    \ += 1\n            } else {\n                letterCount(letter) = 1\n      \
    \      }\n        })\n        letterCount.filter(x => x._2 == letterCount.values.max)",
  "        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map", "        val tokens = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (token <- tokens)\
    \ {\n            if (map.contains(token)) {\n                map(token) += 1\n\
    \            } else {\n                map(token) = 1\n            }\n       \
    \ }\n        val max = map.values.max\n        val keys = map.filter(x => x._2\
    \ == max).keys\n        val result = new HashMap[String,Long]\n        for (key\
    \ <- keys) {\n            result(key) = max\n        }\n        result", "   \
    \     val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        val maxLetters = counts.filter(_._2\
    \ == max)\n        return maxLetters", "        val letters = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map += (letter -> 1)\n            }\n \
    \       }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((letter,count) <- map) {\n            if (count == max) result +=\
    \ (letter -> count)\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val histogram = Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        histogram", "        val map = new HashMap[String,Long]\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c)\
    \ += 1\n            else map += (c -> 1)\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        val letters = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) map(letter) += 1\n            else\
    \ map(letter) = 1\n        }\n        val max = map.values.max\n        return\
    \ map.filter(x => x._2 == max)", "        val letters = test.split(\" \")\n  \
    \      val histogram = Map[String,Long]()\n        for (letter <- letters) {\n\
    \            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        histogram", "        val words = test.split(\" \")\n\
    \        val map = new HashMap[String,Long]\n        for (word <- words) {\n \
    \           if (map.contains(word)) map(word) += 1\n            else map(word)\
    \ = 1\n        }\n        map.filter(x => x._2 == map.values.max)", "        val\
    \ words = test.split(\" \")\n        val map = new HashMap[String,Long]\n    \
    \    for (word <- words) {\n            if (map.contains(word)) {\n          \
    \      map(word) += 1\n            } else {\n                map(word) = 1\n \
    \           }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v\
    \ == max) {\n                result(k) = v\n            }\n        }\n       \
    \ result", "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        if (test.length == 0) return Map()\n        val letters\
    \ = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)",
  "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result", "        val words = test.split(\" \")\n        val\
    \ counts = words.groupBy(identity).mapValues(_.length)\n        val maxCount =\
    \ counts.values.max\n        counts.filter(_._2 == maxCount)", "        val words\
    \ = test.split(\" \")\n        val map = new HashMap[String,Long]()\n        for\
    \ (word <- words) {\n            if (map.contains(word)) {\n                map(word)\
    \ += 1\n            } else {\n                map(word) = 1\n            }\n \
    \       }\n        val max = map.values.max\n        val result = new HashMap[String,Long]()\n\
    \        for ((key,value) <- map) {\n            if (value == max) {\n       \
    \         result(key) = value\n            }\n        }\n        result", "  \
    \      val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.values.max\n        val maxCountLetters = counts.filter(_._2\
    \ == maxCount)\n        maxCountLetters", "        val words = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (word <- words) {\n\
    \            if (map.contains(word)) map(word) += 1\n            else map(word)\
    \ = 1\n        }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((word,count) <- map) {\n            if (count == max) result(word)\
    \ = count\n        }\n        result", "        val letters = test.split(\" \"\
    )\n        val histogram = Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        histogram", "        val letters = test.split(\" \"\
    )\n        val counts = letters.groupBy(identity).mapValues(_.length)\n      \
    \  val max = counts.values.max\n        counts.filter(_._2 == max)", "       \
    \ val letters = test.split(\" \")\n        var histogram = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram += (letter -> 1)\n            }\n        }\n        histogram",
  "        val letters = test.split(\" \")\n        var map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ (letter -> 1)\n            }\n        }\n        val max = map.values.max\n\
    \        var maxMap = Map[String,Long]()\n        for ((k,v) <- map) {\n     \
    \       if (v == max) {\n                maxMap += (k -> v)\n            }\n \
    \       }\n        maxMap", "        val letters = test.split(\" \")\n       \
    \ val counts = letters.groupBy(identity).mapValues(_.length)\n        val max\
    \ = counts.values.max\n        counts.filter(_._2 == max)", "        val map =\
    \ new HashMap[String,Long]\n        test.split(\" \").foreach(x => {\n       \
    \     if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        })\n\
    \        val max = map.values.max\n        map.filter(x => x._2 == max)", "  \
    \      val letters = test.split(\" \")\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.length)\n        val max = counts.values.max\n        counts.filter(x\
    \ => x._2 == max)", "        val words = test.split(\" \")\n        val map =\
    \ new HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ {\n                map(word) += 1\n            } else {\n                map(word)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((key,value) <- map) {\n    \
    \        if (value == max) {\n                result(key) = value\n          \
    \  }\n        }\n        result", "        val letters = test.split(\" \")\n \
    \       val hist = new HashMap[String,Long]\n        for (letter <- letters) {\n\
    \            if (hist.contains(letter)) {\n                hist(letter) += 1\n\
    \            } else {\n                hist(letter) = 1\n            }\n     \
    \   }\n        val max = hist.values.max\n        hist.filter(x => x._2 == max)",
  "        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(_._2\
    \ == max)", "        val letters = test.split(\" \")\n        val letterCounts\
    \ = letters.groupBy(identity).mapValues(_.length)\n        val maxCount = letterCounts.values.max\n\
    \        letterCounts.filter(x => x._2 == maxCount)", "        val hist = new\
    \ HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n            if\
    \ (hist.contains(c)) hist(c) += 1\n            else hist(c) = 1\n        }\n \
    \       val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((letter,count) <- map) {\n \
    \           if (count == max) {\n                result(letter) = count\n    \
    \        }\n        }\n        result", "        val letters = test.split(\" \"\
    )\n        val hist = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (hist.contains(letter)) hist(letter) += 1\n            else\
    \ hist(letter) = 1\n        }\n        val max = hist.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((letter,count) <- hist) {\n\
    \            if (count == max) result(letter) = count\n        }\n        result",
  "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)",
  "        val letters = test.split(\" \")\n        val dict = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (dict.contains(letter)) dict(letter)\
    \ += 1\n            else dict(letter) = 1\n        }\n        val max = dict.values.max\n\
    \        dict.filter(x => x._2 == max)", "        val words = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (word <- words) {\n\
    \            if (map.contains(word)) map(word) += 1\n            else map(word)\
    \ = 1\n        }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((k,v) <- map) {\n            if (v == max) result(k) = v\n     \
    \   }\n        result", "        val words = test.split(\" \")\n        val map\
    \ = new HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ map(word) += 1\n            else map(word) = 1\n        }\n        val max =\
    \ map.values.max\n        map.filter(x => x._2 == max)", "        var map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n\
    \                map(c) += 1\n            } else {\n                map += (c\
    \ -> 1)\n            }\n        }\n        var max = 0L\n        for (c <- map.keys)\
    \ {\n            if (map(c) > max) max = map(c)\n        }\n        var result\
    \ = Map[String,Long]()\n        for (c <- map.keys) {\n            if (map(c)\
    \ == max) result += (c -> max)\n        }\n        return result", "        val\
    \ result = Map[String,Long]()\n        val testArray = test.split(\" \")\n   \
    \     for (i <- 0 until testArray.length) {\n            if (result.contains(testArray(i)))\
    \ {\n                result(testArray(i)) += 1\n            } else {\n       \
    \         result(testArray(i)) = 1\n            }\n        }\n        result",
  "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result", "        var map = Map[String,Long]()\n        for\
    \ (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c) += 1\n \
    \           else map += (c -> 1)\n        }\n        map.filter(x => x._2 == map.values.max)",
  "        val map = new HashMap[String,Long]\n        for (i <- test.split(\" \"\
    )) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) =\
    \ 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val letters = test.split(\" \")\n        val counts = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (counts.contains(letter)) {\n\
    \                counts(letter) += 1\n            } else {\n                counts(letter)\
    \ = 1\n            }\n        }\n        val maxCount = counts.values.max\n  \
    \      val maxLetters = new HashMap[String,Long]\n        for ((letter,count)\
    \ <- counts) {\n            if (count == maxCount) {\n                maxLetters(letter)\
    \ = count\n            }\n        }\n        maxLetters", "        val letters\
    \ = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        letterCounts.filter(_._2\
    \ == maxCount)", "        val letters = test.split(\" \")\n        val map = new\
    \ HashMap[String,Long]\n        for (letter <- letters) {\n            if (map.contains(letter))\
    \ {\n                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.filter(_._2 == max).keys\n        val result = new HashMap[String,Long]\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result", "        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ map) if (count == max) result(letter) = count\n        result", "        val\
    \ result = Map[String,Long]()\n        for (letter <- test.split(\" \")) {\n \
    \           if (result.contains(letter)) {\n                result(letter) +=\
    \ 1\n            } else {\n                result(letter) = 1\n            }\n\
    \        }\n        result", "        val hist = new HashMap[String,Long]\n  \
    \      for (c <- test.split(\" \")) {\n            if (hist.contains(c)) hist(c)\
    \ += 1\n            else hist(c) = 1\n        }\n        hist.filter(x => x._2\
    \ == hist.values.max)", "        var map = Map[String,Long]()\n        test.split(\"\
    \ \").foreach(x => {\n            if (map.contains(x)) {\n                map(x)\
    \ += 1\n            } else {\n                map += (x -> 1)\n            }\n\
    \        })\n        var max = map.maxBy(_._2)._2\n        map.filter(x => x._2\
    \ == max)", "        var map = Map[String,Long]()\n        for (i <- test.split(\"\
    \ \")) {\n            if (map.contains(i)) map(i) += 1\n            else map +=\
    \ (i -> 1)\n        }\n        var max = 0L\n        for (i <- map.values) max\
    \ = max.max(i)\n        var result = Map[String,Long]()\n        for ((k,v) <-\
    \ map) if (v == max) result += (k -> v)\n        return result", "        val\
    \ m = test.split(\" \").groupBy(identity).mapValues(_.length)\n        val max\
    \ = m.values.max\n        m.filter(_._2 == max)", "        val letters = test.split(\"\
    \ \")\n        val hist = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (hist.contains(letter)) {\n                hist(letter) +=\
    \ 1\n            } else {\n                hist(letter) = 1\n            }\n \
    \       }\n        val max = hist.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((letter,count) <- hist) {\n            if (count == max) {\n   \
    \             result(letter) = count\n            }\n        }\n        result",
  "        val words = test.split(\" \")\n        val map = Map[String,Long]()\n \
    \       for (word <- words) {\n            if (map.contains(word)) {\n       \
    \         map(word) += 1\n            } else {\n                map += (word ->\
    \ 1)\n            }\n        }\n        map", "        val letters = test.split(\"\
    \ \")\n        val letterCount = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCount.values.max\n        letterCount.filter(_._2\
    \ == maxCount)", "        val letters = test.split(\" \")\n        val counts\
    \ = new HashMap[String,Long]\n        for (letter <- letters) {\n            if\
    \ (counts.contains(letter)) counts(letter) += 1\n            else counts(letter)\
    \ = 1\n        }\n        val max = counts.values.max\n        val result = new\
    \ HashMap[String,Long]\n        for ((key,value) <- counts) {\n            if\
    \ (value == max) result(key) = value\n        }\n        result", "        val\
    \ map = new HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n   \
    \         if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n    \
    \    }\n        map.filter(x => x._2 == map.values.max)", "        val letters\
    \ = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val result = new HashMap[String,Long]\n        val words = test.split(\"\
    \ \")\n        for (word <- words) {\n            if (result.contains(word)) {\n\
    \                result(word) += 1\n            } else {\n                result(word)\
    \ = 1\n            }\n        }\n        result", "        val list = test.split(\"\
    \ \").toList\n        val map = list.groupBy(identity).mapValues(_.size)\n   \
    \     val max = map.values.max\n        map.filter(_._2 == max)", "        val\
    \ letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        histogram.filter(x => x._2 == max)", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) map(word) += 1\n            else map(word)\
    \ = 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val letters = test.split(\" \")\n        val hist = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (hist.contains(letter)) {\n\
    \                hist(letter) += 1\n            } else {\n                hist(letter)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ result = Map[String,Long]()\n        for ((letter,count) <- hist) {\n      \
    \      if (count == max) {\n                result(letter) = count\n         \
    \   }\n        }\n        result", "        val result = new HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ result(x) += 1\n            else result(x) = 1\n        })\n        result.filter(x\
    \ => x._2 == result.values.max)", "        val letters = test.split(\" \")\n \
    \       val counts = letters.groupBy(identity).mapValues(_.length)\n        val\
    \ max = counts.values.max\n        counts.filter(_._2 == max)", "        val letters\
    \ = test.split(\" \")\n        val map = new HashMap[String,Long]\n        for\
    \ (letter <- letters) {\n            if (map.contains(letter)) map(letter) +=\
    \ 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ map) {\n            if (count == max) result(letter) = count\n        }\n  \
    \      result", "        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) map(word) += 1\n            else map(word)\
    \ = 1\n        }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((k,v) <- map) if (v == max) result(k) = v\n        result", "  \
    \      val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val words = test.split(\" \")\n        val wordCounts = words.groupBy(word\
    \ => word).mapValues(_.length)\n        val maxCount = wordCounts.values.max\n\
    \        wordCounts.filter(wordCount => wordCount._2 == maxCount)", "        val\
    \ letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val result = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) result(c) += 1\n            else\
    \ result(c) = 1\n        }\n        result.toMap", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n  \
    \      val max = counts.values.max\n        counts.filter(_._2 == max)", "   \
    \     val words = test.split(\" \")\n        val map = Map[String,Long]()\n  \
    \      for (word <- words) {\n            if (map.contains(word)) {\n        \
    \        map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val letters = test.split(\" \")\n        val letterCount = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (letterCount.contains(letter))\
    \ letterCount(letter) += 1\n            else letterCount(letter) = 1\n       \
    \ }\n        val maxCount = letterCount.values.max\n        val maxLetters = letterCount.filter(x\
    \ => x._2 == maxCount)\n        maxLetters", "        val letters = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map(letter) = 1\n            }\n      \
    \  }\n        val max = map.values.max\n        val maxLetters = map.filter(x\
    \ => x._2 == max)\n        maxLetters", "        val map = new HashMap[String,Long]\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c)\
    \ += 1\n            else map(c) = 1\n        }\n        map.filter(x => x._2 ==\
    \ map.values.max)", "        val letters = test.split(\" \")\n        val map\
    \ = Map[String,Long]()\n        for (letter <- letters) {\n            if (map.contains(letter))\
    \ {\n                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map", "        val tokens = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (token <- tokens)\
    \ {\n            if (map.contains(token)) {\n                map(token) += 1\n\
    \            } else {\n                map(token) = 1\n            }\n       \
    \ }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((key,value) <- map) {\n            if (value == max) {\n       \
    \         result(key) = value\n            }\n        }\n        result", "  \
    \      val letters = test.split(\" \")\n        val letterMap = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (letterMap.contains(letter))\
    \ {\n                letterMap(letter) += 1\n            } else {\n          \
    \      letterMap(letter) = 1\n            }\n        }\n        letterMap", " \
    \       val letters = test.split(\" \")\n        val hist = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (hist.contains(letter)) {\n\
    \                hist(letter) += 1\n            } else {\n                hist(letter)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ maxKeys = hist.filter(x => x._2 == max).keys\n        val result = new HashMap[String,Long]\n\
    \        for (key <- maxKeys) {\n            result(key) = max\n        }\n  \
    \      result", "        val words = test.split(\" \")\n        val map = new\
    \ HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ {\n                map(word) += 1\n            } else {\n                map\
    \ += (word -> 1)\n            }\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((key,value) <- map)\
    \ {\n            if (value == max) {\n                result += (key -> value)\n\
    \            }\n        }\n        result", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) map(word) += 1\n            else map(word)\
    \ = 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val result = new HashMap[String,Long]\n        val letters\
    \ = test.split(\" \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ result(letter) += 1\n            else result(letter) = 1\n        }\n      \
    \  result.filter(x => x._2 == result.values.max)", "        val list = test.split(\"\
    \ \").toList\n        val map = list.groupBy(x => x).mapValues(x => x.length)\n\
    \        val max = map.values.max\n        map.filter(x => x._2 == max)", "  \
    \      val map = new HashMap[String,Long]\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) =\
    \ 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val tokens = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (token <- tokens) {\n            if (map.contains(token)) {\n   \
    \             map(token) += 1\n            } else {\n                map(token)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((key,value) <- map) {\n    \
    \        if (value == max) {\n                result(key) = value\n          \
    \  }\n        }\n        result", "        val testArray = test.split(\" \")\n\
    \        val histogram = new HashMap[String,Long]\n        for (letter <- testArray)\
    \ {\n            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        val max = histogram.values.max\n        val maxLetters\
    \ = new HashMap[String,Long]\n        for ((letter,count) <- histogram) {\n  \
    \          if (count == max) {\n                maxLetters(letter) = count\n \
    \           }\n        }\n        maxLetters", "        val letters = test.split(\"\
    \ \")\n        val histogram = new HashMap[String,Long]\n        for (letter <-\
    \ letters) {\n            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        var max = 0\n        for (letter <- histogram.keys)\
    \ {\n            if (histogram(letter) > max) {\n                max = histogram(letter).toInt\n\
    \            }\n        }\n        val result = new HashMap[String,Long]\n   \
    \     for (letter <- histogram.keys) {\n            if (histogram(letter) == max)\
    \ {\n                result(letter) = histogram(letter)\n            }\n     \
    \   }\n        result", "        val words = test.split(\" \")\n        val map\
    \ = new HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ {\n                map(word) += 1\n            } else {\n                map(word)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((k,v) <- map) {\n          \
    \  if (v == max) {\n                result(k) = v\n            }\n        }\n\
    \        result", "        val words = test.split(\" \")\n        val map = new\
    \ HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ map(word) += 1\n            else map(word) = 1\n        }\n        val max =\
    \ map.values.max\n        val result = new HashMap[String,Long]\n        for ((key,value)\
    \ <- map) {\n            if (value == max) result(key) = value\n        }\n  \
    \      result", "        val letters = test.split(\" \")\n        val histogram\
    \ = new HashMap[String,Long]\n        for (letter <- letters) {\n            if\
    \ (histogram.contains(letter)) {\n                histogram(letter) += 1\n   \
    \         } else {\n                histogram(letter) = 1\n            }\n   \
    \     }\n        var max = 0L\n        for (letter <- histogram.keys) {\n    \
    \        if (histogram(letter) > max) {\n                max = histogram(letter)\n\
    \            }\n        }\n        val result = new HashMap[String,Long]\n   \
    \     for (letter <- histogram.keys) {\n            if (histogram(letter) == max)\
    \ {\n                result(letter) = max\n            }\n        }\n        result",
  "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result", "        val letters = test.split(\" \")\n        val\
    \ map = Map[String,Long]()\n        for (letter <- letters) {\n            if\
    \ (map.contains(letter)) {\n                map(letter) += 1\n            } else\
    \ {\n                map(letter) = 1\n            }\n        }\n        map",
  "        val letters = test.split(\" \")\n        val hist = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (hist.contains(letter)) {\n\
    \                hist(letter) += 1\n            } else {\n                hist(letter)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ result = Map[String,Long]()\n        for ((letter, count) <- hist) {\n     \
    \       if (count == max) {\n                result(letter) = count\n        \
    \    }\n        }\n        result", "        val letters = test.split(\" \")\n\
    \        val map = Map[String,Long]()\n        for (letter <- letters) {\n   \
    \         if (map.contains(letter)) map(letter) += 1\n            else map(letter)\
    \ = 1\n        }\n        map.filter(x => x._2 == map.values.max)", "        val\
    \ letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n  \
    \      for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ map) {\n            if (count == max) result(letter) = count\n        }\n  \
    \      result", "        val arr = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i)))\
    \ {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i))\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.filter(x => x._2 == max).keys\n        val result = new HashMap[String,Long]\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result", "        val letters = test.split(\" \")\n        val letterMap =\
    \ Map[String,Long]()\n        for (letter <- letters) {\n            if (letterMap.contains(letter))\
    \ {\n                letterMap(letter) += 1\n            } else {\n          \
    \      letterMap(letter) = 1\n            }\n        }\n        val max = letterMap.values.max\n\
    \        letterMap.filter(x => x._2 == max)", "        val words = test.split(\"\
    \ \")\n        val wordCounts = words.groupBy(word => word).mapValues(_.length)\n\
    \        val maxCount = wordCounts.values.max\n        wordCounts.filter(wordCount\
    \ => wordCount._2 == maxCount)", "        val letters = test.split(\" \")\n  \
    \      val letterCount = letters.groupBy(identity).mapValues(_.length)\n     \
    \   val maxCount = letterCount.values.max\n        letterCount.filter(x => x._2\
    \ == maxCount)", "        val words = test.split(\" \")\n        val map = new\
    \ HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ {\n                map(word) += 1\n            } else {\n                map(word)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((key,value) <- map) {\n    \
    \        if (value == max) {\n                result(key) = value\n          \
    \  }\n        }\n        result", "        val words = test.split(\" \")\n   \
    \     val map = new HashMap[String,Long]\n        for (word <- words) {\n    \
    \        if (map.contains(word)) {\n                map(word) += 1\n         \
    \   } else {\n                map(word) = 1\n            }\n        }\n      \
    \  map", "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val result = new HashMap[String,Long]\n        for (i <- test.split(\"\
    \ \")) {\n            if (result.contains(i)) result(i) += 1\n            else\
    \ result(i) = 1\n        }\n        result.toMap", "        val m = Map[String,Long]()\n\
    \        val l = test.split(\" \")\n        for (i <- 0 until l.length) {\n  \
    \          val c = l(i)\n            if (m.contains(c)) m(c) += 1\n          \
    \  else m(c) = 1\n        }\n        val max = m.values.max\n        m.filter(x\
    \ => x._2 == max)", "        val words = test.split(\" \")\n        val map =\
    \ new HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ {\n                map(word) += 1\n            } else {\n                map(word)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((key,value) <- map) {\n    \
    \        if (value == max) result(key) = value\n        }\n        result", " \
    \       val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result", "        val letters = test.split(\" \")\n        val\
    \ result = new HashMap[String,Long]\n        for (letter <- letters) {\n     \
    \       if (result.contains(letter)) result(letter) += 1\n            else result(letter)\
    \ = 1\n        }\n        val max = result.values.max\n        val maxLetters\
    \ = new HashMap[String,Long]\n        for ((letter,count) <- result) {\n     \
    \       if (count == max) maxLetters(letter) = count\n        }\n        maxLetters",
  "        val letters = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        letterCounts.filter(_._2\
    \ == maxCount)", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.groupBy(identity).mapValues(_.length)\n        val max = counts.values.max\n\
    \        counts.filter(_._2 == max)", "        val letters = test.split(\" \"\
    )\n        val map = Map[String,Long]()\n        for (letter <- letters) {\n \
    \           if (map.contains(letter)) {\n                map(letter) += 1\n  \
    \          } else {\n                map(letter) = 1\n            }\n        }\n\
    \        map", "        val letters = test.split(\" \")\n        val counts =\
    \ Map[String,Long]()\n        for (letter <- letters) {\n            if (counts.contains(letter))\
    \ {\n                counts(letter) += 1\n            } else {\n             \
    \   counts(letter) = 1\n            }\n        }\n        val max = counts.values.max\n\
    \        val result = Map[String,Long]()\n        for ((letter,count) <- counts)\
    \ {\n            if (count == max) {\n                result(letter) = count\n\
    \            }\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n  \
    \      val max = counts.values.max\n        counts.filter(_._2 == max)", "   \
    \     val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.values.max\n        counts.filter(_._2 == maxCount)",
  "        var map = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n\
    \        }\n        var max = map.values.max\n        var result = Map[String,Long]()\n\
    \        for ((k,v) <- map) {\n            if (v == max) result += (k -> v)\n\
    \        }\n        return result", "        val letters = test.split(\" \")\n\
    \        val counts = letters.groupBy(identity).mapValues(_.length)\n        val\
    \ max = counts.values.max\n        counts.filter(_._2 == max)", "        val map\
    \ = new HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n       \
    \     if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n\
    \        val max = map.values.max\n        map.filter(x => x._2 == max)", "  \
    \      var map = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n\
    \            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n\
    \        }\n        var max = 0L\n        for (i <- map.values) max = max.max(i)\n\
    \        var result = Map[String,Long]()\n        for ((k,v) <- map) {\n     \
    \       if (v == max) result += (k -> v)\n        }\n        return result", " \
    \       val words = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map", "        val words = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (word <- words) {\n\
    \            if (map.contains(word)) {\n                map(word) += 1\n     \
    \       } else {\n                map(word) = 1\n            }\n        }\n  \
    \      val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((key,value) <- map) {\n            if (value == max) {\n       \
    \         result(key) = value\n            }\n        }\n        result", "  \
    \      val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val letters = test.split(\" \")\n        val letterMap = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (letterMap.contains(letter))\
    \ {\n                letterMap(letter) += 1\n            } else {\n          \
    \      letterMap(letter) = 1\n            }\n        }\n        val maxCount =\
    \ letterMap.values.max\n        val maxLetters = letterMap.filter(x => x._2 ==\
    \ maxCount)\n        return maxLetters", "        val letters = test.split(\"\
    \ \")\n        val map = Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> (count + 1))\n        }\n        map.filter(x => x._2 == map.values.max)"]
stop_tokens:
- "\n    }\n"
