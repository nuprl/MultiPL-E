name: HumanEval_5_intersperse
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Insert a number 'delimeter' between every two consecutive elements of input\
  \ list `numbers'\n    // >>> intersperse([], 4)\n    // []\n    // >>> intersperse([1,\
  \ 2, 3], 4)\n    // [1, 4, 2, 4, 3]\n    def intersperse(numbers : List[Long], delimeter\
  \ : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
  \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
  \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
  \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        if (numbers.length == 0) return List()\n        if (numbers.length\
    \ == 1) return numbers\n        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n    \
    \        result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList", "        if (numbers.isEmpty) return List[Long]()\n\
    \        if (numbers.length == 1) return numbers\n        val result = new ListBuffer[Long]\n\
    \        result += numbers(0)\n        for (i <- 1 until numbers.length) {\n \
    \           result += delimeter\n            result += numbers(i)\n        }\n\
    \        result.toList", "        if (numbers.isEmpty) return List()\n       \
    \ if (numbers.length == 1) return numbers\n        val result = new ListBuffer[Long]\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n\
    \            result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList", "        if (numbers.length == 0) return List()\n\
    \        if (numbers.length == 1) return numbers\n        numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)", "        if (numbers.length == 0)\
    \ return numbers\n        if (numbers.length == 1) return numbers\n        var\
    \ result = ListBuffer[Long]()\n        for (i <- 0 until numbers.length - 1) {\n\
    \            result += numbers(i)\n            result += delimeter\n        }\n\
    \        result += numbers(numbers.length - 1)\n        return result.toList",
  "        if (numbers.length == 0) return numbers\n        var result = ListBuffer[Long]()\n\
    \        result += numbers(0)\n        for (i <- 1 until numbers.length) {\n \
    \           result += delimeter\n            result += numbers(i)\n        }\n\
    \        result.toList", "        if (numbers.length <= 1) numbers\n        else\
    \ numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)", "      \
    \  if (numbers.length == 0) return numbers\n        if (numbers.length == 1) return\
    \ numbers\n        var result = List[Long]()\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            result = result :+ numbers(i)\n            result = result\
    \ :+ delimeter\n        }\n        result = result :+ numbers(numbers.length -\
    \ 1)\n        return result", "        def intersperseHelper(numbers : List[Long],\
    \ delimeter : Long, result : List[Long]) : List[Long] = {\n            if (numbers.length\
    \ == 0) result\n            else if (numbers.length == 1) result ::: List(numbers(0))\n\
    \            else intersperseHelper(numbers.tail, delimeter, result ::: List(numbers(0))\
    \ ::: List(delimeter))\n        }\n        intersperseHelper(numbers, delimeter,\
    \ List())", "        if (numbers.length == 0) return List()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List(numbers(0))\n        for (i\
    \ <- 1 until numbers.length) {\n            result = result ::: List(delimeter)\
    \ ::: List(numbers(i))\n        }\n        return result", "        if (numbers.length\
    \ == 0) return numbers\n        var result = new ListBuffer[Long]\n        result\
    \ += numbers(0)\n        for (i <- 1 until numbers.length) {\n            result\
    \ += delimeter\n            result += numbers(i)\n        }\n        result.toList",
  "        if (numbers.isEmpty) List()\n        else if (numbers.length == 1) numbers\n\
    \        else numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)",
  "        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i) :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        result", "        if (numbers.length == 0) return List()\n   \
    \     if (numbers.length == 1) return numbers\n        val result = new ListBuffer[Long]\n\
    \        result += numbers(0)\n        for (i <- 1 until numbers.length) {\n \
    \           result += delimeter\n            result += numbers(i)\n        }\n\
    \        result.toList", "        if (numbers.length == 0) return List()\n   \
    \     if (numbers.length == 1) return numbers\n        val result = ListBuffer[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n\
    \            result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList", "        if (numbers.length == 0) return List()\n\
    \        if (numbers.length == 1) return numbers\n        var result = List(numbers(0))\n\
    \        for (i <- 1 until numbers.length) {\n            result = result :::\
    \ List(delimeter) ::: List(numbers(i))\n        }\n        return result", " \
    \       if (numbers.isEmpty) List[Long]()\n        else if (numbers.length ==\
    \ 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)", "        if (numbers.length == 0) return List()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List(numbers(0))\n        for (i\
    \ <- 1 until numbers.length) {\n            result = result ::: List(delimeter)\
    \ ::: List(numbers(i))\n        }\n        return result", "        if (numbers.isEmpty)\
    \ List()\n        else if (numbers.length == 1) numbers\n        else numbers.head\
    \ :: delimeter :: intersperse(numbers.tail, delimeter)", "        if (numbers.length\
    \ == 0) return List()\n        if (numbers.length == 1) return numbers\n     \
    \   var result = List[Long]()\n        for (i <- 0 until numbers.length - 1) {\n\
    \            result = result :+ numbers(i)\n            result = result :+ delimeter\n\
    \        }\n        result = result :+ numbers(numbers.length - 1)\n        return\
    \ result"]
stop_tokens:
- "\n    }\n"
