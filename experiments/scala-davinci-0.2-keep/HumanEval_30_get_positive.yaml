name: HumanEval_30_get_positive
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong,\
  \ -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
  \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
  \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
  \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
  \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
  \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ['        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        return
    l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x =>
    x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', " \
    \       var result = List[Long]()\n        for (i <- l) {\n            if (i >\
    \ 0) result = result :+ i\n        }\n        return result", '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(_ > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)', '        l.filter(x => x > 0)', '        return l.filter(x => x >
    0)', '        l.filter(x => x > 0)', '        l.filter(x => x > 0)', '        l.filter(x
    => x > 0)']
stop_tokens:
- "\n    }\n"
