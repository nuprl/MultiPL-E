language: jl
name: HumanEval_10_make_palindrome
results:
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    if n ==\
    \ 0\n        return \"\"\n    end\n    # first part of the algorithm - find the\
    \ longest palindromic suffix\n    p = String[]\n    p_size = 0\n    while p_size\
    \ < n && !(string[p_size + 1] == string[n]) \n        push!(p, string[p_size +\
    \ 1])\n        p_size += 1\n    end\n    n += 1\n    while n <= length(string)\
    \ && p_size > 0\n        n += 1\n        p_size -= 1\n    end\n    if n > length(string)\n\
    \        return string\n    end\n    # second part of the algorithm - reverse\
    \ the prefix and append it to the end of the string\n    return string * \"\"\
    .join(reverse(string[1:n - 1]))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmploq8eopi.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmploq8eopi.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] make_palindrome(string::String)\n     @ Main /tmp/tmploq8eopi.jl:15\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmploq8eopi.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmploq8eopi.jl:33\ntest set:\
    \ Error During Test at /tmp/tmploq8eopi.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] make_palindrome(string::String)\n     @ Main /tmp/tmploq8eopi.jl:15\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmploq8eopi.jl:38 [inlined]\n\
    \   [5] macro"
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    postfix = find_palindromic_suffix(string)\n\
    \    string = string * reverse(string[1:end-length(postfix)])\n    return string\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjbpxosky.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpjbpxosky.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjbpxosky.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbpxosky.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbpxosky.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjbpxosky.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjbpxosky.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbpxosky.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbpxosky.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjbpxosky.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjbpxosky.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbpxosky.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbpxosky.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjbpxosky.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjbpxosky.jl:7\n   [2] macro expansion\n     @"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    s_length = length(string)\n\
    \    s_length_is_odd = isodd(s_length)\n    \n    # even case\n    if !s_length_is_odd\n\
    \        longest_palindrome_len = find_longest_palindrome_even(string)\n    else\n\
    \        longest_palindrome_len = find_longest_palindrome_odd(string)\n    end\n\
    \    \n    to_append = string[1:end-longest_palindrome_len]\n    to_append = reverse(to_append)\n\
    \    \n    if longest_palindrome_len < s_length\n        return string * to_append\n\
    \    else\n        return string\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpkckdbaps.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpkckdbaps.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_even\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkckdbaps.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkckdbaps.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkckdbaps.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpkckdbaps.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_odd not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkckdbaps.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkckdbaps.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkckdbaps.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpkckdbaps.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_odd\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkckdbaps.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkckdbaps.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkckdbaps.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpkckdbaps.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_odd\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkckdbaps.jl:15\n   [2] m"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    i = length(string)\n    while\
    \ i > 0\n        if is_palindrome(string[i:end])\n            return string *\
    \ reverse(string[1:i-1])\n        end\n        i -= 1\n    end\n    return \"\
    No solution.\"\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkzw7y30t.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpkzw7y30t.jl:21\n  Expression: candidate(\"\
    \") == \"\"\n   Evaluated: \"No solution.\" == \"\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkzw7y30t.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkzw7y30t.jl:20\ntest set: Error During Test\
    \ at /tmp/tmpkzw7y30t.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n   [1]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpkzw7y30t.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkzw7y30t.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkzw7y30t.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkzw7y30t.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpkzw7y30t.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkzw7y30t.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkzw7y30t.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkzw7y30t.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpkzw7y30t.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkzw7y30t.jl:24 [inlined]\n\
    \   [4] macro expansion\n   "
  timestamp: 1659822367
- exit_code: 0
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    longest_palindrome_suffix = 0\n\
    \    for i = 1:length(string)\n        is_palindrome = true\n        for j = 1:i\n\
    \            if string[j] != string[i - j + 1]\n                is_palindrome\
    \ = false\n                break\n            end\n        end\n        if is_palindrome\n\
    \            longest_palindrome_suffix = i\n        end\n    end\n    return string\
    \ * reverse(string[1:end - longest_palindrome_suffix])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822364
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    prefix,\
    \ suffix = is_palindrome(string)\n    if suffix == \"\"\n        return string\
    \ # string is already a palindrome\n    else\n        return string * reverse(string[1:prefix])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4ilxdi7e.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp4ilxdi7e.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4ilxdi7e.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ilxdi7e.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ilxdi7e.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4ilxdi7e.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4ilxdi7e.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ilxdi7e.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ilxdi7e.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4ilxdi7e.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4ilxdi7e.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ilxdi7e.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ilxdi7e.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4ilxdi7e.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4ilxdi7e.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find the longest palindromic\
    \ suffix of the string\n    postfix_len = 0\n    for i in 1:length(string)\n \
    \       if ispalindrome(string[i:end])\n            postfix_len = length(string)\
    \ - i + 1\n            break\n        end\n    end\n    # Create the final string\
    \ \n    return string * reverse(string[1:end-postfix_len+1])\nend\n# Example usage\n\
    println(make_palindrome(\"abc\"))\nprintln(make_palindrome(\"qwerty\"))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: ispalindrome not defined\nStacktrace:\n\
    \ [1] make_palindrome(string::String)\n   @ Main /tmp/tmpwhamjuv1.jl:10\n [2]\
    \ top-level scope\n   @ /tmp/tmpwhamjuv1.jl:19\nin expression starting at /tmp/tmpwhamjuv1.jl:19\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix_begins = find_longest_palindromic_suffix(string)\n\
    \    prefix = string[1:suffix_begins]\n    return string * \"\U0001F501\" * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbkduglrk.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpbkduglrk.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbkduglrk.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbkduglrk.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbkduglrk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpbkduglrk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbkduglrk.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbkduglrk.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbkduglrk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpbkduglrk.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbkduglrk.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbkduglrk.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbkduglrk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpbkduglrk.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbkduglrk.jl"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    longest_palindrome = find_longest_palindrome(string)\n\
    \    other_part = string[1:end-longest_palindrome]\n    return string * reverse(other_part)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpe9urd6kz.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpe9urd6kz.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpe9urd6kz.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9urd6kz.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9urd6kz.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpe9urd6kz.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpe9urd6kz.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9urd6kz.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9urd6kz.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpe9urd6kz.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpe9urd6kz.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9urd6kz.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9urd6kz.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpe9urd6kz.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpe9urd6kz.jl:7\n   [2] macro expansion\n     @"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find the longest postfix of\
    \ the string that is a palindrome.\n    # Start with the length of the string\
    \ and reduce it by 1 \n    # until we find the length of the maximum suffix.\n\
    \    let string_len = length(string)\n    let max_suffix_len = string_len\n  \
    \  while max_suffix_len > 0\n        let suffix = string[string_len - max_suffix_len:string_len]\n\
    \        if is_palindrome(suffix)\n            break\n        end\n        max_suffix_len\
    \ -= 1\n    end\n    # Check if the string is already a palindrome.\n    if max_suffix_len\
    \ == string_len\n        return string\n    end\n    # Make the palindrome with\
    \ the suffix and the reversed string prefix that comes before the suffix.\n  \
    \  let prefix = string[1:string_len - max_suffix_len]\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmpxksr8iy4.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxksr8iy4.jl:1\n\
    in expression starting at /tmp/tmpxksr8iy4.jl:1\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    d = Vector{Int}(length(string),\
    \ undef)\n    # maximum palindrome size for 0..i\n    for i = 1:length(string)\n\
    \        n = string[i]\n        best = 0\n        for j = 1:i-1\n            k\
    \ = i - j\n            if j == k \n                if string[j] == n && d[j] ==\
    \ 1 \n                    best = 1\n                end\n            elseif string[j]\
    \ == n && string[k] == n && d[j] == (k-j)\n                best = k-j\n      \
    \      end\n        end\n        d[i] = best\n    end\n    # find maximum palindrome\
    \ length\n    max_palindrome_length = 0\n    max_palindrome_position = 0\n   \
    \ for i = 1:length(string)\n        if d[i] > max_palindrome_length\n        \
    \    max_palindrome_length = d[i]\n            max_palindrome_position = i\n \
    \       end\n    end\n    return string[max_palindrome_position-max_palindrome_length+1:max_palindrome_position]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp9tptn_25.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9tptn_25.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching Vector{Int64}(::Int64,\
    \ ::UndefInitializer)\n  Closest candidates are:\n    Array{T, N}(!Matched::Nothing,\
    \ ::Any...) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:42\n\
    \    Array{T, N}(!Matched::Missing, ::Any...) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:43\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp9tptn_25.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9tptn_25.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9tptn_25.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9tptn_25.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching Vector{Int64}(::Int64,\
    \ ::UndefInitializer)\n  Closest candidates are:\n    Array{T, N}(!Matched::Nothing,\
    \ ::Any...) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:42\n\
    \    Array{T, N}(!Matched::Missing, ::Any...) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:43\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp9tptn_25.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9tptn_25.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9tptn_25.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9tptn_25.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  MethodError: no method matching Vector{Int64}(::Int64,\
    \ ::UndefInitializer)\n  Closest candidates are:\n    Array{T, N}(!Matched::Nothing,\
    \ ::Any...) where {T, N} at ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    string_length = length(string)\n\
    \    if string_length == 0\n        return \"\"\n    end\n    \n    if string_length\
    \ == 1\n        return string\n    end\n    \n    # base case 1: when string is\
    \ a palindrome\n    if is_palindrome(string)\n        return string\n    end\n\
    \    \n    # base case 2: when prefix = string\n    prefix = string\n    # append\
    \ the reverse of the prefix to the prefix\n    palindrome = prefix * string_length\
    \ * 2\n    return palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppsquyjcs.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmppsquyjcs.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmppsquyjcs.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsquyjcs.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsquyjcs.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppsquyjcs.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppsquyjcs.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsquyjcs.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsquyjcs.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppsquyjcs.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppsquyjcs.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsquyjcs.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsquyjcs.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find the longest postfix of\
    \ supplied string that is a palindrome.\n    # \"ababa\" =>  \"ababa\"\n    #\
    \ \"ababac\" => \"babacb\"\n    # \"abbabb\" => \"abbabb\"\n    # \"abba\" =>\
    \ \"abba\"\n    # \"ab\" => \"bab\"\n    # \"a\" => \"a\"\n    # \"\" => \"\"\n\
    \    max_palindrome_suffix = String()\n    for i in 0:length(string)\n       \
    \ println(\"make_palindrome(): TESTING i=$i\")\n        println(\"max_palindrome_suffix:\
    \ $max_palindrome_suffix\")\n        # get substring to test.\n        # i = 0\
    \ => string = ababb => is_palindrome(ababb) => false\n        # i = 1 => string\
    \ = babb => is_palindrome(babb) => false\n        # i = 2 => string = abb => is_palindrome(abb)\
    \ => false\n        # i = 3 => string = bb => is_palindrome(bb) => true\n    \
    \    # i = 4 => string = b => is_palindrome(b) => true\n        substring = string[end-i:end]\n\
    \        println(\"substring: $substring\")\n        if is_palindrome(substring)\n\
    \            max_palindrome_suffix = substring\n            println(\"max_palindrome_suffix:\
    \ $max_palindrome_suffix\")\n            println(\"(BREAK)\")\n            break\n\
    \        end\n    end\n    # - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    # \"ababa\" =>  \"ababa\"\
    \n    # \"ababac\" => \"ababac\"\n    # \"abbabb\" => \"abbabb\"\n    # \"abba\"\
    \ => \"abba\"\n    # \"ab\" => \"bab\"\n    # \"a\" => \"a\"\n    # \"\" => \"\
    \"\n    palindrome = string * reverse(string[1:end-length(max_palindrome_suffix)])\n\
    \    return palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwmsf0pmm.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmpwmsf0pmm.jl:50\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching String()\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwmsf0pmm.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwmsf0pmm.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwmsf0pmm.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpwmsf0pmm.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching String()\n  Closest\
    \ candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwmsf0pmm.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwmsf0pmm.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwmsf0pmm.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpwmsf0pmm.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  MethodError: no method matching String()\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \  "
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    for i\
    \ in 1:n-1\n        if ispalindrome(string[1:i])\n            return string *\
    \ reverse(string[1:i])\n        end\n    end\n    return string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8fn_i9sx.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp8fn_i9sx.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8fn_i9sx.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8fn_i9sx.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8fn_i9sx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8fn_i9sx.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8fn_i9sx.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8fn_i9sx.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8fn_i9sx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8fn_i9sx.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8fn_i9sx.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8fn_i9sx.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8fn_i9sx.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if is_palindrome(string) return\
    \ string\n    posfix_len = find_longest_palindrome_postfix(string)\n    return\
    \ string * reverse(string[1:posfix_len])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp34va4d66.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp34va4d66.jl:1\n\
    in expression starting at /tmp/tmp34va4d66.jl:1\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    palindrome = string[1:end:-1]\n\
    \    return string * palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxai6i74d.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpxai6i74d.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  ArgumentError: step cannot be zero\n\
    \  Stacktrace:\n    [1] steprange_last(start::Int64, step::Int64, stop::Int64)\n\
    \      @ Base ./range.jl:288\n    [2] StepRange\n      @ ./range.jl:275 [inlined]\n\
    \    [3] StepRange\n      @ ./range.jl:330 [inlined]\n    [4] _colon\n      @\
    \ ./range.jl:24 [inlined]\n    [5] Colon\n      @ ./range.jl:22 [inlined]\n  \
    \  [6] make_palindrome(string::String)\n      @ Main /tmp/tmpxai6i74d.jl:7\n \
    \   [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpxai6i74d.jl:15 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpxai6i74d.jl:14\ntest set:\
    \ Test Failed at /tmp/tmpxai6i74d.jl:17\n  Expression: candidate(\"xyz\") == \"\
    xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxai6i74d.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxai6i74d.jl:14\ntest set: Test Failed at /tmp/tmpxai6i74d.jl:19\n\
    \  Expression: candidate(\"jerry\") == \"jerryrrej\"\n   Evaluated: \"jerry\"\
    \ == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxai6i74d.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxai6i74d.jl:14\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     2      1      5\n"
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Preprocess step: add '#' characters\
    \ to split characters\n    string = \"#\" * join(string, \"#\")\n    # Now that\
    \ we have the processed string, \n    # we will try to find the longest palindromic\
    \ suffix for every prefix.\n    L = z_algorithm(string)\n    longest_palindromic_suffix\
    \ = maximum(L)\n    # What remains to be done is to find the prefix of the string\n\
    \    # that comes before the palindromic suffix and append a \n    # reversed\
    \ version of it. This will be the shortest palindrome\n    # that begins with\
    \ our string.\n    prefix = string[1:end-longest_palindromic_suffix]\n    return\
    \ prefix * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp7b8sugyo.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp7b8sugyo.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7b8sugyo.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7b8sugyo.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b8sugyo.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7b8sugyo.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: z_algorithm not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7b8sugyo.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7b8sugyo.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b8sugyo.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7b8sugyo.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7b8sugyo.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7b8sugyo.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b8sugyo.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7b8sugyo.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: z_algorithm not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7b8sugyo.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string = reverse(string)\n   \
    \ return string * revcomp(rev(string))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjwn4wi1j.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpjwn4wi1j.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: rev not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjwn4wi1j.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwn4wi1j.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjwn4wi1j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjwn4wi1j.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: rev not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjwn4wi1j.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwn4wi1j.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjwn4wi1j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjwn4wi1j.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: rev not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjwn4wi1j.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwn4wi1j.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjwn4wi1j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjwn4wi1j.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: rev not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjwn4wi1j.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    string = convert(String, string[end - longest_palindrome_suffix + 1:end])\
    \ * string\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpus90flxn.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpus90flxn.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpus90flxn.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpus90flxn.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpus90flxn.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpus90flxn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpus90flxn.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpus90flxn.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpus90flxn.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpus90flxn.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpus90flxn.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpus90flxn.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpus90flxn.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpus90flxn.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpus90flxn.jl:7\n "
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    suffix_length = find_palindrome_suffix_length(string)\n\
    \    prefix = string[1:end-suffix_length]\n    return prefix * reverse(prefix)\
    \ * string\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2whngz8c.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp2whngz8c.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2whngz8c.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2whngz8c.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2whngz8c.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2whngz8c.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindrome_suffix_length not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2whngz8c.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2whngz8c.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2whngz8c.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2whngz8c.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2whngz8c.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2whngz8c.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2whngz8c.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2whngz8c.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2whngz8c.jl:8\n   [2"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    lps =\
    \ find_lps(string)\n    string = string[1:n-lps]\n    return string * reverse(string)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpsev2e1g0.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpsev2e1g0.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_lps not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsev2e1g0.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsev2e1g0.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsev2e1g0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsev2e1g0.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_lps not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsev2e1g0.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsev2e1g0.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsev2e1g0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsev2e1g0.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_lps not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsev2e1g0.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsev2e1g0.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsev2e1g0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsev2e1g0.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_lps not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsev2e1g0.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Tes"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    prefix = string[1:end]\n    reverse_prefix\
    \ = reverse(prefix)\n    return string * reverse_prefix\nend\n \nfunc_exec(make_palindrome,\
    \ \"mamam\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: func_exec not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpxeoex9ye.jl:12\nin expression starting at /tmp/tmpxeoex9ye.jl:12\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix_len = 0\n    last_pos =\
    \ Int64(0)\n    prefix_len = 0\n    for i in reverse(1:length(string))\n     \
    \   if string[i] == string[i + 1]\n            suffix_len += 1\n            last_pos\
    \ = i\n        elseif i > 1 && string[i - 1] == string[i + 1]\n            suffix_len\
    \ += 2\n            last_pos = i - 1\n        end\n    end\n    prefix_len = length(string)\
    \ - last_pos - suffix_len\n    return string * reverse(string[1:prefix_len])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpm4gcb1ka.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpm4gcb1ka.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit\
    \ String at index [2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpm4gcb1ka.jl:11\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpm4gcb1ka.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpm4gcb1ka.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm4gcb1ka.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [4]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpm4gcb1ka.jl:11\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpm4gcb1ka.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpm4gcb1ka.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm4gcb1ka.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  BoundsError: attempt to access 3-codeunit String\
    \ at index [4]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpm4gcb1ka.jl:11\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    start, stop = find_palindrome_suffix(string)\n\
    \    string = string[1:start] .* string .* string[stop:end]\n    return string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp76m6b6fq.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp76m6b6fq.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp76m6b6fq.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76m6b6fq.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76m6b6fq.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp76m6b6fq.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp76m6b6fq.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76m6b6fq.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76m6b6fq.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp76m6b6fq.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp76m6b6fq.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76m6b6fq.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76m6b6fq.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp76m6b6fq.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp76m6b6fq.jl:7\n\
    \   [2] macro expansion\n     @ ~/."
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    if n ==\
    \ 0\n        return \"\"\n    end\n    for i in length(string):-1:1\n        if\
    \ is_palindrome(string[i:end])\n            return string * string[1:i-1]\n  \
    \      end\n    end\n    return string * string[1:end-1]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc7_0tu78.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpc7_0tu78.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc7_0tu78.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7_0tu78.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7_0tu78.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpc7_0tu78.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc7_0tu78.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7_0tu78.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7_0tu78.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpc7_0tu78.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc7_0tu78.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7_0tu78.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7_0tu78.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpc7_0tu78.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc7_0tu78.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglo"
  timestamp: 1659822368
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    return string * reverse(string)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht8g1zho.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpht8g1zho.jl:15\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\ntest set: Test Failed at /tmp/tmpht8g1zho.jl:16\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"\
    xyzyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpht8g1zho.jl:17\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\ntest set: Test Failed at /tmp/tmpht8g1zho.jl:18\n\
    \  Expression: candidate(\"jerry\") == \"jerryrrej\"\n   Evaluated: \"jerryyrrej\"\
    \ == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find the longest palindromic\
    \ postfix\n    last_index = -1 # start at -1 to simplify index calculations\n\
    \    for i in reverse(1:length(string))\n        if is_palindrome(string[i:])\n\
    \            last_index = i - 1\n            break\n        end\n    end\n   \
    \ # Now append a reverse of the last part to the end of the string\n    append!(string,\
    \ reverse(string[1:last_index]))\n    return string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaodaph3m.jl:10\nin expression\
    \ starting at /tmp/tmpaodaph3m.jl:10\n"
  stdout: ''
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    len_s = length(string)\n    if\
    \ is_palindrome(string) == true \n        return string\n    end\n    for i in\
    \ 1:len_s\n        if is_palindrome(string[1:len_s-i+1]) == true\n           \
    \ string = string * reverse(string[1:i])\n            return string\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnsqqftnu.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpnsqqftnu.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpnsqqftnu.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnsqqftnu.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnsqqftnu.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpnsqqftnu.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpnsqqftnu.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnsqqftnu.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnsqqftnu.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpnsqqftnu.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpnsqqftnu.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnsqqftnu.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnsqqftnu.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpnsqqftnu.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpnsqqftnu.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822368
- exit_code: -1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    str_len = length(string)\n\
    \    string_tuple = Tuple{String, Int}[]\n    for i in 1:str_len\n        for\
    \ j in 1:str_len-i+1\n            string_tuple = [string_tuple; (string[j:j+i-1],\
    \ j)]\n        end\n    end\n    \n    string_tuple = sort(string_tuple, by =\
    \ x -> x[2])\n    string_tuple = string_tuple[end-str_len+1:end]\n    \n    for\
    \ i in 1:str_len\n        for j in 1:str_len-i+1\n            if string_tuple[j][1]\
    \ == reverse(string_tuple[j][1])\n                non_palindrome_string = string[j+i-1:end]\n\
    \                return string*reverse(non_palindrome_string)\n            end\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp1n_bdbw2.jl:33\n  Test threw
    exception\n  Expression: candidate("") == ""\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    make_palindrome(string::String)\n     @ Main /tmp/tmp1n_bdbw2.jl:23\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1n_bdbw2.jl:33 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1n_bdbw2.jl:32\ntest set: Test
    Failed at /tmp/tmp1n_bdbw2.jl:34\n  Expression: candidate("x") == "x"\n   Evaluated:
    "xx" == "x"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n_bdbw2.jl:34 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n_bdbw2.jl:32\ntest set: Test Failed
    at /tmp/tmp1n_bdbw2.jl:35\n  Expression: candidate("xyz") == "xyzyx"\n   Evaluated:
    "xyzzyx" == "xyzyx"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n_bdbw2.jl:35 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n_bdbw2.jl:32\ntest set: Test Failed
    at /tmp/tmp1n_bdbw2.jl:36\n  Expression: candidate("xyx") == "xyx"\n'
  timestamp: 1659822371
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix = string[1:find_longest_palindrome_suffix(string)]\n\
    \    prefix = reverse(string[1:end-1])\n    return string * prefix * suffix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzveetjh8.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpzveetjh8.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzveetjh8.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzveetjh8.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzveetjh8.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpzveetjh8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzveetjh8.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzveetjh8.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzveetjh8.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpzveetjh8.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzveetjh8.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzveetjh8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzveetjh8.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpzveetjh8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzveetjh8.jl:7\n "
  timestamp: 1659822369
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    postfix_palindrome = longest_postfix_palindrome(string)\n\
    \    prefix = string[1:end-length(postfix_palindrome)]\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpk69ijg51.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpk69ijg51.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk69ijg51.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk69ijg51.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk69ijg51.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpk69ijg51.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_postfix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpk69ijg51.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk69ijg51.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk69ijg51.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpk69ijg51.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk69ijg51.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk69ijg51.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk69ijg51.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpk69ijg51.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_postfix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk69ijg51.jl:7\n   [2] macro expa"
  timestamp: 1659822369
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    # Find\
    \ the longest suffix that is a palindrome.\n    for i in 1:n-1\n        if string[i:n]\
    \ == reverse(string[i:n])\n            return string * reverse(string[1:i-1])\n\
    \        end\n    end\n    # Otherwise, the entire string is already a palindrome.\n\
    \    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppko5grht.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmppko5grht.jl:24\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppko5grht.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppko5grht.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppko5grht.jl:26\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppko5grht.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppko5grht.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822369
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix = longest_palindrome_suffix(string)\n\
    \    prefix = reverse(string[1:end-length(suffix)])\n    return string * prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2psnf5q7.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp2psnf5q7.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2psnf5q7.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2psnf5q7.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2psnf5q7.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2psnf5q7.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2psnf5q7.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2psnf5q7.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2psnf5q7.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2psnf5q7.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2psnf5q7.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2psnf5q7.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2psnf5q7.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2psnf5q7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2psnf5q7.jl:7\n   [2] macro expansio"
  timestamp: 1659822369
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \"\"\" Find the longest postfix\
    \ of supplied string that is a palindrome. \"\"\"\n    function reversed_prefix(string::String)::String\n\
    \        \"\"\" Reverse the prefix of the string up to the index and return as\
    \ string \"\"\"\n        return string[end-i+1:end]\n    end = length(string)\n\
    \    for i = 1:end\n        \"\"\" Compare prefix of string reversed with suffix\
    \ of string and if it matches - return prefix \"\"\"\n        if string[end-i+1:end]\
    \ == reversed_prefix(string)\n            return string*string[end-i+1:end]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76bwqzb4.jl:12\nin expression\
    \ starting at /tmp/tmp76bwqzb4.jl:12\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string_length = length(string)\n\
    \    if string_length == 0 || string_length == 1\n        return string\n    end\n\
    \    # find the longest suffix that is a palindrome\n    for i in 0:string_length-1\n\
    \        is_palindrome, index = check_palindrome(string, i)\n        if is_palindrome\n\
    \            return string[1:index] * reverse(string[index+1:string_length])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2_txy4x0.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp2_txy4x0.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: check_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2_txy4x0.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2_txy4x0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_txy4x0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2_txy4x0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: check_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2_txy4x0.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2_txy4x0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_txy4x0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2_txy4x0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: check_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2_txy4x0.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2_txy4x0.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_txy4x0.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  timestamp: 1659822369
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    prefix = string[1:length(string) - length(palindrome_suffix)]\n    return\
    \ string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp3c1hqhj_.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp3c1hqhj_.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3c1hqhj_.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3c1hqhj_.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3c1hqhj_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp3c1hqhj_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp3c1hqhj_.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3c1hqhj_.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3c1hqhj_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp3c1hqhj_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3c1hqhj_.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3c1hqhj_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3c1hqhj_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp3c1hqhj_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3c1hqhj_.jl:7\n   [2] macro expansio"
  timestamp: 1659822370
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    return string*reverse(string[1:length(string)])\n\
    end\n \n\"\"\" Check if supplied string is a palindrome.\n    Algorithm idea is\
    \ simple:\n    - Compare string with its reverse.\n                \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp6igr11y6.jl:10\nin expression starting at /tmp/tmp6igr11y6.jl:10\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if is_palindrome(string)\n   \
    \     return string\n    end\n    n = length(string)\n    # last_index - index\
    \ of the last index of palindromic string\n    last_index = n\n    for k in 1:n\n\
    \        if is_palindrome(string[k:last_index])\n            last_index = k -\
    \ 1\n        end\n    end\n    return string[last_index:n] * reverse(string[1:last_index])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2jtkl_yj.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp2jtkl_yj.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2jtkl_yj.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2jtkl_yj.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2jtkl_yj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp2jtkl_yj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2jtkl_yj.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2jtkl_yj.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2jtkl_yj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp2jtkl_yj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2jtkl_yj.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2jtkl_yj.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2jtkl_yj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp2jtkl_yj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2jtkl_yj.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822370
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    end_cursor = length(string)\n\
    \    while end_cursor > 0\n        if is_palindrome(string[1:end_cursor])\n  \
    \          return string * reverse(string[1:end_cursor-1])\n        end\n    \
    \    end_cursor -= 1\n    end\n    \"Can't make a palindrome out of a palindrome,\
    \ dummy!\"\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmph0x0z_4_.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmph0x0z_4_.jl:21\n  Expression: candidate(\"\
    \") == \"\"\n   Evaluated: \"Can't make a palindrome out of a palindrome, dummy!\"\
    \ == \"\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph0x0z_4_.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph0x0z_4_.jl:20\ntest set: Error\
    \ During Test at /tmp/tmph0x0z_4_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmph0x0z_4_.jl:9\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph0x0z_4_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph0x0z_4_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmph0x0z_4_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmph0x0z_4_.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph0x0z_4_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph0x0z_4_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmph0x0z_4_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmph0x0z_4_.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph0x0z_4_.jl:"
  timestamp: 1659822371
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    length = length(string)\n    if\
    \ length == 0\n        return \"\"\n    end\n    suffix = get_suffix(string)\n\
    \    prefix = get_prefix(string)\n    if length == length(suffix)\n        return\
    \ string\n    end\n    return prefix * reverse(suffix)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpm5q5jwwh.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpm5q5jwwh.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm5q5jwwh.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm5q5jwwh.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm5q5jwwh.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpm5q5jwwh.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm5q5jwwh.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm5q5jwwh.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm5q5jwwh.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpm5q5jwwh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm5q5jwwh.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm5q5jwwh.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm5q5jwwh.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpm5q5jwwh.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm5q5jwwh.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  timestamp: 1659822370
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    mid = Int(length(string)/2)\n\
    \    for i in mid:-1:1\n        if is_palindrome(string[1:i])\n            reverse_prefix\
    \ = reverse(string[i+1:end])\n            return string * reverse_prefix\n   \
    \     end\n    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprutywrsz.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmprutywrsz.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  InexactError: Int64(0.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmprutywrsz.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprutywrsz.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprutywrsz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmprutywrsz.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  InexactError: Int64(1.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmprutywrsz.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprutywrsz.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprutywrsz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmprutywrsz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  InexactError: Int64(1.5)\n  Stacktrace:\n \
    \  [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmprutywrsz.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprutywrsz.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprutywrsz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmprutywrsz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  InexactError: Int64(2.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] make_"
  timestamp: 1659822369
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    s = string\n    l = length(s)\n\
    \    i = 0\n    palindrome = true\n    while i < l\n        j = l - i\n      \
    \  k = 1\n        while j > i\n            if s[i] != s[j]\n                palindrome\
    \ = false\n                break\n            end\n            i += 1\n      \
    \      j -= 1\n            k += 1\n        end\n        if palindrome\n      \
    \      break\n        end\n        i = k\n    end\n    if palindrome\n       \
    \ res = string\n    else\n        res = string * reverse(string[1:i])\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpeys4wjwo.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpeys4wjwo.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpeys4wjwo.jl:15\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpeys4wjwo.jl:41 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpeys4wjwo.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpeys4wjwo.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpeys4wjwo.jl:15\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpeys4wjwo.jl:42 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpeys4wjwo.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpeys4wjwo.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  BoundsError: attempt to access 3-codeunit String\
    \ at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpeys4wjwo.jl:15\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1659822370
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix = suffix_palindrome(string)\n\
    \    prefix = reverse(string[1:end-length(suffix)])\n    return string * prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1qh0pkyh.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp1qh0pkyh.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: suffix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1qh0pkyh.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qh0pkyh.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qh0pkyh.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp1qh0pkyh.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1qh0pkyh.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qh0pkyh.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qh0pkyh.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp1qh0pkyh.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1qh0pkyh.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qh0pkyh.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qh0pkyh.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp1qh0pkyh.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1qh0pkyh.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/"
  timestamp: 1659822370
- exit_code: -1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    string_array\
    \ = collect(string)\n    rev_string_array = reverse(string_array)\n    i = 1\n\
    \    while i <= n && string_array[i] == rev_string_array[i]\n        i += 1\n\
    \    end\n    if i > n\n        return string\n    end\n    palindrome_part =\
    \ string[i:end]\n    suffix = make_palindrome(palindrome_part)\n    return string_array[1:i-1]*reverse(suffix)*string_array[i:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822372
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # do nothing if the string is\
    \ empty or it is a palindrome itself\n    if string == \"\" || is_palindrome(string)\n\
    \        return string\n    end\n    \n    # find the longest palindromic suffix\n\
    \    # could be as simple as reversing the string and finding the longest prefix\n\
    \    # but we'll keep it interesting\n    suffix_length = get_longest_palindromic_suffix_length(string)\n\
    \    prefix = string[1:end-suffix_length]\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpb5c7s0e_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpb5c7s0e_.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb5c7s0e_.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5c7s0e_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5c7s0e_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb5c7s0e_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb5c7s0e_.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5c7s0e_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5c7s0e_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb5c7s0e_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb5c7s0e_.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5c7s0e_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5c7s0e_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb5c7s0e_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb5c7s0e_.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1659822370
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # First we need to find a longest\
    \ palindromic postfix of the supplied string.\n    # We will do it using KMP algorithm,\
    \ using this implementation:\n    # https://github.com/JuliaCollections/KMP.jl/blob/master/src/KMP.jl\n\
    \    # We will use '$' as a sentinel symbol to simplify things.\n    sentinel\
    \ = '$'\n    string_with_sentinel = string * sentinel\n    # Compute prefix function.\n\
    \    prefix_function = compute_prefix_function(string_with_sentinel)\n    # Find\
    \ the longest palindromic postfix of the string.\n    postfix_length = prefix_function[end]\n\
    \    # Now we have to add to the end of the string the reverse of string prefix\n\
    \    # that comes before the palindromic suffix.\n    string_postfix = string[end-postfix_length+1:end]\n\
    \    string_prefix = string[1:end-postfix_length]\n    reverse_prefix = reverse(string_prefix)\n\
    \    return string_prefix * string_postfix\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmptui66m_n.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmptui66m_n.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: compute_prefix_function\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptui66m_n.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptui66m_n.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptui66m_n.jl:29\ntest set:\
    \ Error During Test at /tmp/tmptui66m_n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: compute_prefix_function not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmptui66m_n.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptui66m_n.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptui66m_n.jl:29\ntest set:\
    \ Error During Test at /tmp/tmptui66m_n.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: compute_prefix_function not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptui66m_n.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptui66m_n.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptui66m_n.jl:29\ntest set:\
    \ Error During Test at /tmp/tmptui66m_n.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: compute_prefix_function not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptui66m_n.jl:14\n   [2] macro expansion\n  "
  timestamp: 1659822371
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if is_palindrome(string)\n   \
    \     return string\n    end\n    string = reverse(string)\n    return string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp8gnbkm0g.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp8gnbkm0g.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8gnbkm0g.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gnbkm0g.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gnbkm0g.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp8gnbkm0g.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8gnbkm0g.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gnbkm0g.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gnbkm0g.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp8gnbkm0g.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8gnbkm0g.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gnbkm0g.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gnbkm0g.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp8gnbkm0g.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8gnbkm0g.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822370
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if is_palindrome(string)\n   \
    \     return string\n    end\n    center, length = find_max_palindrome(string)\n\
    \    if length != 0\n        return string[1:center]*(string[center:end])\n  \
    \  else\n        return string[end]*(string[1:end])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpuz1igbrz.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpuz1igbrz.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpuz1igbrz.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuz1igbrz.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuz1igbrz.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuz1igbrz.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpuz1igbrz.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuz1igbrz.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuz1igbrz.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuz1igbrz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpuz1igbrz.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuz1igbrz.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuz1igbrz.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuz1igbrz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpuz1igbrz.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822370
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    #find the longest palindromic\
    \ postfix of string\n    posfix_len = longest_palindromic_postfix(string)\n  \
    \  #return the string in reverse concatenated with string\n    return reverse(string[1:end\
    \ - posfix_len]) * string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp452r5m_z.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp452r5m_z.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp452r5m_z.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp452r5m_z.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp452r5m_z.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp452r5m_z.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp452r5m_z.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp452r5m_z.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp452r5m_z.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp452r5m_z.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp452r5m_z.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp452r5m_z.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp452r5m_z.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp452r5m_z.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp452r5m_z.jl:8\n   [2] macro "
  timestamp: 1659822370
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find the longest postfix that\
    \ is a palindrome.\n    r_str = string[end:-1:1]  # Reverse the string using extended\
    \ slice syntax.\n    index = findlast(r_str, string)\n    # If r_str starts with\
    \ string, we do not need to add any characters.\n    if index > 0\n        return\
    \ string * string[1:index]\n    else\n        return string * r_str\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpsbm2ab0v.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpsbm2ab0v.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching isless(::Int64,\
    \ ::UnitRange{Int64})\n  Closest candidates are:\n    isless(!Matched::AbstractVector,\
    \ ::AbstractVector) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2550\n\
    \    isless(::Real, !Matched::AbstractFloat) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::UnitRange{Int64})\n     @ Base\
    \ ./operators.jl:352\n   [2] >(x::UnitRange{Int64}, y::Int64)\n     @ Base ./operators.jl:378\n\
    \   [3] make_palindrome(string::String)\n     @ Main /tmp/tmpsbm2ab0v.jl:11\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsbm2ab0v.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsbm2ab0v.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpsbm2ab0v.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching isless(::Int64,\
    \ ::UnitRange{Int64})\n  Closest candidates are:\n    isless(!Matched::AbstractVector,\
    \ ::AbstractVector) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2550\n\
    \    isless(::Real, !Matched::AbstractFloat) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::UnitRange{Int64})\n     @ Base\
    \ ./operators.jl:352\n   [2] >(x::UnitRange{Int64}, y::Int64)\n     @ Base ./operators.jl:378\n\
    \   [3] make_palindrome(string::String)\n     @ Main /tmp/tmpsbm2ab0v.jl:11\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsbm2ab0v.jl:23 [inlined]\n\
    \   [6] macro e"
  timestamp: 1659822372
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    prefix_palindrome = string[minimum(find_longest_palindrome_suffix(string)):]\n\
    \    return string * reverse(string[1:minimum(find_longest_palindrome_suffix(string))])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"minimum(find_longest_palindrome_suffix(string)):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp185nbe_l.jl:7\n\
    in expression starting at /tmp/tmp185nbe_l.jl:7\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string = reverse(string)\n   \
    \ return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8ql_3k.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpgm8ql_3k.jl:17\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"zyx\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgm8ql_3k.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgm8ql_3k.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgm8ql_3k.jl:19\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"yrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgm8ql_3k.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgm8ql_3k.jl:14\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822371
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # find the longest postfix that\
    \ is a palindrome\n    for n in reverse(1:length(string))\n        # check if\
    \ the substring of length n is a palindrome\n        if string[1:n] == reverse(string[n:end])\n\
    \            # if so, append the prefix reversed to the end\n            return\
    \ string * reverse(string[1:n-1])\n        end\n    end\n    return \"\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkktm0sgc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpkktm0sgc.jl:24\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkktm0sgc.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkktm0sgc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkktm0sgc.jl:25\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkktm0sgc.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkktm0sgc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkktm0sgc.jl:26\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkktm0sgc.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkktm0sgc.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822371
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    is_palindrome = get_palindrome_checker(string)\n\
    \    suffix = find_longest_palindromic_suffix(string, is_palindrome)\n    prefix\
    \ = reverse(string[1:end - length(suffix)])\n    return string * prefix\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpehbtq5k0.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpehbtq5k0.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: get_palindrome_checker\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpehbtq5k0.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpehbtq5k0.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpehbtq5k0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpehbtq5k0.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: get_palindrome_checker not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpehbtq5k0.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpehbtq5k0.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpehbtq5k0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpehbtq5k0.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: get_palindrome_checker not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpehbtq5k0.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpehbtq5k0.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpehbtq5k0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpehbtq5k0.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: get_palindrome_checker not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpehbtq5k0.jl:7\n\
    \   [2] macro expansion\n     @ ~/."
  timestamp: 1659822372
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    p = z_algorithm(string)\n\
    \    z_last = p[end]\n    if n == z_last\n        # string is already a palindrome\n\
    \        return string\n    elseif n - z_last > 1\n        return string * string[n\
    \ - z_last:-1] \n    else\n        return string * string[1:end-1] \n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpf3x992je.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpf3x992je.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf3x992je.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3x992je.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3x992je.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf3x992je.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: z_algorithm not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf3x992je.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3x992je.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3x992je.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf3x992je.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf3x992je.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3x992je.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3x992je.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf3x992je.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: z_algorithm not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf3x992je.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/"
  timestamp: 1659822373
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    for i\
    \ in n:-1:1\n        if is_palindrome(string[1:i])\n            return string\
    \ * string[i:n+1]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvjiwxf7_.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpvjiwxf7_.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvjiwxf7_.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvjiwxf7_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvjiwxf7_.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpvjiwxf7_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvjiwxf7_.jl:9\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvjiwxf7_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvjiwxf7_.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpvjiwxf7_.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvjiwxf7_.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvjiwxf7_.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/"
  timestamp: 1659822374
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    return string * reverse(string)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht8g1zho.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpht8g1zho.jl:15\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\ntest set: Test Failed at /tmp/tmpht8g1zho.jl:16\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"\
    xyzyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpht8g1zho.jl:17\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\ntest set: Test Failed at /tmp/tmpht8g1zho.jl:18\n\
    \  Expression: candidate(\"jerry\") == \"jerryrrej\"\n   Evaluated: \"jerryyrrej\"\
    \ == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # find the longest postfix that\
    \ is a palindrome\n    suffix_len = 0\n    for i in 1:length(string)\n       \
    \ substring = string[(end-i+1):end]\n        if is_palindrome(substring)\n   \
    \         suffix_len = i\n            break\n        end\n    end\n    prefix\
    \ = string[1:(end-suffix_len)]\n    reversed_prefix = reverse(prefix)\n    return\
    \ string * reversed_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplgpebcme.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmplgpebcme.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmplgpebcme.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgpebcme.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplgpebcme.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplgpebcme.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmplgpebcme.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgpebcme.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplgpebcme.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplgpebcme.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmplgpebcme.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgpebcme.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplgpebcme.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplgpebcme.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmplgpebcme.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglo"
  timestamp: 1659822373
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string = strip(string)\n    pal_end\
    \ = longest_palindrome_suffix(string)\n    if length(pal_end) == length(string)\n\
    \        return string\n    else\n        return string * reverse(string[1:length(string)\
    \ - length(pal_end)])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbh24hcia.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpbh24hcia.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbh24hcia.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbh24hcia.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbh24hcia.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbh24hcia.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbh24hcia.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbh24hcia.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbh24hcia.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbh24hcia.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbh24hcia.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbh24hcia.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbh24hcia.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbh24hcia.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbh24hcia.jl:8\n   [2] macro expansio"
  timestamp: 1659822373
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find the longest postfix of\
    \ supplied string that is a palindrome\n    string_len = length(string)\n    for\
    \ i in range(string_len, 0, -1)\n        substr = string[(i-1):end]\n        if\
    \ is_palindrome(substr)\n            return string * reverse(string[1:(i-1)])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxfbdm32p.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxfbdm32p.jl:1\n\
    in expression starting at /tmp/tmpxfbdm32p.jl:1\n"
  stdout: ''
  timestamp: 1659822371
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \"\"\"\n    >>> make_palindrome(\"\
    \")\n    ''\n    >>> make_palindrome(\"abcd\")\n    'dcbabcd'\n    >>> make_palindrome(\"\
    racecar\")\n    'racecar'\n    >>> make_palindrome(\"banana\")\n    'ananab'\n\
    \    >>> make_palindrome(\"abcdcbae\")\n    'abcdcbae'\n    >>> make_palindrome(\"\
    abcdcbae\")\n    'abcdcbae'\n    >>> make_palindrome(\"cbcbd\")\n    'bcbcbd'\n\
    \    >>> make_palindrome(\"cbcbdc\")\n    'cbcbdc'\n    >>> make_palindrome(\"\
    aacecaaa\")\n    'aaacecaaa'\n    >>> make_palindrome(\"abdbca\")\n    'abcbad'\n\
    \    >>> make_palindrome(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5oqeuzo.jl:1\nin expression starting at /tmp/tmpr5oqeuzo.jl:1\n"
  stdout: ''
  timestamp: 1659822371
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    string_prefix = string[1:end-length(longest_palindrome_suffix)]\n    string_prefix_reversed\
    \ = reverse(string_prefix)\n    return string * string_prefix_reversed\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphjgtjzrs.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmphjgtjzrs.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphjgtjzrs.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphjgtjzrs.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphjgtjzrs.jl:16\ntest set:\
    \ Error During Test at /tmp/tmphjgtjzrs.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphjgtjzrs.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphjgtjzrs.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphjgtjzrs.jl:16\ntest set:\
    \ Error During Test at /tmp/tmphjgtjzrs.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphjgtjzrs.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphjgtjzrs.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphjgtjzrs.jl:16\ntest set:\
    \ Error During Test at /tmp/tmphjgtjzrs.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphjgtjzrs.jl:7\n "
  timestamp: 1659822373
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string = string::String\n    #\
    \ iterate over the string and find the longest palindromic suffix\n    for index\
    \ = length(string):-1:1\n        is_palindrome = true\n        for next_index\
    \ = index:-1:1\n            if string[next_index] != string[index + (index - next_index)]\n\
    \                is_palindrome = false\n                break\n            end\n\
    \        end\n        if is_palindrome\n            break\n        end\n    end\n\
    \    # now we have a suffix that is palindromic; we need to make the first half\
    \ to be palindromic, too\n    reverse_prefix = reverse(string[1:index])\n    return\
    \ string * reverse_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpy6bi6ydt.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpy6bi6ydt.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: index not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpy6bi6ydt.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy6bi6ydt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy6bi6ydt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpy6bi6ydt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: index not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpy6bi6ydt.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy6bi6ydt.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy6bi6ydt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpy6bi6ydt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [4]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpy6bi6ydt.jl:12\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpy6bi6ydt.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpy6bi6ydt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpy6bi6ydt.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  BoundsError: att"
  timestamp: 1659822373
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find the longest palindromic\
    \ suffix.\n    for i in length(string):length(string)-1:-1:0\n        if is_palindrome(string[i:end])\n\
    \            longest_suffix = string[i:end]\n            break\n        end\n\
    \    end\n    # We need a prefix without a palindromic suffix.\n    prefix = string[1:i-1]\n\
    \    # Reverse it.\n    rev_prefix = reverse(prefix)\n    # Return concatenation\
    \ of reversed prefix, original string and palindromic suffix.\n    return rev_prefix\
    \ * string * longest_suffix\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpavwuwyv4.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpavwuwyv4.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching (::Colon)(::StepRange{Int64,\
    \ Int64}, ::Int64)\n  Closest candidates are:\n    (::Colon)(::T, ::Any, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:40\n    (::Colon)(!Matched::T,\
    \ ::Real, !Matched::T) where T<:AbstractFloat at ~/.conda/envs/polyglot/share/julia/base/range.jl:18\n\
    \    (::Colon)(!Matched::T, ::T) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/range.jl:5\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpavwuwyv4.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpavwuwyv4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavwuwyv4.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpavwuwyv4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  ArgumentError: step cannot be zero\n  Stacktrace:\n\
    \    [1] steprange_last(start::Int64, step::Int64, stop::Int64)\n      @ Base\
    \ ./range.jl:288\n    [2] StepRange\n      @ ./range.jl:275 [inlined]\n    [3]\
    \ StepRange\n      @ ./range.jl:330 [inlined]\n    [4] _colon\n      @ ./range.jl:24\
    \ [inlined]\n    [5] Colon\n      @ ./range.jl:22 [inlined]\n    [6] make_palindrome(string::String)\n\
    \      @ Main /tmp/tmpavwuwyv4.jl:8\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpavwuwyv4.jl:27 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpavwuwyv4.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpavwuwyv4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  MethodError: no method matching (::Colon)(::StepRange{Int64,\
    \ Int64}, ::Int64)\n  Closest "
  timestamp: 1659822374
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    is_palindrome(s::String) = findfirst(x\
    \ -> x!=reverse(x), partitions(s))==nothing\n    let \n        s = string\n  \
    \      if is_palindrome(s)\n            return s\n        end\n        palindromic_suffix_idx\
    \ = maximum([idx for idx in 1:length(s) if is_palindrome(s[idx:end])])\n     \
    \   prefix = s[1:palindromic_suffix_idx-1]\n        postfix = s[palindromic_suffix_idx:end]\n\
    \        return postfix*reverse(prefix)\n    end\nend\nprintln(make_palindrome(\"\
    abcd\"))\nprintln(make_palindrome(\"aabaa\"))\nprintln(make_palindrome(\"abac\"\
    ))\nprintln(make_palindrome(\"abacaba\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: partitions not defined\nStacktrace:\n\
    \ [1] (::var\"#is_palindrome#3\")(s::String)\n   @ Main /tmp/tmpnlup9bii.jl:7\n\
    \ [2] make_palindrome(string::String)\n   @ Main /tmp/tmpnlup9bii.jl:10\n [3]\
    \ top-level scope\n   @ /tmp/tmpnlup9bii.jl:19\nin expression starting at /tmp/tmpnlup9bii.jl:19\n"
  stdout: ''
  timestamp: 1659822372
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    len_string = length(string)\n\
    \    if len_string <= 1\n        return string\n    end\n    longest_suffix =\
    \ lps(string)\n    string * reverse(string[1:end-longest_suffix])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8jbeo2d0.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp8jbeo2d0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: lps not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8jbeo2d0.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8jbeo2d0.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8jbeo2d0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8jbeo2d0.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: lps not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8jbeo2d0.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8jbeo2d0.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8jbeo2d0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8jbeo2d0.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: lps not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8jbeo2d0.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8jbeo2d0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8jbeo2d0.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  timestamp: 1659822373
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    postfix = lps(string)\n    return\
    \ string * reverse(string[1:end-length(postfix)])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwudgzw2h.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpwudgzw2h.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: lps not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwudgzw2h.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwudgzw2h.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwudgzw2h.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwudgzw2h.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: lps not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwudgzw2h.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwudgzw2h.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwudgzw2h.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwudgzw2h.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: lps not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwudgzw2h.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwudgzw2h.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwudgzw2h.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwudgzw2h.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: lps not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwudgzw2h.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822373
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \" This function finds the longest\
    \ palindromic suffix of a supplied string. \"\n    n = length(string)\n    A =\
    \ zeros(n, n)\n    for i = 1:n\n        A[i, i] = 1\n    end\n    max_len = 1\n\
    \    max_ind = 1\n    for k = 2:n\n        for i = 1:n-k+1\n            j = i+k-1\n\
    \            if k == 2\n                A[i, j] = string[i] == string[j]\n   \
    \         else\n                A[i, j] = string[i] == string[j] && A[i+1, j-1]\n\
    \            end\n            if A[i, j] && k > max_len\n                max_len\
    \ = k\n                max_ind = i\n            end\n        end\n    end\n  \
    \  if max_len > 1\n        postfix = string[max_ind:max_ind+max_len-1]\n    else\n\
    \        postfix = \"\"\n    end\n    return string * reverse(string[1:end-length(postfix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpje5jo9ig.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpje5jo9ig.jl:42\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpje5jo9ig.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpje5jo9ig.jl:40\ntest set: Error During Test\
    \ at /tmp/tmpje5jo9ig.jl:43\n  Test threw exception\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n  TypeError: non-boolean (Float64) used in boolean context\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpje5jo9ig.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpje5jo9ig.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpje5jo9ig.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpje5jo9ig.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  TypeError: non-boolean (Float64) used in boolean\
    \ context\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpje5jo9ig.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpje5jo9ig.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpje5jo9ig.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpje5jo9ig.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  TypeError: non-boolean (Float64) used\
    \ in boolean context\n  Stacktrace:\n   [1] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpje5jo9ig.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tm"
  timestamp: 1659822375
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    end_index = is_palindrome(string,\
    \ 1, length(string))\n    if end_index == length(string)\n        return string\n\
    \    end\n    prefix = string[1:end_index]\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp63hbhewg.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp63hbhewg.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp63hbhewg.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63hbhewg.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63hbhewg.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp63hbhewg.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp63hbhewg.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63hbhewg.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63hbhewg.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp63hbhewg.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp63hbhewg.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63hbhewg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63hbhewg.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp63hbhewg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp63hbhewg.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822374
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Step 1: find the longest postfix\
    \ that is a palindrome\n    len = length(string)\n    for i in reverse(1:len)\n\
    \        if is_palindrome(string[i:end])\n            break\n        end\n   \
    \ end\n    # Step 2: form palindrome \n    return string * reverse(string[1:i-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxlmkla2i.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpxlmkla2i.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxlmkla2i.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxlmkla2i.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxlmkla2i.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxlmkla2i.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxlmkla2i.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxlmkla2i.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxlmkla2i.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxlmkla2i.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxlmkla2i.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxlmkla2i.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxlmkla2i.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxlmkla2i.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxlmkla2i.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/"
  timestamp: 1659822374
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix = longest_palindrome_suffix(string)\n\
    \    prefix = string[1:end-length(suffix)]\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1qnv5tg7.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp1qnv5tg7.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1qnv5tg7.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qnv5tg7.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qnv5tg7.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp1qnv5tg7.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1qnv5tg7.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qnv5tg7.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qnv5tg7.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp1qnv5tg7.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1qnv5tg7.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qnv5tg7.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qnv5tg7.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp1qnv5tg7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1qnv5tg7.jl:7\n   [2] macro expansio"
  timestamp: 1659822374
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if ispalindrome(string) return\
    \ string\n    length = length(string)\n    lps = longest_palindrome_suffix(string)\n\
    \    prefix = string[1:length-lps]\n    return prefix * reverse(prefix) * string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf46wn64q.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf46wn64q.jl:1\n\
    in expression starting at /tmp/tmpf46wn64q.jl:1\n"
  stdout: ''
  timestamp: 1659822372
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Create a reverse string\n  \
    \  rev_string = reverse(string)\n    # Get length of the string\n    len_string\
    \ = length(string)\n    # Create string containing all zeros\n    zeros_string\
    \ = zeros(Int8, len_string, len_string)\n    # Find lengths of longest common\
    \ prefix/suffix between string and its reverse\n    lcp = lcs(string, rev_string)\n\
    \    for i in 1:len_string\n        for j in 1:len_string\n            if length(lcp[i,j])\
    \ >= j - i + 1\n                zeros_string[i,j] = 1\n            end\n     \
    \   end\n    end\n    # Select the longest such suffix (i.e. suffix that is a\
    \ palindrome)\n    # and append to it reverse of prefix that comes before it\n\
    \    long_suff = 0\n    for i in 1:len_string\n        for j in 1:len_string\n\
    \            if zeros_string[i,j] == 1\n                long_suff = j\n      \
    \      end\n        end\n    end\n    return string * reverse(string[1:long_suff])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphk2k5sm4.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmphk2k5sm4.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: lcs not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphk2k5sm4.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphk2k5sm4.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphk2k5sm4.jl:38\ntest set:\
    \ Error During Test at /tmp/tmphk2k5sm4.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: lcs not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphk2k5sm4.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphk2k5sm4.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphk2k5sm4.jl:38\ntest set:\
    \ Error During Test at /tmp/tmphk2k5sm4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: lcs not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphk2k5sm4.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphk2k5sm4.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphk2k5sm4.jl:38\ntest set:\
    \ Error During Test at /tmp/tmphk2k5sm4.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: lcs not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphk2k5sm4.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inline"
  timestamp: 1659822374
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    return string * reverse(string[1:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe6ighab3.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpe6ighab3.jl:15\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe6ighab3.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe6ighab3.jl:13\ntest set: Test Failed at /tmp/tmpe6ighab3.jl:16\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"\
    xyzyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6ighab3.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6ighab3.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpe6ighab3.jl:17\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe6ighab3.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe6ighab3.jl:13\ntest set: Test Failed at /tmp/tmpe6ighab3.jl:18\n\
    \  Expression: candidate(\"jerry\") == \"jerryrrej\"\n   Evaluated: \"jerryyrrej\"\
    \ == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6ighab3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6ighab3.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822373
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    longest_suffix = find_suffix_palindrome(string)\n\
    \    reverse(string[1:end-length(longest_suffix)])*string\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnlv95hyd.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpnlv95hyd.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_suffix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnlv95hyd.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnlv95hyd.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnlv95hyd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpnlv95hyd.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpnlv95hyd.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnlv95hyd.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnlv95hyd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpnlv95hyd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_suffix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnlv95hyd.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnlv95hyd.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnlv95hyd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpnlv95hyd.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpnlv95hyd.jl:7\n\
    \   [2] macro expansion\n     @ ~/."
  timestamp: 1659822374
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    length = length(string)\n    #\
    \ Find the longest palindromic postfix:\n    max_postfix_len = 0\n    for i in\
    \ 1:length\n        j = length - i + 1\n        if string[1:i] == string[j:length]\n\
    \            max_postfix_len = i - 1\n            break\n        end\n    end\n\
    \    # Append to the end of the string reverse of a prefix that comes before the\
    \ palindromic suffix:\n    return string * string[length - max_postfix_len:length]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2oug8c3c.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp2oug8c3c.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2oug8c3c.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2oug8c3c.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2oug8c3c.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp2oug8c3c.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2oug8c3c.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2oug8c3c.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2oug8c3c.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp2oug8c3c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2oug8c3c.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2oug8c3c.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2oug8c3c.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp2oug8c3c.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2oug8c3c.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  timestamp: 1659822375
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \"\"\" Find the longest palindromic\
    \ suffix.\n        Recursive calls from the end of the string.\n        Keep track\
    \ of the longest palindromic suffix so far and if it is already\n        as long\
    \ as the string, return immediately.\n    \"\"\"\n    function longest_suffix_palindrome(start_index::Int,\
    \ longest_palindrome_so_far::Int)::Int\n        if start_index == 0\n        \
    \    return 0\n        end\n        end_index = start_index + longest_palindrome_so_far\n\
    \        if end_index == length(string)\n            return longest_palindrome_so_far\n\
    \        end\n        if string[start_index] == string[end_index]\n          \
    \  length_of_possible_palindrome = end_index - start_index + 1\n            if\
    \ length_of_possible_palindrome > longest_palindrome_so_far\n                return\
    \ longest_suffix_palindrome(start_index - 1, length_of_possible_palindrome)\n\
    \            end\n        end\n        return longest_suffix_palindrome(start_index\
    \ - 1, longest_palindrome_so_far)\n    end\n    suffix_palindrome_length = longest_suffix_palindrome(length(string)\
    \ - 1, 0)\n    return string * reverse(string[1:length(string) - suffix_palindrome_length])\n\
    end\nmake_palindrome(\"abc\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmphdmkl8ku.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmphdmkl8ku.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [-1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] (::var\"#longest_suffix_palindrome#1\"\
    {String})(start_index::Int64, longest_palindrome_so_far::Int64)\n     @ Main /tmp/tmphdmkl8ku.jl:20\n\
    \   [5] make_palindrome(string::String)\n     @ Main /tmp/tmphdmkl8ku.jl:28\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmphdmkl8ku.jl:37 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmphdmkl8ku.jl:36\ntest set:\
    \ Test Failed at /tmp/tmphdmkl8ku.jl:38\n  Expression: candidate(\"x\") == \"\
    x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdmkl8ku.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdmkl8ku.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphdmkl8ku.jl:39\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphdmkl8ku.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphdmkl8ku.jl:36\ntest set: Test Failed at /tmp/tmphdmkl8ku.jl:40\n\
    \  Expression: candidate(\"xyx\") == \"xyx\"\n   Evaluated: \"xyxxyx\" == \"xyx\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro ex"
  timestamp: 1659822375
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    palindrome_suffix = find_palindrome_suffix(string)\n\
    \    original_prefix = string[1:length(string) - length(palindrome_suffix)]\n\
    \    reverse_prefix = reverse(original_prefix)\n    return string * reverse_prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpng5875ks.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpng5875ks.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpng5875ks.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpng5875ks.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpng5875ks.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpng5875ks.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpng5875ks.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpng5875ks.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpng5875ks.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpng5875ks.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpng5875ks.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpng5875ks.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpng5875ks.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpng5875ks.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpng5875ks.jl:7\n\
    \   [2] macro expansion\n     @ ~/."
  timestamp: 1659822376
- exit_code: -1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    string_chars = collect(string)\n\
    \    result = []\n    for i = length(string_chars):-1:1\n        is_palindrome\
    \ = true\n        for j = 1:length(string_chars)\n            if i + j > length(string_chars)\
    \ || string_chars[i + j] != string_chars[j]\n                is_palindrome = false\n\
    \                break\n            end\n        end\n        if is_palindrome\n\
    \            append!(result, string_chars[1:i-1])\n            break\n       \
    \ end\n    end\n    return string * reverse(result)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpo9zkjiyi.jl:30\n  Test threw
    exception\n  Expression: candidate("") == ""\n  MethodError: no method matching
    *(::String, ::Vector{Any})\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:183\n    ...\n  Stacktrace:\n   [1]
    make_palindrome(string::String)\n     @ Main /tmp/tmpo9zkjiyi.jl:23\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo9zkjiyi.jl:30 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo9zkjiyi.jl:29\n'''
  timestamp: 1659822377
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string_size = length(string)\n\
    \    # check if string is a palindrome\n    is_palindrome = true\n    for i =\
    \ 1:length(string)\n        if string[i] != string[string_size - i + 1]\n    \
    \        is_palindrome = false\n            break\n        end\n    end\n    if\
    \ is_palindrome return string end\n    # if not, find the longest palindromic\
    \ suffix \n    reverse_string = reverse(string)\n    lcs_len, _ = longest_common_subsequence(string,\
    \ reverse_string)\n    # reverse string prefix that comes before the palindromic\
    \ suffix and append to the end of the string\n    return string * reverse(string[1:string_size\
    \ - lcs_len + 1])\nend\n# test\nmake_palindrome(\"ABC\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: longest_common_subsequence not defined\n\
    Stacktrace:\n [1] make_palindrome(string::String)\n   @ Main /tmp/tmplcriww9m.jl:19\n\
    \ [2] top-level scope\n   @ /tmp/tmplcriww9m.jl:24\nin expression starting at\
    \ /tmp/tmplcriww9m.jl:24\n"
  stdout: ''
  timestamp: 1659822375
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    start, end = 1, length(string)\n\
    \    for i in 1:length(string)\n        if (string[end-i+1:end] == string[1:i])\
    \ && (end-i > start)\n            start = i\n        endif\n    endfor\n    return\
    \ string*reverse(string[1:start-1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7aom0102.jl:7\nin expression starting at /tmp/tmp7aom0102.jl:7\n"
  stdout: ''
  timestamp: 1659822374
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    i = length(string)\n    for j\
    \ in 1:length(string)\n        if string[j] == string[i]\n            i -= 1\n\
    \        else\n            i = length(string)\n        end\n    end\n    if i\
    \ == 0\n        return string\n    end\n    prefix = string[1:i]\n    suffix =\
    \ string[i:end]\n    return suffix * reverse(prefix) * suffix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg8kpkusv.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpg8kpkusv.jl:29\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"yzyxyz\" == \"xyzyx\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg8kpkusv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg8kpkusv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg8kpkusv.jl:31\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"ryrrejry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg8kpkusv.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpg8kpkusv.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822375
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    length = length(string)\n\
    \    i = length\n    while i > 0\n        prefix = string[1:i]\n        if is_palindrome(prefix)\n\
    \            return string * reverse(string[i+1:length])\n        end\n      \
    \  i -= 1\n    end\n    \n    return string * reverse(string)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcod35_ts.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpcod35_ts.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcod35_ts.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcod35_ts.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcod35_ts.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpcod35_ts.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcod35_ts.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcod35_ts.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcod35_ts.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpcod35_ts.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcod35_ts.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcod35_ts.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcod35_ts.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpcod35_ts.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcod35_ts.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  timestamp: 1659822376
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    # find the longest postfix\
    \ that is a palindrome\n    postfix = biggest_palindrome_postfix(string)\n   \
    \ \n    # reverse the prefix that comes before the palindromic suffix\n    prefix\
    \ = reverse(string[1:end-length(postfix)])\n    \n    # return the palindrome\n\
    \    return string * prefix\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpp8hlhmv8.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpp8hlhmv8.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: biggest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp8hlhmv8.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8hlhmv8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp8hlhmv8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpp8hlhmv8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: biggest_palindrome_postfix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpp8hlhmv8.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8hlhmv8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp8hlhmv8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpp8hlhmv8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: biggest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp8hlhmv8.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8hlhmv8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp8hlhmv8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpp8hlhmv8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: biggest_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp8hlhmv8.jl:9\n   [2] macro expa"
  timestamp: 1659822376
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if ispalindrome(string)\n    \
    \    return string\n    end\n    string_length = length(string)\n    pos = argmax(findall(r\
    \ -> ispalindrome(string[r:end]), 1:string_length))\n    return string * reverse(string[1:pos-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcg4pnn8v.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpcg4pnn8v.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcg4pnn8v.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcg4pnn8v.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcg4pnn8v.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpcg4pnn8v.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcg4pnn8v.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcg4pnn8v.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcg4pnn8v.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpcg4pnn8v.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcg4pnn8v.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcg4pnn8v.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcg4pnn8v.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpcg4pnn8v.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcg4pnn8v.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v"
  timestamp: 1659822376
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if(string == reverse(string))\n\
    \        return string\n    end\n    postfix = longest_postfix_palindrome(string)\n\
    \    prefix = string[1:end - length(postfix)]\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp9m94l7zi.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp9m94l7zi.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp9m94l7zi.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9m94l7zi.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9m94l7zi.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9m94l7zi.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp9m94l7zi.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9m94l7zi.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9m94l7zi.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  timestamp: 1659822376
- exit_code: -1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    string\
    \ = string * \"*\" * reverse(string)\n    string = vcat(string, \"*\")\n    pi\
    \ = Array{Int}(1:n + 1)\n    pi[1] = 0\n    for i = 2:n + 1\n        pi[i] = pi[i\
    \ - 1]\n        while pi[i] > 0 && string[pi[i] + 1] != string[i]\n          \
    \  pi[i] = pi[pi[i]]\n        end\n        if string[pi[i] + 1] == string[i]\n\
    \            pi[i] += 1\n        end\n    end\n    return reverse(string[pi[n\
    \ + 1] + 2:n + 1]) * string[1:n]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpwybwl8ry.jl:28\n  Test threw
    exception\n  Expression: candidate("") == ""\n  MethodError: no method matching
    *(::Vector{String}, ::Vector{String})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.LQPackedQ) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:290\n    ...\n  Stacktrace:\n   [1]
    make_palindrome(string::String)\n     @ Main /tmp/tmpwybwl8ry.jl:21\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwybwl8ry.jl:28 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwybwl8ry.jl:27\n'''
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \"\"\" Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    \"\"\"\n    if is_palindrome(string)\n        return string\n \
    \   end\n    n = length(string)\n    for i in range(n-1, -1, -1)\n        if is_palindrome(string[i+1:n])\n\
    \            return string * string[1:i+1]\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpe2_6mctt.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpe2_6mctt.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpe2_6mctt.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe2_6mctt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe2_6mctt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpe2_6mctt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpe2_6mctt.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe2_6mctt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe2_6mctt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpe2_6mctt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpe2_6mctt.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe2_6mctt.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe2_6mctt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpe2_6mctt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpe2_6mctt.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1659822377
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n  # Method 1: Find the max palindrome\
    \ suffix \n  # (for example: \"abcd\" -> reverse(\"abcd\") = \"dcba\" -> \"abcdcba\"\
    )\n  # (for example: \"abd\" -> reverse(\"abd\") = \"dba\" -> \"abddba\")\n  #\
    \ (for example: \"abcdef\" -> reverse(\"abcdef\") = \"fedcba\" -> \"abcdefedcba\"\
    )\n  N = length(string) \n  i = N \n  j = N \n  idx = N + 1\n  dp = zeros(Int,\
    \ N, N)\n  # Check for every length of string\n  for len in 2:N \n    for i in\
    \ 1:N \n      j = i + len - 1\n      if j > N \n        continue\n      end \n\
    \      # Check if length of string is even or odd\n      if len % 2 == 0  \n \
    \       dp[i, j] = (string[i] == string[j]) && (dp[i + 1, j - 1] > 0)\n      else\
    \ \n        dp[i, j] = (string[i] == string[j]) && (dp[i + 1, j - 1] > 0)\n  \
    \    end \n      if dp[i, j] > 0 && idx > j \n        idx = j \n      end \n \
    \   end \n  end \n  # Add reverse of string[1:idx] in the end \n  # (for example:\
    \ \"abd\" -> reverse(\"abd\") = \"dba\" -> \"abddba\")\n  palindrome = string[1:idx]\
    \ \n  for i in reverse(idx:N) \n    append!(palindrome, string[i])\n  end \n \
    \ return palindrome \nend \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpd2nzhz8z.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpd2nzhz8z.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [1:1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpd2nzhz8z.jl:36\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd2nzhz8z.jl:47 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpd2nzhz8z.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpd2nzhz8z.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit String\
    \ at index [1:2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpd2nzhz8z.jl:36\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd2nzhz8z.jl:48 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpd2nzhz8z.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpd2nzhz8z.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [1:4]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpd2nzhz8z.jl:36\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd2nzhz8z.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822377
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix_length = longest_palindromic_substring_length(string)\n\
    \    prefix = reverse(string[1:end-suffix_length])\n    return string * prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpl1gi8u6t.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpl1gi8u6t.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_substring_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpl1gi8u6t.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1gi8u6t.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1gi8u6t.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpl1gi8u6t.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_substring_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpl1gi8u6t.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1gi8u6t.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1gi8u6t.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpl1gi8u6t.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_substring_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpl1gi8u6t.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1gi8u6t.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1gi8u6t.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpl1gi8u6t.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_substring_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main"
  timestamp: 1659822377
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    left = 1\n    right = length(string)\n\
    \    is_palindrome = Array{Bool}(length(string))\n    for ii in 0:right - 1\n\
    \        is_palindrome[ii] = string[ii] == string[right - ii]\n    end\n    for\
    \ ii in 1:right - 1\n        if is_palindrome[ii]\n            left = ii + 1\n\
    \        end\n    end\n    if left > 1\n        is_palindrome[:] = false\n   \
    \     for ii in 1:left - 1\n            is_palindrome[right - left + 1 + ii] =\
    \ string[ii] == string[left - ii]\n        end\n        for ii in 0:left - 2\n\
    \            if is_palindrome[ii]\n                left = ii + 1\n           \
    \ end\n        end\n    end\n    string[left:end]*reverse(string[1:left - 1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1ujn4b8j.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp1ujn4b8j.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching (Array{Bool})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ujn4b8j.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ujn4b8j.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ujn4b8j.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp1ujn4b8j.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching (Array{Bool})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ujn4b8j.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/pol"
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string = string .* \".\" .* reverse(string)\n\
    \    N = length(string)\n    centers = Int[]\n    lengths = Int[]\n    for i =\
    \ 1:N\n        centers[i] = 0\n        lengths[i] = 0\n    end\n    center = 1\n\
    \    right = 0\n    for i = 1:N-1\n        i_mirror = 2*center - i\n        if\
    \ right > i\n            lengths[i] = min(right - i, lengths[i_mirror])\n    \
    \    end\n        while string[i + 1 + lengths[i]] == string[i - 1 - lengths[i]]\n\
    \            lengths[i] += 1\n        end\n        if i + lengths[i] > right\n\
    \            center = i\n            right = i + lengths[i]\n        end\n   \
    \ end\n    max_len = maximum(lengths)\n    center_idx = findall(lengths .== max_len)[1]\n\
    \    return string[center_idx-max_len:center_idx-1] * reverse(string[1:center_idx-max_len])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpyls_xiwp.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpyls_xiwp.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpyls_xiwp.jl:12\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyls_xiwp.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyls_xiwp.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyls_xiwp.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpyls_xiwp.jl:12\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyls_xiwp.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyls_xiwp.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyls_xiwp.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpyls_xiwp.jl:12\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyls_xiwp.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyls_xiwp.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyls_xiwp.jl:42\n  Test threw exception\n  Expres"
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    end_position = find_longest_suffix_palindrome(string)\n\
    \    if end_position==length(string)\n        return string\n    else\n      \
    \  return string*reverse(string[1:end_position])\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_z2h7u5y.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_z2h7u5y.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_suffix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp_z2h7u5y.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_z2h7u5y.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_z2h7u5y.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_z2h7u5y.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_suffix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp_z2h7u5y.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_z2h7u5y.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_z2h7u5y.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_z2h7u5y.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_suffix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp_z2h7u5y.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_z2h7u5y.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_z2h7u5y.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_z2h7u5y.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_suffix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp_z2h7u5y.jl:7\n "
  timestamp: 1659822377
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    idx = find_postfix_palindrome(string)\n\
    \    return string[idx+1:end] * string[1:idx]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpmbpg776j.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpmbpg776j.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmbpg776j.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmbpg776j.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmbpg776j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpmbpg776j.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_postfix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmbpg776j.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmbpg776j.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmbpg776j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpmbpg776j.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_postfix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmbpg776j.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmbpg776j.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmbpg776j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpmbpg776j.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_postfix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmbpg776j.jl:7\n   [2] macro expansion\n     @"
  timestamp: 1659822377
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    len_str = length(string)\n   \
    \ len_suffix = len_str\n    while len_suffix > 0\n        # Look for a palindrome\
    \ ending at this position.\n        if is_palindrome(string[len_str-len_suffix+1:len_str])\n\
    \            # We found the suffix.\n            prefix = string[1:len_str-len_suffix+1]\n\
    \            # Return the reversed prefix + the palindromic suffix.\n        \
    \    return prefix*reverse(prefix) + string[len_str-len_suffix+1:len_str]\n  \
    \      end\n        len_suffix -= 1\n    end\n    return string\nend\nmake_palindrome(\"\
    \")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpej4p8tvs.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpej4p8tvs.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpej4p8tvs.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpej4p8tvs.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpej4p8tvs.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpej4p8tvs.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpej4p8tvs.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpej4p8tvs.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpej4p8tvs.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpej4p8tvs.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpej4p8tvs.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpej4p8tvs.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpej4p8tvs.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpej4p8tvs.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpej4p8tvs.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglo"
  timestamp: 1659822377
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    for i\
    \ in reverse(1:n)\n        postfix = string[i:n]\n        if is_palindrome(postfix)\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\n  \
    \  return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpakjzguvu.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpakjzguvu.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpakjzguvu.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakjzguvu.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakjzguvu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpakjzguvu.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpakjzguvu.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakjzguvu.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakjzguvu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpakjzguvu.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpakjzguvu.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakjzguvu.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakjzguvu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpakjzguvu.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpakjzguvu.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglo"
  timestamp: 1659822377
- exit_code: -1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    #Reversed string.\n    string_rev\
    \ = reverse(string)\n    for i in size(string):-1:0\n        #Prefix with decreasing\
    \ size until first matching prefix is found.\n        if string[1:i] == string_rev[size(string)-i+1:size(string)]\n\
    \            return string*string_rev[size(string)-i+1:size(string)]\n       \
    \ end\n    end\nend\n \nprintln(make_palindrome(\"dbcb\"))\nprintln(make_palindrome(\"\
    evolve\"))\nprintln(make_palindrome(\"camryn\"))\nprintln(make_palindrome(\"aditya\"\
    ))\nprintln(make_palindrome(\"civic\"))\nprintln(make_palindrome(\"madam\"))\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching size(::String)\nClosest
    candidates are:\n  size(!Matched::Union{LinearAlgebra.Adjoint{T, var"#s861"},
    LinearAlgebra.Transpose{T, var"#s861"}} where {T, var"#s861"<:(AbstractVector)})
    at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\n  size(!Matched::Union{LinearAlgebra.Adjoint{T,
    var"#s861"}, LinearAlgebra.Transpose{T, var"#s861"}} where {T, var"#s861"<:(AbstractMatrix)})
    at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\n  size(!Matched::Union{LinearAlgebra.QR,
    LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:567\n  ...\nStacktrace:\n
    [1] make_palindrome(string::'''
  stdout: None
  timestamp: 1659822379
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    end_palindrome = longest_palindrome_suffix(string)\n\
    \    prefix = string[1:end-1]\n    suffix = end_palindrome\n    return suffix\
    \ * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjy9q5pwn.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpjy9q5pwn.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjy9q5pwn.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjy9q5pwn.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjy9q5pwn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjy9q5pwn.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjy9q5pwn.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjy9q5pwn.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjy9q5pwn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjy9q5pwn.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjy9q5pwn.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjy9q5pwn.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjy9q5pwn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjy9q5pwn.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjy9q5pwn.jl:7\n   [2] macro expansio"
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix = get_max_palindrome_suffix(string)\n\
    \    prefix = get_string_prefix(string, length(string) - length(suffix))\n   \
    \ return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxcrh1sbl.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxcrh1sbl.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: get_max_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxcrh1sbl.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcrh1sbl.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcrh1sbl.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxcrh1sbl.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: get_max_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxcrh1sbl.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcrh1sbl.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcrh1sbl.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxcrh1sbl.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: get_max_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxcrh1sbl.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcrh1sbl.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcrh1sbl.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxcrh1sbl.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: get_max_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxcrh1sbl.jl:7\n   [2] macro expansio"
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    if n ==\
    \ 0 return \"\" end\n    string_rev = reverse(string)\n    # append reverse of\
    \ the string to itself\n    string_concat = string * \".\" * string_rev \n   \
    \ # find longest suffix palindrome\n    n = length(string_concat)\n    p = z_function(string_concat)\n\
    \    i = n - p[n]\n    while i < n \n        if i == n return string end\n   \
    \     if string_concat[i] == \".\" return reverse(string[1:i]) * string end\n\
    \        i += 1\n    end\n    return \"\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8u551rv8.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp8u551rv8.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: z_function not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8u551rv8.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u551rv8.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8u551rv8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8u551rv8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: z_function not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8u551rv8.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u551rv8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8u551rv8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8u551rv8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: z_function not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8u551rv8.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u551rv8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8u551rv8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8u551rv8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: z_function not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8u551rv8.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string_length = length(string)\n\
    \    suffix = suffixes(string)\n    longest_palindrome_length = 0\n    start_index\
    \ = -1\n    # Find the longest postfix that is a palindrome.\n    for i in 1:string_length\n\
    \        if is_palindrome(suffix[i])\n            if i > longest_palindrome_length\n\
    \                longest_palindrome_length = i\n                start_index =\
    \ i\n            end\n        end\n    end\n    # Now the prefix will be the reverse\
    \ of the substring, starting from the beginning of the string.\n    prefix = reverse(string[1:start_index])\n\
    \    return string * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpyeeq2olb.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpyeeq2olb.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: suffixes not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyeeq2olb.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyeeq2olb.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyeeq2olb.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyeeq2olb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: suffixes not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyeeq2olb.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyeeq2olb.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyeeq2olb.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyeeq2olb.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: suffixes not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyeeq2olb.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyeeq2olb.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyeeq2olb.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyeeq2olb.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: suffixes not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyeeq2olb.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Tes"
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n \n    # Find longest palindromic\
    \ suffix\n    suffix_index = string |> palindromic_suffix\n    # Reverse of a\
    \ prefix that comes before the palindromic suffix\n    prefix_reverse = string[1:suffix_index]\
    \ |> reverse\n    # Append reversed prefix to the end of supplied string\n   \
    \ return string * prefix_reverse\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpi0tnq31_.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpi0tnq31_.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpi0tnq31_.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0tnq31_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0tnq31_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi0tnq31_.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpi0tnq31_.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0tnq31_.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0tnq31_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi0tnq31_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpi0tnq31_.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0tnq31_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0tnq31_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi0tnq31_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpi0tnq31_.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyg"
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # find the longest palindromic\
    \ suffix\n    suffix = find_palindromic_suffix(string)\n    if ispalindrome(suffix)\n\
    \        return string\n    else\n        prefix = string[1:end-length(suffix)]\n\
    \        return prefix * reverse(prefix) * suffix\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4p9acl7d.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4p9acl7d.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4p9acl7d.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4p9acl7d.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4p9acl7d.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4p9acl7d.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4p9acl7d.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4p9acl7d.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4p9acl7d.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4p9acl7d.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4p9acl7d.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4p9acl7d.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4p9acl7d.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4p9acl7d.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4p9acl7d.jl:8\n   [2] macro expansion\n     @"
  timestamp: 1659822379
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string = str(string) # Convert\
    \ any input to string.\n    if is_palindrome(string) \n        return string\n\
    \    else\n        suffix = reverse(string) # Reverse to find longest prefix that\
    \ is a palindrome.\n        for i in 1:length(string) \n            if is_palindrome(string[i:end])\n\
    \                return string * suffix[1:end-i+1]\n            end\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpopx18p9u.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpopx18p9u.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: str not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpopx18p9u.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpopx18p9u.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpopx18p9u.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpopx18p9u.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: str not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpopx18p9u.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpopx18p9u.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpopx18p9u.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpopx18p9u.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: str not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpopx18p9u.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpopx18p9u.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpopx18p9u.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpopx18p9u.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: str not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpopx18p9u.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822379
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    (max_palindrome_len, palindrome_pos)\
    \ = find_max_palindrome(string)\n    (max_palindrome_len, palindrome_pos) = find_max_palindrome(string)\n\
    \    (max_palindrome_len, palindrome_pos) = find_max_palindrome(string)\n    (max_palindrome_len,\
    \ palindrome_pos) = find_max_palindrome(string)\n    (max_palindrome_len, palindrome_pos)\
    \ = find_max_palindrome(string)\n    (max_palindrome_len, palindrome_pos) = find_max_palindrome(string)\n\
    \    (max_palindrome_len, palindrome_pos) = find_max_palindrome(string)\n    (max_palindrome_len,\
    \ palindrome_pos) = find_max_palindrome(string)\n    (max_palindrome_len, palindrome_pos)\
    \ = find_max_palindrome(string)\n    (max_palindrome_len, palindrome_pos) = find_max_palindrome(string)\n\
    \    (max_palindrome_len, palindrome_pos) = find_max_palindrome(string)\n    (max_palindrome_len,\
    \ palindrome_pos) = find_max_palindrome(string)\n    (max_palindrome_len, palindrome_pos)\
    \ = find_max_palindrome(string)\n    (max_palindrome_len, palindrome_pos) = find_max_palindrome(string)\n\
    \    (max_palindrome_len, palindrome_pos) = find_max_palindrome(string)\n    (max_palindrome_len,\
    \ palindrome_pos) = find_max_palindrome(string)\n    (max_palindrome_len, palindrome_pos)\
    \ = find_max_palindrome(string)\n    (max_palindrome_len, palindrome_pos) = find_max_palindrome(string)\n\
    \    (max_palindrome\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph675kp22.jl:26\nin expression starting at\
    \ /tmp/tmph675kp22.jl:26\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \"\"\" Return the shortest palindrome\
    \ that starts with the supplied string.\"\"\"\n    # Function is implemented as\
    \ a generator so as to save on memory.\n    # Each palindrome is computed, printed\
    \ and then discarded before computing a next one.\n    # Yes, this is a bit inefficient,\
    \ but I wanted to try generators.\n    # If you want to store all the palindromes\
    \ in a list, call list(make_palindrome(string))\n    # at the point of call.\n\
    \    for (i, j) in enumerate(reverse(string))\n        if string[i+1:end] == j\n\
    \            println(string * reverse(string[1:i]))\n            break\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4_rbognx.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4_rbognx.jl:1\n\
    in expression starting at /tmp/tmp4_rbognx.jl:1\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    text_length = length(string)\n\
    \    palindrome_end_idx = find_palindrome_end_idx(string)\n    reverse_prefix\
    \ = reverse(string[1:palindrome_end_idx])\n    return string * reverse_prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpe0swy5fo.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpe0swy5fo.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindrome_end_idx\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpe0swy5fo.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe0swy5fo.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe0swy5fo.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpe0swy5fo.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindrome_end_idx not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpe0swy5fo.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe0swy5fo.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe0swy5fo.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpe0swy5fo.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindrome_end_idx not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpe0swy5fo.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe0swy5fo.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe0swy5fo.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpe0swy5fo.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindrome_end_idx not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpe0swy5fo.jl:8\n   [2] macro expansion\n     @"
  timestamp: 1659822380
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if ispalindrome(string) == true\n\
    \        return string\n    end\n    longest_postfix = find_longest_palindrome_postfix(string)\n\
    \    return string * reverse(string[1:end-length(longest_postfix)])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpf_vb9rzu.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpf_vb9rzu.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf_vb9rzu.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf_vb9rzu.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf_vb9rzu.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpf_vb9rzu.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf_vb9rzu.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf_vb9rzu.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf_vb9rzu.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpf_vb9rzu.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf_vb9rzu.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf_vb9rzu.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf_vb9rzu.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpf_vb9rzu.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf_vb9rzu.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v"
  timestamp: 1659822380
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    length::Int = length(string)\n\
    \    suffix::String = suffix(string,length)\n    palindrome_suffix::String = find_palindrome_suffix(suffix)\n\
    \    pre_palindrome_suffix::String = prefix(suffix, length(suffix) - length(palindrome_suffix))\n\
    \    return string * reverse(pre_palindrome_suffix)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpckf5bpcm.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpckf5bpcm.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpckf5bpcm.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpckf5bpcm.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpckf5bpcm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpckf5bpcm.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpckf5bpcm.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpckf5bpcm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpckf5bpcm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpckf5bpcm.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpckf5bpcm.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpckf5bpcm.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpckf5bpcm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpckf5bpcm.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpckf5bpcm.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  timestamp: 1659822380
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    longest_palindrome = string[end-find_longest_palindrome(string):end]\n\
    \    string_prefix = string[1:end-length(longest_palindrome)]\n    return string\
    \ * reverse(string_prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpflsfc5u2.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpflsfc5u2.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpflsfc5u2.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpflsfc5u2.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpflsfc5u2.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpflsfc5u2.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpflsfc5u2.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpflsfc5u2.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpflsfc5u2.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpflsfc5u2.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpflsfc5u2.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpflsfc5u2.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpflsfc5u2.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpflsfc5u2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpflsfc5u2.jl:7\n   [2] macro expansion\n     @"
  timestamp: 1659822380
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # find longest postfix that is\
    \ a palindrome\n    n = length(string)\n    table = z_algorithm(string)\n    #\
    \ get the start of the suffix that is a palindrome\n    idx = first(x for x in\
    \ 1:n if table[x] == n - x + 1)\n    # append reverse of the prefix\n    return\
    \ string * reverse(string[1:idx])\nend\n \nmake_palindrome(\"abc\")\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: z_algorithm not defined\nStacktrace:\n\
    \ [1] make_palindrome(string::String)\n   @ Main /tmp/tmpc61_knia.jl:9\n [2] top-level\
    \ scope\n   @ /tmp/tmpc61_knia.jl:16\nin expression starting at /tmp/tmpc61_knia.jl:16\n"
  stdout: ''
  timestamp: 1659822379
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n  longest_match_index = 0\n  maximum_match_length\
    \ = 0\n  for n in 1:length(string)\n    if string[1:n] == reverse(string[n + 1:end])\n\
    \      longest_match_index = n\n      maximum_match_length = maximum_match_length\
    \ + 1\n    end\n  end\n  return string * reverse(string[maximum_match_length +\
    \ 1:end])\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpop_3ybg_.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpop_3ybg_.jl:23\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpop_3ybg_.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpop_3ybg_.jl:21\ntest set: Test Failed at /tmp/tmpop_3ybg_.jl:24\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"\
    xyzyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpop_3ybg_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpop_3ybg_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpop_3ybg_.jl:25\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpop_3ybg_.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpop_3ybg_.jl:21\ntest set: Test Failed at /tmp/tmpop_3ybg_.jl:26\n\
    \  Expression: candidate(\"jerry\") == \"jerryrrej\"\n   Evaluated: \"jerryyrrej\"\
    \ == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpop_3ybg_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpop_3ybg_.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822380
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    end =\
    \ n\n    while end > 0\n        if is_palindrome(string[1:end])\n            break\n\
    \        end -= 1\n    end\n    return string * reverse(string[1:end-1])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"function make_palindrome(string::String)::String\n\
    \    # /tmp/tmpvz5fj2t9.jl, line 6\n    # /tmp/tmpvz5fj2t9.jl, line 7\n    n =\
    \ length(string)\nend\" around /tmp/tmpvz5fj2t9.jl:1\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvz5fj2t9.jl:1\nin expression starting at /tmp/tmpvz5fj2t9.jl:1\n"
  stdout: ''
  timestamp: 1659822379
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find the palindromic suffix.\n\
    \    middle_index = floor(Int, length(string) / 2)\n    suffix_index = middle_index\n\
    \    while true\n        # Let's call a string that is mirrored around the middle\
    \ index (or around the two middle indexes \n        # when the length of the string\
    \ is even) a \"half-string\".\n        # So, a palindromic suffix is a suffix\
    \ that when combined with the reverse of its half-string\n        # forms a palindrome.\n\
    \        half_string = string[suffix_index+1:end]\n        mirrored_half_string\
    \ = string[end-suffix_index:middle_index]\n        if half_string == mirrored_half_string\n\
    \            break\n        end\n        suffix_index += 1\n    end\n    # Form\
    \ a palindrome.\n    palindrome = string * string[end-suffix_index:end-1:-1]\n\
    \    return palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7dyutvo6.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp7dyutvo6.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [0:0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmp7dyutvo6.jl:16\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7dyutvo6.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7dyutvo6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp7dyutvo6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit String\
    \ at index [0:0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmp7dyutvo6.jl:16\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7dyutvo6.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7dyutvo6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp7dyutvo6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [0:1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmp7dyutvo6.jl:16\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7dyutvo6.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822381
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    for (i,\
    \ c) in enumerate(string)\n        if is_palindrome(string[i+1:n])\n         \
    \   return string * reverse(string[1:i+1])\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxp1yseup.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpxp1yseup.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxp1yseup.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxp1yseup.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxp1yseup.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpxp1yseup.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxp1yseup.jl:9\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxp1yseup.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxp1yseup.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpxp1yseup.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxp1yseup.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxp1yseup.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/"
  timestamp: 1659822382
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    i = length(string)\n    while\
    \ i > 0\n        if is_palindrome(string[1:i])\n            return string * string[i:end]\n\
    \        end\n        i -= 1\n    end\n    return string\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpu8uk5sxu.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpu8uk5sxu.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpu8uk5sxu.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu8uk5sxu.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu8uk5sxu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpu8uk5sxu.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpu8uk5sxu.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu8uk5sxu.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu8uk5sxu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpu8uk5sxu.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpu8uk5sxu.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu8uk5sxu.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu8uk5sxu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpu8uk5sxu.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpu8uk5sxu.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1659822381
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \"\"\" Find the shortest palindrome\
    \ that begins with a supplied string.\n    \"\"\"\n    if string==\"\"\n     \
    \   return \"\"\n    end\n    string = \"#\"*string\n    l =  map(x->length(x),\
    \ string)\n    p = map(x->0, string)\n    center = right = 0\n    for i = 1:length(string)\n\
    \        if i<right\n            mirror = 2*center-i\n            if right-i >\
    \ p[mirror]\n                p[i] = p[mirror]\n            else\n            \
    \    p[i] = right-i\n            end\n        end\n        while i+p[i]+1<=length(string)\
    \ && i-p[i]-1>=1 && string[i+p[i]+1]==string[i-p[i]-1]\n            p[i] += 1\n\
    \        end\n        if i+p[i]>right\n            center = i\n            right\
    \ = i+p[i]\n        end\n    end\n    string_ind = indmax(p)\n    if string_ind%2==0\n\
    \        s = string[string_ind/2+1:string_ind/2+p[string_ind]/2]\n    else\n \
    \       s = string[(string_ind+1)/2:floor(Int,(string_ind+1)/2)+p[string_ind]/2]\n\
    \    end\n    return s*reverse(s)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsf7wmocb.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpsf7wmocb.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  ArgumentError: map(f, s::AbstractString)\
    \ requires f to return AbstractChar; try map(f, collect(s)) or a comprehension\
    \ instead\n  Stacktrace:\n   [1] map(f::var\"#1#3\", s::String)\n     @ Base ./strings/basic.jl:611\n\
    \   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpsf7wmocb.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsf7wmocb.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsf7wmocb.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpsf7wmocb.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  ArgumentError: map(f, s::AbstractString)\
    \ requires f to return AbstractChar; try map(f, collect(s)) or a comprehension\
    \ instead\n  Stacktrace:\n   [1] map(f::var\"#1#3\", s::String)\n     @ Base ./strings/basic.jl:611\n\
    \   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpsf7wmocb.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsf7wmocb.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsf7wmocb.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpsf7wmocb.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  ArgumentError: map(f, s::AbstractString) requires\
    \ f to return AbstractChar; try map(f, collect(s)) or a comprehension instead\n\
    \  Stacktrace:\n   [1] map(f::var\"#1#3\", s::String)\n     @ Base ./strings/basic.jl:611\n\
    \   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpsf7wmocb.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsf7wmocb.jl:49 [inlined]\n\
    \ "
  timestamp: 1659822381
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    nxt =\
    \ [0, 1]\n    for i in 2:n\n        # Suffix is palindrome iff:\n        # [s[1:i-1]]\
    \ == [s[i-nxt[i-1]:i-1]],\n        # i.e., the length of the palindromic postfix\
    \ is equal to the value in the next table.\n        # This follows from the fact\
    \ that the next table stores the length of the longest prefix \n        # that\
    \ is also a suffix of a string.\n        # \n        # The length of the postfix\
    \ is the difference between the length of the whole string and the value\n   \
    \     # of the next table at some position i.\n        # \n        # The length\
    \ of the palindromic postfix can be also bounded by the length of the prefix:\n\
    \        # if the length of the prefix is less than the length of the postfix,\
    \ then the prefix\n        # cannot be a palindrome.\n        # \n        # Finally,\
    \ the length of the prefix is bounded by the length of the suffix:\n        #\
    \ if the length of the suffix is less than the length of the prefix, then the\
    \ suffix\n        # cannot be a palindrome.\n        #\n        #     |     <------\
    \ p ------> |       \n        # s = |  <- t -> | <- x -> |  | <- t ->\n      \
    \  #     | <- s -> |     <-- p -> |\n        #\n        # p = <prefix, [s[1:i-1]]>\n\
    \        # s = <suffix, [s[i-nxt[i-1]:i-1]]>\n        # x = <excess, [s[i-nxt[i-1]+1:i-1]]>\n\
    \        # t = nxt[i-1]\n        #    \n        if nxt[i-1] + i - nxt[i-1] <=\
    \ n\n            if string[1:i-1] == string[i-nxt[i-1]:i-1]\n                nxt\
    \ = vcat(nxt, nxt[i-1])\n            else\n                nxt = vcat(nxt, nxt[i-1]\
    \ + 1)\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp4jdwxod6.jl:37\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4jdwxod6.jl:1\n\
    in expression starting at /tmp/tmp4jdwxod6.jl:1\n"
  stdout: ''
  timestamp: 1659822379
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    mid = (div(length(string), 2))\
    \ + 1\n    back = find_backward_palindrome(string, mid)\n    if back != -1\n \
    \       front = find_forward_palindrome(string, mid)\n        return string[1:front]\
    \ * reverse(string[back:end]) * string\n    else\n        back = find_backward_palindrome(string,\
    \ mid - 1)\n        if back != -1\n            front = find_forward_palindrome(string,\
    \ mid - 1)\n            return string[1:front] * reverse(string[back:end]) * string\n\
    \        else\n            mid = (div(length(string), 2))\n            if string[mid]\
    \ == string[mid + 1]\n                back = find_backward_palindrome(string,\
    \ mid + 1)\n                front = find_forward_palindrome(string, mid)\n   \
    \             return string[1:front] * reverse(string[back:end]) * string\n  \
    \          else\n                back = find_backward_palindrome(string, mid)\n\
    \                front = find_forward_palindrome(string, mid)\n              \
    \  return string[1:front] * reverse(string[back:end]) * string\n            end\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpojly5uvu.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpojly5uvu.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_backward_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpojly5uvu.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojly5uvu.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojly5uvu.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpojly5uvu.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_backward_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpojly5uvu.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojly5uvu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojly5uvu.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpojly5uvu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_backward_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpojly5uvu.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojly5uvu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojly5uvu.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpojly5uvu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_backward_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpojly5uvu.jl:8\n   [2] macro expansion\n  "
  timestamp: 1659822381
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    p = prefix_palindrome(string)\n\
    \    prefix = string[1:end-p]\n    return string * prefix_palindrome(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpc7b77ps3.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpc7b77ps3.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: prefix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpc7b77ps3.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7b77ps3.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7b77ps3.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpc7b77ps3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: prefix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc7b77ps3.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7b77ps3.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7b77ps3.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpc7b77ps3.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: prefix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc7b77ps3.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7b77ps3.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7b77ps3.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpc7b77ps3.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: prefix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc7b77ps3.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/"
  timestamp: 1659822381
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string_copy = copy(string)\n \
    \   while !is_palindrome(string_copy)\n        string_copy = string_copy * reverse(string_copy)\n\
    \    end\n    return string_copy\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp7gj_u3nv.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp7gj_u3nv.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching copy(::String)\n\
    \  Closest candidates are:\n    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv})\
    \ where Tv<:Union{Float64, ComplexF64} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:504\n\
    \    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv}, !Matched::Integer, !Matched::Integer)\
    \ where Tv<:Float64 at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:507\n\
    \    copy(!Matched::T) where T<:SHA.SHA2_CTX at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SHA/src/types.jl:212\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7gj_u3nv.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7gj_u3nv.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7gj_u3nv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp7gj_u3nv.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching copy(::String)\n\
    \  Closest candidates are:\n    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv})\
    \ where Tv<:Union{Float64, ComplexF64} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:504\n\
    \    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv}, !Matched::Integer, !Matched::Integer)\
    \ where Tv<:Float64 at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:507\n\
    \    copy(!Matched::T) where T<:SHA.SHA2_CTX at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SHA/src/types.jl:212\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7gj_u3nv.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7gj_u3nv.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.con"
  timestamp: 1659822382
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    #print(\"********\", string)\n\
    \    reverse = reverse(string)\n    suffix = longest_common_substring(string,\
    \ reverse)\n    #print(\"********\", suffix)\n    return string * reverse[1:end-length(suffix)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpb03lipvf.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpb03lipvf.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: reverse not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb03lipvf.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb03lipvf.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb03lipvf.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpb03lipvf.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: reverse not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb03lipvf.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb03lipvf.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb03lipvf.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpb03lipvf.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: reverse not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb03lipvf.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb03lipvf.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb03lipvf.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpb03lipvf.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: reverse not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb03lipvf.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1659822381
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    for i in range(length(string),\
    \ 0, -1)\n        if is_palindrome(string[i:end])\n            prefix = string[1:i]\n\
    \            return string * reverse(prefix)\n        end\n    end\n    return\
    \ string\nend\nprintln(make_palindrome(\"cable\"))\nprintln(make_palindrome(\"\
    abracadabra\"))\nprintln(make_palindrome(\"exercises\"))\nprintln(make_palindrome(\"\
    a\"))\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: ArgumentError: range(5.0, stop=0.0, length=-1): negative\
    \ length\nStacktrace:\n [1] _linspace1(#unused#::Type{Float64}, start::Float64,\
    \ stop::Float64, len::Int64)\n   @ Base ./twiceprecision.jl:724\n [2] _linspace(#unused#::Type{Float64},\
    \ start_n::Int64, stop_n::Int64, len::Int64, den::Int64)\n   @ Base ./twiceprecision.jl:706\n\
    \ [3] _linspace\n   @ ./twiceprecision.jl:703 [inlined]\n [4] range_start_stop_length\n\
    \   @ ./range.jl:529 [inlined]\n [5] _range\n   @ ./range.jl:128 [inlined]\n [6]\
    \ range\n   @ ./range.jl:112 [inlined]\n [7] make_palindrome(string::String)\n\
    \   @ Main /tmp/tmp9hi5t4f2.jl:7\n [8] top-level scope\n   @ /tmp/tmp9hi5t4f2.jl:15\n\
    in expression starting at /tmp/tmp9hi5t4f2.jl:15\n"
  stdout: ''
  timestamp: 1659822380
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    substrings = []\n    for i in\
    \ 1:length(string)\n        push!(substrings, string[i:end])\n    end\n    for\
    \ sub in substrings\n        if sub == reverse(sub)\n            return string\
    \ * reverse(string[1:i])\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbx13_76l.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpbx13_76l.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbx13_76l.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbx13_76l.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbx13_76l.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpbx13_76l.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: i not defined\n  Stacktrace:\n \
    \  [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbx13_76l.jl:13\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbx13_76l.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbx13_76l.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpbx13_76l.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbx13_76l.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbx13_76l.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/s"
  timestamp: 1659822383
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    palindrome_length = 0\n    for\
    \ i = 1:length(string)\n        if is_palindrome(string[1:i])\n            palindrome_length\
    \ = i\n        end\n    end\n    return string * reverse(string[1:palindrome_length])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpat4ounit.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpat4ounit.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpat4ounit.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpat4ounit.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpat4ounit.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpat4ounit.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpat4ounit.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpat4ounit.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpat4ounit.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpat4ounit.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpat4ounit.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpat4ounit.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpat4ounit.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpat4ounit.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpat4ounit.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1659822381
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    reverse_string = reverse(string)\n\
    \    palindrome = string\n    for i = 1:length(string)\n        if string[i:end]\
    \ == reverse_string[1:end-i+1]\n            palindrome = string[1:i] * reverse_string\n\
    \            break\n        end\n    end\n    return palindrome\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw27du533.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpw27du533.jl:23\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw27du533.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw27du533.jl:21\ntest set: Test Failed at /tmp/tmpw27du533.jl:24\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"\
    xyzyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw27du533.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw27du533.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw27du533.jl:25\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw27du533.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw27du533.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw27du533.jl:26\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw27du533.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw27du533.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822381
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    is_palindrome(s::String) = s ==\
    \ reverse(s)\n    for i = length(string):-1:1\n        suffix = string[i:end]\n\
    \        if is_palindrome(suffix)\n            if i > 1\n                prefix\
    \ = string[1:i-1]\n                return string * reverse(prefix)\n         \
    \   else\n                return string\n            end\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu3j9tecz.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpu3j9tecz.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpu3j9tecz.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu3j9tecz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu3j9tecz.jl:24\ntest set:\
    \ Test Failed at /tmp/tmpu3j9tecz.jl:28\n  Expression: candidate(\"xyx\") == \"\
    xyx\"\n   Evaluated: \"xyxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu3j9tecz.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpu3j9tecz.jl:24\nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    3     1      1      5\n"
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if is_palindrome(string)\n   \
    \     return string\n    end\n    return string * reverse(string)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpsqzn6anw.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpsqzn6anw.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsqzn6anw.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsqzn6anw.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsqzn6anw.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsqzn6anw.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsqzn6anw.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsqzn6anw.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsqzn6anw.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsqzn6anw.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsqzn6anw.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsqzn6anw.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsqzn6anw.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsqzn6anw.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsqzn6anw.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822382
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    N = length(string)\n    pal_len\
    \ = longest_palindrome_length(string)\n    if pal_len == N\n        return string\n\
    \    else\n        return string * string[1:N-pal_len]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbh6ms0jb.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpbh6ms0jb.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbh6ms0jb.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbh6ms0jb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbh6ms0jb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbh6ms0jb.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbh6ms0jb.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbh6ms0jb.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbh6ms0jb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbh6ms0jb.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbh6ms0jb.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbh6ms0jb.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbh6ms0jb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbh6ms0jb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_length not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbh6ms0jb.jl:8\n   [2] macro expansio"
  timestamp: 1659822382
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # find the longest suffix that\
    \ is also a palindrome\n    suffix_len = find_suffix_len(string)\n    # append\
    \ the reverse of the string prefix to the current string\n    return string *\
    \ reverse(string[1:end-suffix_len])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6olxi4s6.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp6olxi4s6.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_suffix_len not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6olxi4s6.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6olxi4s6.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6olxi4s6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6olxi4s6.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_suffix_len not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6olxi4s6.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6olxi4s6.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6olxi4s6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6olxi4s6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_suffix_len not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6olxi4s6.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6olxi4s6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6olxi4s6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6olxi4s6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_suffix_len not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6olxi4s6.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/ju"
  timestamp: 1659822382
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    lps = longest_palindromic_suffix(string)\n\
    \    return string * lps\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6_x9spyu.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp6_x9spyu.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6_x9spyu.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6_x9spyu.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_x9spyu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6_x9spyu.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6_x9spyu.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6_x9spyu.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_x9spyu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6_x9spyu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6_x9spyu.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6_x9spyu.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_x9spyu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6_x9spyu.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6_x9spyu.jl:7\n   [2] macro expa"
  timestamp: 1659822383
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if all(string[i]==string[i+1]\
    \ for i in 1:length(string)-1)\n        return string\n    end\n    # find the\
    \ longest palindromic suffix\n    i = length(string)\n    while i > 0\n      \
    \  substr = string[length(string)-i+1:end]\n        if is_palindrome(substr)\n\
    \            break\n        end\n        i -= 1\n    end\n    # append reverse\
    \ of a prefix of string that comes before the palindromic suffix\n    return string\
    \ * reverse(string[1:length(string)-i])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpx523dqaz.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpx523dqaz.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpx523dqaz.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx523dqaz.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx523dqaz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx523dqaz.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx523dqaz.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx523dqaz.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx523dqaz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx523dqaz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx523dqaz.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx523dqaz.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx523dqaz.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  timestamp: 1659822383
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    postfix = longest_palindromic_suffix(string)\n\
    \    postfix_length = length(postfix)\n    return string * string[1:end-postfix_length]\
    \ \nend\n \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprcfz_ltc.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmprcfz_ltc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprcfz_ltc.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprcfz_ltc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprcfz_ltc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprcfz_ltc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprcfz_ltc.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprcfz_ltc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprcfz_ltc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprcfz_ltc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprcfz_ltc.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprcfz_ltc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprcfz_ltc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprcfz_ltc.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprcfz_ltc.jl:7\n   [2] macro expa"
  timestamp: 1659822383
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find longest palindromic suffix\n\
    \    palindrome_length = 1\n    while (palindrome_length <= length(string)) &&\
    \ (string[end-palindrome_length+1:end] == string[end-palindrome_length+1:end])\n\
    \        palindrome_length += 1\n    end\n    # Append to the end of the string\
    \ reversed prefix\n    return string * reverse(string[1:end-palindrome_length+1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiv3r6q5k.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpiv3r6q5k.jl:22\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiv3r6q5k.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiv3r6q5k.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiv3r6q5k.jl:24\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiv3r6q5k.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiv3r6q5k.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822382
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    m = size(string, 1)\n    # calculate\
    \ the longest palindromic suffix \n    # of the given string \n    string_postfix\
    \ = string[m:-1:-1]\n    longest_palindrome_index = find_longest_palindrome(string_postfix,\
    \ string)\n    # get the string prefix that needs to be appended to\n    # form\
    \ the palindrome \n    string_prefix = string[1:m-longest_palindrome_index]\n\
    \    return string * string_prefix[m:-1:-1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpf6shxspw.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpf6shxspw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching size(::String,\
    \ ::Int64)\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.QR,\
    \ LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf6shxspw.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf6shxspw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf6shxspw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpf6shxspw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching size(::String,\
    \ ::Int64)\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.QR,\
    \ LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf6shxspw.jl:7\n\
    \   [2] macro expansion\n  "
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # first find the longest postfix\
    \ that is a palindrome\n    # by using dynamic programming\n    # table of pointers\
    \ to next element in LCS\n    N = length(string)\n    pointer_table = [collect(1:N)\
    \ for i in 1:N]\n    for i in 2:N, j in 1:N\n        if (string[i] == string[j])\
    \ && (i != j)\n            pointer_table[i][j] = pointer_table[i-1][j+1]\n   \
    \     else\n            pointer_table[i][j] = min(pointer_table[i-1][j], pointer_table[i][j+1])\n\
    \        end\n    end\n    # now go over the matrix and find the longest postfix\
    \ that is a palindrome\n    # At the end we will have indices of the cell in the\
    \ matrix (i,j) \n    # that corresponds to the last letter of a longest postfix\
    \ palindrome\n    i = N\n    j = 1\n    while i != j && pointer_table[i][j] !=\
    \ i\n        if pointer_table[i][j] < i\n            i -= 1\n        else\n  \
    \          j += 1\n        end\n    end\n    # string before the palindromic postfix\n\
    \    string_left = string[pointer_table[i][j]:end]\n    # string after the palindromic\
    \ postfix\n    string_right = string[1:pointer_table[i][j]-1]\n    # reverse string_left\
    \ and append to string_right\n    string_right *= reverse(string_left)\n    return\
    \ string_right\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqczharsl.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpqczharsl.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access 0-element\
    \ Vector{Vector{Int64}} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpqczharsl.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqczharsl.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqczharsl.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpqczharsl.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpqczharsl.jl:16\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqczharsl.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqczharsl.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpqczharsl.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  BoundsError: attempt to access 3-element Vector{Int64}\
    \ at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpqczharsl.jl:16\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqczharsl.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqczharsl.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpqczharsl.jl:48\n  Test threw exception"
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    reverse_string = reverse(string)\n\
    \    palindrome = string * reverse_string\n    return palindrome\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7f8t69qp.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp7f8t69qp.jl:17\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7f8t69qp.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7f8t69qp.jl:15\ntest set: Test Failed at /tmp/tmp7f8t69qp.jl:18\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"\
    xyzyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7f8t69qp.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7f8t69qp.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp7f8t69qp.jl:19\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7f8t69qp.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7f8t69qp.jl:15\ntest set: Test Failed at /tmp/tmp7f8t69qp.jl:20\n\
    \  Expression: candidate(\"jerry\") == \"jerryrrej\"\n   Evaluated: \"jerryyrrej\"\
    \ == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7f8t69qp.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7f8t69qp.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822383
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if string == reverse(string) #\
    \ if string is already a palindrome, return it\n        return string\n    end\n\
    \    # find the palindromic suffix\n    suffix = \"\"\n    while !(suffix == string)\
    \ && !is_palindrome(string * reverse(suffix))\n        suffix = next_suffix(suffix)\n\
    \    end\n    # return the full palindrome\n    return string * reverse(prefix(string,\
    \ length(string) - length(suffix)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp8gcc7h7o.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp8gcc7h7o.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8gcc7h7o.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gcc7h7o.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gcc7h7o.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp8gcc7h7o.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8gcc7h7o.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gcc7h7o.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gcc7h7o.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    i = length(string)\n    while\
    \ i > 0 && !is_palindrome(string[1:i])\n        i -= 1\n    end\n    return string\
    \ * reverse(string[1:i])\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyb_yrvg6.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpyb_yrvg6.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyb_yrvg6.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyb_yrvg6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyb_yrvg6.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpyb_yrvg6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyb_yrvg6.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyb_yrvg6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyb_yrvg6.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpyb_yrvg6.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyb_yrvg6.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyb_yrvg6.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyb_yrvg6.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpyb_yrvg6.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyb_yrvg6.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    len = length(string)\n    begin\n\
    \        i = len-1\n        s = string[i+1:len]\n        while (i >= 0)\n    \
    \        s_new = string[i+1:len]\n            if (s_new == reverse(s_new))\n \
    \               s = s_new\n                break\n            end\n          \
    \  i = i-1\n        end\n        return s + reverse(string[1:i+1])\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpc68in0dz.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpc68in0dz.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [0:0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpc68in0dz.jl:10\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpc68in0dz.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpc68in0dz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc68in0dz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching +(::String, ::String)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc68in0dz.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc68in0dz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc68in0dz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc68in0dz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc68in0dz.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc68in0dz.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.cond"
  timestamp: 1659822386
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    palindrome = \"\"\n    for i in\
    \ 1:length(string)\n        if is_palindrome(string[1:i])\n            palindrome\
    \ = string[1:i]\n        end\n    end\n    palindrome_reverse = reverse(palindrome)\n\
    \    string_suffix = string[length(palindrome)+1:end]\n    new_string = string_suffix\
    \ * palindrome_reverse\n    return new_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpdgpce7l2.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpdgpce7l2.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdgpce7l2.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdgpce7l2.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdgpce7l2.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdgpce7l2.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdgpce7l2.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdgpce7l2.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdgpce7l2.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdgpce7l2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdgpce7l2.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdgpce7l2.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdgpce7l2.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdgpce7l2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdgpce7l2.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    s = string\n    l = length(s)\n\
    \    if l == 0 \n        return \"\"\n    end\n    for k in l:1\n        sp =\
    \ s[1:k]\n        if is_palindrome(sp)\n            return s * s[l:k:-1]\n   \
    \     end\n    end\n    # all string part is a palindrome\n    return s * s[l:-1:-1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpiu8mjbs7.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpiu8mjbs7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpiu8mjbs7.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiu8mjbs7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiu8mjbs7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpiu8mjbs7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [0]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::Base.var\"\
    #345#346\"{String, StepRange{Int64, Int64}})(io::IOBuffer)\n      @ Base ./strings/basic.jl:193\n\
    \    [5] sprint(::Function; context::Nothing, sizehint::Int64)\n      @ Base ./strings/io.jl:114\n\
    \    [6] getindex\n      @ ./strings/basic.jl:192 [inlined]\n    [7] make_palindrome(string::String)\n\
    \      @ Main /tmp/tmpiu8mjbs7.jl:19\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpiu8mjbs7.jl:28 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpiu8mjbs7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpiu8mjbs7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  BoundsError: attempt to access 3-codeunit String\
    \ at index [0]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::Base.var\"\
    #345#346\"{String,"
  timestamp: 1659822385
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    len_str = length(string)\n   \
    \ i = len_str\n    while i > 0\n        if is_palindrome(string[1:i])\n      \
    \      l_str = string[i+1:len_str]\n            l_str = reverse(l_str)\n     \
    \       return string * l_str\n        i -= 1\n    end\n    return \"Impossible!\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgzf0v615.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgzf0v615.jl:1\n\
    in expression starting at /tmp/tmpgzf0v615.jl:1\n"
  stdout: ''
  timestamp: 1659822383
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length::Int = 0\n    # Calculate\
    \ the length of the longest palindromic suffix of the string.\n    # This can\
    \ be done using the Manacher's algorithm.\n    # However, we will do this simply\
    \ using the brute force.\n    for i in 1:length(string)\n        begin::Int =\
    \ i\n        end::Int = length(string)\n        counter::Int = 0\n        # Check\
    \ if suffix beginning with i is a palindrome.\n        while string[begin] ==\
    \ string[end]\n            counter += 1\n            begin += 1\n            end\
    \ -= 1\n        end\n        # Update if longer palindromic suffix was found.\n\
    \        if counter > max_length\n            max_length = counter\n        end\n\
    \    end\n    # Now create a palindrome by appending reverse of the prefix that\
    \ comes before the\n    # palindromic suffix to the end of the string.\n    output::String\
    \ = string\n    for i in 1:length(string) - max_length\n        output = output\
    \ * string[length(string) - i + 1]\n    end\n    return output\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"+=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_y3vfk4.jl:18\nin expression starting at\
    \ /tmp/tmpx_y3vfk4.jl:18\n"
  stdout: ''
  timestamp: 1659822383
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    length = length(string)\n    i\
    \ = 1\n    while i <= length \xF7 2\n        if string[1:i] == string[length-i+1:length]\n\
    \            return string * reverse(string[i+1:length])\n        end\n      \
    \  i += 1\n    end\n    return string * reverse(string[2:length])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphp6_9sk0.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmphp6_9sk0.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphp6_9sk0.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphp6_9sk0.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphp6_9sk0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphp6_9sk0.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphp6_9sk0.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphp6_9sk0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphp6_9sk0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphp6_9sk0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphp6_9sk0.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphp6_9sk0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphp6_9sk0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphp6_9sk0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphp6_9sk0.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  timestamp: 1659822385
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # find the longest palindromic\
    \ suffix\n    palindrome = longest_common_suffix(string, reverse(string))\n  \
    \  return string * reverse(string[1:end-length(palindrome)])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2boheb1u.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp2boheb1u.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_common_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2boheb1u.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2boheb1u.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2boheb1u.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2boheb1u.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_common_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2boheb1u.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2boheb1u.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2boheb1u.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2boheb1u.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_common_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2boheb1u.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2boheb1u.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2boheb1u.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2boheb1u.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_common_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2boheb1u.jl:8\n\
    \   [2] macro expansion\n     @ ~/.cond"
  timestamp: 1659822385
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string_len = length(string)\n\
    \    for i in length(string):1:-1\n        if string[1:i] == string[i:length(string)][end:-1:1]\
    \ #we found the postfix that is a palindrome\n            return string * string[i+1:length(string)][end:-1:1]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpawgww1vg.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpawgww1vg.jl:1\n\
    in expression starting at /tmp/tmpawgww1vg.jl:1\n"
  stdout: ''
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if length(string) <= 1\n     \
    \   return string\n    end\n    str = string\n    while !is_palindrome(str)\n\
    \        str = string[1:end-1]\n    end\n    return str*reverse(string[1:end-length(str)])\n\
    end\nmake_palindrome(\"abcd\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: is_palindrome not defined\nStacktrace:\n\
    \ [1] make_palindrome(string::String)\n   @ Main /tmp/tmpv3d7neuu.jl:11\n [2]\
    \ top-level scope\n   @ /tmp/tmpv3d7neuu.jl:16\nin expression starting at /tmp/tmpv3d7neuu.jl:16\n"
  stdout: ''
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    postfix = find_longest_postfix_palindrome(string)\n\
    \    prefix = reverse(string[1:end-length(postfix)])\n    return string * prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpa3w7pno1.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa3w7pno1.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpa3w7pno1.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa3w7pno1.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa3w7pno1.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa3w7pno1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpa3w7pno1.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa3w7pno1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa3w7pno1.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa3w7pno1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpa3w7pno1.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa3w7pno1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa3w7pno1.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa3w7pno1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpa3w7pno1.jl"
  timestamp: 1659822386
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    s = string # s is the initial\
    \ string\n    p = 0 # will store the index of the first character in the longest\
    \ palindromic suffix\n    for i in eachindex(s)\n        # for each index in the\
    \ string\n        # find the longest palindromic suffix\n        if (i==1) ||\
    \ (s[1:i] == s[i:-1])\n            p = i\n        end\n    end\n    # return the\
    \ resulting string\n    return s * \" \" * s[p:-1]\nend\nprintln(make_palindrome(\"\
    abc\"))\nprintln(make_palindrome(\"abba\"))\nprintln(make_palindrome(\"abcba\"\
    ))\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp5uhneur.jl:24

    '
  stdout: "abc \nabba \nabcba \ntest set: Test Failed at /tmp/tmpp5uhneur.jl:27\n\
    \  Expression: candidate(\"\") == \"\"\n   Evaluated: \" \" == \"\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp5uhneur.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp5uhneur.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp5uhneur.jl:28\n  Expression: candidate(\"x\") == \"x\"\n\
    \   Evaluated: \"x \" == \"x\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp5uhneur.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp5uhneur.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp5uhneur.jl:29\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyz \" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp5uhneur.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpp5uhneur.jl:26\ntest set: Test Failed at /tmp/tmpp5uhneur.jl:30\n\
    \  Expression: candidate(\"xyx\") == \"xyx\"\n   Evaluated: \"xyx \" == \"xyx\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp5uhneur.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp5uhneur.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp5uhneur.jl:31\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry \" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] mac"
  timestamp: 1659822385
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    postfix = string[end:-1:1]\n \
    \   for i in 1:length(string)\n        if is_palindrome(string[i:end])\n     \
    \       return string * postfix[end-i+1:end:-1]\n        end\n    end\n    return\
    \ \"Error\"\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpop44s44j.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpop44s44j.jl:20\n  Expression: candidate(\"\
    \") == \"\"\n   Evaluated: \"Error\" == \"\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpop44s44j.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpop44s44j.jl:19\ntest set: Error During Test\
    \ at /tmp/tmpop44s44j.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n   [1]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpop44s44j.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpop44s44j.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpop44s44j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpop44s44j.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpop44s44j.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpop44s44j.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpop44s44j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpop44s44j.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpop44s44j.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpop44s44j.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/."
  timestamp: 1659822387
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if is_palindrome(string)\n   \
    \     return string\n    end\n    max_match = 0\n    for i in 1:div(length(string),\
    \ 2)\n        if string[end - i + 1] == string[i]\n            max_match = i\n\
    \        else\n            break\n        end\n    end\n    return string * reverse(string[1:end\
    \ - max_match])\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppuzp8vn_.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmppuzp8vn_.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppuzp8vn_.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuzp8vn_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuzp8vn_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppuzp8vn_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppuzp8vn_.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuzp8vn_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuzp8vn_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppuzp8vn_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppuzp8vn_.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuzp8vn_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuzp8vn_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppuzp8vn_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppuzp8vn_.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822386
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    let postfix::Vector{Char} = string[end:-1:1]\n\
    \    let longest::Int = 0\n    for i in 1:length(string)\n        if string[1:i]\
    \ == postfix[end-i+1:end]\n            longest = i\n        end\n    end\n   \
    \ return string * postfix[end-longest+1:end]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"let\" at /tmp/tmpwbl4q_rk.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwbl4q_rk.jl:1\n\
    in expression starting at /tmp/tmpwbl4q_rk.jl:1\n"
  stdout: ''
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    longest_palindrome = get_longest_palindrome(string)\n\
    \    return string*(string[1:end-length(longest_palindrome)])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1kw1zax9.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp1kw1zax9.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: get_longest_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1kw1zax9.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1kw1zax9.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1kw1zax9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1kw1zax9.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: get_longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1kw1zax9.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1kw1zax9.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1kw1zax9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1kw1zax9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: get_longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1kw1zax9.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1kw1zax9.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1kw1zax9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1kw1zax9.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: get_longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1kw1zax9.jl:7\n\
    \   [2] macro expansion\n     @ ~/."
  timestamp: 1659822386
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    postfix_palindrome = longest_palindrome_suffix(string)\n\
    \    prefix = string[1:end-length(postfix_palindrome)]\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprgh95axv.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmprgh95axv.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprgh95axv.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgh95axv.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprgh95axv.jl:15\ntest set:\
    \ Error During Test at /tmp/tmprgh95axv.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprgh95axv.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgh95axv.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprgh95axv.jl:15\ntest set:\
    \ Error During Test at /tmp/tmprgh95axv.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprgh95axv.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgh95axv.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprgh95axv.jl:15\ntest set:\
    \ Error During Test at /tmp/tmprgh95axv.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprgh95axv.jl:7\n   [2] macro expansio"
  timestamp: 1659822386
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    prefix = reverse(string)\n   \
    \ # We are looking for a string that is a palindrome and is a postfix of the supplied\
    \ string\n    # longest_common_substring is a function that finds a longest string\
    \ that is a common substring to two strings\n    postfix = longest_common_substring(string,\
    \ prefix) \n    return string * prefix[1:end - length(postfix)] # Append to string\
    \ reverse of a prefix that comes before the palindromic suffix\nend\n```\n## Lazy\
    \ Evaluation\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqz8un7gj.jl:13\nin expression starting at\
    \ /tmp/tmpqz8un7gj.jl:13\n"
  stdout: ''
  timestamp: 1659822384
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    if length(palindrome_suffix) == length(string)\n        return string\n \
    \   else\n        palindrome_prefix = reverse(string[1:length(string) - length(palindrome_suffix)])\n\
    \        return string * palindrome_prefix\n    end\nend\n \nmake_palindrome(\"\
    aba\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: longest_palindrome_suffix not defined\n\
    Stacktrace:\n [1] make_palindrome(string::String)\n   @ Main /tmp/tmpqf7br622.jl:7\n\
    \ [2] top-level scope\n   @ /tmp/tmpqf7br622.jl:16\nin expression starting at\
    \ /tmp/tmpqf7br622.jl:16\n"
  stdout: ''
  timestamp: 1659822385
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    lens = length(string)\n    i =\
    \ lens\n    while i > 0\n        if string[i:end] == string[i:end][end:-1:1]\n\
    \            break\n        end\n        i -= 1\n    end\n    return string *\
    \ string[1:i-1]\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp821acwuj.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp821acwuj.jl:24\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyzxy\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp821acwuj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp821acwuj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp821acwuj.jl:25\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxy\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp821acwuj.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp821acwuj.jl:21\ntest set: Test Failed at /tmp/tmp821acwuj.jl:26\n\
    \  Expression: candidate(\"jerry\") == \"jerryrrej\"\n   Evaluated: \"jerryjerr\"\
    \ == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp821acwuj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp821acwuj.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822385
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string_length = length(string)\n\
    \    if string_length <= 1 \n        return string\n    end\n    palindrome_lengths\
    \ = build_palindrome_lengths(string)\n    longest_palindrome_length = last(palindrome_lengths)\n\
    \    if longest_palindrome_length == string_length\n        return string\n  \
    \  end\n    middle_index = 2*string_length - longest_palindrome_length - 1\n \
    \   return string[1:middle_index] * reverse(string[middle_index:string_length])\
    \ * string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj9beyi59.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpj9beyi59.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: build_palindrome_lengths\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj9beyi59.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj9beyi59.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj9beyi59.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj9beyi59.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: build_palindrome_lengths not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj9beyi59.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj9beyi59.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj9beyi59.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj9beyi59.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: build_palindrome_lengths\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj9beyi59.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj9beyi59.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj9beyi59.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  timestamp: 1659822387
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    longest_suffix_palindrome = find_longest_palindrome_suffix(string)\n\
    \    reverse_prefix = reverse(string[1:end-length(longest_suffix_palindrome)])\n\
    \    return reverse_prefix * string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpkiubnngb.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpkiubnngb.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkiubnngb.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkiubnngb.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkiubnngb.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpkiubnngb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkiubnngb.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkiubnngb.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkiubnngb.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpkiubnngb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkiubnngb.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkiubnngb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkiubnngb.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpkiubnngb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkiubnngb.jl:7\n "
  timestamp: 1659822387
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix = suffix_is_palindrome(string)\n\
    \    return string * reverse(string[1:end-suffix])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_5fwd1ia.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp_5fwd1ia.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: suffix_is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp_5fwd1ia.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_5fwd1ia.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5fwd1ia.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_5fwd1ia.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: suffix_is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_5fwd1ia.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_5fwd1ia.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5fwd1ia.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_5fwd1ia.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: suffix_is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_5fwd1ia.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_5fwd1ia.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5fwd1ia.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_5fwd1ia.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: suffix_is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_5fwd1ia.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/en"
  timestamp: 1659822387
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    reversed_string = reverse(string)\n\
    \    string_palindrome = string*reverse(string)\n    longest_postfix = longest_common_substring(string_palindrome,\
    \ string)\n    prefix = string[1:end-length(longest_postfix)]\n    return string*reverse(prefix)\n\
    end\n \nprint(make_palindrome(\"aabbaa\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: longest_common_substring not defined\n\
    Stacktrace:\n [1] make_palindrome(string::String)\n   @ Main /tmp/tmpztf5gbdp.jl:9\n\
    \ [2] top-level scope\n   @ /tmp/tmpztf5gbdp.jl:14\nin expression starting at\
    \ /tmp/tmpztf5gbdp.jl:14\n"
  stdout: ''
  timestamp: 1659822386
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    index = find_palindrome_index(string)\n\
    \    prefix = string[index+1:end]\n    return string * reverse(prefix)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp8g8334pu.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8g8334pu.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindrome_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8g8334pu.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8g8334pu.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8g8334pu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8g8334pu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindrome_index not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8g8334pu.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8g8334pu.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8g8334pu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8g8334pu.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindrome_index not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8g8334pu.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8g8334pu.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8g8334pu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8g8334pu.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindrome_index not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp8g8334pu.jl:7\n\
    \   [2] macro expansion\n     @ ~/.cond"
  timestamp: 1659822387
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    for i in length(string):-1:1\n\
    \        if is_palindrome(string[1:i])\n            return string * reverse(string[1:i])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpssnz02c1.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpssnz02c1.jl:1\n\
    in expression starting at /tmp/tmpssnz02c1.jl:1\n"
  stdout: ''
  timestamp: 1659822386
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    len = length(string)\n    for\
    \ i = 1:len-1\n        if string[1:i] == string[i+1:end]\n            return string*reverse(string[1:i])\n\
    \        end\n    end\n    return string*reverse(string)\nend\nmake_palindrome(\"\
    johnybar\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_xx2je3p.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp_xx2je3p.jl:22\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_xx2je3p.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_xx2je3p.jl:20\ntest set: Test Failed at /tmp/tmp_xx2je3p.jl:23\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"\
    xyzyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xx2je3p.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xx2je3p.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_xx2je3p.jl:24\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_xx2je3p.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_xx2je3p.jl:20\ntest set: Test Failed at /tmp/tmp_xx2je3p.jl:25\n\
    \  Expression: candidate(\"jerry\") == \"jerryrrej\"\n   Evaluated: \"jerryyrrej\"\
    \ == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xx2je3p.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xx2je3p.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822387
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    palindrome = string\n    for i\
    \ = 1:length(string)\n        # Check if current suffix is palindrome\n      \
    \  if is_palindrome(string[i:end])\n            # Append to the end the reverse\
    \ of a string prefix that comes before palindromic suffix\n            palindrome\
    \ = string[1:i-1] * reverse(string[1:i-1])\n            break\n        end\n \
    \   end\n    return palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxii57lea.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpxii57lea.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxii57lea.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxii57lea.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxii57lea.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpxii57lea.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxii57lea.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxii57lea.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxii57lea.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpxii57lea.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxii57lea.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxii57lea.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxii57lea.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpxii57lea.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxii57lea.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglo"
  timestamp: 1659822388
- exit_code: -1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n   \n    #\
    \ first find the longest palindromic suffix\n    suffix = String[]\n    k = 0\n\
    \    while k < n && string[n-k] == string[n-k-1]\n        push!(suffix, string[n-k])\n\
    \        k += 1\n    end\n    if k == n\n        return string\n    end\n    \n\
    \    # we now know that string[n-k:n] is the palindromic suffix.\n    # now we\
    \ need to find the longest palindromic prefix\n    prefix = String[]\n    k =\
    \ 0\n    while k < n-k-1 && string[k+1] == string[n-k]\n        push!(prefix,\
    \ string[k+1])\n        k += 1\n    end\n    \n    # now we know that the original\
    \ string can be written as string[1:n-k-1] || prefix || suffix\n    # we need\
    \ to find the longest palindromic prefix of string[1:n-k-1] || prefix, and append\
    \ it to the end of the string.\n    to_palindromize = string[1:n-k-1] * reverse(prefix)\n\
    \    m = length(to_palindromize)\n    # find the longest palindromic prefix by\
    \ finding the longest common prefix between the string and its reverse\n    j\
    \ = 1\n    while j <= m && to_palindromize[j] == to_palindromize[m-j+1]\n    \
    \    j += 1\n    end\n    return to_palindromize * reverse(to_palindromize[j:m])\
    \ * suffix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvm6e1tqv.jl:46\n  Test threw
    exception\n  Expression: candidate("x") == "x"\n  BoundsError: attempt to access
    1-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216
    [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3] getindex\n     @
    ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n     @
    Main /tmp/tmpvm6e1tqv.jl:12\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpvm6e1tqv.jl:46 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpvm6e1tqv.jl:44\ntest set: Error
    During Test at /tmp/tmpvm6e1tqv.jl:47\n  Test threw exception\n  Expression: candidate("xyz")
    == "xyzyx"\n  MethodError: no method matching *(::String, ::Vector{String})\n  Closest
    candidates are:\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:183\n    ...\n  Stacktrace:\n   [1]
    make_palindrome(string::String)\n     @ Main /tmp/tmpvm6e1tqv.jl:31\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm6e1tqv.jl:47 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm6e1tqv.jl:44\n'''
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n  if string == \"\"\n    return \"\
    \"\n  end\n  return string .* reverse(string[1:find_longest_palindrome_postfix(string,\
    \ 1)])\nend\n\"\"\" Find the longest palindrome in supplied string that ends at\
    \ supplied index.\n    Algorithm idea is simple:\n    - Expand the palindrome\
    \ through the middle outwards as long as we find equal characters on the left\
    \ and right side.\n                \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpzvk1xlzm.jl:12\nin expression starting at /tmp/tmpzvk1xlzm.jl:12\n"
  stdout: ''
  timestamp: 1659822386
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    begin_substring = 1\n    end_substring\
    \ = length(string)\n    len_substring = end_substring - begin_substring + 1\n\
    \    while len_substring >= 1\n        if is_palindrome(string[begin_substring:end_substring])\n\
    \            return string * reverse(string[1:begin_substring - 1])\n        end\n\
    \        len_substring -= 1\n        begin_substring += 1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpr9h_2t4e.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpr9h_2t4e.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr9h_2t4e.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr9h_2t4e.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr9h_2t4e.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpr9h_2t4e.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr9h_2t4e.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr9h_2t4e.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr9h_2t4e.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpr9h_2t4e.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr9h_2t4e.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr9h_2t4e.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ "
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    i::Int = length(string)\n    while\
    \ i > 0\n        if is_palindrome(string[1:i])\n            return string * reverse(string[i+1:end])\n\
    \        end\n        i -= 1\n    end\n    return string * reverse(string[2:end])\n\
    end\n    \nusing Base.Test\n@testset \"positive tests\" begin\n    @testset \"\
    palindromes\" begin\n        @test make_palindrome(\"abcba\") == \"abcba\"\n \
    \       @test make_palindrome(\"abccba\") == \"abccba\"\n        @test make_palindrome(\"\
    abcddcba\") == \"abcddcba\"\n    end\n    @testset \"strings that are not palindromes\"\
    \ begin\n        @test make_palindrome(\"abcd\") == \"abcdcba\"\n        @test\
    \ make_palindrome(\"abcde\") == \"abcdedcba\"\n        @test make_palindrome(\"\
    abcdef\") == \"abcdefedcba\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: Test not defined

    in expression starting at /tmp/tmpd9nc54fa.jl:17

    '
  stdout: ''
  timestamp: 1659822386
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if is_palindrome(string) return\
    \ string\n    n = length(string)\n    longest_palindrome_suffix = \"\"\n    for\
    \ i = n:-1:1\n        if is_palindrome(string[i:n])\n            longest_palindrome_suffix\
    \ = string[i:n]\n            break\n        end\n    end\n    string = string\
    \ * reverse(string[1:i-1])\n    return string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppqfke30r.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppqfke30r.jl:1\n\
    in expression starting at /tmp/tmppqfke30r.jl:1\n"
  stdout: ''
  timestamp: 1659822387
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string = string[:]\n    longest_palindrome\
    \ = find_longest_palindrome(string)\n    if longest_palindrome == 0\n        string\
    \ = join([reverse(string), string])\n    else\n        left = string[:end-longest_palindrome]\n\
    \        right = string[end-longest_palindrome+1:end]\n        string = join([reverse(left),\
    \ right, left])\n    end\n    return string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvblwa4cq.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpvblwa4cq.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvblwa4cq.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvblwa4cq.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvblwa4cq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvblwa4cq.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvblwa4cq.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvblwa4cq.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvblwa4cq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvblwa4cq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvblwa4cq.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvblwa4cq.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvblwa4cq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvblwa4cq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvblwa4cq.jl:8\n   [2] macro expansion\n     @"
  timestamp: 1659822388
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if string == \"\" \n        return\
    \ \"\"\n    end\n    string_arr = find_longest_palindrome(string)\n    i = string_arr[1]\n\
    \    prefix = string[1:i]\n    prefix_reversed = prefix[length(prefix):-1:1]\n\
    \    return prefix_reversed * string \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp86q0vn_9.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp86q0vn_9.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp86q0vn_9.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp86q0vn_9.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp86q0vn_9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp86q0vn_9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp86q0vn_9.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp86q0vn_9.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp86q0vn_9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp86q0vn_9.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp86q0vn_9.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp86q0vn_9.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp86q0vn_9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp86q0vn_9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp86q0vn_9.jl:10\n   [2] macr"
  timestamp: 1659822388
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if ispalindrome(string)\n    \
    \    return string\n    end\n    n = length(string)\n    for m in n:-1:1\n   \
    \     if ispalindrome(string[m:n])\n            return string * reverse(string[1:m])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprofubobh.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmprofubobh.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprofubobh.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprofubobh.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprofubobh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprofubobh.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprofubobh.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprofubobh.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprofubobh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprofubobh.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprofubobh.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprofubobh.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprofubobh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprofubobh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprofubobh.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v"
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    palindrome_lengths = get_palindrome_lengths(string)\n\
    \    longest_palindrome_index =  find_longest_palindrome_index(palindrome_lengths)\n\
    \    longest_palindrome_length = palindrome_lengths[longest_palindrome_index]\n\
    \    reverse_prefix = string[1:end-longest_palindrome_length]\n    reverse_prefix\
    \ = reverse(reverse_prefix)\n    return string * reverse_prefix\nend\n \n \n \n\
    \"\"\" Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n                \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpvl6wrs84.jl:17\nin expression starting at /tmp/tmpvl6wrs84.jl:17\n"
  stdout: ''
  timestamp: 1659822387
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    s = string\n    p = LPS(s)\n \
    \   for i in p:s = push!(s,s[i])\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwwt7stvn.jl:9\nin expression starting at /tmp/tmpwwt7stvn.jl:9\n"
  stdout: ''
  timestamp: 1659822387
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    left = 1\n    right = length(string)\n\
    \    while (left <= right)\n        if string[left] == string[right]\n       \
    \     left += 1\n            right -= 1\n        else\n            left = 1\n\
    \            right -= 1\n        end\n    end\n    string = string[1:right]\n\
    \    reversed = string[end:-1:1]\n    return reversed * string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp84sk0mkv.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp84sk0mkv.jl:28\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp84sk0mkv.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp84sk0mkv.jl:26\ntest set: Test Failed at /tmp/tmp84sk0mkv.jl:29\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n   Evaluated: \"\" == \"xyzyx\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp84sk0mkv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp84sk0mkv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp84sk0mkv.jl:30\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp84sk0mkv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp84sk0mkv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp84sk0mkv.jl:31\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp84sk0mkv.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp84sk0mkv.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822388
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # First we find the suffix\n \
    \   suffix = \"\"\n    longest_palindrome = \"\"\n    while length(string) > 0\n\
    \        suffix = string[end] * suffix\n        if is_palindrome(suffix)\n   \
    \         longest_palindrome = suffix\n        end\n        string = string[1:end-1]\n\
    \    end\n    return longest_palindrome * reverse(string)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpko5gnkx2.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpko5gnkx2.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpko5gnkx2.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpko5gnkx2.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpko5gnkx2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpko5gnkx2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpko5gnkx2.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpko5gnkx2.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpko5gnkx2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpko5gnkx2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpko5gnkx2.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpko5gnkx2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpko5gnkx2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpko5gnkx2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpko5gnkx2.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglo"
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    s_length = length(string)\n  \
    \  if s_length < 2\n        return string\n    end\n    suffix = suffix_palindrome(string)\n\
    \    prefix = reverse(string[1:s_length - length(suffix)])\n    return string\
    \ * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmph92f8dgs.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmph92f8dgs.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: suffix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph92f8dgs.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph92f8dgs.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph92f8dgs.jl:19\ntest set:\
    \ Error During Test at /tmp/tmph92f8dgs.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmph92f8dgs.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph92f8dgs.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph92f8dgs.jl:19\ntest set:\
    \ Error During Test at /tmp/tmph92f8dgs.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: suffix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph92f8dgs.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph92f8dgs.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph92f8dgs.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    is_palindrome(string) && return\
    \ string\n    buffer = string[findall(string)[end] + 1:end]\n    buffer == \"\"\
    \ && return string * 2\n    return string * 2 * reverse(buffer)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpptmbth5p.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpptmbth5p.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpptmbth5p.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpptmbth5p.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpptmbth5p.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpptmbth5p.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpptmbth5p.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpptmbth5p.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpptmbth5p.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpptmbth5p.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpptmbth5p.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpptmbth5p.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpptmbth5p.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpptmbth5p.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpptmbth5p.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    # Find the longest postfix that\
    \ is a palindrome\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\n  \
    \  # The whole string is a palindrome.\n    return string\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprn9c4nga.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmprn9c4nga.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprn9c4nga.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprn9c4nga.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprn9c4nga.jl:20\ntest set:\
    \ Error During Test at /tmp/tmprn9c4nga.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprn9c4nga.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprn9c4nga.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprn9c4nga.jl:20\ntest set:\
    \ Error During Test at /tmp/tmprn9c4nga.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprn9c4nga.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprn9c4nga.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprn9c4nga.jl:20\ntest set:\
    \ Error During Test at /tmp/tmprn9c4nga.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprn9c4nga.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    suffix =  is_palindrome(string)\n\
    \    prefix = reverse(string[1:end])\n    if suffix == \"\"\n        return prefix\n\
    \    elseif suffix == string\n        return reverse(prefix)\n    else\n     \
    \   return prefix * string\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpuijz7g5e.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpuijz7g5e.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpuijz7g5e.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuijz7g5e.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuijz7g5e.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuijz7g5e.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpuijz7g5e.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuijz7g5e.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuijz7g5e.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuijz7g5e.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpuijz7g5e.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuijz7g5e.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuijz7g5e.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuijz7g5e.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpuijz7g5e.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_prefix_length = -1\n    for\
    \ i in 0:length(string)\n        if is_palindrome(string[end-i+1:end])\n     \
    \       max_prefix_length = i\n            break\n        end\n    end\n    return\
    \ string * reverse(string[1:end-max_prefix_length])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvnw8q_z6.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpvnw8q_z6.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvnw8q_z6.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvnw8q_z6.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvnw8q_z6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvnw8q_z6.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvnw8q_z6.jl:9\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvnw8q_z6.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvnw8q_z6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvnw8q_z6.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvnw8q_z6.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvnw8q_z6.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvnw8q_z6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvnw8q_z6.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvnw8q_z6.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822390
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    n = length(string)\n    i = n\n\
    \    is_palindrome = Bool[]\n    # find longest palindromic postfix\n    while\
    \ i >= 1\n        is_palindrome = is_palindrome_rec(string, i, i)\n        if\
    \ is_palindrome == true\n            break\n        end\n        is_palindrome\
    \ = is_palindrome_rec(string, i, i+1)\n        if is_palindrome == true\n    \
    \        break\n        end\n        i -= 1\n    end\n    # append the reverse\
    \ of the remaining part of the original string\n    return string * reverse(string[1:n-i+1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6jq43swj.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp6jq43swj.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [1:1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmp6jq43swj.jl:23\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6jq43swj.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6jq43swj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6jq43swj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome_rec not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6jq43swj.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6jq43swj.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6jq43swj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6jq43swj.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome_rec not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6jq43swj.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6jq43swj.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6jq43swj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6jq43swj.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome_rec not defined\n\
    \  Stack"
  timestamp: 1659822390
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    _length = length(string)\n   \
    \ for i = _length:-1:0\n        is_palin = true\n        for j = 0:floor(i/2)\n\
    \            if string[j+1] != string[i-j]\n                is_palin = false\n\
    \                break\n            end\n        end\n        if is_palin\n  \
    \          return string * string[1:_length-i]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpj3_4rkvq.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpj3_4rkvq.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching getindex(::String,\
    \ ::Float64)\n  Closest candidates are:\n    getindex(::AbstractString, !Matched::Colon)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:189\n    getindex(::String,\
    \ !Matched::Int64) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:222\n\
    \    getindex(::AbstractString, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:184\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpj3_4rkvq.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj3_4rkvq.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj3_4rkvq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpj3_4rkvq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching getindex(::String,\
    \ ::Float64)\n  Closest candidates are:\n    getindex(::AbstractString, !Matched::Colon)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:189\n    getindex(::String,\
    \ !Matched::Int64) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:222\n\
    \    getindex(::AbstractString, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:184\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpj3_4rkvq.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj3_4rkvq.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj3_4rkvq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpj3_4rkvq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  Met"
  timestamp: 1659822391
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    prefix = string[1:end]\n    palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    palindrome_prefix = string[1:end-length(palindrome_suffix)]\n\
    \    return string * reverse(palindrome_prefix)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmproz3_w16.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmproz3_w16.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmproz3_w16.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproz3_w16.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproz3_w16.jl:16\ntest set:\
    \ Error During Test at /tmp/tmproz3_w16.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmproz3_w16.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproz3_w16.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproz3_w16.jl:16\ntest set:\
    \ Error During Test at /tmp/tmproz3_w16.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmproz3_w16.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproz3_w16.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproz3_w16.jl:16\ntest set:\
    \ Error During Test at /tmp/tmproz3_w16.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmproz3_w16.jl:8\n "
  timestamp: 1659822390
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    string = string\n    # Find the\
    \ palindromic suffix\n    suffix = find_palindromic_suffix(string)\n    # Append\
    \ reversed prefix to the end of the string \n    string = string*reverse(string[1:end-length(suffix)])\n\
    \    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpmoozwqnk.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpmoozwqnk.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmoozwqnk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmoozwqnk.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmoozwqnk.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmoozwqnk.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmoozwqnk.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmoozwqnk.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmoozwqnk.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmoozwqnk.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmoozwqnk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmoozwqnk.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmoozwqnk.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmoozwqnk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmoozwqnk.jl:9\n   [2] macro expansion\n     @"
  timestamp: 1659822390
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    length = strlen(string)\n\
    \    string_list = split(string, \"\")\n    prefix_list = split(string, \"\")\n\
    \    reverse_prefix_list = copy(prefix_list)\n    suff = length\n    while !is_palindrome(prefix_list)\
    \ && suff > 0\n        pop!(prefix_list)\n        suff -= 1\n    end\n    push!(prefix_list,\
    \ reverse_prefix_list)\n    return join(prefix_list, \"\")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzjolcuw9.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpzjolcuw9.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: strlen not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzjolcuw9.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjolcuw9.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjolcuw9.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzjolcuw9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: strlen not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzjolcuw9.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjolcuw9.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjolcuw9.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzjolcuw9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: strlen not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzjolcuw9.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjolcuw9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjolcuw9.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzjolcuw9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: strlen not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzjolcuw9.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  timestamp: 1659822390
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n  n = length(string)\n  suffix = suffix_is_palindrome(string)\n\
    \  reverse(string[1:suffix]) * string\nend\nmake_palindrome(\"banana\")\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: suffix_is_palindrome not defined\nStacktrace:\n\
    \ [1] make_palindrome(string::String)\n   @ Main /tmp/tmp9y90cqdz.jl:8\n [2] top-level\
    \ scope\n   @ /tmp/tmp9y90cqdz.jl:11\nin expression starting at /tmp/tmp9y90cqdz.jl:11\n"
  stdout: ''
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    return string * reverse(string)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht8g1zho.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpht8g1zho.jl:15\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\ntest set: Test Failed at /tmp/tmpht8g1zho.jl:16\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"\
    xyzyx\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpht8g1zho.jl:17\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\ntest set: Test Failed at /tmp/tmpht8g1zho.jl:18\n\
    \  Expression: candidate(\"jerry\") == \"jerryrrej\"\n   Evaluated: \"jerryyrrej\"\
    \ == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht8g1zho.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht8g1zho.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    l = length(string)\n    tmp =\
    \ string\n    suffix = \"\"\n    for i in length(string):-1:1\n        suffix\
    \ = string[i] * suffix\n        tmp = string[1:i]\n        if is_palindrome(tmp)\n\
    \            return string * suffix\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq55w1hyk.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq55w1hyk.jl:1\n\
    in expression starting at /tmp/tmpq55w1hyk.jl:1\n"
  stdout: ''
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    begin_index = find_max_palindrome_begin_index(string)\n\
    \    return string[begin_index:end] * string[1:begin_index]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp3q19uf8l.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp3q19uf8l.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_max_palindrome_begin_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3q19uf8l.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3q19uf8l.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3q19uf8l.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp3q19uf8l.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_max_palindrome_begin_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3q19uf8l.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3q19uf8l.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3q19uf8l.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp3q19uf8l.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_max_palindrome_begin_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3q19uf8l.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3q19uf8l.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3q19uf8l.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp3q19uf8l.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_max_palindrome_begin_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3q19uf8l.jl"
  timestamp: 1659822390
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    s = \"$\" * length(string)\n \
    \   suf = reverse(string)\n    for i in 1:length(suf)\n        string *= suf[i]\n\
    \    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6pj3ovrb.jl:7\nin expression starting at /tmp/tmp6pj3ovrb.jl:7\n"
  stdout: ''
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    rev_string = reverse(string)\n\
    \    if is_palindrome(string) return string\n    for i in 1:length(string)\n \
    \       if is_palindrome(string[1:i]) \n            return string * rev_string[length(string)\
    \ - i + 1:length(string)]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_u4_qu3y.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_u4_qu3y.jl:1\n\
    in expression starting at /tmp/tmp_u4_qu3y.jl:1\n"
  stdout: ''
  timestamp: 1659822389
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if length(string) == 0\n     \
    \   return string\n    end\n    n = length(string)\n    #TODO: add support for\
    \ UTF8 encoding\n    reversed_string = reverse(string)\n    # if s is a palindrome,\
    \ just return s\n    if string == reversed_string\n        return string\n   \
    \ end\n    # otherwise find the longest common prefix of s and its reverse\n \
    \   lcp_length = longest_common_prefix(string, reversed_string)\n    # lcp_length\
    \ is the length of the longest palindromic suffix of s\n    # return reverse of\
    \ a prefix of s + s\n    return string[n-lcp_length:n] * string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmplenff8an.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmplenff8an.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_common_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplenff8an.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplenff8an.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplenff8an.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplenff8an.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_common_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplenff8an.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplenff8an.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplenff8an.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  timestamp: 1659822391
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    len = length(string)\n    for\
    \ i = len:-1:1\n        if string[1:i] == reverse(string[end-i+1:end])\n     \
    \       return string * reverse(string[i+1:end])\n        end\n    end\n    return\
    \ string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzxp0l1ez.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpzxp0l1ez.jl:22\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzxp0l1ez.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxp0l1ez.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpzxp0l1ez.jl:24\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzxp0l1ez.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzxp0l1ez.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822390
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n  new_string = copy(string)\n  j =\
    \ 0\n  for i in 1:length(string)\n    if i > j\n      new_string = string[1:j]\
    \ * reverse(string[1:i]) * string[j+1:end]\n      break\n    end\n    if string[i]\
    \ == string[j]\n      j = j + 1\n    else\n      j = 0\n    end\n  end\n  return\
    \ new_string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnds2m4z9.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpnds2m4z9.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching copy(::String)\n\
    \  Closest candidates are:\n    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv})\
    \ where Tv<:Union{Float64, ComplexF64} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:504\n\
    \    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv}, !Matched::Integer, !Matched::Integer)\
    \ where Tv<:Float64 at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:507\n\
    \    copy(!Matched::T) where T<:SHA.SHA2_CTX at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SHA/src/types.jl:212\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpnds2m4z9.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnds2m4z9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnds2m4z9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpnds2m4z9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching copy(::String)\n\
    \  Closest candidates are:\n    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv})\
    \ where Tv<:Union{Float64, ComplexF64} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:504\n\
    \    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv}, !Matched::Integer, !Matched::Integer)\
    \ where Tv<:Float64 at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:507\n\
    \    copy(!Matched::T) where T<:SHA.SHA2_CTX at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SHA/src/types.jl:212\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpnds2m4z9.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnds2m4z9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.con"
  timestamp: 1659822392
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    if is_palindrome(string)\n   \
    \     return string\n    end\n    longest_suffix = find_longest_suffix_palindrome(string)\n\
    \    prefix = substring(string, 0, length(string) - length(longest_suffix))\n\
    \    return prefix * longest_suffix * reverse(prefix)\nend\n \nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp3f9c9asy.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp3f9c9asy.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp3f9c9asy.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3f9c9asy.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3f9c9asy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3f9c9asy.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp3f9c9asy.jl:7\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3f9c9asy.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3f9c9asy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3f9c9asy.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp3f9c9asy.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3f9c9asy.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3f9c9asy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3f9c9asy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp3f9c9asy.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659822391
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    i = find_longest_palindrome_suffix(string)\n\
    \    return string[i+1:end] * string[1:i] * string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4_0skgrb.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp4_0skgrb.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4_0skgrb.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4_0skgrb.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4_0skgrb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp4_0skgrb.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4_0skgrb.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4_0skgrb.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4_0skgrb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp4_0skgrb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4_0skgrb.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4_0skgrb.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4_0skgrb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp4_0skgrb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4_0skgrb.jl:7\n "
  timestamp: 1659822392
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    is_palindrome(s::String) = s ==\
    \ reverse(s)\n    find_palindrome_suffix(s::String) = \n        findfirst(is_palindrome,\
    \ reverse(collect(s)))\n    middle_start = find_palindrome_suffix(string)\n  \
    \  middle_start > 1 ? string * reverse(string[1:middle_start-1]) : string\nend\n\
    make_palindrome(\"cac\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching (::var\"#is_palindrome#1\"\
    )(::Char)\nClosest candidates are:\n  (::var\"#is_palindrome#1\")(!Matched::String)\
    \ at /tmp/tmp5fi9iky8.jl:7\nStacktrace:\n [1] findnext\n   @ ./array.jl:1951 [inlined]\n\
    \ [2] findfirst\n   @ ./array.jl:2002 [inlined]\n [3] (::var\"#find_palindrome_suffix#2\"\
    {var\"#is_palindrome#1\"})(s::String)\n   @ Main /tmp/tmp5fi9iky8.jl:8\n [4] make_palindrome(string::String)\n\
    \   @ Main /tmp/tmp5fi9iky8.jl:10\n [5] top-level scope\n   @ /tmp/tmp5fi9iky8.jl:13\n\
    in expression starting at /tmp/tmp5fi9iky8.jl:13\n"
  stdout: ''
  timestamp: 1659822393
