language: jl
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    odd = filter(x ->\
    \ sum(abs(x) .% 2 .== 0) == 0, x)\n    return sort(odd)\nend\nunique_digits([45,\
    \ 1, 97, 6, 54, 3, 67, 5, 3, 2, 9, 1, 0, 1, 9, 10, 15, 11, 22, 5, 3, 19, 23, 5,\
    \ 4, 8, 18, 6, 8, 12, 6, 9, 16, 5, 11, 11, 17, 5, 5, 1, 9, 6, 18, 15, 9, 3, 4,\
    \ 8, 9, 6, 16, 0, 8, 4, 10, 10, 19, 12, 0, 14, 9, 8, 17, 18, 8, 12, 8, 0, 14,\
    \ 15, 3, 16, 11, 1, 10, 10, 9, 5, 11, 17, 9, 18, 1, 19, 0, 12, 16, 16, 15, 6,\
    \ 5, 19, 1, 10, 17, 15, 10, 3, 11, 1, 15, 16, 6, 2, 17, 1, 8, 8, 4, 2, 15, 2,\
    \ 4, 4, 1, 14, 14, 3, 19, 2, 7, 2, 4, 2, 1, 3, 6, 2, 7, 15, 13, 13, 16, 13, 13,\
    \ 13, 13, 13, 17, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 17, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0a46syhw.jl:13\nin expression starting at\
    \ /tmp/tmp0a46syhw.jl:13\n"
  stdout: ''
  timestamp: 1659821705
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n  # Your code\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp70tvmpun.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp70tvmpun.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp70tvmpun.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp70tvmpun.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp70tvmpun.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp70tvmpun.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp70tvmpun.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp70tvmpun.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821708
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    result = []\n\
    \    \n    for number in x\n        if !(number in result) && has_even_digit(number)\
    \ == false\n            push!(result, number)\n        end\n    end\n    return\
    \ sort(result)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7h7wnnif.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp7h7wnnif.jl:24\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7h7wnnif.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7h7wnnif.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7h7wnnif.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp7h7wnnif.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7h7wnnif.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7h7wnnif.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7h7wnnif.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp7h7wnnif.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7h7wnnif.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7h7wnnif.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7h7wnnif.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp7h7wnnif.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    @show x\n    # TODO:\
    \ Write your code here\n    newArray = Vector{Int64}()\n    #Make array of odd\
    \ numbers\n    for i = 1:length(x)\n        if mod(x[i],2) != 0\n            #push!(newArray,\
    \ x[i])\n            #sort!(newArray)\n            #println(newArray)\n      \
    \  end\n    end\n    sort!(newArray)\n    return newArray\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpclq1ugon.jl:25

    '
  stdout: "x = [15, 33, 1422, 1]\ntest set: Test Failed at /tmp/tmpclq1ugon.jl:28\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[]\
    \ == [1, 15, 33]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclq1ugon.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclq1ugon.jl:27\nx = [152, 323,\
    \ 1422, 10]\nx = [12345, 2033, 111, 151]\ntest set: Test Failed at /tmp/tmpclq1ugon.jl:30\n\
    \  Expression: candidate([12345, 2033, 111, 151]) == [111, 151]\n   Evaluated:\
    \ Int64[] == [111, 151]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclq1ugon.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclq1ugon.jl:27\nx = [135, 103,\
    \ 31]\ntest set: Test Failed at /tmp/tmpclq1ugon.jl:31\n  Expression: candidate([135,\
    \ 103, 31]) == [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclq1ugon.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclq1ugon.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821706
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort(x[![Int(d)%2\
    \ == 0 for d in string.(x)]])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt71fhfix.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpt71fhfix.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching Int64(::String)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(d::String)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpt71fhfix.jl:9\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpt71fhfix.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpt71fhfix.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpt71fhfix.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching Int64(::String)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(d::String)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpt71fhfix.jl:9\n\
    \   [5] mac"
  timestamp: 1659821708
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ unique(x)\n    even_digits = filter(x -> contains(r\"\\d*[02468]\\d*\", string(x)),\
    \ unique_digits)\n    return filter(x -> !(x in even_digits), unique_digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpikq6b5ju.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpikq6b5ju.jl:18\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Regex, ::String)\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] (::var\"#1#3\")(x::Int64)\n     @ Main /tmp/tmpikq6b5ju.jl:10\n\
    \   [2] filter(f::var\"#1#3\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpikq6b5ju.jl:10\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpikq6b5ju.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpikq6b5ju.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpikq6b5ju.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Regex, ::String)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    contains(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n  Stacktrace:\n\
    \   [1] (::var\"#1#3\")(x::Int64)\n     @ Main /tmp/tmpikq6b5ju.jl:10\n   [2]\
    \ filter(f::var\"#1#3\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpikq6b5ju.jl:10\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpikq6b5ju.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpikq6b5ju.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpikq6b5ju.jl:20\n  Test threw exception\n  Expressi"
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    if isempty(x)\n\
    \        return []\n    end\n    y = []\n    for i in x\n        if !has_even_digit(i)\n\
    \            push!(y, i)\n        end\n    end\n    sort(y)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcuxh6l3d.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpcuxh6l3d.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcuxh6l3d.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcuxh6l3d.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcuxh6l3d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpcuxh6l3d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcuxh6l3d.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcuxh6l3d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcuxh6l3d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpcuxh6l3d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcuxh6l3d.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcuxh6l3d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcuxh6l3d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpcuxh6l3d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    new_vec = []\n \
    \   for i in x\n        if i % 2 == 0\n            new_vec = push!(new_vec, i)\n\
    \        end\n    end\n    return sort(new_vec)\nend\n@assert unique_digits([1,\
    \ 11, 34, 53, 43]) == [43]\n@assert unique_digits([1, 33, 75, 22, 98]) == [1,\
    \ 33, 75]\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: AssertionError: unique_digits([1, 11, 34, 53, 43]) ==\
    \ [43]\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfzg7bruz.jl:17\nin expression\
    \ starting at /tmp/tmpfzg7bruz.jl:17\n"
  stdout: ''
  timestamp: 1659821705
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \"\"\"\n    INPUT:\n\
    \        - `x`: a list of positive integers\n    \n    OUTPUT:\n        - returns\
    \ a sorted list of all elements that hasn't any even digit.\n        \n    EXAMPLES:\n\
    \        unique_digits([1, 11, 12, 22, 23, 32, 33, 100, 102, 200, 201, 211, 212,\
    \ 221, 222, 1000, 1002, 1010, 1020, 1101, 1102, 1110, 1120, 1211, 1212, 1221,\
    \ 1222, 2000, 2002, 2010, 2020, 2101, 2102, 2110, 2120, 2201, 2202, 2210, 2220])\n\
    \            [1, 1001, 1011, 1021, 1101, 1111, 1121, 1211, 1221, 2001, 2011, 2021,\
    \ 2101, 2111, 2121, 2201, 2211, 2221]\n    \"\"\"\n    res = Array{Int64}(0)\n\
    \    for i = 1:length(x)\n        c = false\n        for j = 1:length(digits(x[i]))\n\
    \            if digits(x[i])[j]%2 == 0\n                c = true\n           \
    \     break\n            end\n        end\n        if c == false\n           \
    \ push!(res, x[i])\n        end\n    end\n    return sort(res)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzmix2u4u.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpzmix2u4u.jl:40\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpzmix2u4u.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzmix2u4u.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzmix2u4u.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzmix2u4u.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpzmi"
  timestamp: 1659821708
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x_noeven = Int[]\n\
    \    for i = 1:length(x)\n        if !contains(collect(0:1:9), mod(x[i], 10))\n\
    \            push!(x_noeven, x[i])\n        end\n    end\n    sort(x_noeven)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt_9vjfhy.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpt_9vjfhy.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpt_9vjfhy.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt_9vjfhy.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt_9vjfhy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpt_9vjfhy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpt_9vjfhy.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt_9vjfhy.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt_9vjfhy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpt_9vjfhy.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    conta"
  timestamp: 1659821708
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    #=\n    function\
    \ unique_digits(x::Vector{Int64})::Vector{Int64} \n    =#\n    # get the number\
    \ of elements in x\n    num_elements = length(x)\n    # create an array of zeroed\
    \ elements the same size as x\n    is_even = zeros(Int64, length(x))\n    # for\
    \ each element in x\n    for (i, element) in enumerate(x)\n        # convert each\
    \ element to a string\n        element_string = string(element)\n        # for\
    \ each digit in the element string\n        for j in eachindex(element_string)\n\
    \            # check if the digit is even\n            if parse(Int64, element_string[j])\
    \ % 2 == 0\n                # if the digit is even\n                # change the\
    \ corresponding value in is_even to 1\n                is_even[i] = 1\n      \
    \          # stop iterating\n                break\n            end\n        end\n\
    \    end\n    # return a new array containing the elements from x\n    # that\
    \ have corresponding entries in is_even of 0\n    return x[is_even .== 0]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaaqqch4c.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaaqqch4c.jl:41\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaaqqch4c.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaaqqch4c.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaaqqch4c.jl:44\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaaqqch4c.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaaqqch4c.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     2      4\n"
  timestamp: 1659821706
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    # list to\
    \ save numbers with even digits\n    even_list = []\n    \n    # list to save\
    \ numbers with odd digits\n    odd_list = []\n    \n    # iterate over the numbers\
    \ in x\n    for num in x\n        \n        # check if num has an even digit and\
    \ append num to even_list\n        if any(mod.(num, 2) .== 0)\n            push!(even_list,\
    \ num)\n        end\n        \n        # check if num has an odd digit and append\
    \ num to odd_list\n        if any(mod.(num, 2) .== 1)\n            push!(odd_list,\
    \ num)\n        end\n    end\n    \n    # return odd_list sorted\n    sort(odd_list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf5nfb9sq.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpf5nfb9sq.jl:39\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf5nfb9sq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf5nfb9sq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpf5nfb9sq.jl:40\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf5nfb9sq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf5nfb9sq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpf5nfb9sq.jl:41\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf5nfb9sq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf5nfb9sq.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821706
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    y = Set([])\n  \
    \  for i in x\n        push!(y, i)\n    end\n    return sort(y)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9xsv_krr.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp9xsv_krr.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching sort(::Set{Any})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp9xsv_krr.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xsv_krr.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xsv_krr.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9xsv_krr.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching sort(::Set{Any})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp9xsv_krr.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xsv_krr.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xsv_krr.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9xsv_krr.jl:22\n "
  timestamp: 1659821708
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n  count = 1\n  for i\
    \ in x\n    if(regexp(\"[^2468]\",string(i)))\n      count += 1\n    end\n  end\n\
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpit2i_n9y.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpit2i_n9y.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: regexp\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpit2i_n9y.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpit2i_n9y.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpit2i_n9y.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpit2i_n9y.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: regexp\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpit2i_n9y.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpit2i_n9y.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpit2i_n9y.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpit2i_n9y.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: regexp not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpit2i_n9y.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpit2i_n9y.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpit2i_n9y.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpit2i_n9y.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: regexp not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpit2i_n9y.jl:11\n\
    \   ["
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    sort(unique(floor.(Int64,\
    \ 10.0 .^ (digits(x)))))\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7ep_d_sn.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp7ep_d_sn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp7ep_d_sn.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ep_d_sn.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ep_d_sn.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp7ep_d_sn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp7ep_d_sn.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ep_d_sn.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ep_d_sn.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp7ep_d_sn.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base"
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \"\"\"\n       \
    \ Examples:\n        unique_digits([22, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23,\
    \ 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24,\
    \ 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25,\
    \ 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26,\
    \ 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27,\
    \ 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23,\
    \ 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24,\
    \ 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25,\
    \ 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26,\
    \ 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23,\
    \ 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24,\
    \ 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25,\
    \ 26, 27, 23, 24, 25, 26, 23, 24, 25, 26, 27, 23, 24, 25, 26, 23, 24, 25, 26,\
    \ 27, 23, 24, 25, 26, 23, 24, 25, 26, 27,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfy1yoki.jl:1\nin expression starting at /tmp/tmpnfy1yoki.jl:1\n"
  stdout: ''
  timestamp: 1659821705
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x_digits = []\n\
    \    for i = 1:length(x)\n        if x[i] % 2 == 0\n            push!(x_digits,x[i])\n\
    \        end\n    end\n    return x_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmputfk0h07.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmputfk0h07.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputfk0h07.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputfk0h07.jl:21\ntest set: Test\
    \ Failed at /tmp/tmputfk0h07.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputfk0h07.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputfk0h07.jl:21\ntest set: Test\
    \ Failed at /tmp/tmputfk0h07.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputfk0h07.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputfk0h07.jl:21\ntest set: Test\
    \ Failed at /tmp/tmputfk0h07.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmputfk0h07.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmputfk0h07.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659821706
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return x[findall(d\
    \ -> !(any(y -> y%2==0, digits(d))), x)]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpifmg2ncb.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpifmg2ncb.jl:16\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpifmg2ncb.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpifmg2ncb.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpifmg2ncb.jl:19\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpifmg2ncb.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpifmg2ncb.jl:15\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     2      4\n"
  timestamp: 1659821706
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    new_x = Vector{Int64}()\n\
    \    for i in x\n        if digit_check(i)\n            continue\n        else\n\
    \            push!(new_x, i)\n        end\n    end\n    return sort(new_x)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp6h_fa99m.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp6h_fa99m.jl:24\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digit_check\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6h_fa99m.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6h_fa99m.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6h_fa99m.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6h_fa99m.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digit_check\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6h_fa99m.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6h_fa99m.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6h_fa99m.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6h_fa99m.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digit_check\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6h_fa99m.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6h_fa99m.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6h_fa99m.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6h_fa99m.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digit_check not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tm"
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    #x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \    unique_digits = []\n    for i in x\n        if i < 10\n            push!(unique_digits,\
    \ i)\n        elseif i < 100\n            if (i % 10 != 0) && (i % 10 != 2) &&\
    \ (i % 10 != 4) && (i % 10 != 6) && (i % 10 != 8)\n                push!(unique_digits,\
    \ i)\n            end\n        elseif i < 1000\n            if (i % 10 != 0) &&\
    \ (i % 10 != 2) && (i % 10 != 4) && (i % 10 != 6) && (i % 10 != 8) && (i % 100\
    \ != 0) && (i % 100 != 20) && (i % 100 != 40) && (i % 100 != 60) && (i % 100 !=\
    \ 80)\n                push!(unique_digits, i)\n            end\n        elseif\
    \ i < 10000\n            if (i % 10 != 0) && (i % 10 != 2) && (i % 10 != 4) &&\
    \ (i % 10 != 6) && (i % 10 != 8) && (i % 100 != 0) && (i % 100 != 20) && (i %\
    \ 100 != 40) && (i % 100 != 60) && (i % 100 != 80) && (i % 1000 != 0) && (i %\
    \ 1000 != 200) && (i % 1000 != 400) && (i % 1000 != 600) && (i % 1000 != 800)\n\
    \                push!(unique_digits, i)\n            end\n        elseif i <\
    \ 100000\n            if (i % 10 != 0) && (i % 10 != 2) && (i % 10 != 4) && (i\
    \ % 10 != 6) && (i % 10 != 8) && (i % 100 != 0) && (i % 100 != 20) && (i % 100\
    \ != 40) && (i % 100 != 60) && (i % 100 != 80) && (i % 1000 != 0) && (i % 1000\
    \ != 200) && (i % 1000 != 400) && (i % 1000 != 600)\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46s7wetd.jl:1\nin expression starting at /tmp/tmp46s7wetd.jl:1\n"
  stdout: ''
  timestamp: 1659821705
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x = sort(x, by =\
    \ digit_to_i)\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpynxdq24z.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpynxdq24z.jl:17\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digit_to_i\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpynxdq24z.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpynxdq24z.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpynxdq24z.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpynxdq24z.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digit_to_i\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpynxdq24z.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpynxdq24z.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpynxdq24z.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpynxdq24z.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digit_to_i\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpynxdq24z.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpynxdq24z.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpynxdq24z.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpynxdq24z.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digit_to_i not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpynxdq2"
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    sort(filter(n ->\
    \ !any(n % 2 == 0), x))\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1oiq4u_6.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp1oiq4u_6.jl:17\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1oiq4u_6.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1oiq4u_6.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp1oiq4u_6.jl:18\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1oiq4u_6.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1oiq4u_6.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp1oiq4u_6.jl:19\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1oiq4u_6.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1oiq4u_6.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821706
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    y = []\n    for\
    \ num in x\n        if !(in_str(\"02468\", num))\n            push!(y, num)\n\
    \        end\n    end\n    return sort(y)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpte7mw5aa.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpte7mw5aa.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: in_str\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpte7mw5aa.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpte7mw5aa.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpte7mw5aa.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpte7mw5aa.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: in_str\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpte7mw5aa.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpte7mw5aa.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpte7mw5aa.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpte7mw5aa.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: in_str not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpte7mw5aa.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpte7mw5aa.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpte7mw5aa.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpte7mw5aa.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: in_str not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpte7mw5aa.jl:11\n\
    \   ["
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    all_odd = true\n\
    \    out = []\n    for i in x\n        for j in i\n            if j == 0 || j\
    \ == 2 || j == 4 || j == 6 || j == 8\n                all_odd = false\n      \
    \      end\n        end\n        if all_odd == true\n            push!(out, i)\n\
    \        end\n        all_odd = true\n    end\n    sort(out)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptxduyjh5.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmptxduyjh5.jl:29\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxduyjh5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxduyjh5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptxduyjh5.jl:30\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxduyjh5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxduyjh5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptxduyjh5.jl:31\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxduyjh5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxduyjh5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptxduyjh5.jl:32\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxduyjh5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxduyjh5.jl:28\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821708
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return x[map(y ->\
    \ count(y -> (y%2==0), digits(y)) == 0, x)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpob7hj_m4.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpob7hj_m4.jl:16\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpob7hj_m4.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpob7hj_m4.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpob7hj_m4.jl:19\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpob7hj_m4.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpob7hj_m4.jl:15\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     2      4\n"
  timestamp: 1659821708
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x_without_even =\
    \ filter(x) do x\n        !any(isodd, digits(x))\n    end\n    return sort(x_without_even)\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9vdvgr26.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp9vdvgr26.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9vdvgr26.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9vdvgr26.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9vdvgr26.jl:22\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9vdvgr26.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9vdvgr26.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9vdvgr26.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9vdvgr26.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9vdvgr26.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821708
- exit_code: -1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    UniqueDigits = Int64[]\n\
    \    for i in x\n        iDigits = digits(i)\n        if iseven(iDigits) == false\n\
    \            push!(UniqueDigits, i)\n        end\n    end\n    sort(UniqueDigits)\n\
    end\n@assert unique_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n\
    @assert unique_digits([1, 1, 11, 111, 1111]) == [1, 11, 111, 1111]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n@assert unique_digits([]) ==\
    \ []\n \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching iseven(::Vector{Int64})\nClosest
    candidates are:\n  iseven(!Matched::AbstractFloat) at ~/.conda/envs/polyglot/share/julia/base/float.jl:831\n  iseven(!Matched::Missing)
    at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  iseven(!Matched::BigInt)
    at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:346\n  ...\nStacktrace:\n [1]
    unique_digits('''
  stdout: None
  timestamp: 1659821710
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # copy x, not the\
    \ original x\n    y = copy(x)\n    for (i, number) in enumerate(x)\n        for\
    \ j in digits(number)\n            if j % 2 == 0\n                # remove number\
    \ from y\n                pop!(y, i)\n                break\n            end\n\
    \        end\n    end\n    return sort(y)\nend\n            \nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3qunaj5d.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp3qunaj5d.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching pop!(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    pop!(!Matched::WeakKeyDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:154\n\
    \    pop!(!Matched::WeakKeyDict{K}, ::Any, !Matched::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:160\n\
    \    pop!(!Matched::IdDict{K, V}, ::Any) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:124\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp3qunaj5d.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qunaj5d.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qunaj5d.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3qunaj5d.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching pop!(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    pop!(!Matched::WeakKeyDict{K},\
    \ ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:154\n\
    \    pop!(!Matched::WeakKeyDict{K}, ::Any, !Matched::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:160\n\
    \    pop!(!Matched::IdDict{K, V}, ::Any) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:124\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp3qunaj5d.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qunaj5d.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qunaj5d.jl:27\ntest set:\
    \ Error During Test at "
  timestamp: 1659821710
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpppixedsa.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpppixedsa.jl:15\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpppixedsa.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppixedsa.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpppixedsa.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpppixedsa.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpppixedsa.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppixedsa.jl:16 [inlined]\n\
    \   [4] ma"
  timestamp: 1659821711
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    output = []\n  \
    \  for i = 1:length(x)\n        if all(string(j) \u2209 [\"0\",\"2\",\"4\",\"\
    6\",\"8\"] for j in digits(x[i]))\n            push!(output, x[i])\n        end\n\
    \    end\n    return sort(output)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821707
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    list = []\n    for\
    \ i = 1:length(x)\n        n = x[i]\n        flag = true\n        while n > 0\n\
    \            if n % 2 == 0\n                flag = false\n                break\n\
    \            end\n            n = div(n, 10)\n        end\n        if flag ==\
    \ true\n            push!(list, x[i])\n        end\n    end\n    return sort(list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    res = Vector{Int64}()\n\
    \    i = 1\n    while i <= length(x)\n        j = 0\n        while j < length(x[i])\n\
    \            if x[i][j] % 2 == 0\n                break\n            end\n   \
    \         j += 1\n        end\n        if j == length(x[i])\n            push!(res,\
    \ x[i])\n        end\n        i += 1\n    end\n    return sort(res)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppgyzhcch.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmppgyzhcch.jl:31\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmppgyzhcch.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppgyzhcch.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppgyzhcch.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppgyzhcch.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmppgyzhcch.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppgyzhcch.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppgyzhcch.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppgyzhcch.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmppgyzhcch.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppgyzhcch.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppgyzhcch.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppgyzhcch.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  BoundsError\n  Stacktrace:\n   [1]\
    \ getindex\n     @"
  timestamp: 1659821710
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    new_vector\
    \ = []\n    \n    for i in x\n        even_digits = [l for l in digits(i) if l\
    \ % 2 == 0]\n        if isempty(even_digits)\n            push!(new_vector, i)\n\
    \        end\n    end\n    \n    sort(new_vector)\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort(filter(x\
    \ -> x%2 != 0, x))\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9fdiqxos.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp9fdiqxos.jl:17\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fdiqxos.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fdiqxos.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp9fdiqxos.jl:18\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fdiqxos.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fdiqxos.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp9fdiqxos.jl:19\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fdiqxos.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fdiqxos.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821709
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x_with_no_even_digits\
    \ = Int[]\n    for j in x\n        is_even = false\n        for i in digits(j)\n\
    \            if i % 2 == 0\n                is_even = true\n                break\n\
    \            end\n        end\n        if !is_even\n            push!(x_with_no_even_digits,\
    \ j)\n        end\n    end\n    sort(x_with_no_even_digits)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821708
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    result = []\n  \
    \  for i in x\n        if i%2 == 0\n            continue\n        end\n      \
    \  str_i = string(i)\n        if '0' in str_i || '2' in str_i || '4' in str_i\
    \ || '6' in str_i || '8' in str_i\n            continue\n        end\n       \
    \ push!(result, i)\n    end\n    sort(result)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821707
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    results = []\n \
    \   for i in x\n        push!(results,i) if !has_even_digit(i)\n    end\n    sort(results)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpxdua4397.jl:10 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxdua4397.jl:11\n\
    in expression starting at /tmp/tmpxdua4397.jl:11\n"
  stdout: ''
  timestamp: 1659821709
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Create a list\
    \ that stores the digits of each integer in x\n    digit_list = [digits(i) for\
    \ i in x]\n    # Create a list that stores the unique digits of each integer in\
    \ x\n    unique_digit_list = [unique(i) for i in digit_list]\n    # Create a list\
    \ that stores the unique digits of each integer in x\n    # that has no even digit\n\
    \    unique_digit_no_even_list = [i for i in unique_digit_list if !(2 in i)]\n\
    \    # get the indices of the unique_digit_no_even_list\n    unique_digit_indices\
    \ = [findall(unique_digit_list .== i) for i in unique_digit_no_even_list]\n  \
    \  # get the corresponding elements from the list x\n    no_even_numbers = x[unique_digit_indices]\n\
    \    # sort the list x\n    return sort(no_even_numbers)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1c9nslxo.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp1c9nslxo.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 4\
    \ and 2\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] (::var\"#4#8\"{Vector{Vector{Int64}}})(i::Vector{Int64})\n\
    \      @ Main ./none:0\n    [8] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [9] collect(itr::Base.Generator{Vector{Vector{Int64}}, var\"#4#8\"{Vector{Vector{Int64}}}})\n\
    \      @ Base ./array.jl:724\n   [10] unique_digits(x::Vector{Int64})\n      @\
    \ Main /tmp/tmp1c9nslxo.jl:17\n   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp1c9nslxo.jl:28 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp1c9nslxo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp1c9nslxo.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 4\
    \ and 2\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] (::var\"#4#8\"{Vector{Vector{Int64}}})(i::Vector{Int64})\n\
    \      @ Main ./none:0\n    [8] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [9] collect(itr::Base.Generator{Vector{V"
  timestamp: 1659821710
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n \n    k = []\n    c=\
    \ 0\n    for i in x\n        if all(map(isodd,digits(i)))\n            push!(k,i)\n\
    \        end\n    end\n    sort(k)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821708
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    [x[i] for i in 1:length(x)\
    \ if (any(filter(x->x==1 || x==3 || x==5 || x==7 || x==9,digits(x[i]))))]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp5ugw4rfx.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp5ugw4rfx.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  TypeError: non-boolean\
    \ (Int64) used in boolean context\n  Stacktrace:\n    [1] _any\n      @ ./reduce.jl:1113\
    \ [inlined]\n    [2] _any\n      @ ./reducedim.jl:900 [inlined]\n    [3] #any#754\n\
    \      @ ./reducedim.jl:898 [inlined]\n    [4] any\n      @ ./reducedim.jl:898\
    \ [inlined]\n    [5] (::var\"#2#5\"{Vector{Int64}})(i::Int64)\n      @ Main ./none:0\n\
    \    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n    \
    \  @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #2#5\"{Vector{Int64}}, UnitRange{Int64}}, var\"#1#4\"{Vector{Int64}}})\n     \
    \ @ Base ./array.jl:797\n    [9] collect\n      @ ./array.jl:721 [inlined]\n \
    \  [10] unique_digits(x::Vector{Int64})\n      @ Main /tmp/tmp5ugw4rfx.jl:9\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp5ugw4rfx.jl:16 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp5ugw4rfx.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp5ugw4rfx.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  TypeError: non-boolean\
    \ (Int64) used in boolean context\n  Stacktrace:\n    [1] _any\n      @ ./reduce.jl:1113\
    \ [inlined]\n    [2] _any\n      @ ./reducedim.jl:900 [inlined]\n    [3] #any#754\n\
    \      @ ./reducedim.jl:898 [inlined]\n    [4] any\n      @ ./reducedim.jl:898\
    \ [inlined]\n    [5] (::var\"#2#5\"{Vector{Int64}})(i::Int64)\n      @ Main ./none:0\n\
    \    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n    \
    \  @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #2#5\"{Vector{Int64}}, UnitRange{Int64}}, var\"#1#4\"{Vector{Int64}}})\n     \
    \ @ Base ./array.jl:797\n    [9] collect\n      @ ./array.jl:721 [inlined]\n \
    \  "
  timestamp: 1659821711
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Write your code\
    \ here.\n    unique_digits = []\n    unique_digits_u = []\n    for i in x\n  \
    \      if (i%2 == 0)\n            if (i in unique_digits) == false\n         \
    \       push!(unique_digits, i)\n            end\n        else\n            if\
    \ (i in unique_digits_u) == false\n                push!(unique_digits_u, i)\n\
    \            end\n        end\n    end\n    return unique_digits_u\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo1z25wm4.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpo1z25wm4.jl:30\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1z25wm4.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1z25wm4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo1z25wm4.jl:31\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1z25wm4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1z25wm4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo1z25wm4.jl:32\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1z25wm4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1z25wm4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo1z25wm4.jl:33\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1z25wm4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1z25wm4.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821710
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort(filter(a\
    \ -> !issubset(digits(a),Set([2,4,6,8,0])),x))\nend\n@test unique_digits([1,2,3,44,55,66,77,88,99])\
    \ == [1,3,55,77]\n@test unique_digits([1,22,3,44,55,66,77,88,99]) == [1,3,55,77]\n\
    @test unique_digits([1,22,33,44,55,66,77,88,99]) == [1,55,77]\n@test unique_digits([1,2,3,4,5,6,7,8,9])\
    \ == [1,3,5,7,9]\n@test unique_digits([]) == []\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmplrli7iyr.jl:11

    in expression starting at /tmp/tmplrli7iyr.jl:11

    '
  stdout: ''
  timestamp: 1659821709
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Your code here\
    \ \n    # ... \nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpv0ez63gw.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpv0ez63gw.jl:17\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpv0ez63gw.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv0ez63gw.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv0ez63gw.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpv0ez63gw.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpv0ez63gw.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv0ez63gw.jl:18 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmilkv8y9.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpmilkv8y9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmilkv8y9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpmilkv8y9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort(filter(y\
    \ -> isodd(digits(y)), x))\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpuy64mo8t.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpuy64mo8t.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(y::Int64)\n     @ Main /tmp/tmpuy64mo8t.jl:9\n   [2] filter(f::var\"\
    #1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpuy64mo8t.jl:9\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuy64mo8t.jl:16 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuy64mo8t.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpuy64mo8t.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(y::Int64)\n     @ Main /tmp/tmpuy64mo8t.jl:9\n   [2] filter(f::var\"\
    #1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpuy64mo8t.jl:9\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuy64mo8t.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n  "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmilkv8y9.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpmilkv8y9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmilkv8y9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpmilkv8y9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # write your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4iebbg7z.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4iebbg7z.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp4iebbg7z.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4iebbg7z.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4iebbg7z.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4iebbg7z.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp4iebbg7z.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4iebbg7z.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    odd_list = []\n\
    \    for x in x\n        if all(isodd,digits(x))\n            push!(odd_list,x)\n\
    \        end\n    end\n    sort(odd_list)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821708
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    output=[]\n    for\
    \ i in x\n        s = string(i)\n        even_digits=false\n        for j in s\n\
    \            if j=='2' || j=='4' || j=='6' || j=='8' || j=='0'\n             \
    \   even_digits=true\n                break\n            end\n        end\n  \
    \      if even_digits==false\n            push!(output,i)\n        end\n    end\n\
    \    sort(output)\nend\nunique_digits([1, 2, 34, 54, 55])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821709
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Your code goes\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4ev6omzk.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4ev6omzk.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp4ev6omzk.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ev6omzk.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ev6omzk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4ev6omzk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp4ev6omzk.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ev6omzk.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    A = []\n    for\
    \ i in x\n        if isodd(digits(i))\n            push!(A, i)\n        end\n\
    \    end\n    return sort(A)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp550fls07.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp550fls07.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp550fls07.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp550fls07.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp550fls07.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp550fls07.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp550fls07.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp550fls07.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp550fls07.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp550fls07.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ isodd(::Vector{Int64})\n  Closest candidates are:\n  "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\n\
    \    #if x is even, just do nothing with it\n    #if x is odd, put in array\n\
    \    x_sort = sort(x)\n    for i in 1:length(x_sort)\n        if(x_sort[i]%2==0)\n\
    \            x_sort = deleteat!(x_sort,i)\n        end\n    end\n    return x_sort\n\
    end\nprintln(unique_digits([1,2,3,4,5,6,7,8,9,0]))\nprintln(unique_digits([23,45,56,1,2,2,6,7,9,1,6,8,6,7,6,45,23,87,66,56,345,76,23,1,2,2,3,4,5,6,7,8,9,0]))\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 5-element Vector{Int64}\
    \ at index [6]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ unique_digits(x::Vector{Int64})\n   @ Main /tmp/tmp932mbk9d.jl:14\n [3] top-level\
    \ scope\n   @ /tmp/tmp932mbk9d.jl:20\nin expression starting at /tmp/tmp932mbk9d.jl:20\n"
  stdout: ''
  timestamp: 1659821711
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    #TODO:\n    return\
    \ []\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5yukwq33.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp5yukwq33.jl:17\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5yukwq33.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5yukwq33.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5yukwq33.jl:19\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5yukwq33.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5yukwq33.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5yukwq33.jl:20\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5yukwq33.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5yukwq33.jl:16\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821711
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3n0pvbux.jl:1\nin expression starting at /tmp/tmp3n0pvbux.jl:1\n"
  stdout: ''
  timestamp: 1659821710
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    index = []\n   \
    \ for i = 1:length(x)\n        if !(has_even_digit(x[i]))\n            push!(index,\
    \ x[i])\n        end\n    end\n    index = sort(index)\n    return index\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpv8kl0r6p.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpv8kl0r6p.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv8kl0r6p.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8kl0r6p.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8kl0r6p.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpv8kl0r6p.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv8kl0r6p.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8kl0r6p.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8kl0r6p.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpv8kl0r6p.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv8kl0r6p.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8kl0r6p.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8kl0r6p.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpv8kl0r6p.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Write your code\
    \ here\n    return [x[i] for i=1:length(x) if !any(even, digits(x[i]))]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnqn2hxjb.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnqn2hxjb.jl:17\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Vector{Int64}})(i::Int64)\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#2#4\"{Vector{Int64}}, UnitRange{Int64}},\
    \ var\"#1#3\"{Vector{Int64}}})\n      @ Base ./array.jl:797\n    [5] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n \
    \     @ Main /tmp/tmpnqn2hxjb.jl:10\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpnqn2hxjb.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpnqn2hxjb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnqn2hxjb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Vector{Int64}})(i::Int64)\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#2#4\"{Vector{Int64}}, UnitRange{Int64}},\
    \ var\"#1#3\"{Vector{Int64}}})\n      @ Base ./array.jl:797\n    [5] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n \
    \     @ Main /tmp/tmpnqn2hxjb.jl:10\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpnqn2hxjb.jl:18 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpnqn2hxjb.jl:16\ntest set:\
    \ Error During Test at /t"
  timestamp: 1659821711
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    #Your code here\n\
    \    x\nend\n \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7mxdoqmr.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp7mxdoqmr.jl:18\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7mxdoqmr.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7mxdoqmr.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp7mxdoqmr.jl:19\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7mxdoqmr.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7mxdoqmr.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp7mxdoqmr.jl:20\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7mxdoqmr.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7mxdoqmr.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp7mxdoqmr.jl:21\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7mxdoqmr.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7mxdoqmr.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821711
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_values =\
    \ Int64[]\n    for i in x\n        if (i < 10) || (i%2 != 0) && (Int64(i/10)%2\
    \ != 0)\n            push!(unique_values, i)\n        end\n    end\n    return\
    \ sort(unique_values)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgsm_2ovd.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpgsm_2ovd.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  InexactError: Int64(1.5)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpgsm_2ovd.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgsm_2ovd.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgsm_2ovd.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgsm_2ovd.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  InexactError: Int64(32.3)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpgsm_2ovd.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgsm_2ovd.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgsm_2ovd.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgsm_2ovd.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  InexactError: Int64(1234.5)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpgsm_2ovd.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgsm_2ovd.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgsm_2ovd.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgsm_2ovd.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  InexactError: "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x = collect(x)\n\
    \    for i in x\n        for j in num2str(i)\n            if contains(j, \"0\"\
    ::ASCIIString) || contains(j, \"2\"::ASCIIString) || contains(j, \"4\"::ASCIIString)\
    \ || contains(j, \"6\"::ASCIIString) || contains(j, \"8\"::ASCIIString)\n    \
    \            deleteat!(x,findfirst(x,i))\n            end\n        end\n    end\n\
    \    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmputx_esy4.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmputx_esy4.jl:24\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: num2str\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmputx_esy4.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmputx_esy4.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmputx_esy4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmputx_esy4.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: num2str\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmputx_esy4.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmputx_esy4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmputx_esy4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmputx_esy4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: num2str not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmputx_esy4.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmputx_esy4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmputx_esy4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmputx_esy4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: num2str not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmputx_esy4.jl:11\n"
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmilkv8y9.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpmilkv8y9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmilkv8y9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpmilkv8y9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return collect(Set(x))\n\
    end\na = [123,234,425,546,43,3,45]\nunique_digits(a)\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj9q24u0y.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpj9q24u0y.jl:18\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9q24u0y.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9q24u0y.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpj9q24u0y.jl:19\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 10, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9q24u0y.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9q24u0y.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpj9q24u0y.jl:20\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 151, 111] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9q24u0y.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9q24u0y.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpj9q24u0y.jl:21\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 31, 103] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9q24u0y.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9q24u0y.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821711
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # remove even numbers\
    \ from input list\n    x = x[x .% 2 .!= 0]\n    # for each number in list x\n\
    \    for n in x\n        # for each number in n\n        for i in n\n        \
    \    # check for evenness\n            if i % 2 == 0\n                # if evenness\
    \ detected, remove number from list x\n                x = deleteat!(x, findall(x\
    \ .== n))\n                # jump out of loop\n                break\n       \
    \     end\n        end\n    end\n    # sort the list and return it\n    sort(x)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqelzax7t.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpqelzax7t.jl:33\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqelzax7t.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqelzax7t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqelzax7t.jl:34\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqelzax7t.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqelzax7t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqelzax7t.jl:35\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqelzax7t.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqelzax7t.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821713
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Add your code\
    \ here\n    elem = 0\n    my_list = []\n    for i in x\n        x = Int(i)\n \
    \       while x > 0\n            rem = x % 10\n            if rem % 2 == 0\n \
    \               elem = i\n                break\n            end\n           \
    \ x = div(x, 10)\n        end\n        if elem != i\n            push!(my_list,\
    \ i)\n        end\n    end\n    my_list = sort(my_list)\n    return my_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821710
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort(x[x\
    \ .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2c09qjsu.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp2c09qjsu.jl:17\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2c09qjsu.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2c09qjsu.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp2c09qjsu.jl:18\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2c09qjsu.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2c09qjsu.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp2c09qjsu.jl:19\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2c09qjsu.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2c09qjsu.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821713
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpppixedsa.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpppixedsa.jl:15\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpppixedsa.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppixedsa.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpppixedsa.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpppixedsa.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpppixedsa.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppixedsa.jl:16 [inlined]\n\
    \   [4] ma"
  timestamp: 1659821711
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    keep = Int[]\n \
    \   for i in x\n        if contains(string(i), \"0\")==false && contains(string(i),\
    \ \"2\")==false && contains(string(i), \"4\")==false && contains(string(i), \"\
    6\")==false && contains(string(i), \"8\")==false\n            push!(keep, i)\n\
    \        end\n    end\n    return sort(keep)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821710
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    p = filter(x) do\
    \ i\n            filter(digits(i), d -> d % 2 == 1)\n    end\n    sort(p)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpaw0czap6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpaw0czap6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching filter(::Vector{Int64}, ::var\"#2#4\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#3\")(i::Int64)\n     @ Main /tmp/tmpaw0czap6.jl:10\n\
    \   [2] filter(f::var\"#1#3\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpaw0czap6.jl:9\n \
    \  [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpaw0czap6.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpaw0czap6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpaw0czap6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching filter(::Vector{Int64}, ::var\"#2#4\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#3\")(i::Int64)\n     @ Main /tmp/tmpaw0czap6.jl:10\n\
    \   [2] filter(f::var\"#1#3\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpaw0czap6.jl:9\n \
    \  [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpaw0czap6.jl:"
  timestamp: 1659821715
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    result = []\n  \
    \  for i in x\n        if !contains(Digits(i), 0) & !contains(Digits(i), 2) &\
    \ !contains(Digits(i), 4) & !contains(Digits(i), 6) & !contains(Digits(i), 8)\n\
    \            push!(result, i)\n        end\n    end\n    sort(result)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgd5hmlxq.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpgd5hmlxq.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: Digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgd5hmlxq.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgd5hmlxq.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgd5hmlxq.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgd5hmlxq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: Digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgd5hmlxq.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgd5hmlxq.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgd5hmlxq.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgd5hmlxq.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: Digits not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgd5hmlxq.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgd5hmlxq.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgd5hmlxq.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgd5hmlxq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: Digits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpgd5hmlxq.jl:11\n\
    \   ["
  timestamp: 1659821714
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return collect(x[1:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpctqscwos.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpctqscwos.jl:16\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctqscwos.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctqscwos.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpctqscwos.jl:17\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctqscwos.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctqscwos.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpctqscwos.jl:18\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctqscwos.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctqscwos.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpctqscwos.jl:19\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctqscwos.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctqscwos.jl:15\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821713
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    odds = []\n    for\
    \ i in x\n        flag = true\n        while i > 0\n            rem = i % 10\n\
    \            if rem % 2 == 0\n                flag = false\n                break\n\
    \            end\n            i = floor(i/10)\n        end\n        if flag\n\
    \            push!(odds, flag)\n        end\n    end\n    return sort(odds)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxhbx6zv4.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpxhbx6zv4.jl:31\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 1, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhbx6zv4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhbx6zv4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxhbx6zv4.jl:33\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [1, 1] == [111, 151]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhbx6zv4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhbx6zv4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxhbx6zv4.jl:34\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [1, 1] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxhbx6zv4.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxhbx6zv4.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821713
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort( [i\
    \ for i in x if !any(j % 2 == 0 for j in digits(i))] )\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821711
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    even_numbers = zeros(length(x))\n\
    \    j = 1\n    for i in 1:length(x)\n        for k in digits(x[i])\n        \
    \    if k % 2 == 0\n                even_numbers[j] = x[i]\n                j\
    \ += 1\n                break\n            end\n        end\n    end\n    even_numbers\
    \ = even_numbers[even_numbers .!= 0]\n    return x[~(x .\u2208 even_numbers)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpuzcumaav.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpuzcumaav.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching ~(::BitVector)\n  Closest candidates are:\n    ~(!Matched::Union{Int128,\
    \ Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at ~/.conda/envs/polyglot/share/julia/base/int.jl:310\n\
    \    ~(!Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:37\n\
    \    ~(!Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpuzcumaav.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuzcumaav.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzcumaav.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpuzcumaav.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching ~(::BitVector)\n  Closest candidates are:\n    ~(!Matched::Union{Int128,\
    \ Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at ~/.conda/envs/polyglot/share/julia/base/int.jl:310\n\
    \    ~(!Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:37\n\
    \    ~(!Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpuzcumaav.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuzcumaav.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzcumaav.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpuzcumaav.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]"
  timestamp: 1659821715
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    r = []\n    for\
    \ i in x\n        if length(unique(digits(i))) == length(digits(i))\n        \
    \    push!(r, i)\n        end\n    end\n    return sort(r)\nend\nprintln(unique_digits([12,\
    \ 34, 56, 78, 90])) # should return 12\nprintln(unique_digits([123, 543, 475,\
    \ 567, 876])) # should return 123, 543, 567\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphdnwp279.jl:21

    '
  stdout: "[12, 34, 56, 78, 90]\n[123, 475, 543, 567, 876]\ntest set: Test Failed\
    \ at /tmp/tmphdnwp279.jl:24\n  Expression: candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n   Evaluated: [1, 15] == [1, 15, 33]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphdnwp279.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphdnwp279.jl:23\ntest set: Test Failed at /tmp/tmphdnwp279.jl:25\n\
    \  Expression: candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated:\
    \ [10, 152] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdnwp279.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdnwp279.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphdnwp279.jl:26\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdnwp279.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdnwp279.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphdnwp279.jl:27\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdnwp279.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdnwp279.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821714
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # YOUR CODE HERE\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpksgjhdcn.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpksgjhdcn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpksgjhdcn.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpksgjhdcn.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpksgjhdcn.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpksgjhdcn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpksgjhdcn.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpksgjhdcn.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821715
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    r = []\n    for\
    \ i in x\n        #println(i)\n        #if !(!(i%2!=0) for j in digits(i))\n \
    \       #    println(i)\n        #    push!(r,i)\n        #end\n        if all(!isodd(j)\
    \ for j in digits(i))\n            push!(r,i)\n        end\n    end\n    sort(r)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_2rwpa2p.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp_2rwpa2p.jl:27\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2rwpa2p.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2rwpa2p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_2rwpa2p.jl:29\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2rwpa2p.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2rwpa2p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_2rwpa2p.jl:30\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_2rwpa2p.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_2rwpa2p.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821714
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_x = unique(x)\n\
    \    unique_x = unique_x[unique_x .% 2 .!= 0]\n    if !isempty(unique_x)\n   \
    \     sort!(unique_x)\n    end\n    return unique_x\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplkb2hyym.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmplkb2hyym.jl:22\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkb2hyym.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkb2hyym.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplkb2hyym.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkb2hyym.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkb2hyym.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplkb2hyym.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkb2hyym.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkb2hyym.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821714
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # write your code\
    \ here\n    return x\nend\nx = [5,10,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnbj6rrx.jl:13\nin expression starting at\
    \ /tmp/tmpcnbj6rrx.jl:13\n"
  stdout: ''
  timestamp: 1659821713
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmilkv8y9.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpmilkv8y9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmilkv8y9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpmilkv8y9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Dict()\n    for i in x\n        digits = digits(i)\n        for d in digits\n\
    \            if mod(d, 2) == 0\n                unique_digits[i] = false\n   \
    \             break\n            else\n                unique_digits[i] = true\n\
    \            end\n        end\n    end\n    y = sort(filter(x -> unique_digits[x],\
    \ keys(unique_digits)))\n    return y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpp_pqbdl7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpp_pqbdl7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp_pqbdl7.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp_pqbdl7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp_pqbdl7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp_pqbdl7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp_pqbdl7.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp_pqbdl7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp_pqbdl7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp_pqbdl7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digits not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp_pqbdl7.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp_pqbdl7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp_pqbdl7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp_pqbdl7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpp_pqbdl7.jl:11\n\
    \   ["
  timestamp: 1659821715
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    mask = find(x .>=\
    \ 0 & x .< 10)\n    for n in x\n        m = log10(n)\n        for i in 0:m\n \
    \           x[n % 10^i] = -1\n        end\n    end\n    return sort(x[mask])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8rajoo3y.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp8rajoo3y.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n   \
    \ &(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8rajoo3y.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8rajoo3y.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8rajoo3y.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp8rajoo3y.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8rajoo3y.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8rajoo3y.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8rajoo3y.jl:22\ntest set:\
    \ Error Durin"
  timestamp: 1659821716
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n   new_x = []\n   for\
    \ i in x\n       if isodd(i)\n           push!(new_x, i)\n       else\n      \
    \     i_string = string(i)\n           for j in i_string\n               if j\
    \ == '0' || j == '2' || j == '4' || j == '6' || j == '8'\n                   break\n\
    \               else\n                   push!(new_x, i)\n               end\n\
    \           end\n       end\n   end\n   return sort(new_x)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgem4g5a7.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpgem4g5a7.jl:31\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgem4g5a7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgem4g5a7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpgem4g5a7.jl:32\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgem4g5a7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgem4g5a7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpgem4g5a7.jl:33\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgem4g5a7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgem4g5a7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpgem4g5a7.jl:34\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgem4g5a7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgem4g5a7.jl:30\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821715
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # [[your code here]]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyvq_bw2s.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpyvq_bw2s.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpyvq_bw2s.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyvq_bw2s.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyvq_bw2s.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpyvq_bw2s.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpyvq_bw2s.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyvq_bw2s.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821716
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n  unique_digits = zeros(Int64,0)\n\
    \  for i in x\n      if (i == 0)\n        append!(unique_digits, i)\n      else\n\
    \        if(i%2 == 0)\n            continue\n        else\n            if (i%5\
    \ == 0)\n                continue\n            else\n                if (i%10\
    \ == 0)\n                    continue\n                else\n                \
    \    if (i%20 == 0)\n                        continue\n                    else\n\
    \                        if (i%30 == 0)\n                            continue\n\
    \                        else\n                            if (i%40 == 0)\n  \
    \                              continue\n                            else\n  \
    \                              if (i%50 == 0)\n                              \
    \      continue\n                                else\n                      \
    \              if (i%60 == 0)\n                                        continue\n\
    \                                    else\n                                  \
    \      if (i%70 == 0)\n                                            continue\n\
    \                                        else\n                              \
    \              if (i%80 == 0)\n                                              \
    \  continue\n                                            else\n              \
    \                                  if (i%90 == 0)\n                          \
    \                          continue\n                                        \
    \        else\n                                                    append!(unique_digits,\
    \ i)\n                                                end\n                  \
    \                          end\n                                        end\n\
    \                                    end\n                                end\n\
    \                            end\n                        end\n              \
    \      end\n                end\n            end\n        end\n      end\n  end\n\
    \  return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3ay8tyot.jl:65

    '
  stdout: "test set: Test Failed at /tmp/tmp3ay8tyot.jl:68\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ay8tyot.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ay8tyot.jl:67\ntest set: Test\
    \ Failed at /tmp/tmp3ay8tyot.jl:69\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ay8tyot.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ay8tyot.jl:67\ntest set: Test\
    \ Failed at /tmp/tmp3ay8tyot.jl:70\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ay8tyot.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ay8tyot.jl:67\ntest set: Test\
    \ Failed at /tmp/tmp3ay8tyot.jl:71\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [103, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3ay8tyot.jl:71 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3ay8tyot.jl:67\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659821715
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    odd(n) = all(digits(n)\
    \ % 2 == 1)\n    return sort(filter(odd, x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpu95pjulj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpu95pjulj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#odd#1\")(n::Int64)\n     @ Main /tmp/tmpu95pjulj.jl:9\n\
    \   [2] filter(f::var\"#odd#1\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpu95pjulj.jl:10\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpu95pjulj.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpu95pjulj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpu95pjulj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#odd#1\")(n::Int64)\n     @ Main /tmp/tmpu95pjulj.jl:9\n\
    \   [2] filter(f::var\"#odd#1\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpu95pjulj.jl:10\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp"
  timestamp: 1659821717
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # write your code\
    \ here \nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcs7q7tzt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpcs7q7tzt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpcs7q7tzt.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcs7q7tzt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcs7q7tzt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpcs7q7tzt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpcs7q7tzt.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcs7q7tzt.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821716
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    #-----YOU CODE HERE------#\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjwrpl4px.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpjwrpl4px.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpjwrpl4px.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwrpl4px.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjwrpl4px.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpjwrpl4px.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpjwrpl4px.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwrpl4px.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821716
- exit_code: -1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n   # your code goes\
    \ here\nend\nx = [6, 2, 4, 3, 1, 9, 11, 13, 12, 7]\nunique_digits(x)\n@testset\
    \ \"unique_digits(x)\" begin\n    @test unique_digits(x) == [1, 3, 7, 9, 11, 13]\n\
    end\n \n@testset \"unique_digits(x)\" begin\n    @test unique_digits(x) == [1,\
    \ 3, 7, 9, 11, 13]\nend\n \n \n \n@testset \"unique_digits(x)\" begin\n    @test\
    \ unique_digits(x) == [1, 3, 7, 9, 11, 13]\nend\n \n \n \n@testset \"unique_digits(x)\"\
    \ begin\n    @test unique_digits(x) == [1, 3, 7, 9, 11, 13]\nend\n \n \n \n@testset\
    \ \"unique_digits(x)\" begin\n    @test unique_digits(x) == [1, 3, 7, 9, 11, 13]\n\
    end\n \n \n \n@testset \"unique_digits(x)\" begin\n    @test unique_digits(x)\
    \ == [1, 3, 7, 9, 11, 13]\nend\n \n \n \n@testset \"unique_digits(x)\" begin\n\
    \    @test unique_digits(x) == [1, 3, 7, 9, 11, 13]\nend\n \n \n \n@testset \"\
    unique_digits(x)\" begin\n    @test unique_digits(x) == [1, 3, 7, 9, 11, 13]\n\
    end\n \n \n \n@testset \"unique_digits(x)\" begin\n    @test unique_digits(x)\
    \ == [1, 3, 7, 9, 11, 13]\nend\n \n \n \n@testset \"unique_digits(x)\" begin\n\
    \    @test unique_digits(x) == [1, 3, 7, 9, 11, 13]\nend\n \n \n \n@testset \"\
    unique_digits(x)\" begin\n   \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing
    to an object of type Vector{Int64}\nClosest candidates are:\n  convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n  convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n  convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n  ...\nStacktrace:\n
    [1] unique_digits(x::Vector{Int64})\n   @ Main /tmp/'''
  stdout: None
  timestamp: 1659821717
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    n = length(x)\n\
    \    xout = Array{Int64}(undef,0)\n    for i in 1:n\n        if (x[i] < 0)\n \
    \           error(\"Negative element is not allowed\")\n        end\n        if\
    \ (x[i] < 10)\n            push!(xout,x[i])\n        else\n            a = div(x[i],10)\n\
    \            b = mod(x[i],10)\n            if (a >= 10)\n                c = div(a,10)\n\
    \                d = mod(a,10)\n                if (b%2 != 0 && d%2 != 0 && c%2\
    \ != 0)\n                    push!(xout,x[i])\n                end\n         \
    \   else\n                if (b%2 != 0 && a%2 != 0)\n                    push!(xout,x[i])\n\
    \                end\n            end\n        end\n    end\n    return sort(xout)\n\
    end\nx = [12,0,0,14,24,1,0,1,1,1,3,3,3,3,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28gxirph.jl:36\nin expression starting at\
    \ /tmp/tmp28gxirph.jl:36\n"
  stdout: ''
  timestamp: 1659821714
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \"\"\"Given a list\
    \ of positive integers x. return a sorted list of all \n    elements that hasn't\
    \ any even digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nbc49yj.jl:1\nin expression starting at /tmp/tmp3nbc49yj.jl:1\n"
  stdout: ''
  timestamp: 1659821714
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code goes\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpojw38gr0.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpojw38gr0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpojw38gr0.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojw38gr0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojw38gr0.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpojw38gr0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpojw38gr0.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojw38gr0.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821717
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # TODO\n    new\
    \ = []\n    for i = 1:length(x)\n        count = 0\n        for j = 1:length(string(x[i]))\n\
    \            if parse(Int64,string(x[i])[j]) % 2 == 0\n                count +=\
    \ 1\n            end\n        end\n        if count == 0\n            push!(new,x[i])\n\
    \        end\n    end\n    new\nend\nx = [5,23,15,12,99,0,3,8,19,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsj58srrn.jl:27\nin expression starting at\
    \ /tmp/tmpsj58srrn.jl:27\n"
  stdout: ''
  timestamp: 1659821714
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    #create a\
    \ vector with the elements of x with no even digit\n    y = filter( (x) -> !(any(ismatch.(r\"\
    2|4|6|8\", collect(string(x))))) , x)\n    \n    #sort the result\n    sort(y)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp941_0hrq.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp941_0hrq.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp941_0hrq.jl:11\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp941_0hrq.jl:11\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp941_0hrq.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp941_0hrq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp941_0hrq.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp941_0hrq.jl:11\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp941_0hrq.jl:11\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp941_0hrq.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp941_0hrq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp941_0hrq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: ismatch not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp941_0hrq.jl:11\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp941_0hrq.jl:11\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp941_0hrq.jl:23 [inline"
  timestamp: 1659821716
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    answer = []\n  \
    \  for i in x\n        if sum(i .% 10 .== 0) == 0\n            push!(answer, i)\n\
    \        end\n    end\n    return sort(answer)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwk2xxefv.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpwk2xxefv.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwk2xxefv.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwk2xxefv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwk2xxefv.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwk2xxefv.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwk2xxefv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwk2xxefv.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwk2xxefv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwk2xxefv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwk2xxefv.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwk2xxefv.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwk2xxefv.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821716
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    numbers = Set()\n\
    \    for i in x\n        for j in string(i)\n            if parse(Int64, j) %\
    \ 2 == 0\n                push!(numbers, i)\n                break\n         \
    \   end\n        end\n    end\n    return setdiff(x, numbers)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7dtppb_6.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp7dtppb_6.jl:25\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dtppb_6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dtppb_6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp7dtppb_6.jl:28\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7dtppb_6.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7dtppb_6.jl:24\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     2      4\n"
  timestamp: 1659821716
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return x[isodd.(digits.(x))]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwqo6n85o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpwqo6n85o.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [3] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @ ./broadcast.jl:899\
    \ [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [6]\
    \ unique_digits(x::Vector{Int64})\n      @ Main /tmp/tmpwqo6n85o.jl:9\n    [7]\
    \ macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpwqo6n85o.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpwqo6n85o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpwqo6n85o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [3] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @ ./broadcast.jl:899\
    \ [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [6]\
    \ unique_digits(x::Vect"
  timestamp: 1659821718
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    ret = Int64[]\n\
    \    for i in x\n        if(i%2==0) \n            push!(ret,i)\n        end\n\
    \    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvgmr4fqy.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvgmr4fqy.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvgmr4fqy.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvgmr4fqy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvgmr4fqy.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvgmr4fqy.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvgmr4fqy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvgmr4fqy.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvgmr4fqy.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvgmr4fqy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvgmr4fqy.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvgmr4fqy.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvgmr4fqy.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659821717
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    d = [length(collect(digits(a)))\
    \ for a in x]\n    aux = [x[i] for i in 1:length(x) if d[i]==1]\n    return sort(aux)\n\
    end\nprintln(unique_digits([11]))\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvzteaxsx.jl:16

    '
  stdout: "Int64[]\ntest set: Test Failed at /tmp/tmpvzteaxsx.jl:19\n  Expression:\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvzteaxsx.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvzteaxsx.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvzteaxsx.jl:21\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvzteaxsx.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvzteaxsx.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvzteaxsx.jl:22\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvzteaxsx.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvzteaxsx.jl:18\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821717
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    f() = filter(x ->\
    \ all(i -> i % 2 != 0, digits(x)), x)\n    sort(f())\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821715
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    res = Int64[]\n\
    \    for i = 1:length(x)\n        if iseven(x[i])\n            if !(x[i] % 2 ==\
    \ 0)\n                push!(res, x[i])\n            end\n        end\n    end\n\
    \    res = sort(res)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8jejv4da.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp8jejv4da.jl:25\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8jejv4da.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8jejv4da.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8jejv4da.jl:27\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8jejv4da.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8jejv4da.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8jejv4da.jl:28\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8jejv4da.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8jejv4da.jl:24\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821717
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    s = Set([])\n  \
    \  for i in x\n        if ! any(dig in [\"0\", \"2\", \"4\", \"6\", \"8\"] for\
    \ dig in string(i))\n            push!(s, i)\n        end\n    end\n    sort(collect(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuv8lxbws.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpuv8lxbws.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuv8lxbws.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuv8lxbws.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuv8lxbws.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuv8lxbws.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuv8lxbws.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuv8lxbws.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuv8lxbws.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuv8lxbws.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuv8lxbws.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuv8lxbws.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuv8lxbws.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821717
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # initialize empty\
    \ list\n    result = []\n    for i in x\n        # check is even digit exists\n\
    \        if !(contains(collect(digits(i)), 2) || \n            contains(collect(digits(i)),\
    \ 4) || \n            contains(collect(digits(i)), 6) || \n            contains(collect(digits(i)),\
    \ 8) || \n            contains(collect(digits(i)), 0))\n            push!(result,\
    \ i)\n        end\n    end\n    return sort(result)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmtmy5i1g.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpmtmy5i1g.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmtmy5i1g.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmtmy5i1g.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmtmy5i1g.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpmtmy5i1g.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmtmy5i1g.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmtmy5i1g.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmtmy5i1g.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpmtmy5i1g.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    conta"
  timestamp: 1659821719
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmilkv8y9.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpmilkv8y9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmilkv8y9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpmilkv8y9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    result = []\n\
    \    \n    for i in x\n        check = true\n        val = i\n        while val\
    \ > 0\n            if val % 2 == 0\n                check = false\n          \
    \      break\n            end\n            val = div(val, 10)\n        end\n \
    \       if check\n            push!(result, i)\n        end\n    end\n    sort(result)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821715
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # you code here\n\
    end\nx = [22, 333, 334, 456, 100, 649, 77, 88, 999, 996, 10]\n@test unique_digits(x)\
    \ == [100, 649, 999]\n \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpunbnxgqr.jl:12

    in expression starting at /tmp/tmpunbnxgqr.jl:12

    '
  stdout: ''
  timestamp: 1659821716
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code goes\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpojw38gr0.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpojw38gr0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpojw38gr0.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojw38gr0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojw38gr0.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpojw38gr0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpojw38gr0.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojw38gr0.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821717
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ = sort(x[findall(x, a -> length(findall(digits(a), x -> x % 2 == 0)) == 0)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpx3ijkimj.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpx3ijkimj.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type var\"#unique_digits#3\" to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpx3ijkimj.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx3ijkimj.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx3ijkimj.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpx3ijkimj.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type var\"#unique_digits#3\" to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpx3ijkimj.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx3ijki"
  timestamp: 1659821719
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # YOUR CODE HERE\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpksgjhdcn.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpksgjhdcn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpksgjhdcn.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpksgjhdcn.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpksgjhdcn.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpksgjhdcn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpksgjhdcn.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpksgjhdcn.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821715
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \"\"\"\n    Given\
    \ a list of positive integers x. return a sorted list of all \n    elements that\
    \ hasn't any even digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88fyret4.jl:1\nin expression starting at /tmp/tmp88fyret4.jl:1\n"
  stdout: ''
  timestamp: 1659821716
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return x[unique(x)\
    \ .% 2 .!= 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp47ye6t6u.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp47ye6t6u.jl:16\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp47ye6t6u.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp47ye6t6u.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp47ye6t6u.jl:17\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp47ye6t6u.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp47ye6t6u.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp47ye6t6u.jl:18\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp47ye6t6u.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp47ye6t6u.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp47ye6t6u.jl:19\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp47ye6t6u.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp47ye6t6u.jl:15\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821718
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    i = 1;\n    while\
    \ i <= length(x)\n        if (x[i] < 0) || (x[i] >= 10^9)\n            x = deleteat!(x,\
    \ i)\n        else\n            i += 1\n        end\n    end\n    res = Int[]\n\
    \    for k in x\n        if !(contains(collect(digits(k)), 2) || contains(collect(digits(k)),\
    \ 4) || contains(collect(digits(k)), 6) || contains(collect(digits(k)), 8) ||\
    \ contains(collect(digits(k)), 0))\n            push!(res, k)\n        end\n \
    \   end\n    sort(res)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfmnvxi5t.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpfmnvxi5t.jl:30\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpfmnvxi5t.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfmnvxi5t.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfmnvxi5t.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfmnvxi5t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpfmnvxi5t.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfmnvxi5t.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfmnvxi5t.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfmnvxi5t.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    conta"
  timestamp: 1659821719
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    odd_digits_list\
    \ = []\n    for i in x\n        if any(string(x[i]) in string(y) for y in 1:9)\n\
    \            append!(odd_digits_list, i)\n        end\n    end\n    return sort(odd_digits_list)\n\
    end\nunique_digits([12,345,23,4,45,56,89])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 7-element Vector{Int64}\
    \ at index [12]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ (::var\"#1#2\"{Vector{Int64}, Int64})(y::Int64)\n   @ Main ./none:0\n [3] iterate\n\
    \   @ ./generator.jl:47 [inlined]\n [4] _any\n   @ ./reduce.jl:1109 [inlined]\n\
    \ [5] any\n   @ ./reduce.jl:1105 [inlined]\n [6] any\n   @ ./reduce.jl:1031 [inlined]\n\
    \ [7] unique_digits(x::Vector{Int64})\n   @ Main /tmp/tmpxsube4gz.jl:11\n [8]\
    \ top-level scope\n   @ /tmp/tmpxsube4gz.jl:17\nin expression starting at /tmp/tmpxsube4gz.jl:17\n"
  stdout: ''
  timestamp: 1659821719
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique(x)\nend\n\
    x = [121, 23, 44, 545, 78, 90, 65]\nunique_digits(x)\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphbft6ozf.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmphbft6ozf.jl:18\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphbft6ozf.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphbft6ozf.jl:17\ntest set: Test\
    \ Failed at /tmp/tmphbft6ozf.jl:19\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphbft6ozf.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphbft6ozf.jl:17\ntest set: Test\
    \ Failed at /tmp/tmphbft6ozf.jl:20\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphbft6ozf.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphbft6ozf.jl:17\ntest set: Test\
    \ Failed at /tmp/tmphbft6ozf.jl:21\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphbft6ozf.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphbft6ozf.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821718
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort(filter(i\
    \ -> !any(digits(i) .% 2 .== 0), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821717
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    sort(filter(n ->\
    \ all(d -> d % 2 != 0, digits(n)), x))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821717
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    digit = []\n   \
    \ for i = 1:length(x)\n        a = convert(Int64,x[i])\n        b = digits(a)\n\
    \        c = []\n        for j = 1:length(b)\n            push!(c,rem(b[j],2))\n\
    \        end\n        if all(c) == true\n            push!(digit,x[i])\n     \
    \   end\n    end\n    digit\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplput5v2d.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmplput5v2d.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  TypeError: non-boolean\
    \ (Int64) used in boolean context\n  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1161\
    \ [inlined]\n   [2] _all\n     @ ./reducedim.jl:903 [inlined]\n   [3] #all#756\n\
    \     @ ./reducedim.jl:901 [inlined]\n   [4] all\n     @ ./reducedim.jl:901 [inlined]\n\
    \   [5] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmplput5v2d.jl:17\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmplput5v2d.jl:28 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmplput5v2d.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplput5v2d.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  TypeError: non-boolean\
    \ (Int64) used in boolean context\n  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1161\
    \ [inlined]\n   [2] _all\n     @ ./reducedim.jl:903 [inlined]\n   [3] #all#756\n\
    \     @ ./reducedim.jl:901 [inlined]\n   [4] all\n     @ ./reducedim.jl:901 [inlined]\n\
    \   [5] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmplput5v2d.jl:17\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmplput5v2d.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmplput5v2d.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplput5v2d.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  TypeError: non-boolean (Int64)\
    \ used in boolean context\n  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1161\
    \ [inlined]\n   [2] _all\n     @ ./reducedim.jl:903 [inlined]\n   [3] #all#756\n\
    \     @ ./reducedim.jl:901 [inlined]\n   [4] all\n     @ ./reducedim.jl:901 [inlined]\n\
    \   [5] unique_digits(x:"
  timestamp: 1659821720
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    y = []\n    for\
    \ i = 1:length(x)\n        if !ismember(0,digits(x[i])) & !ismember(2,digits(x[i]))\
    \ & !ismember(4,digits(x[i])) & !ismember(6,digits(x[i])) & !ismember(8,digits(x[i]))\n\
    \            push!(y,x[i])\n        end\n    end\n    return sort(y)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpdq3vjisi.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpdq3vjisi.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: ismember\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpdq3vjisi.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdq3vjisi.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdq3vjisi.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdq3vjisi.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: ismember\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpdq3vjisi.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdq3vjisi.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdq3vjisi.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdq3vjisi.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: ismember\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpdq3vjisi.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdq3vjisi.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdq3vjisi.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdq3vjisi.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: ismember not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpdq3vjisi.jl"
  timestamp: 1659821720
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \"\"\"\n    >>>\
    \ unique_digits([1,2,11,44,55,100,101,123])\n    [1,11,101,123]\n    \"\"\"\n\
    \    #complete function body to return the expected output, see the example for\
    \ more details.\n    return #your one line solution here\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphjjo1y_g.jl:16\nin expression starting at /tmp/tmphjjo1y_g.jl:16\n"
  stdout: ''
  timestamp: 1659821718
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\n\
    \    digits = Int[]\n    for i in x\n        number = i\n        digit = []\n\
    \        while(number > 0)\n            digit = [number % 10; digit]\n       \
    \     number = floor(number / 10)\n        end\n        flag = true\n        for\
    \ n in digit\n            if n % 2 == 0\n                flag = false\n      \
    \      end\n        end\n        if flag\n            push!(digits, i)\n     \
    \   end\n    end\n    return sort(digits)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821717
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    function has_even_digit(x::Int64)::Bool\n\
    \        while x > 0\n            if (x % 10) % 2 == 0\n                return\
    \ true\n            end\n            x = div(x, 10)\n        end\n        return\
    \ false\n    end\n    return sort(filter(has_even_digit, x))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpanpx2qzd.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpanpx2qzd.jl:25\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpanpx2qzd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpanpx2qzd.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpanpx2qzd.jl:26\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpanpx2qzd.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpanpx2qzd.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpanpx2qzd.jl:27\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpanpx2qzd.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpanpx2qzd.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpanpx2qzd.jl:28\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [103] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpanpx2qzd.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpanpx2qzd.jl:24\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659821719
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # write your code\
    \ here!\nend\nx = [4, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6,\
    \ 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8,\
    \ 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1,\
    \ 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9,\
    \ 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4,\
    \ 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1,\
    \ 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6,\
    \ 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8,\
    \ 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1,\
    \ 1, 9, 3, 4, 2, 1, 5, 6, 7, 8, 5, 1, 1, 9, 3, 4, 2, 1, 5, 6, 7,\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pceistd.jl:14\nin expression starting at\
    \ /tmp/tmp7pceistd.jl:14\n"
  stdout: ''
  timestamp: 1659821718
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \"\"\"   \n    >>>\
    \ x = [12, 20, 27, 15, 36, 5, 64, 31, 21, 5]\n    >>> unique_digits(x)\n    [5,\
    \ 15, 31, 36, 64]\n    \"\"\"\n    return sort(filter(a -> !ismatch(r\"\\d*[02468]\\\
    d*\", string(a)), x))\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkwlc9opz.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpkwlc9opz.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(a::Int64)\n     @ Main /tmp/tmpkwlc9opz.jl:14\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpkwlc9opz.jl:14\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkwlc9opz.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkwlc9opz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkwlc9opz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(a::Int64)\n     @ Main /tmp/tmpkwlc9opz.jl:14\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpkwlc9opz.jl:14\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkwlc9opz.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkwlc9opz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkwlc9opz.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: ismatch not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(a::Int64)\n     @ Main /tmp/tmpkwlc9opz.jl:14\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpkwlc9opz.jl:14\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkwlc9opz.jl:23 [inline"
  timestamp: 1659821720
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    y = Vector{Int64}()\n\
    \    for i = 1:length(x)\n        if is_even(x[i]) == false\n            push!(y,\
    \ x[i])\n        end\n    end\n    return sort(y)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpub9gjcjc.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpub9gjcjc.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: is_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpub9gjcjc.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpub9gjcjc.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpub9gjcjc.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpub9gjcjc.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: is_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpub9gjcjc.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpub9gjcjc.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpub9gjcjc.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpub9gjcjc.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpub9gjcjc.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpub9gjcjc.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpub9gjcjc.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpub9gjcjc.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: is_even not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpub9gjcjc.jl:11\n"
  timestamp: 1659821720
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort(x[findall(isodd,digits.(x))])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqfa5p3gf.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpqfa5p3gf.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [3] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @ ./broadcast.jl:899\
    \ [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [6]\
    \ findall\n      @ ./array.jl:2257 [inlined]\n    [7] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpqfa5p3gf.jl:9\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpqfa5p3gf.jl:16 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpqfa5p3gf.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpqfa5p3gf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [3] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @ ./broadcast.jl:899\
    \ [inlined]\n    [5] materialize\n      @ ./broadc"
  timestamp: 1659821721
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    index = 1\n    y\
    \ = deepcopy(x)\n    for i in 1:length(x)\n        index = 1\n        while(x[i]\
    \ != 0)\n            if(x[i] % 2 == 0)\n                deleteat!(y, index)\n\
    \                index -= 1\n                break\n            end\n        \
    \    x[i] = div(x[i], 10)\n            index += 1\n        end\n    end\n    sort(y)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmdaqixep.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpmdaqixep.jl:30\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 33, 1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdaqixep.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdaqixep.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpmdaqixep.jl:32\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdaqixep.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdaqixep.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     2      4\n"
  timestamp: 1659821719
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    no_evens = Vector{Int64}()\n\
    \    for i in x\n        if !even(i)\n            push!(no_evens, i)\n       \
    \ end\n    end\n    sort(no_evens)\nend\n \nx = rand(1:10000, 10)\nunique_digits(x)\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: even not defined\nStacktrace:\n [1] unique_digits(x::Vector{Int64})\n\
    \   @ Main /tmp/tmpose9ntro.jl:11\n [2] top-level scope\n   @ /tmp/tmpose9ntro.jl:19\n\
    in expression starting at /tmp/tmpose9ntro.jl:19\n"
  stdout: ''
  timestamp: 1659821719
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Convert to string\
    \ and split characters\n    x_str = map(x->string(x), x)\n    x_chr = [split(x)\
    \ for x in x_str]\n    \n    # Check if string contains even number\n    x_chr_flt\
    \ = [all([parse(Int, x) % 2 != 0 for x in y]) for y in x_chr]\n    \n    # Return\
    \ values\n    x_final = map(x->parse(Int, x), x_str[x_chr_flt])\n    return sort(x_final)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph6hc8txc.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmph6hc8txc.jl:26\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph6hc8txc.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph6hc8txc.jl:24\ntest set: Test\
    \ Failed at /tmp/tmph6hc8txc.jl:27\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph6hc8txc.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph6hc8txc.jl:24\ntest set: Test\
    \ Failed at /tmp/tmph6hc8txc.jl:28\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph6hc8txc.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph6hc8txc.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821720
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    m = unique(map(x\
    \ -> unique(digits(x)), x))\n    return sort(filter(x -> ~any(map(x -> iseven(x),\
    \ digits(x))), m))\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprxna7qyv.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmprxna7qyv.jl:17\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] (::var\"#2#5\")(x::Vector{Int64})\n     @ Main /tmp/tmprxna7qyv.jl:10\n\
    \   [2] filter(f::var\"#2#5\", a::Vector{Vector{Int64}})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmprxna7qyv.jl:10\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprxna7qyv.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprxna7qyv.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprxna7qyv.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] (::var\"#2#5\")(x::Vector{Int64})\n     @ Main /tmp/tmprxna7qyv.jl:10\n\
    \   [2] filter(f::var\"#2#5\", a::Vector{Vector{Int64}})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmprxna7qyv.jl:10\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprxna7qyv.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprxna7qyv"
  timestamp: 1659821722
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    result = Vector{Int64}()\n\
    \    for n in x\n        has_even = false\n        for d in digits(n)\n      \
    \      if d % 2 == 0\n                has_even = true\n                break\n\
    \            end\n        end\n        if !has_even\n            push!(result,\
    \ n)\n        end\n    end\n    sort(result)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821718
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    a = Int64[]\n\
    \    for i = 1:length(x)\n        xi = x[i]\n        even = false\n        while\
    \ xi > 0\n            if xi % 2 == 0\n                even = true\n          \
    \      break\n            end\n            xi = div(xi, 10)\n        end\n   \
    \     if !even\n            push!(a, x[i])\n        end\n    end\n    sort(a)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821718
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Write your code\
    \ here\n    unique_digits = unique(x)\n    unique_digits_copy = copy(unique_digits)\n\
    \    for i in unique_digits\n        if(!iseven(i))\n            unique_digits_copy\
    \ = filter!(==(i), unique_digits_copy)\n        end\n    end\n    return sort(unique_digits_copy)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp0b3_j4z.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpp0b3_j4z.jl:24\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp0b3_j4z.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp0b3_j4z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp0b3_j4z.jl:25\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp0b3_j4z.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp0b3_j4z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp0b3_j4z.jl:26\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp0b3_j4z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp0b3_j4z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp0b3_j4z.jl:27\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp0b3_j4z.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpp0b3_j4z.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659821720
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # A place to store\
    \ the result of the function\n    res = Vector{Int64}()\n    \n    # Iterate over\
    \ all elements in x\n    for num in x\n        # Get the digits of the number\n\
    \        digits = digits(num)\n        \n        # Check if any of the digits\
    \ is even (even -> 1)\n        if all(digits .% 2 .!= 0)\n            # The number\
    \ does not have an even digit, append it to the \n            # result\n     \
    \       push!(res, num)\n        end\n    end\n    \n    # Return the result\n\
    \    return sort(res)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1theec59.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp1theec59.jl:33\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1theec59.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1theec59.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1theec59.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1theec59.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1theec59.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1theec59.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1theec59.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1theec59.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digits not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1theec59.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1theec59.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1theec59.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1theec59.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp1theec59.jl:15\n\
    \   ["
  timestamp: 1659821721
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpa7bwe_gi.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa7bwe_gi.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpa7bwe_gi.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7bwe_gi.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7bwe_gi.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa7bwe_gi.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpa7bwe_gi.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7bwe_gi.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821722
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    res = Int64[]\n\
    \    for i in x\n        flag = 0\n        while i > 0\n            if i % 2 ==\
    \ 0\n                flag = 1\n                break\n            end\n      \
    \      i = i \xF7 10\n        end\n        if flag == 0\n            push!(res,\
    \ i)\n        end\n    end\n    sort(res)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3tnbza7y.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp3tnbza7y.jl:30\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [0, 0, 0] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tnbza7y.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tnbza7y.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tnbza7y.jl:32\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [0, 0] == [111, 151]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tnbza7y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tnbza7y.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tnbza7y.jl:33\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [0, 0] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3tnbza7y.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3tnbza7y.jl:29\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821721
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x = sort(x, rev=true)\n\
    \    #this function will return the unique numbers in a list and sort them in\
    \ increasing order\n    y = []\n    for i in x\n        if !( (i%2 == 0) || (i%5\
    \ == 0) )\n            push!(y, i)\n        end\n    end\n    return y\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph8ei4gdj.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmph8ei4gdj.jl:24\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph8ei4gdj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8ei4gdj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph8ei4gdj.jl:25\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph8ei4gdj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8ei4gdj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph8ei4gdj.jl:26\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [2033, 151, 111] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph8ei4gdj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8ei4gdj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph8ei4gdj.jl:27\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [103, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph8ei4gdj.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmph8ei4gdj.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659821721
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    uniques = Set([])\n\
    \    for n in x\n        push!(uniques, n)\n        while n != 0\n           \
    \ if rem(n, 10) % 2 == 0\n                pop!(uniques)\n                break\n\
    \            end\n            n = div(n, 10)\n        end\n    end\n    sort(collect(uniques))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxiap397l.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpxiap397l.jl:27\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 33, 1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxiap397l.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxiap397l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxiap397l.jl:30\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxiap397l.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxiap397l.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     2      4\n"
  timestamp: 1659821721
- exit_code: -1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    X = []\n    for\
    \ i in x\n        if i == 0\n            continue\n        end\n        x1 = i\n\
    \        flag = true\n        while x1 > 0\n            if x1 % 2 == 0\n     \
    \           flag = false\n                break\n            end\n           \
    \ x1 = x1 % 10\n        end\n        if flag\n            push!(X, i)\n      \
    \  end\n    end\n    X = sort(X)\n    return X\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659821723
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    new_list = []\n\
    \    for i in x\n        if all(typeof(j) == Int64 for j in digits(i))\n     \
    \       push!(new_list, i)\n        end\n    end\n    return sort(new_list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjv9xevk2.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpjv9xevk2.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjv9xevk2.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjv9xevk2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjv9xevk2.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjv9xevk2.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjv9xevk2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjv9xevk2.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjv9xevk2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjv9xevk2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjv9xevk2.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjv9xevk2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjv9xevk2.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821721
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    out = []\n    for\
    \ n in x\n        if n % 2 == 0\n            continue\n        end\n        push!(out,\
    \ n)\n    end\n    sort(out)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplr4xvzt6.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmplr4xvzt6.jl:24\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplr4xvzt6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplr4xvzt6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplr4xvzt6.jl:25\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplr4xvzt6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplr4xvzt6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplr4xvzt6.jl:26\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplr4xvzt6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplr4xvzt6.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821721
- exit_code: -1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_list = Int64[]\n\
    \    @assert length(x) > 0 \"Empty List\"\n    @assert all(x .> 0) \"List should\
    \ only contain positive integer\"\n    for i in x\n        flag = true\n     \
    \   if i <= 9\n            push!(unique_list, i)\n        else\n            while\
    \ i > 0\n                if i % 2 == 0\n                    flag = false\n   \
    \                 break\n                end\n                i = i % 10\n   \
    \         end\n            if flag == true\n                push!(unique_list,\
    \ i)\n            end\n        end\n    end\n    sort(unique_list)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659821724
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x = unique(x)\n\
    \    out = []\n    for i in x\n        if isodd(i)\n            push!(out, i)\n\
    \        else\n            for d in digits(i)\n                if iseven(d)\n\
    \                    push!(out, i)\n                    break\n              \
    \  end\n            end\n        end\n    end\n    return sort(out)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp57puc7kv.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp57puc7kv.jl:30\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57puc7kv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57puc7kv.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp57puc7kv.jl:31\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57puc7kv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57puc7kv.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp57puc7kv.jl:32\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57puc7kv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57puc7kv.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp57puc7kv.jl:33\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57puc7kv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57puc7kv.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821722
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    #your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8u0qpmxt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8u0qpmxt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8u0qpmxt.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u0qpmxt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8u0qpmxt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8u0qpmxt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8u0qpmxt.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u0qpmxt.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821723
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # YOUR CODE HERE\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpksgjhdcn.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpksgjhdcn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpksgjhdcn.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpksgjhdcn.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpksgjhdcn.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpksgjhdcn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpksgjhdcn.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpksgjhdcn.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821715
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    res = Array{Int64}(undef,\
    \ 0)\n    for num in x\n        if all(d -> d % 2 != 0, digits(num))\n       \
    \     push!(res, num)\n        end\n    end\n    return sort(res)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821720
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    #Complete your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp858f21fd.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp858f21fd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp858f21fd.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp858f21fd.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp858f21fd.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp858f21fd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp858f21fd.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp858f21fd.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821724
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # YOUR CODE HERE\n\
    \    n = length(x)\n    x_out = Array{Int64}(n)\n    k = 0\n    for i in 1:n\n\
    \        if x[i] == 0\n            next\n        end\n        x_out[i] = x[i]\n\
    \        isnot_odd = 0\n        while x_out[i] != 0\n            x_out[i] = x_out[i]\
    \ % 10\n            if x_out[i] % 2 == 0\n                isnot_odd = 1\n    \
    \            break\n            end\n            x_out[i] = x_out[i] // 10\n \
    \       end\n        if isnot_odd == 1\n            x_out[i] = 0\n        end\n\
    \    end\n    x_out = x_out[x_out .!= 0]\n    return sort(x_out)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8i2kwk5x.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp8i2kwk5x.jl:39\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8i2kwk5x.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8i2kwk5x.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8i2kwk5x.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp8i2kwk5x.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8i2"
  timestamp: 1659821723
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # write your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgjswh_nk.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpgjswh_nk.jl:17\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgjswh_nk.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgjswh_nk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpgjswh_nk.jl:19\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgjswh_nk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgjswh_nk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpgjswh_nk.jl:20\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgjswh_nk.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgjswh_nk.jl:16\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821722
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    out = Int64[]\n\
    \    for el in x\n        push!(out, el) if !(el % 2 == 0) && !(el % 5 == 0)\n\
    \    end\n    sort(out)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp875zjsja.jl:10 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp875zjsja.jl:11\n\
    in expression starting at /tmp/tmp875zjsja.jl:11\n"
  stdout: ''
  timestamp: 1659821722
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    u_d = []\n    for\
    \ i in x\n        s = string(i)\n        e = false\n        for j in s\n     \
    \       if j == '0' || j == '2' || j == '4' || j == '6' || j == '8'\n        \
    \        e = true\n                break\n            end\n        end\n     \
    \   if e == false\n            push!(u_d, i)\n        end\n    end\n    sort(u_d)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821721
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    res = Int64[]\n\
    \    \n    for i = 1:length(x)\n        \n        if !has_even_digit(x[i]) \n\
    \            push!(res, x[i])\n        end\n    end\n    \n    return sort(res)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfsb2nx1r.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpfsb2nx1r.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfsb2nx1r.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfsb2nx1r.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfsb2nx1r.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpfsb2nx1r.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfsb2nx1r.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfsb2nx1r.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfsb2nx1r.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpfsb2nx1r.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfsb2nx1r.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfsb2nx1r.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfsb2nx1r.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpfsb2nx1r.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659821723
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x_unique = Vector{Int64}()\n\
    \    for i in x\n        digits = digits(i)\n        if !(2 in digits || 4 in\
    \ digits || 6 in digits || 8 in digits || 0 in digits)\n            push!(x_unique,\
    \ i)\n        end\n    end\n    sort(x_unique)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxjzumsco.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpxjzumsco.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpxjzumsco.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxjzumsco.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxjzumsco.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpxjzumsco.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpxjzumsco.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxjzumsco.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxjzumsco.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpxjzumsco.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digits not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpxjzumsco.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxjzumsco.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxjzumsco.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpxjzumsco.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpxjzumsco.jl:11\n\
    \   ["
  timestamp: 1659821723
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    new = Vector{Int64}(length(x))\n\
    \    count = 0\n    for i = 1:length(x)\n        if (x[i] % 2 == 0)\n        \
    \    continue\n        else\n            count += 1\n            new[count] =\
    \ x[i]\n        end\n    end\n    return new[1:count]\nend\nprint(unique_digits([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckt_qrmt.jl:24\nin expression starting at\
    \ /tmp/tmpckt_qrmt.jl:24\n"
  stdout: ''
  timestamp: 1659821722
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Write code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzr0v0d78.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpzr0v0d78.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpzr0v0d78.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzr0v0d78.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzr0v0d78.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpzr0v0d78.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpzr0v0d78.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzr0v0d78.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_list = Int64[]\n\
    \    for num in x\n        if has_even_digit(num) == false\n            push!(unique_list,\
    \ num)\n        end\n    end\n    sort(unique_list)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpl2clfcnk.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpl2clfcnk.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpl2clfcnk.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2clfcnk.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2clfcnk.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpl2clfcnk.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpl2clfcnk.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2clfcnk.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2clfcnk.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpl2clfcnk.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpl2clfcnk.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2clfcnk.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2clfcnk.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpl2clfcnk.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659821723
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # VECTORIZED SOLUTION\n\
    \    # Get even numbers and their corresponding indicies\n    even_idx = findall(x\
    \ -> x % 2 == 0, x)\n    even_nums = x[even_idx]\n    # Iterate through each even\
    \ number and find matching elements in x\n    # Remove them\n    for num in even_nums\n\
    \        x = deleteat!(x, findall(x -> num == x, x))\n    end\n    # return sorted\
    \ vector\n    return sort(x)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9tv7pljz.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp9tv7pljz.jl:27\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tv7pljz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tv7pljz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9tv7pljz.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tv7pljz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tv7pljz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9tv7pljz.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tv7pljz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tv7pljz.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821724
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    #your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8u0qpmxt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8u0qpmxt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8u0qpmxt.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u0qpmxt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8u0qpmxt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8u0qpmxt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8u0qpmxt.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u0qpmxt.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821723
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmps7mde4d_.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmps7mde4d_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmps7mde4d_.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7mde4d_.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps7mde4d_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmps7mde4d_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmps7mde4d_.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7mde4d_.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    y = Int64[]\n  \
    \  for i in x\n        if (i == to_digit(i))\n            push!(y, i)\n      \
    \  end\n    end\n    y\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpr1ds_byv.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpr1ds_byv.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: to_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpr1ds_byv.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr1ds_byv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr1ds_byv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr1ds_byv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: to_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpr1ds_byv.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr1ds_byv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr1ds_byv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr1ds_byv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: to_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpr1ds_byv.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr1ds_byv.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr1ds_byv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr1ds_byv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: to_digit not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpr1ds_byv.jl"
  timestamp: 1659821724
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n   return sort(filter(x\
    \ -> all(d -> d % 2 != 0, digits(x)), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821722
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort(Int64[y\
    \ for y in x if !(any(x->x%2==0,digits(y)))])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821722
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    ud = Vector{Int64}()\n\
    \    for i in x\n        if all(d % 2 != 0 for d in digits(i))\n            push!(ud,\
    \ i)\n        end\n    end\n    return sort(ud)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821722
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    filtered = filter(x)\
    \ do x\n        !any(isodd, digits(x))\n    end\n    sort(filtered)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpupu4i1dt.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpupu4i1dt.jl:19\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupu4i1dt.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupu4i1dt.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpupu4i1dt.jl:21\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupu4i1dt.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupu4i1dt.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpupu4i1dt.jl:22\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpupu4i1dt.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpupu4i1dt.jl:18\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821724
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # We will be using\
    \ the set collection from Julia to store the unique digits.\n    # It will store\
    \ the digits in ascending order\n    digits = Set{Int64}([])\n    # We will iterate\
    \ over the elements of the vector x\n    for element in x\n        # We will iterate\
    \ over the digits of the number and check if the digit is\n        # even or not.\n\
    \        for digit in element\n            if digit % 2 == 0\n               \
    \ # We will break out of the loop if we find an even digit.\n                break\n\
    \            end\n            # If we haven't found an even digit, then we will\
    \ push the number to the digits set.\n            push!(digits, element)\n   \
    \     end\n    end\n    # We will return the digits set as a sorted vector.\n\
    \    return sort(collect(digits))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpafcbpp1c.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpafcbpp1c.jl:34\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafcbpp1c.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafcbpp1c.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpafcbpp1c.jl:35\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafcbpp1c.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafcbpp1c.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpafcbpp1c.jl:36\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafcbpp1c.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafcbpp1c.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821724
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    n = length(x)\n\
    \    for i = 1:n\n        \n    end\n    return\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp22nrlbrz.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp22nrlbrz.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp22nrlbrz.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22nrlbrz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp22nrlbrz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp22nrlbrz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp22nrlbrz.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22nrlbrz.jl:21 [inlined]\n\
    \   [4] "
  timestamp: 1659821726
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique = []\n  \
    \  for i = 1:length(x)\n        if length(unique) != 0\n            for j = 1:length(unique)\n\
    \                if x[i] == unique[j]\n                    break\n           \
    \     elseif j == length(unique)\n                    unique = [unique; x[i]]\n\
    \                end\n            end\n        else\n            unique = [unique;\
    \ x[i]]\n        end\n    end\n    return unique\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_t1ayyhm.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp_t1ayyhm.jl:30\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t1ayyhm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t1ayyhm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_t1ayyhm.jl:31\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t1ayyhm.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t1ayyhm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_t1ayyhm.jl:32\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t1ayyhm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t1ayyhm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_t1ayyhm.jl:33\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t1ayyhm.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t1ayyhm.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    a = []\n    for\
    \ i in x\n        if contains(digits(i, base=10), 2) == false && contains(digits(i,\
    \ base=10), 4) == false && contains(digits(i, base=10), 6) == false && contains(digits(i,\
    \ base=10), 8) == false && contains(digits(i, base=10), 0) == false\n        \
    \    push!(a, i)\n        end\n    end\n    return sort(a)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpas8wt5oj.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpas8wt5oj.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpas8wt5oj.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8wt5oj.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8wt5oj.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpas8wt5oj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpas8wt5oj.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8wt5oj.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8wt5oj.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpas8wt5oj.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    conta"
  timestamp: 1659821726
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Write your code\
    \ here\n    a = [x[i] for i in 1:length(x) if ((x[i] % 2) == 1)]\n    return a\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpobntddfb.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpobntddfb.jl:18\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobntddfb.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobntddfb.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpobntddfb.jl:19\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobntddfb.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobntddfb.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpobntddfb.jl:20\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobntddfb.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobntddfb.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpobntddfb.jl:21\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobntddfb.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobntddfb.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821724
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Implement your\
    \ code here\nend\n \nunique_digits([5, 42, 6, 34, 9, 32, 3, 72, 48])\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\nClosest candidates are:\n  convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \  convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \  ...\nStacktrace:\n [1] unique_digits(x::Vector{Int64})\n   @ Main /tmp/tmp95j3hlj7.jl:10\n\
    \ [2] top-level scope\n   @ /tmp/tmp95j3hlj7.jl:12\nin expression starting at\
    \ /tmp/tmp95j3hlj7.jl:12\n"
  stdout: ''
  timestamp: 1659821727
- exit_code: -1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # YOUR CODE HERE\n\
    \    A = unique(x)\n    B = []\n    for i in A\n        if mod(i,2) == 0\n   \
    \         deleteat!(A,findall(A,i))\n        end\n    end\n    B = sort(A)\n \
    \   return B\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpfjizvqhm.jl:25\n  Test threw
    exception\n  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError:
    no method matching findall(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findall(!Matched::Base.Fix2{typeof(in)},
    ::Number) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2318\n    findall(!Matched::Function,
    ::Number) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2317\n    findall(!Matched::Function,
    ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    ...\n  Stacktrace:\n   [1]
    unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpfjizvqhm.jl:14\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjizvqhm.jl:25 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjizvqhm.jl:24\ntest set: Error
    During Test at /tmp/tmpfjizvqhm.jl:26\n  Test threw exception\n  Expression: candidate([152,
    323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method matching findall(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    findall(!Matched::Base.Fix2{typeof(in)},
    ::Number) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2318\n    findall(!Matched::Function,
    ::Number) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2317\n    findall(!Matched::Function,
    ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    ...\n  Stacktrace:\n   [1]
    unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpfjizvqhm.jl:14\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjizvqhm.jl:26 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjizvqhm.jl:24\ntest set: Test
    Failed at /tmp/tmpfjizvqhm.jl:27\n  Expression: cand'
  timestamp: 1659821727
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    a = Vector{Int64}()\n\
    \    for i in x\n        if i%2 != 0\n            push!(a,i)\n        end\n  \
    \  end\n    return sort(a)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo6ip_hyv.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpo6ip_hyv.jl:23\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6ip_hyv.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6ip_hyv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo6ip_hyv.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6ip_hyv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6ip_hyv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo6ip_hyv.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6ip_hyv.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6ip_hyv.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x_copy = x[:]\n\
    \    for i in x\n        if has_even_digit(i)\n            deleteat!(x_copy, findall(x_copy\
    \ .== i)[1])\n        end\n    end\n    sort(x_copy)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpaiysqcpz.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpaiysqcpz.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaiysqcpz.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaiysqcpz.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaiysqcpz.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpaiysqcpz.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaiysqcpz.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaiysqcpz.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaiysqcpz.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpaiysqcpz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaiysqcpz.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaiysqcpz.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaiysqcpz.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpaiysqcpz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    #convert each element\
    \ to an array\n    #do a count of evens\n    #if count == 0 then push to a new\
    \ array\n    #then sort the array\n    \n    a = Array{Any}(length(x))\n    for\
    \ i in 1:length(x)\n        b = Array{Any}(100)\n        y = 0\n        z = 1\n\
    \        for j in 1:length(x[i])\n            y = x[i] % z\n            z = z\
    \ * 10\n            push!(b, y)\n        end\n        #print(b)\n        #print(\"\
    \\n\")\n        \n        if(count(isodd, b) == length(b))\n            push!(a,\
    \ x[i])\n        end\n    end\n    sort(a)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp60gz1zuz.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp60gz1zuz.jl:38\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching (Array{Any})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp60gz1zuz.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp60gz1zuz.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp60gz1zuz.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp60gz1zuz.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Any})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp60gz1zu"
  timestamp: 1659821726
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    println(\"x: $(x)\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_qcf0cp.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_qcf0cp.jl:1\n\
    in expression starting at /tmp/tmpk_qcf0cp.jl:1\n"
  stdout: ''
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp99nbldju.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp99nbldju.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp99nbldju.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99nbldju.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99nbldju.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp99nbldju.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp99nbldju.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99nbldju.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821728
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return filter(x)\
    \ do x_\n        !any(isodd, digits(x_))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6_rs9y3j.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp6_rs9y3j.jl:18\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_rs9y3j.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6_rs9y3j.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp6_rs9y3j.jl:20\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_rs9y3j.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6_rs9y3j.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp6_rs9y3j.jl:21\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6_rs9y3j.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6_rs9y3j.jl:17\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821726
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    res = []\n    for\
    \ i in x\n        if !even_digits(i)\n            push!(res, i)\n        end\n\
    \    end\n    return sort(res)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpoccjr_33.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpoccjr_33.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: even_digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpoccjr_33.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoccjr_33.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoccjr_33.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpoccjr_33.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: even_digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpoccjr_33.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoccjr_33.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoccjr_33.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpoccjr_33.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: even_digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpoccjr_33.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoccjr_33.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoccjr_33.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpoccjr_33.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: even_digits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tm"
  timestamp: 1659821727
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    y = []\n    for\
    \ i in x\n        if !ismember(0, collect(digits(i, base=10))) && !ismember(2,\
    \ collect(digits(i, base=10))) && !ismember(4, collect(digits(i, base=10))) &&\
    \ !ismember(6, collect(digits(i, base=10))) && !ismember(8, collect(digits(i,\
    \ base=10)))\n            push!(y, i)\n        end\n    end\n    return y\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpo38o4oe1.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpo38o4oe1.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: ismember\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpo38o4oe1.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo38o4oe1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo38o4oe1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpo38o4oe1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: ismember\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpo38o4oe1.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo38o4oe1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo38o4oe1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpo38o4oe1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: ismember\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpo38o4oe1.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo38o4oe1.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo38o4oe1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpo38o4oe1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: ismember not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpo38o4oe1.jl"
  timestamp: 1659821727
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Your code here\n\
    \    # Your code here\n    new_x = []\n    for i in x\n        if digits(i)%2\
    \ == 1\n            push!(new_x, i)\n        end\n    end\n    return sort(new_x)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpm40ms9nq.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpm40ms9nq.jl:24\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpm40ms9nq.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm40ms9nq.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm40ms9nq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm40ms9nq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpm40ms9nq.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm40ms9nq.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm40ms9nq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm40ms9nq.jl:26\n  Test threw exception\n  Expression:\
    \ cand"
  timestamp: 1659821728
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    res = []\n    for\
    \ i in x\n        if(!contains(i, x))\n            push!(res, i)\n        end\n\
    \    end\n    return sort(res)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmt0z8t2r.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpmt0z8t2r.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Int64, ::Vector{Int64})\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmt0z8t2r.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmt0z8t2r.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmt0z8t2r.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmt0z8t2r.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Int64, ::Vector{Int64})\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmt0z8t2r.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmt0z8t2r.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmt0z8t2r.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmt0z8t2r.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ contains(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    conta"
  timestamp: 1659821728
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # write your code\
    \ here\nend\n \n \n \n \n \n \n \n \n \n \n\"\"\"Given a graph G = (V, E), where\
    \ each edge has a weight w(u, v),\n    it is required to find the shortest path\
    \ between two given vertices u, v\n    and the total weight of the path.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc49e97le.jl:21\nin expression starting at\
    \ /tmp/tmpc49e97le.jl:21\n"
  stdout: ''
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmilkv8y9.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpmilkv8y9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmilkv8y9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpmilkv8y9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmilkv8y9.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpmilkv8y9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmilkv8y9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpmilkv8y9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmilkv8y9.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmilkv8y9.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821712
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Int[]\n    for i in x\n        if contains(string(i), \"0\") || contains(string(i),\
    \ \"2\") || contains(string(i), \"4\") || \n            contains(string(i), \"\
    6\") || contains(string(i), \"8\")\n            continue\n        else\n     \
    \       push!(unique_digits, i)\n        end\n    end\n    return sort(unique_digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    _uniq(x) = x .-\
    \ x .% 10 .+ x ./ 10 .% 10 .- x ./ 100 .% 10 .+ x ./ 1000 .% 10 .- x ./ 10000\
    \ .% 10 .+ x ./ 100000 .% 10\n    return sort(_uniq(x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkhahjfj3.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpkhahjfj3.jl:17\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  InexactError: Int64(0.09091)\n\
    \  Stacktrace:\n    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] convert\n\
    \      @ ./number.jl:7 [inlined]\n    [3] setindex!\n      @ ./array.jl:903 [inlined]\n\
    \    [4] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64, src::Vector{Float64},\
    \ soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n    [5] unsafe_copyto!\n\
    \      @ ./array.jl:307 [inlined]\n    [6] _copyto_impl!\n      @ ./array.jl:331\
    \ [inlined]\n    [7] copyto!\n      @ ./array.jl:317 [inlined]\n    [8] copyto!\n\
    \      @ ./array.jl:343 [inlined]\n    [9] copyto_axcheck!\n      @ ./abstractarray.jl:1104\
    \ [inlined]\n   [10] Vector{Int64}(x::Vector{Float64})\n      @ Base ./array.jl:563\n\
    \   [11] convert\n      @ ./array.jl:554 [inlined]\n   [12] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpkhahjfj3.jl:10\n   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [14] macro expansion\n      @ /tmp/tmpkhahjfj3.jl:17 [inlined]\n\
    \   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [16] top-level scope\n      @ /tmp/tmpkhahjfj3.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpkhahjfj3.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  InexactError: Int64(10.9091)\n\
    \  Stacktrace:\n    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] convert\n\
    \      @ ./number.jl:7 [inlined]\n    [3] setindex!\n      @ ./array.jl:903 [inlined]\n\
    \    [4] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64, src::Vector{Float64},\
    \ soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n    [5] unsafe_copyto!\n\
    \      @ ./array.jl:307 [inlined]\n    [6] _copyto_impl!\n      @ ./array.jl:331\
    \ [inlined]\n    [7] copyto!\n      @ ./array.jl:317 [inlined]\n    [8] copyto!\n\
    \      @ ./array.jl:343 [inlined]\n    [9] copyto_axcheck!\n      @ ./abstractarray.jl:1104\
    \ [inlined]\n   [10] Vector{Int64}(x::Vector{Flo"
  timestamp: 1659821728
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    y = Int[]\n    for\
    \ a in x\n        if any(digit in [0,2,4,6,8] for digit in digits(a))\n      \
    \      continue\n        else\n            push!(y,a)\n        end\n    end\n\
    \    return sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    mask = x .% 2 .!=\
    \ 0 \n    z = zeros(Int64, length(x))\n    z[mask] = x[mask]\n    z = z[z .!=\
    \ 0]\n    z = unique(z)\n    sort!(z)\n    return z\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpticka7yb.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpticka7yb.jl:23\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpticka7yb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpticka7yb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpticka7yb.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpticka7yb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpticka7yb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpticka7yb.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpticka7yb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpticka7yb.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659821728
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    for i in x\n   \
    \     if i%2 == 0\n            deleteat!(x, findall(x, x->x == i))\n        end\n\
    \    end\n    sort(x)\nend\nunique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching findall(::Vector{Int64},\
    \ ::var\"#1#2\"{Int64})\nClosest candidates are:\n  findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n  findall(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2299\nStacktrace:\n [1]\
    \ unique_digits(x::Vector{Int64})\n   @ Main /tmp/tmp1__mfln_.jl:11\n [2] top-level\
    \ scope\n   @ /tmp/tmp1__mfln_.jl:16\nin expression starting at /tmp/tmp1__mfln_.jl:16\n"
  stdout: ''
  timestamp: 1659821729
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    y = []\n    for\
    \ i = 1:length(x)\n        if(Int(string(x[i])[1])%2 != 0)\n            if(Int(string(x[i])[2])%2\
    \ != 0)\n                if(Int(string(x[i])[3])%2 != 0)\n                   \
    \ if(Int(string(x[i])[4])%2 != 0)\n                        push!(y,x[i])\n   \
    \                 end\n                end\n            end\n        end\n   \
    \ end\n    return sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpp_o2efhf.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpp_o2efhf.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  BoundsError: attempt\
    \ to access 2-codeunit String at index [3]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpp_o2efhf.jl:13\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpp_o2efhf.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpp_o2efhf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpp_o2efhf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  BoundsError: attempt to\
    \ access 3-codeunit String at index [4]\n  Stacktrace:\n   [1] checkbounds\n \
    \    @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpp_o2efhf.jl:14\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpp_o2efhf.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpp_o2efhf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpp_o2efhf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [4]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpp_o2efhf.jl:14\n  "
  timestamp: 1659821728
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    f(n) = all(rem.(n,10)\
    \ .!= 0)\n    return sort(x[f.(x)])\nend\nx = collect(0:100)\n@show unique_digits(x)\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpip7qy5pe.jl:16

    '
  stdout: "unique_digits(x) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99]\ntest\
    \ set: Test Failed at /tmp/tmpip7qy5pe.jl:19\n  Expression: candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpip7qy5pe.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpip7qy5pe.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpip7qy5pe.jl:20\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpip7qy5pe.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpip7qy5pe.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpip7qy5pe.jl:21\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpip7qy5pe.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpip7qy5pe.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpip7qy5pe.jl:22\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/s"
  timestamp: 1659821727
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return filter(v\
    \ -> !any(iseven, digits(v)), sort(x))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821725
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Write code to\
    \ fill this up\nend\nx = [1234, 5678, 9012, 2345, 76567]\n@test unique_digits(x)\
    \ == [345, 34567]\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpog9ys3qu.jl:12

    in expression starting at /tmp/tmpog9ys3qu.jl:12

    '
  stdout: ''
  timestamp: 1659821726
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    # Empty vector\
    \ to store number without even digits\n    y = []\n    \n    # Iterate over each\
    \ element of the vector\n    for i in x\n        \n        # Convert to string\
    \ and compare each digit\n        for j in string(i)\n            # Check if even\
    \ digit exists\n            if iseven(parse(Int64, j)) == true\n             \
    \   # If exists, don't add to y\n                break\n            else\n   \
    \             # If doesn't exists, add to y\n                push!(y, i)\n   \
    \         end\n        end\n    end\n    \n    # Sort y\n    sort!(y)\n    \n\
    \    # Return y\n    return y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqjpwshbl.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpqjpwshbl.jl:40\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 15, 33, 33, 1422] == [1,\
    \ 15, 33]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjpwshbl.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjpwshbl.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqjpwshbl.jl:41\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjpwshbl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjpwshbl.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqjpwshbl.jl:42\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 111, 111, 151, 151, 151, 12345] ==\
    \ [111, 151]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjpwshbl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjpwshbl.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqjpwshbl.jl:43\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 31, 103, 135, 135, 135] == [31, 135]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjpwshbl.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjpwshbl.jl:39\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821728
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    a = Set([digit for\
    \ digit in digits(x)])\n    uniquedigits = Vector{Int64}([digit for digit in a])\n\
    \    return(uniquedigits)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsksi43e5.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpsksi43e5.jl:18\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpsksi43e5.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsksi43e5.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsksi43e5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsksi43e5.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpsksi43e5.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsksi43e5.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsksi43e5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsksi43e5.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base"
  timestamp: 1659821729
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    # Your code\
    \ goes here\n    \nend\n \n\"\"\"Given two sorted arrays, X and Y, with sizes\
    \ M and N\n    respectively, find the median of all elements in X + Y.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpth0thji8.jl:14\nin expression starting at\
    \ /tmp/tmpth0thji8.jl:14\n"
  stdout: ''
  timestamp: 1659821727
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # YOUR CODE GOES\
    \ HERE\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfbxa68gw.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfbxa68gw.jl:1\n\
    in expression starting at /tmp/tmpfbxa68gw.jl:1\n"
  stdout: ''
  timestamp: 1659821727
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpi7fnzr0b.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpi7fnzr0b.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpi7fnzr0b.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi7fnzr0b.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi7fnzr0b.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpi7fnzr0b.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpi7fnzr0b.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi7fnzr0b.jl:17 [inlined]\n\
    \   [4] "
  timestamp: 1659821729
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return sort(filter(z\
    \ -> !any(isdigit(y) && even(y) for y in z),x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpdzev9n__.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdzev9n__.jl:16\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching isdigit(::Int64)\n  Closest candidates are:\n    isdigit(!Matched::AbstractChar)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/unicode.jl:358\n  Stacktrace:\n\
    \    [1] (::var\"#2#4\")(y::Int64)\n      @ Main ./none:0\n    [2] iterate\n \
    \     @ ./generator.jl:47 [inlined]\n    [3] _any(f::typeof(identity), itr::Base.Generator{Int64,\
    \ var\"#2#4\"}, #unused#::Colon)\n      @ Base ./reduce.jl:1109\n    [4] any(f::Function,\
    \ itr::Base.Generator{Int64, var\"#2#4\"})\n      @ Base ./reduce.jl:1105\n  \
    \  [5] any(itr::Base.Generator{Int64, var\"#2#4\"})\n      @ Base ./reduce.jl:1031\n\
    \    [6] (::var\"#1#3\")(z::Int64)\n      @ Main /tmp/tmpdzev9n__.jl:9\n    [7]\
    \ filter(f::var\"#1#3\", a::Vector{Int64})\n      @ Base ./array.jl:2484\n   \
    \ [8] unique_digits(x::Vector{Int64})\n      @ Main /tmp/tmpdzev9n__.jl:9\n  \
    \  [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpdzev9n__.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpdzev9n__.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdzev9n__.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching isdigit(::Int64)\n  Closest candidates are:\n    isdigit(!Matched::AbstractChar)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/unicode.jl:358\n  Stacktrace:\n\
    \    [1] (::var\"#2#4\")(y::Int64)\n      @ Main ./none:0\n    [2] iterate\n \
    \     @ ./generator.jl:47 [inlined]\n    [3] _any(f::typeof(identity), itr::Base.Generator{Int64,\
    \ var\"#2#4\"}, #unused#::Colon)\n      @ Base ./reduce.jl:1109\n    [4] any(f::Function,\
    \ itr::Base.Generator{Int64, var\"#2#4\"})\n      @ Base ./reduce.jl:1105\n  \
    \  [5] any(itr::Base.Generator{Int64, var\"#2#4\"})\n      @ Base ./reduce.jl:1031\n\
    \    [6] (::var\"#1#3\")("
  timestamp: 1659821729
- exit_code: 0
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n \n    foo_list = []\n\
    \    for x_i in x\n        if all(i%2 != 0 for i in digits(x_i))\n           \
    \ push!(foo_list, x_i)\n        end\n    end\n    sort(foo_list)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659821727
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    filter!(digit ->\
    \ !any(even, digits(digit)), x)\n    sort!(x)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0u47nwbi.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp0u47nwbi.jl:17\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(digit::Int64)\n     @ Main\
    \ /tmp/tmp0u47nwbi.jl:9\n   [2] filter!(f::var\"#1#2\", a::Vector{Int64})\n  \
    \   @ Base ./array.jl:2529\n   [3] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0u47nwbi.jl:9\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp0u47nwbi.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp0u47nwbi.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0u47nwbi.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(digit::Int64)\n     @ Main\
    \ /tmp/tmp0u47nwbi.jl:9\n   [2] filter!(f::var\"#1#2\", a::Vector{Int64})\n  \
    \   @ Base ./array.jl:2529\n   [3] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0u47nwbi.jl:9\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp0u47nwbi.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp0u47nwbi.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0u47nwbi.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: even not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(digit::Int64)\n     @ Main /tmp/tmp0u47nwbi.jl:9\n\
    \   [2] filter!(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2529\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp0u47nwbi.jl:9\n \
    \  [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp0u47nwbi.jl:19 [inline"
  timestamp: 1659821729
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    x_list = []\n  \
    \  for i in x\n        if (0 in unique(digits(i)))\n            push!(x_list,\
    \ i)\n        end\n    end\n    return sort(x_list)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp92tn7f9q.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp92tn7f9q.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92tn7f9q.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92tn7f9q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp92tn7f9q.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92tn7f9q.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92tn7f9q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp92tn7f9q.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [2033] == [111, 151]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92tn7f9q.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92tn7f9q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp92tn7f9q.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [103] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp92tn7f9q.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp92tn7f9q.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659821729
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    return filter(isodd,x)\
    \ \nend\n \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp64me6t5j.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp64me6t5j.jl:17\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64me6t5j.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64me6t5j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp64me6t5j.jl:18\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64me6t5j.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64me6t5j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp64me6t5j.jl:19\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64me6t5j.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64me6t5j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp64me6t5j.jl:20\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64me6t5j.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64me6t5j.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659821729
