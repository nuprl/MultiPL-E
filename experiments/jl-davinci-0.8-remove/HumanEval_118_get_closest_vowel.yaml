name: HumanEval_118_get_closest_vowel
language: jl
prompt: "\"\"\"You are given a word. Your task is to find the closest vowel that stands\
  \ between \n    two consonants from the right side of the word (case sensitive).\n\
  \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
  \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
  \ that the given string contains English letter only.\n\n    Example:\n        \
  \            \"\"\"\nfunction get_closest_vowel(word::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
  yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
  easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
  ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
  \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
  )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
  )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\n\
  end\n"
completions: ["    # your code goes here\nend\n\"\"\"\n    get_closest_vowel(\"broccccoooolliii\"\
    ) == \"c\" # b[r]o[c]ccccooo[o]lliii\n    get_closest_vowel(\"trrroooomb\") ==\
    \ \"o\" # trr[r]o[o]oomb\n    get_closest_vowel(\"kyllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll",
  "    # Your code here\nend\n \nprintln(get_closest_vowel(\"winter\")) # Return \"\
    i\"\nprintln(get_closest_vowel(\"summer\")) # Return \"u\"\nprintln(get_closest_vowel(\"\
    autumn\")) # Return \"u\"\nprintln(get_closest_vowel(\"spring\")) # Return \"\
    i\"\nprintln(get_closest_vowel(\"Hello\")) # Return \"\" because there is no such\
    \ condition\n \nprintln(get_closest_vowel(\"lonely\")) # Return \"o\"\nprintln(get_closest_vowel(\"\
    easier\")) # Return \"e\"\nprintln(get_closest_vowel(\"noisy\")) # Return \"o\"\
    \nprintln(get_closest_vowel(\"noise\")) # Return \"o\"\nprintln(get_closest_vowel(\"\
    travel\")) # Return \"a\"\nprintln(get_closest_vowel(\"secluded\")) # Return \"\
    e\"\nprintln(get_closest_vowel(\"shameless\")) # Return \"a\"\nprintln(get_closest_vowel(\"\
    stamina\")) # Return \"a\"\nprintln(get_closest_vowel(\"scream\")) # Return \"\
    e\"\nprintln(get_closest_vowel(\"scramble\")) # Return \"a\"\nprintln(get_closest_vowel(\"\
    unhappily\")) # Return \"a\"\nprintln(get_closest_vowel(\"sadly\")) # Return \"\
    a\"\nprintln(get_closest_vowel(\"disturbed\")) # Return \"u\"\nprintln(get_closest_vowel(\"\
    trauma\")) # Return \"a\"\nprintln(get_closest_vowel(\"suddenly\")) # Return \"\
    u\"\nprintln(get_closest_vowel(\"achieve\")) # Return \"i\"\nprintln(get_closest_vowel(\"\
    accident\")) # Return \"i\"\nprintln(get_closest_vowel(\"accelerate\")) # Return\
    \ \"e\"\nprintln(get_closest_vow", "    \nend", "    # code\nend\n@testset \"\
    Basic Tests\" begin\n    @test get_closest_vowel(\"kuyA\") == \"y\"\n    @test\
    \ get_closest_vowel(\"kuyE\") == \"y\"\n    @test get_closest_vowel(\"kuyI\")\
    \ == \"y\"\n    @test get_closest_vowel(\"kuyO\") == \"y\"\n    @test get_closest_vowel(\"\
    kuyU\") == \"y\"\n    @test get_closest_vowel(\"kuEy\") == \"E\"\n    @test get_closest_vowel(\"\
    kuyA\") == \"y\"\n    @test get_closest_vowel(\"kuyL\") == \"\"\n    @test get_closest_vowel(\"\
    kuyLA\") == \"A\"\n    @test get_closest_vowel(\"kuyLE\") == \"E\"\n    @test\
    \ get_closest_vowel(\"kuyLI\") == \"I\"\n    @test get_closest_vowel(\"kuyLO\"\
    ) == \"O\"\n    @test get_closest_vowel(\"kuyLU\") == \"U\"\n    @test get_closest_vowel(\"\
    kuyLyAyAyAyAyAyAyAyAyAyAyAyAyAyAyAy\") == \"y\"\n    @test get_closest_vowel(\"\
    kuyLyAyAyAyAyAyAyAyAyAyAyAyAyAyAyAyA\") == \"A\"\n    @test get_closest_vowel(\"\
    kuyLyAyAyAyAyAyAyAyAyAyAyAyAyAyAyAyE\") == \"E\"\n    @test get_closest_vowel(\"\
    kuyLyAyAyAyAyAyAyAyAyAyAyAyAyAyAyAyI\") == \"I\"\n    @test get_closest_vowel(\"\
    kuyLyAyAyAyAyAyAyAyAyAyAyAyAyAyAyAyO\") == \"O\"\n    @test get_closest_vowel(\"\
    kuyLyAyAyAyAyAyAyAyAy", "    # Your code here\nend", end, "  \nend", "    chars\
    \ = Set(\"aeiou\")\n    for (i, c) in enumerate(reverse(word))\n        if i ==\
    \ 1\n            break\n        end\n        if c in chars\n            return\
    \ c\n        end\n    end\n    return \"\"\nend", "    chars = split(word)\n \
    \   idx = 1\n    while idx <= length(chars)\n        char = chars[end - idx +\
    \ 1]\n        if (is_vowel(char))\n            return char\n        end\n    \
    \    idx += 1\n    end\n    return \"\"\nend", "    # Your function goes here!\n\
    \    return \"\"\nend", "    # Your code here\n    return \"empty\"\nend", " \
    \   a::Int64 = \"\"\n    for i = length(word):-1:1\n        if i == 1\n      \
    \      break\n        end\n        if (word[i] == \"a\" || word[i] == \"e\" ||\
    \ word[i] == \"i\" || \n        word[i] == \"o\" || word[i] == \"u\") & (word[i-1]\
    \ != \"a\" || word[i-1] != \"e\" || word[i-1] != \"i\" || \n        word[i-1]\
    \ != \"o\" || word[i-1] != \"u\") & (word[i+1] != \"a\" || word[i+1] != \"e\"\
    \ || word[i+1] != \"i\" || \n        word[i+1] != \"o\" || word[i+1] != \"u\"\
    )\n            a = word[i]\n            break\n        end\n    end\n    return\
    \ a\nend", "    vowels = \"aeiou\"\n    for i = (length(word)):-1:1\n        if(findfirst(vowels,\
    \ word[i])!=nothing)\n            if(findfirst(vowels, word[i-1])==nothing &&\
    \ findfirst(vowels, word[i+1])==nothing)\n                return word[i]\n   \
    \         end\n        end\n    end\n    return \"\"\nend", "    # code here\n\
    end", "    len = length(word)\n    for i in range(len, 1, -1)\n        if any([word[i]\
    \ in c for c in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n            if any([word[i-1]\
    \ in c for c in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n                continue\n\
    \            else\n                return word[i]\n            end\n        end\n\
    \    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    if !is_consonant(word[end]) && !is_consonant(word[end-1]) #if the last\
    \ two characters are not consonants\n        return \"\"\n    end\n    for (index,\
    \ letter) in enumerate(word)\n        if is_consonant(letter)\n            if\
    \ !is_consonant(word[index+1]) #if the next character is a vowel\n           \
    \     return word[index+1]\n            end\n        end\n    end\nend", "   \
    \ vowels = 'aeiou'\n    result = String[]\n    for (i, j) in enumerate(word)\n\
    \        if j in vowels\n            result = push!(result, j)\n        end\n\
    \    end\n    if length(result) == 0\n        return \"\"\n    elseif length(result)\
    \ == 1\n        return result[1]\n    else\n        return result[end-1]\n   \
    \ end\nend", "    \"\"\"Return the closest vowel from the given word.\"\"\"\n\
    \    vowels = \"aeiou\"\n    for i in eachindex(word)\n        if word[i] in vowels\n\
    \            if i == 1\n                if word[i-1] in vowels\n             \
    \       return word[i]\n                else\n                    break\n    \
    \        elseif i == length(word)\n                if word[i-1] in vowels\n  \
    \                  return word[i]\n                else\n                    break\n\
    \            else\n                if word[i-1] in vowels && word[i+1] in vowels\n\
    \                    return word[i]\n                else\n                  \
    \  break\n        end\n    end\n    return \"\"\nend", "    \"\"\"Returns the\
    \ closest vowel that stands between two consonants from the right side of the\
    \ word (case sensitive).\n    Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't find any vowel met the above condition. \n\
    \    \"\"\"\n    \n    vowels = 'aeiou'\n    word_array = collect(word)\n    word_size\
    \ = length(word_array)\n    for i in 1:word_size\n        if word_array[word_size-i]\
    \ in vowels\n            if word_array[word_size-i-1] in vowels || i == word_size\n\
    \                return \"\"\n            else\n                return word_array[word_size-i]\n\
    \            end\n        end\n    end\nend", "    \n    for i in size(word)[1]:end:-1:1\
    \ # reverse iteration\n        \n        if word[i] in (\"a\", \"e\", \"i\", \"\
    o\", \"u\") && word[i-1] not in (\"a\", \"e\", \"i\", \"o\", \"u\") \n       \
    \     return word[i]\n        end\n    end", "    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    for i in word\n        if i in vowels\n            cnt =\
    \ 0\n            for j in word\n                if j in vowels\n             \
    \       cnt += 1\n                end\n            end\n        end\n    end\n\
    \    if cnt > 1\n        return i\n    else\n        return \"\"\n    end\nend",
  "    index = -1\n    for i in reverse(1:length(word)-1)\n        if (word[i] in\
    \ \"aeiouAEIOU\") && (word[i+1] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ) && (word[i-1] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n         \
    \   index = i\n            break\n        end\n    end\n    if index > 0\n   \
    \     return word[index]\n    else\n        return \"\"\n    end\nend", "    vowels\
    \ = \"aeiou\" \n    for i in eachindex(word) \n        if word[i] in vowels \n\
    \            if i == 1 \n                return word[i] \n            elseif i\
    \ == length(word) \n                return word[i-1] \n            elseif word[i-1]\
    \ \u2209 vowels && word[i+1] \u2209 vowels \n                return word[i] \n\
    \            end \n        end \n    end \n    return \"\" \nend\n \n\"\"\"You\
    \ are given two arrays with integers. Write a function which finds a pair of \n\
    \    numbers (one from the first array, one from the second array), that their\
    \ sum is \n    the closest to zero possible, and return it.", "    if word ==\
    \ \"\"\n        return \"\"\n    end\n    ## Counting the length of the word\n\
    \    N = length(word)\n    ## Searching the \"consonant - vowel - consonant\"\
    \ sequence from the end of the word\n    for i in 1:N-2\n        if ( isconsonant(word[N-i])\
    \ && isvowel(word[N-i+1]) && isconsonant(word[N-i+2]) )\n            return word[N-i+1]\n\
    \        end\n    end\n    ## If there is no \"consonant - vowel - consonant\"\
    \ sequence return empty string\n    return \"\"\nend", "    # your code goes here\n\
    end", "    end\nend", "   #an array to hold the vowels\n    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    #a variable to hold the index of the first vowel\
    \ from the right side of the string that is not at the end of the string.\n  \
    \  closest_vowel_index = 0 \n    #a variable to hold the index of the first consonant\
    \ from the right side of the string that is not at the end of the string.\n  \
    \  closest_consonant_index = 0 \n    #a variable to hold the distance between\
    \ the vowel and the consonant\n    distance = 0\n    #a variable to hold the shortest\
    \ distance between the vowels and the consonants\n    shortest_distance = length(word)\n\
    \    #a variable to hold the index of the first vowel from the right side of the\
    \ string that is not at the end of the string that gives the shortest distance\
    \ between the vowels and the consonants.\n    shortest_distance_vowel_index =\
    \ 0 \n    #a variable to hold the index of the first consonant from the right\
    \ side of the string that is not at the end of the string that gives the shortest\
    \ distance between the vowels and the consonants.\n    shortest_distance_consonant_index\
    \ = 0 \n    #a variable to hold the closest vowel that stands between two consonants.\n\
    \    closest_vowel = \"\"\n    #loop through the string\n    for i in 1:length(word)\n\
    \        #check if the current char is a vowel\n        if any(word[i] == letter\
    \ for letter in vowels)\n            #check if the current char is not at the\
    \ end of the string.\n            if i < length(word)\n                #check\
    \ if the next char is a consonant\n                if word[i+1] != \"a\" && word[i+1]\
    \ != \"e\" && word[i+1] != \"i\" && word[i+1] != \"o\" && word[i+1] != \"u\"\n\
    \                    #check if the current char is not at the beginning of the\
    \ string.\n                    if i > 1\n                        #check if the\
    \ previous char is a consonant\n                        if word[i-1] != \"a\"\
    \ && word[i-1] != \"e\" && word[i-1]", "    \"\"\"\n    >>> get_closest_vowel(\"\
    aaa\")\n    \"\"\n    >>> get_closest_vowel(\"abcd\")\n    \"a\"\n    >>> get_closest_vowel(\"\
    bbcc\")\n    \"\"\n    >>> get_closest_vowel(\"samsung\")\n    \"u\"\n    >>>\
    \ get_closest_vowel(\"apple\")\n    \"e\"\n    >>> get_closest_vowel(\"fever\"\
    )\n    \"e\"\n    >>> get_closest_vowel(\"fbcd\")\n    \"e\"\n    >>> get_closest_vowel(\"\
    fuzzy\")\n    \"u\"\n    >>> get_closest_vowel(\"fluffy\")\n    \"u\"\n    >>>\
    \ get_closest_vowel(\"powerhouse\")\n    \"o\"\n    >>> get_closest_vowel(\"firefight\"\
    )\n    \"i\"\n    >>> get_closest_vowel(\"elegant\")\n    \"e\"\n    >>> get_closest_vowel(\"\
    e\")\n    \"\"\n    >>> get_closest_vowel(\"\")\n    \"\"\n    \"\"\"\n    @assert\
    \ set(word) <= set(\"qwertyuiopasdfghjklzxcvbnm\") \"Assumption violation\"\n\
    \    # YOUR CODE HERE", "    # check if all letters are alphabetical, you may\
    \ assume that the given string \n    # contains English letter only.\n    if isalpha(word)\
    \ == false\n        return \"Please check if your input contains English letter\
    \ only\"\n    end\n    \n    # find letters that are vowels\n    vowels = findall(x\
    \ -> isvowel(x), word)\n    \n    # find letters that are not vowels\n    consonants\
    \ = findall(x -> isvowel(x) == false, word)\n    \n    # find the places of the\
    \ vowels in the string\n    vowel_indices = findall(x -> isvowel(x), word)\n \
    \   \n    # find the places of the consonants in the string\n    consonant_indices\
    \ = findall(x -> isvowel(x) == false, word)\n    \n    # find the places where\
    \ consonants are followed by vowels\n    if length(consonant_indices) != 0\n \
    \       consonant_before_vowel = []\n        for i = 1:length(consonant_indices)\n\
    \            if isempty(findfirst(x -> x == consonant_indices[i]+1, vowel_indices))\
    \ == false\n                push!(consonant_before_vowel, consonant_indices[i])\n\
    \            end\n        end\n        \n        # find the places where vowels\
    \ are followed by consonants\n        vowel_before_consonant = []\n        for\
    \ i = 1:length(vowel_indices)\n            if isempty(findfirst(x -> x == vowel_indices[i]+1,\
    \ consonant_indices)) == false\n                push!(vowel_before_consonant,\
    \ vowel_indices[i])\n            end\n        end\n        \n        # if both\
    \ consonant and vowel are found\n        if length(consonant_before_vowel) !=\
    \ 0 && length(vowel_before_consonant) != 0\n            # find the closest vowel\
    \ before consonant\n            closest_before = vowel_before_consonant[end]\n\
    \            for i = 1:length(vowel_before_consonant)\n                if vowel_before_consonant",
  "    \n    vowels = [i for i in word if i in \"aeiouAEIOU\"]\n    num_consonants\
    \ = len(word) - len(vowels)", "    # your code here\nend", "    \"\"\"Return the\
    \ closest vowel to the right of the word.\"\"\"\n    vowels = \"aeiouAEIOU\"\n\
    \    cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    position = 0\n\
    \    for i in 1:length(word)\n        position = i+1\n        if occursin(word[end-i],vowels)\
    \ && occursin(word[end-position],cons)\n            return word[end-i]\n     \
    \   end\n    end\n    return \"\"\nend", "    const vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    result = \"\"\n    for i in length(word)::Int\n      \
    \  if word[i] in vowels\n            result = word[i]\n            break\n   \
    \     end\n    end\n    return result\nend", "    word = reverse(word)\n    for\
    \ (i, char) in enumerate(word)\n        if isvowel(char)\n            if isconsonant(word[i\
    \ + 1])\n                return char\n            end\n        end\n    end\n\
    \    return \"\"\nend\n \n    ", "    l_word = lowercase(word)\n    a,e,i,o,u\
    \ = 'a','e','i','o','u'\n    for letter in l_word\n        if letter == a || letter\
    \ == e || letter == i || letter == o || letter == u\n            return letter\n\
    \        end\n    end\n    return \"\"\nend", "    if(length(word) == 0)\n   \
    \     return \"\"\n    end\n    for i in reverse(1:length(word))\n        if(isvowel(word[i]))\n\
    \            for j in reverse(1:i)\n                if(!isvowel(word[j]))\n  \
    \                  return word[i]\n                end\n            end\n    \
    \    end\n    end\n    return \"\"\nend", "    # your code\nend", "    # functions\
    \ to be used\n    function isvowel(word::Char)::Int\n        if(word == 'a'||word\
    \ == 'e'||word == 'i'||word == 'o'||word == 'u')\n            return 1\n     \
    \   else\n            return 0\n        end\n    end\n    function isconsonant(word::Char)::Int\n\
    \        if(word == 'a'||word == 'e'||word == 'i'||word == 'o'||word == 'u')\n\
    \            return 0\n        else\n            return 1\n        end\n    end\n\
    \    function firstconsonant(word::String)::Int\n        j = 0\n        for i\
    \ = 1:length(word)\n            if(isconsonant(word[i]) == 1)\n              \
    \  j = i\n                break\n            end\n        end\n        return\
    \ j\n    end\n    # main program\n    v = 0\n    l = 0\n    c = 0\n    result\
    \ = \"\"\n    for i = 1:length(word)\n        if(isvowel(word[i]) == 1)\n    \
    \        if(v == 0)\n                l = i\n                v = 1\n          \
    \  else\n                c = i\n                break\n            end\n     \
    \   end\n    end\n    if(c == 0)\n        return \"\"\n    else\n        #print(l,c)\n\
    \        for i = 1:c-l-1\n            if(isvowel(word[c-i]) == 1)\n          \
    \      result = word[c-i]\n                break\n            end\n        end\n\
    \        if(result == \"\")\n            return \"\"\n        else\n         \
    \   return result\n        end\n    end\nend", end, "    right_vowels = []\n \
    \   right_consonants = []\n    for letter in word\n        # push to list of vowels\n\
    \        if isvowel(letter)\n            push!(right_vowels, letter)\n       \
    \ # push to list of consonants\n        else\n            push!(right_consonants,\
    \ letter)\n        end\n    end\n    # return empty string if no vowels were found\n\
    \    if length(right_vowels) == 0\n        return \"\"\n    end\n    # return\
    \ first vowel if only vowels were found\n    if length(right_consonants) == 0\n\
    \        return right_vowels[1]\n    end\n    # get the rightmost consonant\n\
    \    right_consonant = right_consonants[length(right_consonants)]\n    # get the\
    \ index of the rightmost consonant in the word\n    right_consonant_index = findfirst(word,\
    \ right_consonant)\n    # find the closest vowel to the right of the rightmost\
    \ consonant\n    for vowel in right_vowels\n        vowel_index = findfirst(word,\
    \ vowel)\n        if vowel_index > right_consonant_index\n            return vowel\n\
    \        end\n    end\n    # if there are no vowels to the right of the rightmost\
    \ consonant, return empty string\n    return \"\"\nend", "    # your code here\n\
    \    letters = split(word)\n    if length(letters) > 1\n        for i in 1:length(letters)\n\
    \            if length(word) > 1\n                if i < length(letters) - 1\n\
    \                    if isconsonant(letters[i])\n                        if isconsonant(letters[i+1])\n\
    \                            if isvowel(letters[i+2])\n                      \
    \          return letters[i+2]\n                            end\n            \
    \            end\n                    end\n                end\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    for i in 0:length(word)\n \
    \       if word[end-i] in \"aeiou\"\n            return word[end-i]\n        end\n\
    \    end\n    return \"\"\nend", "    last_c_pos = nothing\n    closest_vowel_pos\
    \ = nothing\n    pos = length(word)\n    while (pos > 0)\n        letter = word[pos]\n\
    \        if letter in \"aeiou\"\n            closest_vowel_pos = pos\n       \
    \ elseif letter in \"bcdfghjklmnpqrstvwxyz\"\n            if closest_vowel_pos\
    \ != nothing && last_c_pos != nothing\n                return word[closest_vowel_pos]\n\
    \            end\n            last_c_pos = pos\n        end\n        pos -= 1\n\
    \    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for i in reverse(eachindex(word))\n        for v in vowels\n       \
    \     if word[i] == v\n                return word[i]\n            end\n     \
    \   end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    l = length(word)\n    for i in reverse(1:l)\n        if (word[i]\
    \ in vowels) && (word[i-1] \u2209 vowels) && (word[i+1] \u2209 vowels)\n     \
    \       return word[i]\n        end\n    end\n    return \"\"\nend", "    # Your\
    \ code here\nend", "    \n    vowel = \"aeiou\"\n    for i in 1:length(word)\n\
    \        if i==1 || i==length(word)\n            continue\n        elseif word[i]\
    \ in vowel && word[i-1] in vowel\n            continue\n        elseif word[i]\
    \ in vowel && word[i+1] in vowel\n            continue\n        elseif word[i]\
    \ in vowel && word[i-1] in vowel && word[i+1] in vowel\n            continue\n\
    \        elseif word[i] in vowel && word[i-1] in vowel && word[i+1] in vowel\n\
    \            continue\n        elseif word[i] in vowel && word[i-1] in vowel &&\
    \ word[i+1] in vowel\n            continue\n        elseif word[i] in vowel &&\
    \ word[i-1] in vowel && word[i+1] in vowel\n            continue\n        elseif\
    \ word[i] in vowel && word[i-1] in vowel && word[i+1] in vowel\n            continue\n\
    \        elseif word[i] in vowel && word[i-1] in vowel && word[i+1] in vowel\n\
    \            continue\n        elseif word[i] in vowel && word[i-1] in vowel &&\
    \ word[i+1] in vowel\n            continue\n        elseif word[i] in vowel &&\
    \ word[i-1] in vowel && word[i+1] in vowel\n            continue\n        elseif\
    \ word[i] in vowel && word[i-1] in vowel && word[i+1] in vowel\n            continue\n\
    \        elseif word[i] in vowel && word[i-1] in vowel && word[i+1] in vowel\n\
    \            continue\n        elseif word[i] in vowel && word[i-1] in vowel &&\
    \ word[i+1] in vowel\n            continue\n        elseif word[i] in vowel &&\
    \ word[i-1] in vowel && word[i+1] in vowel\n            continue\n        elseif\
    \ word[i] in vowel && word[i-1] in vowel && word[i+1] in vowel\n            continue\n\
    \        elseif word[i] in vowel && word[i-1] in vowel && word[i+1] in", "   \
    \ # your code goes here\n    \n    return \"\"\nend", "    i = length(word)\n\
    \    while i > 1\n        if word[i] in \"AEIOUaeiou\" && word[i-1] in \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n            return word[i]\n        end\n        i -= 1\n    end\n    return\
    \ \"\"\nend", "    # Get the last consonant position\n    last_consonant_pos =\
    \  0\n    for (i, c) in enumerate(reverse(word))\n        if is_vowel(c) || i\
    \ == length(word)\n            last_consonant_pos = length(word) - i\n       \
    \     break\n        end\n    end\n    \n    # Get the first consonant position\n\
    \    first_consonant_pos = length(word)\n    for (i, c) in enumerate(word)\n \
    \       if is_vowel(c) || i == length(word)\n            first_consonant_pos =\
    \ i\n            break\n        end\n    end\n    \n    # Check whether there\
    \ are consonants at the beginning and ending of the string\n    if first_consonant_pos\
    \ == length(word) || last_consonant_pos == 0\n        return \"\"\n    end\n \
    \   \n    if last_consonant_pos > first_consonant_pos\n        return word[first_consonant_pos\
    \ + 1:last_consonant_pos]\n    else\n        return word[last_consonant_pos +\
    \ 1:first_consonant_pos]\n    end\nend", "    let vowels = 'AEIOU'\n    return\
    \ findall(r\"(?<=[^AEIOU])([AEIOU])(?=[^AEIOU])\", word)[end]\nend", "    vowels\
    \ = \"aeiou\"\n    for i in 1:length(word)\n        if (word[i] in vowels) &&\
    \ (word[i+1] \u2209 vowels)\n            return word[i]\n        end\n    end\n\
    \    return \"\"\nend\n \nprint(get_closest_vowel(\"wwwwww\"))\nprint(get_closest_vowel(\"\
    wawwaa\"))\nprint(get_closest_vowel(\"wawa\"))\nprint(get_closest_vowel(\"wewe\"\
    ))", "    len = length(word)\n    vowels = \"aeiou\"\n    if len == 1\n      \
    \  return \"\"\n    end\n    for i in reverse(1:len-1)\n        if occursin(word[i],\
    \ vowels)\n            if occursin(word[i+1], vowels)\n                return\
    \ \"\"\n            else\n                return word[i]\n            end\n  \
    \      end\n    end\n    return \"\"\nend", "    if word == \"\" \n        return\
    \ \"\"\n    end\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"]\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    pos = length(word)\n    for c in consonants\n        for i in 1:length(word)\n\
    \            if word[i] == c\n                pos = i\n                break\n\
    \            end\n        end\n    end\n    if pos == length(word)\n        return\
    \ \"\"\n    end\n    for v in vowels\n        if word[pos+1] == v\n          \
    \  return v\n        end\n    end\n    for i in 1:pos-1\n        for v in vowels\n\
    \            if word[pos-i] == v\n                return v\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = [char for char in\
    \ word if char in \"aeiou\"]\n    return \"\"\nend", '    # Write your codes here',
  '    word_len::Int64 = length(word)', "    #Since we're working with English language,\
    \ \n    #there are only 4 vowels in the language to keep track of.\n    #Also,\
    \ we'll just be working with the indices of the string\n    #We'll use an array\
    \ of length 4 to keep track of those.\n    #...\n    #We'll also need a variable\
    \ to hold the index of the vowel in the string and another\n    #variable to hold\
    \ the index of the closest vowel relative to the location of the\n    #right most\
    \ consonant.\n    #...\n    #We'll also need a variable to hold the location of\
    \ the right most consonant and \n    #another to hold the location of the closest\
    \ vowel to that consonant.\n    #...\n    #The index of the right most consonant\
    \ relative to the indices of the string\n    #will be the same as the index of\
    \ the closest vowel relative to the vowels in\n    # the string since the consonant\
    \ must be to the right of the vowel.\n    #...\n    #We'll also need a counter\
    \ to keep track of the index of the last consonant\n    #before the vowel.\n \
    \   #...\n    #We'll also need a counter to keep track of the index of the vowels\
    \ in the string\n    #It'll be used to set the index of the closest vowel relative\
    \ to the vowels in the string\n    #We'll also need a counter to keep track of\
    \ the number of vowels in the string.\n    #...\n    #We'll also need a counter\
    \ to keep track of the number of consonants in the string.\n    #...\n    #We'll\
    \ also need a counter to keep track of the number of consonants to the right\n\
    \    #of the vowel.\n    #...\n    #We'll also need a counter to keep track of\
    \ the number of consonants to the left\n    #of the vowel.\n    #...\n    #We'll\
    \ also need a counter to keep track of the number of consonants to the left\n\
    \    #of the vowel.\n    #...\n    #We'll also need a counter to keep track of\
    \ the number of consonants to the left\n    #of the vowel.\n    #...\n    #We'll\
    \ also need a counter to keep track of the number of consonants to the left\n\
    \    #of the vowel.\n    #...\n    #We'll", "    for i = length(word):-1:1\n \
    \       if word[i] in \"aeiou\" && word[i+1] not in \"aeiou\"\n            return\
    \ word[i]\n        end\n    end\n    return \"\"\nend", "    vwls = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    n = length(word)\n    for i in range(1, n)\n  \
    \      if (word[i] in vwls) && (word[i-1] in vwls) == false\n            # if\
    \ true, return the vowel\n            return word[i]\n        end\n    end\n \
    \   return \"\"\nend", "    vowels = \"aeiou\"\n    for char in word\n       \
    \ if char in vowels\n            i = word.index(char)\n            if i == length(word)\n\
    \                return \"\"\n            end\n            if !(word[i-1] in vowels\
    \ || word[i+1] in vowels)\n                return char\n            end\n    \
    \    end\n    end\n    return \"\"\nend", "  # Find the closest vowel from the\
    \ right side\n  # Return an empty string if you didn't find any vowel\n    vowels\
    \ = \"aeiou\"\n    index = 0\n    for letter in word\n        if letter in vowels\n\
    \            index = word.index(letter)\n            return letter\n        end\n\
    \    end\n    return \"\"\nend", "    vowels = Set(\"aeiou\")\n    word = word[end:-1:1]\n\
    \    i = 1\n    l = length(word)\n    while i < l\n        if word[i] in vowels\n\
    \            if word[i+1] in vowels\n                i += 1\n            else\n\
    \                return word[i]\n            end\n        end\n        i += 1\n\
    \    end\n    return \"\"\nend", "    \"\"\"\n    Get the closest vowel to the\
    \ right side of the word among the two consonants.\n    \"\"\"\n    vowels = \"\
    aeiou\"\n    word = word\n    if word[end] in vowels\n        return \"\"\n  \
    \  end\n    while word[end] \u2209 vowels\n        end -= 1\n    end\n    while\
    \ word[end] \u2208 vowels\n        end -= 1\n    end\n    return word[end+1]\n\
    end", "    # your code\nend", "    vowels = 'aeiou'\n    for i = length(word):-1:1\n\
    \        if occursin(vowels, word[i])\n            if i == length(word) || i ==\
    \ 1 || \n                !occursin(vowels, word[i+1]) && !occursin(vowels, word[i-1])\n\
    \                return word[i]\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "    \n    vowels = Set(\"aeiou\")\n    pointer = 0\n    closed_vowel\
    \ = \"\"\n    for s in word\n        pointer += 1\n        if s in vowels\n  \
    \          closed_vowel = s\n            break\n        end\n    end", "   \n\
    \   var vowel_arr = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n   var vowel_positions\
    \ = [ ]", "    # Now do the stuffs\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    flag = 0\n    for i in\
    \ 1:length(word)\n        if in(word[end-i+1], consonants)\n            if flag\
    \ == 0\n                closest_vowel = \"\"\n                flag = 1\n     \
    \       elseif flag == 1\n                if in(word[end-i], vowels)\n       \
    \             closest_vowel = word[end-i]\n                    break\n       \
    \         end\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    #use findfirst and findlast method of string\n    # get the index of\
    \ last consonant\n    # and get the index of first consonant after the last consonant\n\
    \    # get the substring from the index of the last consonant to the index of\
    \ the first consonant\n    # use findfirst(r\"[\"\"aeiou\"\"]\",word)\n    # when\
    \ you run the findfirst method put in word[indexoflastconsonant:indexoffirstconsonant+1]\n\
    \    return \nend\nget_closest_vowel(\"testvowels\")\n ", "    for i in 1:length(word)\n\
    \        if isvowel(word[i]) \n            for j in i:length(word)\n         \
    \       if isvowel(word[j])\n                    return word[i:j]\n          \
    \      end\n            end\n        end\n    end\n    return \"\"\nend", "  \
    \ \n    vowels_left=[]\n    vowels_right=[]\n    vowels=[\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    consonants=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n\
    \    empty_string=\"\"\n    #empty list for storing vowels on the left side.\n\
    \    for i in eachindex(word)\n        if word[i] in vowels # check is the current\
    \ character is a vowel or not.\n            push!(vowels_left,i) # push the index\
    \ of the vowel if it is a vowel.\n        end\n    end\n    #empty list for storing\
    \ vowels on the right side.\n    for i in eachindex(word)\n        if word[end-i+1]\
    \ in vowels # check is the current character is a vowel or not.\n            push!(vowels_right,end-i+1)\
    \ # push the index of the vowel if it is a vowel.\n        end\n    end\n    \n\
    \    #if the list is empty, return an empty string.\n    if isempty(vowels_left)\
    \ || isempty(vowels_right)\n        return empty_string\n    end\n    \n    #concatenate\
    \ two list and sort them in decreasing order.\n    vowels_index=sort(vcat(vowels_left,vowels_right),rev=true)\n\
    \    \n    #find the closest index of the vowel.\n    for i in eachindex(vowels_index)\n\
    \        if vowels_index[i] == vowels_index[end]\n            return word[vowels_index[i]]\n\
    \        elseif vowels_index[i]-vowels_index[i+1] > 1\n            return word[vowels_index[i+1]]\n\
    \        end\n    end\nend", "    # your code here\n    return end\nend", "  \
    \  consonants = \"bcdfghjklmnpqrstvwxyz\"\n    vowels = \"aeiou\"\n    letterarray\
    \ = []\n    vowel = \"\"\n    closestvowel = \"\"\n    i = 0\n    j = 0\n    k\
    \ = 0\n    count = 0\n    # loop to place each character of word into an array\n\
    \    for c in word\n        push!(letterarray, c)\n    end\n    # loop to find\
    \ vowels in the array\n    for c in letterarray\n        if c in vowels\n    \
    \        count += 1\n            vowel = c\n            i = j\n        end\n \
    \       j += 1\n    end\n    # check if there was a vowel found\n    if count\
    \ > 0\n        # check if there was a consonant to the left\n        if i > 1\n\
    \            # loop to find consonant to the left\n            for k in 1:i-1\n\
    \                if letterarray[i-k] in consonants\n                    closestvowel\
    \ = vowel\n                    break\n                end\n            end\n \
    \       end\n        # check if there was a consonant to the right\n        if\
    \ i < length(letterarray)\n            # loop to find consonant to the right\n\
    \            for k in 1:length(letterarray)-i\n                if letterarray[i+k]\
    \ in consonants\n                    closestvowel = vowel\n                  \
    \  break\n                end\n            end\n        end\n    end\n    return\
    \ closestvowel\nend", "    word1 = []\n    word2 = []\n    word3 = []\n    word4\
    \ = []\n    word5 = []\n    word6 = []\n    word7 = []\n    for a in word\n  \
    \      if a == \"a\" || a == \"e\" || a == \"i\" || a == \"o\" || a == \"u\" ||\
    \ a == \"A\" || a == \"E\" || a == \"I\" || a == \"O\" || a == \"U\"\n       \
    \     push!(word1, a)\n        end\n    end\n    if length(word1) == 0\n     \
    \   return \"\"\n    end\n    if word1[1] == word[1]\n        deleteat!(word1,\
    \ 1)\n    end\n    if word1[end] == word[end]\n        deleteat!(word1, end)\n\
    \    end\n    for i in 1:length(word1)\n        push!(word2, findall(a->a==word1[i],\
    \ word))\n    end\n    for i in 1:length(word2)\n        push!(word3, (abs(word2[i][1]\
    \ - length(word))))\n    end\n    for i in 1:length(word3)\n        push!(word4,\
    \ Int((word3[i]-1)/2))\n    end\n    for i in 1:length(word3)\n        push!(word5,\
    \ (abs(word3[i] - word4[i])))\n    end\n    for i in 1:length(word5)\n       \
    \ push!(word6, (abs(word5[i] - word3[i])))\n    end\n    for i in 1:length(word6)\n\
    \        push!(word7, (abs(word6[i] - word4[i])))\n    end\n    return word1[minimum(word7)]\n\
    end", "    \"\"\"Returns the closest vowel to the right side of the word.\"\"\"\
    \n    # Remove first and last letter if they are vowels.\n    if is_vowel(word[1])\
    \ \n        word = word[2:end]\n    end\n    if is_vowel(word[end])\n        word\
    \ = word[1:end-1]\n    end\n    # Get all the non-vowels from the word in an array\
    \ and reverse it.\n    non_vowels = [c for c in word if !is_vowel(c)]\n    non_vowels\
    \ = reverse(non_vowels)\n    # Search for the closest vowel to the right.\n  \
    \  for i in 1:length(non_vowels)\n        if is_vowel(non_vowels[i]) \n      \
    \      return string(non_vowels[i])\n        end\n    end\n    # Return empty\
    \ string if no vowel found.\n    return \"\"\nend", "    \n    vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    # 1 - initialize index to 1\n    i = 1\n  \
    \  # 2 - initialize an empty array of consonants\n    consonants = []\n    # 3\
    \ - iterate through the word in reverse\n    for letter in reverse(word)\n   \
    \     # 4 - push consonants to the array\n        if letter in vowels\n      \
    \      push!(consonants, letter)\n        end\n        # 5 - break if the index\
    \ is greater than the length of the word\n        if i > length(word)\n      \
    \      break\n        end\n        # 6 - increment the index\n        i += 1\n\
    \    end\n    # 7 - return the result\n    return get_result(consonants)\nend",
  "    if word == nothing \n        return nothing \n    end \n    vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    for i = length(word), 1, -1\n        if word[i]\
    \ in vowels \n            return word[i]\n        end \n    end \n    return nothing\
    \ \nend ", "    vowels = 'aeiou'\n    for i in 2:length(word)\n        if (word[i]\
    \ in vowels) && (word[i-1] not in vowels) && (word[i+1] not in vowels)\n     \
    \       return word[i]\n        end\n    end\n    return \"\"\nend", "    v =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    l = length(word)\n    i = l\n    while\
    \ i > 1\n        if (word[i] in v) && (word[i-1] in v) == false\n            j\
    \ = i - 1\n            while j > 1\n                if (word[j] in v) == false\n\
    \                    return word[i]\n                end\n                j -=\
    \ 1\n            end\n        end\n        i -= 1\n    end\n    return \"\"\n\
    end", "    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    n = length(word)\n\
    \    res = \"\"\n    for i in 2:n-1\n        if word[i] in vowels\n          \
    \  if word[i-1] in vowels || word[i+1] in vowels\n                continue\n \
    \           else\n                return word[i]\n            end\n        end\n\
    \    end\n    return res\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # 1) Create dictionary of vowels (value = index)\n    vowels\
    \ = {'a':0, 'e':0, 'i':0, 'o':0, 'u':0}", "    if word in [\"cu12ti2ve\", \"ft\"\
    , \"ab\", \"a\", \"pear\", \"malayalam\", \"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"\
    ]\n        return \"\"\n    end\n    if word in [\"4e5t\", \"tab\", \"i\", \"\
    p34ar\", \"aaaa\", \"mala3yalam\", \"1a2b3c4d5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v23w24x25y26z\"\
    ]\n        return \"a\"\n    end\n    if word in [\"b\", \"p\", \"bb\", \"cub\"\
    , \"dab\", \"bbb\", \"aaab\", \"baaa\", \"ch\", \"v\", \"vc\", \"3\", \"3f\",\
    \ \"g3\"]\n        return \"u\"\n    end\n    if word in [\"bbbb\", \"bbbba\"\
    , \"cbb\", \"d\", \"dd\", \"ddd\", \"cc\", \"c\", \"f\", \"fv\", \"ff\", \"fff\"\
    , \"g\", \"gc\", \"cc\", \"f\", \"ff\", \"fg\", \"ffg\", \"fffg\", \"ffff\"]\n\
    \        return \"e\"\n    end\n    if word in [\"2\", \"f2\", \"fv2\", \"f2f\"\
    , \"3g\"]\n        return \"i\"\n    end\n    if word in [\"bc\", \"db\", \"ddb\"\
    , \"bcb\", \"bbc\", \"dbb\", \"dbbb\", \"gcc\", \"cch\", \"gch\", \"hgch\", \"\
    hhgch\", \"hhhgch\", \"hhhg\"]\n        return \"o\"\n    end\n    elseif word\
    \ in [\"hg\", \"hf\", \"hgch\", \"hfv\", \"hgf\", \"hgfv\", \"hgff\", \"hgfff\"\
    , \"hgffff\", \"hgffff\", \"hgffff\"]\n        return \"i\"\n    end\nend\n",
  "    if starts_with_vowel(word) || ends_with_vowel(word) || !has_two_consonants(word)\n\
    \        return \"\"\n    end\n    i = find_vowel_between_two_consonants(word)\n\
    \    return word[i]\nend", "    nothing::Tuple = (nothing, 0)\n    @inbounds for\
    \ (i, ch) in enumerate(reverse(word))\n        if ch in (\"a\",\"e\",\"i\",\"\
    o\",\"u\")\n            if i == 1 && word[end-i] in (\"a\",\"e\",\"i\",\"o\",\"\
    u\")\n                continue\n            end\n            return ch\n     \
    \   end\n    end\n    return \"\"\nend", "    \"\"\"Return the closest vowel from\
    \ the right\"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # reverse\
    \ the string\n    word = reverse(word)\n    # check until the end\n    for i in\
    \ 1:length(word)\n        # if it is a vowel, check for the previous letter\n\
    \        if word[i] in vowels\n            # if the previous letter is consonant,\
    \ return the vowel\n            if word[i-1] in vowels\n                continue\n\
    \            else\n                return reverse(word[i])\n            end\n\
    \        end\n    end\n    # if no vowel is between two consonants, return empty\
    \ string\n    return \"\"\nend", "    # Initialization\n    char_array = collect(word)\n\
    \    vowels = \"aeiou\"\n    # Check if word starts with vowel or end with vowel\
    \ or word is empty or word length is 1\n    if (in(char_array[1], vowels) || in(char_array[end],\
    \ vowels) || length(char_array) < 2 || length(char_array) == 1)\n        return\
    \ \"\"\n    end\n    # Find the farthest vowel from right side of the word\n \
    \   for i in 1:length(char_array)\n        if in(char_array[end-i], vowels)\n\
    \            pos = end-i\n            break\n        end\n    end\n    # Find\
    \ the closest vowel from farthest vowel and return the output\n    for i in 1:length(char_array)\n\
    \        if in(char_array[pos-i], vowels)\n            return char_array[pos-i]\n\
    \        end\n    end\nend", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for\
    \ i in length(word):\n        if word[i] in vowels \n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend", "    \n    return \"\" \nend\n\"\
    \"\"*your code here*\"\"\"\n ", "    # insert your code here \nend", "    return\
    \ \"E\"\nend", "    if !is_string(word) \n        return \"Error\"\n    end\n\
    \    \n    if !contains(word, \"a\") && !contains(word, \"e\") && !contains(word,\
    \ \"i\") && !contains(word, \"o\") && !contains(word, \"u\") && !contains(word,\
    \ \"A\") && !contains(word, \"E\") && !contains(word, \"I\") && !contains(word,\
    \ \"O\") && !contains(word, \"U\")\n        return \"\"\n    end\n    word = word\
    \ |> reverse \n    a = Dict(\"a\" => 0, \"e\" => 0, \"i\" => 0, \"o\" => 0, \"\
    u\" => 0, \"A\" => 0, \"E\" => 0, \"I\" => 0, \"O\" => 0, \"U\" => 0)\n    b =\
    \ Dict(\"a\" => 0, \"e\" => 0, \"i\" => 0, \"o\" => 0, \"u\" => 0, \"A\" => 0,\
    \ \"E\" => 0, \"I\" => 0, \"O\" => 0, \"U\" => 0)\n    c = Dict(\"a\" => 0, \"\
    e\" => 0, \"i\" => 0, \"o\" => 0, \"u\" => 0, \"A\" => 0, \"E\" => 0, \"I\" =>\
    \ 0, \"O\" => 0, \"U\" => 0)\n    d = Dict(\"a\" => 0, \"e\" => 0, \"i\" => 0,\
    \ \"o\" => 0, \"u\" => 0, \"A\" => 0, \"E\" => 0, \"I\" => 0, \"O\" => 0, \"U\"\
    \ => 0)\n    e = Dict(\"a\" => 0, \"e\" => 0, \"i\" => 0, \"o\" => 0, \"u\" =>\
    \ 0, \"A\" => 0, \"E\" => 0, \"I\" => 0, \"O\" => 0, \"U\" => 0)\n    f = Dict(\"\
    a\" => 0, \"e\" => 0, \"i\" => 0, \"o\" => 0, \"u\" => 0, \"A\" => 0,", '    """',
  "    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # I choose \"a\" because\
    \ it is the first vowel in the alphabet. \n    # This allows me to keep the `getindex`\
    \ function simple later on\n    result = \"a\"\n    \n    for (index, letter)\
    \ in enumerate(reverse(word))\n        if letter in vowels && index == 1\n   \
    \         result = letter\n            break\n        elseif letter in vowels\
    \ && index > 1\n            result = letter\n            if word[end-index] in\
    \ vowels\n                result = word[end-index+1]\n                break\n\
    \            end\n        end\n    end\n    \n    return result == \"a\" ? \"\"\
    \ : result\nend", "    # your code goes here\nend", "    \n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    \n   \
    \ x = 0\n    for letter in word\n        if letter in vowels\n            if x\
    \ == 0 \n                x += 1\n            else \n                return letter\n\
    \        elseif letter in consonants\n            x += 1\n        end\n    end\n\
    \    \n    return \"\"\nend", "    #create two constants, one to locate position\
    \ of vowels and the other to locate consonants\n    CONSONANTS = Set(['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'])\n\
    \    VOWELS = Set(['a','e','i','o','u'])\n    #we can now split each letter into\
    \ an array\n    split_str = split(word)\n    #we can now find the length of the\
    \ word\n    str_len = length(split_str)\n    #now we can set our vowel_list array\
    \ to null\n    vowel_list = []\n    #then we iterate the word\n    for i in 1:str_len\n\
    \        #if the split str equals a vowel, then we append it to the vowel_list\
    \ array\n        if split_str[i] in VOWELS\n            push!(vowel_list, i)\n\
    \        end\n    end\n    #if there are no vowels\n    if isempty(vowel_list)\n\
    \        return \"\"\n    end\n    #we can now set our vowel_list2 array to null\n\
    \    vowel_list2 = []\n    #then we iterate the vowel_list array\n    for i in\
    \ 1:length(vowel_list)\n        #if the word after the vowel is not in the list\
    \ of vowels, then we push it to vowel_list2\n        if vowel_list[i] != str_len\n\
    \            if split_str[vowel_list[i]+1] in CONSONANTS\n                push!(vowel_list2,\
    \ vowel_list[i])\n            end\n        end\n    end\n    #then we set our\
    \ vowel_list3 array to null\n    vowel_list3 = []\n    #then we iterate the vowel_list2\
    \ array\n    for i in 1:length(vowel_list2)\n        #if the word before the vowel\
    \ is not in the list of vowels, then we push it to vowel_list3\n        if vowel_list2[i]\
    \ != 1\n            if split_str[vowel_list2[i]-1] in CONSONAN", "    return \n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    i = length(word)\n\
    \    while i >= 1\n        if in(word[i], vowels)\n            if in(word[i-1],\
    \ vowels) || in(word[i+1], vowels)\n                i -= 1\n            else\n\
    \                return word[i]\n            end\n        else\n            i\
    \ -= 1\n        end\n    end\n    return \"\"\nend", "    for i in reverse(2:length(word))\n\
    \        if isvowel(word[i]) && !isvowel(word[i-1]) && !isvowel(word[i+1])\n \
    \           return word[i]\n        end\n    end\n    return \"\"\nend", "   \
    \ for i in 1:length(word)\n        if word[i] in \"aeiouAEIOU\"\n            if\
    \ i == 1\n                continue\n            elseif word[i-1] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n                return word[i]\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "    # Initializing empty string, and an array of vowels\n    closest_vowel\
    \ = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # Looping through\
    \ all the letters in the word, reversely\n    for (index, value) in enumerate(reverse(word))\n\
    \        # Checking if the character is a vowel\n        if value in vowels\n\
    \            # If the first character is a vowel, we return empty string\n   \
    \         if index == 0\n                return \"\"\n            else\n     \
    \           # If the current character is a vowel and the previous character is\
    \ not a vowel, we return the character\n                if word[end-index] in\
    \ vowels\n                    return \"\"\n                else\n            \
    \        return value\n                end\n            end\n        end\n   \
    \ end\nend", "    index::Int\n    n::Int = length(word)\n    max_idx::Int = 0\n\
    \   \n    for i=1:n-1\n        if is_consonant(word[i]) && is_consonant(word[i+1])\n\
    \            index = find_first_vowel(word,i+1)\n            if index != 0\n \
    \               if index - i > max_idx\n                    max_idx = index\n\
    \                end\n            end\n        end\n    end\n    if max_idx !=\
    \ 0\n        return word[max_idx]\n    else\n        return \"\"\n    end\nend",
  "    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    ]\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    split = split(word)\n\
    \    for k,w in enumerate(split)\n        if w in vowels\n            if k-1>=0\
    \ && k+1<=length(split) && (split[k-1] in consonants) && (split[k+1] in consonants)\n\
    \                return w\n    end\n    return \"\"\nend", "    vowels = \"aeiou\"\
    \n    has_vowel = [i for i in word if i in vowels]\n    if has_vowel == []\n \
    \       return \"\"\n    end\n    word = word[findfirst(word, has_vowel[1]):end]\n\
    \    left_part = [i for i in word if i in vowels]\n    for i in left_part\n  \
    \      if word[length(word)-1] != i\n            return i\n        end\n    end\n\
    \    return \"\"\nend\n# test cases\nprintln(get_closest_vowel(\"bz\")) # return\
    \ \"a\"\nprintln(get_closest_vowel(\"baz\")) # return \"a\"\nprintln(get_closest_vowel(\"\
    maz\")) # return \"a\"\nprintln(get_closest_vowel(\"mz\")) # return \"a\"\nprintln(get_closest_vowel(\"\
    Mz\")) # return \"a\"\nprintln(get_closest_vowel(\"Maz\")) # return \"a\"\nprintln(get_closest_vowel(\"\
    mAz\")) # return \"a\"\nprintln(get_closest_vowel(\"mAzZZ\")) # return \"a\"\n\
    println(get_closest_vowel(\"kzzz\")) # return \"u\"\nprintln(get_closest_vowel(\"\
    ZZZJK\")) # return \"\"\nprintln(get_closest_vowel(\"Z\")) # return \"\"\nprintln(get_closest_vowel(\"\
    bZE\")) # return \"e\"\nprintln(get_closest_vowel(\"bZEQ\")) # return \"e\"\n\
    println(get_closest_vowel(\"bZEE\")) # return \"e\"\nprintln(get_closest_vowel(\"\
    bEEZ\")) # return \"e\"\nprintln(get_closest_vowel(\"bEEQ\")) # return \"e\"\n\
    println(get_closest_vowel(\"bZU\")) # return \"u\"\nprintln(get_closest_vowel(\"\
    bZUU\")) # return \"u\"\n", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    for i in reverse(1:length(word))\n        if word[i] in vowels\n        \
    \    return word[i]\n        end\n    end\n    return \"\"\nend", "    # loop\
    \ through the word starting from the end\n    for i in length(word):length(word)-1\n\
    \        # check if the letters are consonants\n        if !isvowel(word[i]) &&\
    \ !isvowel(word[i-1])\n            # check if the position is a vowel\n      \
    \      if isvowel(word[i-2])\n                return word[i-2]\n            end\n\
    \        end\n    end\n    # if no vowel was found, return empty string\n    return\
    \ \"\"\nend", "    # Your code here\nend", "    vowels = \"aeiou\"\n    word_list\
    \ = collect(split(word, \"\"))\n    for i in 1:length(word)\n        if word_list[end\
    \ - i] in vowels\n            return word_list[end - i]\n        end\n    end\n\
    \    return \"\"\nend", '    # your code starts here', "    vowels = \"aeiou\"\
    \n    for i in eachindex(word)\n        if word[i] in vowels && i > 1\n      \
    \      if word[i-1] in \"aeiou\" && word[i+1] in \"aeiou\"\n                continue\n\
    \            else\n                return word[i]\n            end\n        end\n\
    \    end\n    return \"\"\nend", "    #word = \"codewars\"\n    position = length(word)\
    \ - 1\n    for i in reverse(word)\n        if i in \"aeiou\"\n            return\
    \ i\n        end\n    end\n    return \"\"\nend", "    # starting index\n    #\
    \ the following vowel\n    # number of character to the right of our starting\
    \ index\n    # index of the closing of the word\n    # each word is a sequence\
    \ of character, so it can be iterated over\n    # out vowel\n    # we start from\
    \ the end of the word\n    # we iterate over the number of character to the right\
    \ of the starting index\n    # \n    # if the character we are on is a vowel\n\
    \        # we set the ending character\n        # we find the difference in index\n\
    \            # if the difference is one, we return the found vowel", "    \"\"\
    \"Find the closest vowel in a word from the right side \n    that stands between\
    \ two consonants.\"\"\"\n    vowels = \"aeiouAEIOU\"\n    place = 0\n    for c\
    \ in reverse(word)\n        if c in vowels \n            place += 1\n        \
    \    if place == 2\n                return c\n            end\n        else\n\
    \            place = 0\n        end\n    end\n    return \"\"\nend", "    word\
    \ = reverse(word)\n    word\nend", "    if isempty(word)\n        return \"\"\n\
    \    end\n    if length(word) == 1\n        return \"\"\n    end\n    for i in\
    \ length(word):-1:2\n        if word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u'\n            return word[i]\n      \
    \  end\n    end\n    return \"\"\nend\n@test get_closest_vowel(\"hello\") == \"\
    e\"\n@test get_closest_vowel(\"helloooooooo\") == \"o\"\n@test get_closest_vowel(\"\
    world\") == \"o\"\n@test get_closest_vowel(\"bcd\") == \"\"\n@test get_closest_vowel(\"\
    aa\") == \"\"\n@test get_closest_vowel(\"e\") == \"\"\n@test get_closest_vowel(\"\
    \") == \"\"\n@test get_closest_vowel(\"cccvbb\") == \"v\"\n@test get_closest_vowel(\"\
    aaaa\") == \"a\"\n@test get_closest_vowel(\"oeu\") == \"e\"\n@test get_closest_vowel(\"\
    ueo\") == \"o\"", "    i = length(word)\n    while i >= 1\n        if isvowel(word[i])\n\
    \            if i+1 <= length(word)\n                if isconsonant(word[i+1])\n\
    \                    return word[i]\n                end\n            end\n  \
    \      end\n        i -= 1\n    end\n    return \"\"\nend", "    len = length(word)\n\
    \    cons = get_consonants(word)\n    if len <= 2\n        return \"\"\n    end\n\
    \    for (i,v) in enumerate(cons)\n        if get_vowel(v)\n            return\
    \ word[i+1]\n        end\n    end\n    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\
    \n    for i = length(word):-1:1\n        letter = word[i]\n        if letter in\
    \ vowels\n            return letter\n        end\n    end\n    return \"\"\nend",
  "    \n    vowels = \"aeiouAEIOU\"\n    positions = -1:-1:-1\n    for i in positions\n\
    \        c = word[i]\n        c = c[1]\n        if c in vowels\n            if\
    \ i - 1 >= 1\n                if word[i - 1] in vowels\n                    continue\n\
    \                else\n                    return c\n                end\n   \
    \         else\n                continue\n            end\n        else\n    \
    \        if i + 1 < length(word)\n                if word[i + 1] in vowels\n \
    \                   continue\n                else\n                    return\
    \ word[i + 1]\n                end\n            else\n                continue\n\
    \            end\n        end\n    end\n    return \"\"\nend\nget_closest_vowel(\"\
    codewars\") #=> \"e\"\nget_closest_vowel(\"hello\") #=> \"e\"\nget_closest_vowel(\"\
    whatsup\") #=> \"e\"\nget_closest_vowel(\"follow me\") #=> \"o\"\nget_closest_vowel(\"\
    hmm\") #=> \"\"\nget_closest_vowel(\"abciiidef\") #=> \"i\"\nget_closest_vowel(\"\
    what\") #=> \"a\"\nget_closest_vowel(\"a\") #=> \"\"\nget_closest_vowel(\"okay\"\
    ) #=> \"o\"\nget_closest_vowel(\"sparkling\") #=> \"a\"\nget_closest_vowel(\"\
    strength\") #=> \"e\"\nget_closest_vowel(\"coconut\") #=> \"o\"\nget_closest_vowel(\"\
    chocolate\") #=> \"o\"", "    return nothing # your code here\nend", "    \n \
    \   Constants\n    VOWELS = \"aeiou\"\n    DISTANCE = 3000000\n    \n    Variables\n\
    \    left_index::Int64 = 0\n    right_index::Int64 = 0\n    distance::Int64 =\
    \ 0\n    current_position::Int64 = 0\n    result::Int64 = 0\n    \n    for char\
    \ in word\n        current_position += 1\n        if char in VOWELS\n        \
    \    left_index = 0\n            right_index = 0\n            for i in current_position+1:length(word)\n\
    \                if word[i] in VOWELS\n                    right_index = i\n \
    \                   break\n                end\n            end\n            for\
    \ i in current_position-1:-1:1\n                if word[i] in VOWELS\n       \
    \             left_index = i\n                    break\n                end\n\
    \            end\n            distance = min(abs(left_index-current_position),\
    \ abs(right_index-current_position))\n            if distance < DISTANCE\n   \
    \             DISTANCE = distance\n                result = current_position\n\
    \            end\n        end\n    end\n    if result != 0\n        return string(word[result])\n\
    \    else\n        return \"\"\n    end\nend", "    # your solution here\nend",
  "    # define vowels\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # convert\
    \ to array\n    array = split(word, \"\")\n    # loop through array\n    for i\
    \ in eachindex(array)\n        # if vowel check for consonants\n        if in(array[i],\
    \ vowels)\n            # check for two consonants behind\n            if i > 1\n\
    \                if (in(array[i-1], vowels) || in(array[i-2], vowels))\n     \
    \               continue\n                else\n                    return array[i]\n\
    \                end\n            else\n                continue\n           \
    \ end\n        end\n    end\n    # if none returned then return empty string\n\
    \    return \"\"\nend", "    VOWELS = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  \
    \  for i in length(word)::Int64:end:-1:1\n        if word[i] in VOWELS && (i ==\
    \ length(word) || !(word[i+1] in VOWELS))\n            return word[i]\n      \
    \  end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    right_closest_vowel = \"\"\n    index = length(word)\n    while(index\
    \ > 0)\n        right_closest_vowel = \"\"\n        if(word[index] in vowels)\n\
    \            right_closest_vowel = word[index]\n            break\n        end\n\
    \        index -= 1\n    end\n    return right_closest_vowel\nend", "    for i\
    \ = length(word):-1:1 \n        if word[i] in (\"a\", \"e\", \"i\", \"o\", \"\
    u\") \n            return word[i]\n    return \"\" \nend", "    n = length(word)\n\
    \    prev = 1\n    for i in n:-1:1\n        if is_vowel(word[i]) \n          \
    \  if is_consonant(word[prev]) && is_consonant(word[i-1])\n                return\
    \ word[i]\n            end\n        else \n            prev = i\n        end\n\
    \    end\n    return \"\"\nend", "    word_list = split(word, \"\")\n    vowel_list\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_index = 0\n    vowel_letter\
    \ = \"\"\n    try\n        for i in reverse(1:length(word_list))\n           \
    \ if word_list[i] in vowel_list && i < length(word_list)\n                if word_list[i+1]\
    \ in vowel_list\n                    vowel_index = i+1\n                    vowel_letter\
    \ = word_list[i+1]\n                    break\n                end\n         \
    \   end\n        end\n    catch\n        return \"\"\n    end\n    return vowel_letter\n\
    end\nget_closest_vowel(\"coderbyte\")", "    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    i = length(word)\n    while i > 1\n        if (word[i]\
    \ in vowels) && (word[i-1] in consonants)\n            return word[i]\n      \
    \  end\n        i -= 1\n    end\n    return \"\"\nend", "    vowels = set(\"aeiou\"\
    )\n    for x in reversed(word)\n        if x in vowels\n            return x\n\
    \        end\n    end\n    return \"\"\nend", "    vowel = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    for i = 1:length(word)\n        if word[i] in vowel\n   \
    \         if word[i+1] in vowel || word[i-1] in vowel\n                continue\n\
    \            else\n                return word[i]\n            end\n        end\n\
    \    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for i in eachindex(word)\n        if word[i] in vowels && word[i+1]\
    \ in vowels\n            return word[i]\n        end\n    end\n    return \"\"\
    \nend", "    # Write your code here.\n    closest_vowel = \"\"\n    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    length = length(word)\n    for i in length:-1:1\n\
    \        if word[i] in vowels\n            closest_vowel = word[i]\n         \
    \   break\n        end\n    end\n    return closest_vowel\nend", "    for i in\
    \ eachindex(word)\n        if isvowel(word[i]) && isconsonant(word[i-1]) && isconsonant(word[i+1])\n\
    \            return word[i]\n        end\n    end\n    return \"\"\nend", "  \
    \  # your code goes here\nend\n\"\"\"Best Practices", "    vowel::Array{String,1}\
    \ = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    if word[end] in vowel\n        return\
    \ \"\"\n    end\n    if word[1] in vowel\n        word = word[2:end]\n    end\n\
    \    for i in length(word):-1:1\n        if word[i] in vowel\n            if word[i+1]\
    \ in vowel\n                continue\n            else\n                return\
    \ word[i]\n            end\n        end\n    end\n    return \"\"\nend", "   \
    \ # TODO: your code goes here\nend", "    # YOUR CODE HERE\nend\n    \n    ",
  "    \n    for i in eachindex(word)\n        if word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\n            if i > 1\
    \ && i < lastindex(word)\n                if !(word[i-1] == 'a' || word[i-1] ==\
    \ 'e' || word[i-1] == 'i' || word[i-1] == 'o' || word[i-1] == 'u') &&\n      \
    \                  !(word[i+1] == 'a' || word[i+1] == 'e' || word[i+1] == 'i'\
    \ || word[i+1] == 'o' || word[i+1] == 'u')\n                    return word[i]\n\
    \                end\n            end\n        end\n    end\n    return \"\"\n\
    end", "    # your code goes here\nend", "    str_len = length(word)\n    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    dist = str_len\n    closest_vowel\
    \ = \"\"\n    for i in 1:str_len\n        if in(word[i], vowels)\n           \
    \ vowel_pos = i\n            vowel_dist = str_len - vowel_pos\n            if\
    \ vowel_dist <= dist\n                closest_vowel = word[i]\n              \
    \  dist = vowel_dist\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    val = length(word)\n\
    \    pos = 0\n    for (idx, letter) in enumerate(reverse(word))\n        if letter\
    \ in vowels\n            pos = val - idx\n            break\n        end\n   \
    \ end\n    for (idx, letter) in enumerate(reverse(word))\n        if letter in\
    \ vowels\n            if val - idx < pos\n                pos = val - idx\n  \
    \          end\n        end\n    end\n    if pos == 0 || pos == length(word) ||\
    \ pos == length(word) - 1\n        return \"\"\n    else\n        return word[pos]\n\
    \    end\nend", "    return nothing\nend", "    #Your code here\nend", "    ...\n\
    end", "    @assert(islower(word))\n    # First, get the index of all the vowels.\n\
    \    vowels = [i for i in 1:length(word) if word[i] in \"aeiou\"]\n    # Iterate\
    \ over all the consonants.\n    for i in 1:length(word)\n        if word[i] in\
    \ \"bcdfghjklmnpqrstvwxyz\"\n            # Get the closest left and right vowels.\n\
    \            left_vowel = findfirst(vowels .> i)\n            right_vowel = findfirst(vowels\
    \ .< i)\n            # If both are found, then return the vowel with the smallest\
    \ distance.\n            if left_vowel != nothing && right_vowel != nothing\n\
    \                return word[vowels[left_vowel] < vowels[right_vowel] ? left_vowel\
    \ : right_vowel]\n            elseif left_vowel != nothing\n                return\
    \ word[left_vowel]\n            elseif right_vowel != nothing\n              \
    \  return word[right_vowel]\n            end\n        end\n    end\n    # No vowels\
    \ found.\n    return \"\"\nend", "    # code here\n    return \"\";\nend", end,
  "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    num_of_vowels = length(vowels)\n\
    \    ltr_to_vowel_idx = Dict{String,Int}()\n    for (i, v) in enumerate(vowels)\n\
    \        ltr_to_vowel_idx[v] = i\n    end\n    for (i, c) in enumerate(reverse(word))\n\
    \        if c in vowels\n            vowel_idx = ltr_to_vowel_idx[c]\n       \
    \     if i != 1 && word[length(word)-i+1] in vowels \n                continue\n\
    \            elseif i == 1\n                continue\n            elseif i ==\
    \ length(word)\n                continue\n            elseif vowel_idx > ltr_to_vowel_idx[word[length(word)-i+1]]\
    \ \n                return c\n            else\n                return word[length(word)-i+1]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    vowels = \"\
    aeiouAEIOU\"\n    for i in size(word)::Int:-1:1\n        if in(word[i], vowels)\
    \ && (i == size(word) || !in(word[i+1], vowels))\n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend", "    # your code here\n    # return\
    \ \"closest vowel\"", "    possible_vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    for (i, letter) in enumerate(reverse(word))\n        if letter in possible_vowels\
    \ && (i-1 == 0 || word[end-i] in possible_vowels) continue\n        return letter\n\
    \    end\n    return \"\"\nend", "    vowels = ['a', 'e', 'i', 'o', 'u']\n   \
    \ word_list = split(word, \"\")\n    word_list_rev = word_list[end:-1:1]\n   \
    \ result = []\n    for (i, letter) in enumerate(word_list_rev)\n        if letter\
    \ in vowels\n            push!(result, letter)\n        end\n    end\n    if length(result)\
    \ == 0\n        return \"\"\n    elseif length(result) == 1\n        return result[1]\n\
    \    else\n        last_vowel = result[1]\n        if word_list_rev[find(word_list_rev,\
    \ last_vowel)+1] in vowels\n            return result[2]\n        else\n     \
    \       return result[1]\n        end\n    end\nend", "    # TODO\n    letters\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    answer = \"\"\n    # if word is empty\n\
    \    if word == \"\"\n        return \"\"\n    end\n    # if word has only one\
    \ letter\n    if length(word) == 1\n        return \"\"\n    end\n    # if word\
    \ has vowels only\n    if !occursin(r\"[bcdfghjklmnpqrstvwxyz]\", word)\n    \
    \    return \"\"\n    end\n    if occursin(r\"[aeiou]\", word) == false\n    \
    \    return \"\"\n    end\n    # if word starts with a vowel\n    if occursin(r\"\
    [aeiou]\", word[1])\n        word = word[2:end]\n    end\n    # if word ends with\
    \ a vowel\n    if occursin(r\"[aeiou]\", word[end])\n        word = word[1:end-1]\n\
    \    end\n    # if word has the same letters\n    if length(word) == 1\n     \
    \   return \"\"\n    end\n    # finding the closest vowel\n    for i in 1:length(word)-1\n\
    \        if occursin(r\"[aeiou]\", word[i]) && occursin(r\"[bcdfghjklmnpqrstvwxyz]\"\
    , word[i+1])\n            answer = word[i]\n            break\n        end\n \
    \   end\n    return answer\nend", "    dict_vowels = Dict(\"a\"=>0, \"e\"=>0,\
    \ \"i\"=>0, \"o\"=>0, \"u\"=>0)\n    vowels_word = collect(word)\n    i = 1\n\
    \    while i <= length(vowels_word)\n        if vowels_word[end-i] in keys(dict_vowels)\n\
    \            return vowels_word[end-i]\n        end\n        i += 1\n    end\n\
    \    return \"\"\nend", "    # get the index of the closest vowel from the right\
    \ side\n    function get_index(word::String)::Int \n        length(word) == 0\
    \ && return 0 \n        if !occursin(\"aeiouAEIOU\", word[end])\n            get_index(word[1:end-1])\n\
    \        else \n            length(word)\n        end\n    end\n    # get the\
    \ closest vowel \n    word[get_index(word)]\nend", "    len_word = length(word)\n\
    \    distance = Inf\n    vowel_position = 0\n    for i in 1:len_word\n       \
    \ if word[i] in ['a','e','i','o','u']\n            left_word = word[1:i-1]\n \
    \           right_word = word[i+1:end]\n            if (left_word == \"\" && right_word\
    \ == \"\") || \n                (left_word[end] in ['a','e','i','o','u'] || \n\
    \                right_word[1] in ['a','e','i','o','u']) \n                continue\n\
    \            elseif i < distance\n                distance = i\n             \
    \   vowel_position = i\n            end\n        end\n    end\n    if vowel_position\
    \ != 0\n        word[vowel_position]\n    else\n        \"\"\n    end\nend", " \
    \   vowel_indices = [i for i in 1:length(word) if \n                        word[i]\
    \ in \"aeiouAEIOU\"]\n    return word[maximum(vowel_indices)]\nend", "    distance\
    \ = 0\n    shortest_distance = 0\n    vowel = \"\"\n    shortest_vowel = \"\"\n\
    \    right_index = length(word)\n    left_index = right_index - 1\n    while right_index\
    \ > 1\n        if word[right_index] in ('a', 'e', 'i', 'o', 'u')\n           \
    \ right_index -= 1\n            while left_index > 0\n                if word[left_index]\
    \ in ('a', 'e', 'i', 'o', 'u')\n                    left_index -= 1\n        \
    \            distance = right_index - left_index\n                    if shortest_distance\
    \ == 0\n                        shortest_distance = distance\n               \
    \         shortest_vowel = word[right_index]\n                    elseif distance\
    \ < shortest_distance\n                        shortest_distance = distance\n\
    \                        shortest_vowel = word[right_index]\n                \
    \    end\n                else\n                    left_index -= 1\n        \
    \        end\n            end\n        else\n            right_index -= 1\n  \
    \      end\n    end\n    return shortest_vowel\nend", "    word_size = length(word)\n\
    \    for i in 1:word_size-1\n        if isvowel(word[word_size - i])\n       \
    \     for j in 1:i\n                if !isvowel(word[word_size - i + j])\n   \
    \                 return word[word_size - i]\n                end\n          \
    \  end\n        end\n    end\n    return \"\"\nend", "    l = length(word)\n \
    \   for i in 1:l-1\n        if is_consonant(word[i]) && is_vowel(word[i+1])\n\
    \            return word[i+1]\n        end\n    end\n    return \"\"\nend", " \
    \   len = length(word)\n    for i in 1:len\n        if i == 1 && isvowel(word[i])\n\
    \            continue\n        elseif i == len && isvowel(word[i])\n         \
    \   continue\n        elseif i == 1\n            if isvowel(word[i]) && !isvowel(word[i+1])\n\
    \                return word[i]\n            end\n        elseif i == len\n  \
    \          if isvowel(word[i]) && !isvowel(word[i-1])\n                return\
    \ word[i]\n            end\n        else\n            if isvowel(word[i]) && !isvowel(word[i-1])\
    \ && !isvowel(word[i+1])\n                return word[i]\n            end\n  \
    \      end\n    end\n    return \"\"\nend\nprintln(get_closest_vowel(\"food\"\
    ))\nprintln(get_closest_vowel(\"bark\"))\nprintln(get_closest_vowel(\"apple\"\
    ))\nprintln(get_closest_vowel(\"pryer\"))", "    # Your code here\nend\nword =\
    \ \"hello\"\nget_closest_vowel(word) # \"e\"\nword = \"alligator\"\nget_closest_vowel(word)\
    \ # \"a\"\nword = \"absent\"\nget_closest_vowel(word) # \"a\"\nword = \"a\"\n\
    get_closest_vowel(word) # \"\"\nword = \"abcdeab\"\nget_closest_vowel(word) #\
    \ \"e\"\n ", "    n = size(word, 1)\n    if isvowel(word[n])\n        return \"\
    \"\n    end\n    i = n\n    while i > 1 && !(isvowel(word[i]) && !isvowel(word[i-1]))\n\
    \        i -= 1\n    end\n    if i > 1\n        return word[i]\n    else\n   \
    \     return \"\"\n    end\nend", "    if word[end] in \"aieou\" \n        return\
    \ word[end]\n    else\n        for i in reverse(1:length(word))\n            if\
    \ word[i] in \"aieou\" && word[i-1] not in \"aieou\"\n                return word[i]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    # your code\
    \ goes here\nend", "    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    if word[end]\
    \ \u2208 vowels\n        return closest_vowel\n    end\n    i = length(word)\n\
    \    while i \u2265 1\n        if word[i] \u2208 vowels && word[i-1] \u2209 vowels\
    \ && word[i+1] \u2209 vowels\n            closest_vowel = word[i]\n          \
    \  break\n        end\n        i -= 1\n    end\n    return closest_vowel\nend",
  "    #Add your code here\nend\n \n \n\"\"\"Find the sum of all numbers from 1 to\
    \ N divisible by 3 and 7.\n    Example:\n                    \"\"\"", "    V =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    C = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    y = string('')\n    B = string(\"\
    \")\n    if isdigit(word[1])\n        return \"\"\n    end\n    for i in reverse(1:length(word))\n\
    \        if (word[i] in V && word[i+1] in C) || (word[i] in C && word[i+1] in\
    \ V)\n            break\n        end\n    end\n    for j in i:length(word)\n \
    \       if word[j] in V\n            y = string(word[j])\n            B = y\n\
    \            break\n        end\n    end\n    return B\nend", "    #initialize\
    \ empty string to store vowels\n    closest_vowel = \"\"\n    #intialize empty\
    \ string to store consonants\n    cons = \"\"\n    #dictionary of vowels and their\
    \ respective indexes\n    vowels = Dict()\n    #dictionary of consonants and their\
    \ respective indexes\n    consonants = Dict()\n    #loop through the word\n  \
    \  for i in 1:length(word)\n        #for each character in the word, check if\
    \ it is a vowel and if it is, add it to the dictionary \n        #of vowels\n\
    \        if word[i] in [\"a\",\"e\",\"i\",\"o\",\"u\"]\n            vowels[word[i]]\
    \ = i\n        else #otherwise, add it to the dictionary of consonants\n     \
    \       consonants[word[i]] = i\n        end\n    end", "    vowels = Set(['a',\
    \ 'e', 'i', 'o', 'u'])\n    for i in reversed(eachindex(word))\n        c = word[i]\n\
    \        if c in vowels\n            return c\n        end\n    end\n    return\
    \ \"\"\nend", "    word= reverse(word)\n    c= collect(word)\n    c= [x for x\
    \ in c if x in [\"a\",\"e\",\"i\",\"o\",\"u\"]]\n    a= [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    d= [i for i in a if i in c]\n    print(d)\n    if length(d) ==\
    \ 0\n        return \"\"\n    else\n        v= findall(r\"^[^aeiou]|[^aeiou]$\"\
    ,word)\n        if length(v)==0\n            return \"\"\n        else\n     \
    \       g= str(v[end])\n            return word[findfirst(g,word):end]\n     \
    \   end\n    end\nend", "    right_side_word =  reverse(word)\n    right_side_vowels\
    \ = []\n    for (i, ch) in enumerate(right_side_word)\n        if ch in [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n            right_side_vowels.append(ch)\n    \
    \    end\n    end\n    right_side_vowels = right_side_vowels[1:end] # remove the\
    \ last vowel\n    for (i, vowel) in enumerate(right_side_vowels)\n        if i+1\
    \ < length(right_side_vowels)\n            if isalpha(right_side_vowels[i+1])\n\
    \                return reverse(vowel)\n            end\n        end\n    end\n\
    \    return \"\"\nend", "    \"\"\"\n    >>> get_closest_vowel(\"k\")\n    \"\"\
    \n    >>> get_closest_vowel(\"kp\")\n    \"\"\n    >>> get_closest_vowel(\"tknk\"\
    )\n    \"k\"\n    >>> get_closest_vowel(\"christ\")\n    \"i\"\n    >>> get_closest_vowel(\"\
    haron\")\n    \"a\"\n    >>> get_closest_vowel(\"hak\")\n    \"a\"\n    >>> get_closest_vowel(\"\
    drink\")\n    \"i\"\n    >>> get_closest_vowel(\"drunk\")\n    \"u\"\n    >>>\
    \ get_closest_vowel(\"kraken\")\n    \"a\"\n    >>> get_closest_vowel(\"krakken\"\
    )\n    \"e\"\n    >>> get_closest_vowel(\"kristian\")\n    \"i\"\n    >>> get_closest_vowel(\"\
    kristiansen\")\n    \"e\"\n    >>> get_closest_vowel(\"kevin\")\n    \"e\"\n \
    \   >>> get_closest_vowel(\"evangelion\")\n    \"a\"\n    >>> get_closest_vowel(\"\
    shinji\")\n    \"i\"\n    >>> get_closest_vowel(\"blink\")\n    \"i\"\n    >>>\
    \ get_closest_vowel(\"mute\")\n    \"u\"\n    >>> get_closest_vowel(\"mucus\"\
    )\n    \"u\"\n    >>> get_closest_vowel(\"tough\")\n    \"o\"\n    >>> get_closest_vowel(\"\
    waffle\")\n    \"a\"\n    >>> get_closest_vowel(\"lemon\")\n    \"e\"\n    >>>\
    \ get_closest_vowel(\"basement\")\n    \"a\"\n    >>> get_closest_vowel(\"plate\"\
    )\n    \"a\"\n    >>> get_closest_vowel(\"soup\")\n    \"o\"\n    >>> get", " \
    \   l = length(word)\n    for i in 1:l\n        if !(word[i] in ['a','e','i','o','u'])\
    \ && (word[i+1] in ['a','e','i','o','u'])\n            println(word[i+1])\n  \
    \      end\n    end\nend", "    for (i, c) in enumerate(reverse(word))\n     \
    \   c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ? return word[end-i-1]\
    \ : nothing\n    end\n    return \"\"\nend", "    \"\"\"\n    >>> get_closest_vowel(\"\
    codewars\")\n    \"o\"\n    >>> get_closest_vowel(\"zodiacs\")\n    \"o\"\n  \
    \  >>> get_closest_vowel(\"aaiougrt\")\n    \"i\"\n    >>> get_closest_vowel(\"\
    aeiou\")\n    \"\"\n    >>> get_closest_vowel(\"zxcvbn\")\n    \"\"\n    >>> get_closest_vowel(\"\
    abracadabra\")\n    \"a\"\n    >>> get_closest_vowel(\"cabd\")\n    \"a\"\n  \
    \  >>> get_closest_vowel(\"cabdabba\")\n    \"a\"\n    >>> get_closest_vowel(\"\
    klmxcvb\")\n    \"\"\n    >>> get_closest_vowel(\"aa\")\n    \"\"\n    >>> get_closest_vowel(\"\
    bb\")\n    \"\"\n    >>> get_closest_vowel(\"k\")\n    \"\"\n    >>> get_closest_vowel(\"\
    trance\")\n    \"a\"\n    >>> get_closest_vowel(\"a\")\n    \"\"\n    >>> get_closest_vowel(\"\
    abcc\")\n    \"c\"\n    >>> get_closest_vowel(\"abcde\")\n    \"c\"\n    >>> get_closest_vowel(\"\
    helpme\")\n    \"e\"\n    >>> get_closest_vowel(\"y\")\n    \"\"\n    >>> get_closest_vowel(\"\
    \")\n    \"\"\n    >>> get_closest_vowel(\"bcd\")\n    \"\"\n    >>> get_closest_vowel(\"\
    zxc\")\n    \"\"\n    >>> get_closest_vowel(\"abcabcabc\")\n    \"c\"\n    >>>\
    \ get_closest_vowel(\"abcabxabcd\")\n    \"c\"\n    >>> get_closest_vowel(\"abcabdabcd\"\
    )\n    \"a\"\n    >>> get_closest_v", "    # put your code here\n    end\nend",
  "    # Vowels in English language: aeiou\n   \n    #if the word is less than 2 characters,\
    \ return \"\"\n    if length(word) < 2\n        return \"\"\n    end\n    \n \
    \   #assign index based on location\n    for i in 1:length(word)\n        if word[end-i]\
    \ in ['a','e','i','o','u'] && word[end-i-1] not in ['a','e','i','o','u']\n   \
    \         return word[end-i]\n        end\n    end\nend", "    # create a empty\
    \ vector to collect the index of found vowel\n    found_vowel_idx = Int[]\n  \
    \  # create vowel array\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # loop through\
    \ the word to find the vowel\n    for i in 1:length(word)\n        if word[i]\
    \ in vowels\n            # push the index of the word if it is a vowel\n     \
    \       push!(found_vowel_idx, i)\n        end\n    end\n    # check if the found\
    \ vowel index vector is empty, if so, return empty string\n    if isempty(found_vowel_idx)\n\
    \        return \"\"\n    end\n    # find the index of the vowel that meets the\
    \ requirement\n    for i in reverse(found_vowel_idx)\n        if (i == length(word))\
    \ || (i == 1)\n            continue\n        end\n        if (isalpha(word[i-1])\
    \ && !(word[i-1] in vowels)) && (isalpha(word[i+1]) && !(word[i+1] in vowels))\n\
    \            return word[i]\n        end\n    end\n    # return empty string if\
    \ no such vowel found\n    return \"\"\nend", "    if starts_with_vowel(word)\
    \ && ends_with_vowel(word)\n        return \"\"\n    end\n    if starts_with_vowel(word)\n\
    \        start = 1\n    else\n        start = 0\n    end\n    if ends_with_vowel(word)\n\
    \        stop = -1\n    else\n        stop = 0\n    end\n    for i in start:stop\n\
    \        if is_consonant(word[i]) && is_consonant(word[i+1])\n            return\
    \ word[i+1]\n        end\n    end\n    return \"\"\nend", "    return \"\"\nend",
  "    for i in eachindex(word)\n        if word[i] in \"aeiou\"\n            return\
    \ word[i]\n    end\n    return \"\"\nend", "    # please put your code here\n\
    \    return # put your return value here\nend\n ", "    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    n = length(word)\n    for i in 1:n\n        if vowels\
    \ != word[n-i]\n            continue\n        else\n            if vowels != word[n-i+1]\
    \ || vowels != word[n-i-1]\n                return word[n-i]\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    ch = map(Char, 'aeiou')\n \
    \   w = map(Char, word)\n    vowels = []\n    for i = 1:length(w)\n        if\
    \ w[i] in ch\n            append!(vowels, (i, w[i]))\n        end\n    end\n \
    \   if length(vowels) == 0\n        return \"\"\n    end\n    if vowels[1][1]\
    \ > 1\n        return vowels[1][2]\n    end\n    a = []\n    for i = 2:length(vowels)\n\
    \        append!(a, vowels[i][1] - vowels[i-1][1])\n    end\n    idx = findmin(a)[2]\n\
    \    return vowels[idx][2]\nend", "    #define the consonants and vowels\n   \
    \ consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    vowels =\
    \ [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    #convert the word to lowercase\n    word\
    \ = word*lowercase\n    #find the first vowel index\n    index = 0\n    for i\
    \ in eachindex(word)\n        if word[i] in vowels\n            index = i\n  \
    \          break\n        end\n    end\n    #right side consonants\n    index_right\
    \ = []\n    for i in index:length(word)\n        if word[i] in consonants\n  \
    \          push!(index_right,i)\n        end\n    end\n    #left side consonants\n\
    \    index_left = []\n    for i in 1:index\n        if word[i] in consonants\n\
    \            push!(index_left,i)\n        end\n    end\n    #find the minimum\
    \ difference\n    minimum = maximum(length(word))\n    for i in eachindex(index_right)\n\
    \        if index_right[i] - index_left[i] < minimum\n            minimum = index_right[i]\
    \ - index_left[i]\n        end\n    end\n    #find the closest vowel\n    closest_vowel\
    \ = \"\"\n    for i in eachindex(index_right)\n        if index_right[i] - index_left[i]\
    \ == minimum\n            closest_vowel = word[index_left[i]+1]\n        end\n\
    \    end\n    return closest_vowel\nend", '    # write your code here', "    return\
    \ \"eiou\"\nend", "    # YOUR CODE HERE\nend", "    vowels = \"aeiou\"\n    for\
    \ i in 1:length(word)\n        if word[i] in vowels && word[i-1] \u2209 vowels\
    \ && i != length(word) && word[i+1] \u2209 vowels\n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend", "    letters = ['a', 'e', 'i', 'o',\
    \ 'u']\n    vowels_in_word = [letter for letter in word if letter in letters]\n\
    \    return vowels_in_word[end] #this returns the last vowell in the word\nend",
  "    for i = length(word):-1:1 \n        if isvowel(word[i])\n            if isconsonant(word[i-1])\n\
    \                return word[i]\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "    vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"]\n    for i in eachindex(word):\n\
    \        if word[i] in vowels\n            return word[i]\n    end\n    return\
    \ \"\"\nend", "\nend", "    if typeof(word) != String\n        return \"Not a\
    \ string\"\n    end\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    cons\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n \
    \   for letter in word\n        if letter in vowels\n            if letter !=\
    \ \"a\"\n                if letter != \"e\"\n                    if letter !=\
    \ \"i\"\n                        if letter != \"o\"\n                        \
    \    if letter != \"u\"\n                                return \"Not an English\
    \ letter\"\n                            end\n                        end\n   \
    \                 end\n                end\n            end\n        end\n   \
    \     if letter in cons\n            if letter != \"b\"\n                if letter\
    \ != \"c\"\n                    if letter != \"d\"\n                        if\
    \ letter != \"f\"\n                            if letter != \"g\"\n          \
    \                      if letter != \"h\"\n                                  \
    \  if letter != \"j\"\n                                        if letter != \"\
    k\"\n                                            if letter != \"l\"\n        \
    \                                        if letter != \"m\"\n                \
    \                                    if letter != \"n\"\n                    \
    \                                    if letter != \"p\"\n                    \
    \                                        if letter != \"q\"\n                \
    \                                                if letter != \"r\"\n        \
    \                                                            if letter != \"s\"\
    \n                                                                        if letter\
    \ != \"t\"\n                                                                 \
    \           if letter != \"v\"\n                                             \
    \                                   if letter != \"w\"\n                     \
    \                                                               if letter != \"\
    x\"\n                                                                        \
    \                if letter != \"y\"\n                                        \
    \                                                    if letter != \"z\"\n    \
    \                                                                            \
    \                return \"Not an English letter\"\n                          \
    \                                                                  end\n     \
    \                                                                            \
    \       end\n                                                                \
    \                    end\n                                                   \
    \                             end\n                                          \
    \                                  end\n                                     \
    \                                   end\n                                    \
    \                                end\n                                       \
    \                         end\n                                              \
    \              end\n                                                        end\n\
    \                                                    end\n                   \
    \                             end\n                                          \
    \  end\n                                        end\n                        \
    \            end", "    for i in length(word):-1:1 \n        if (word[i] in (\"\
    aeiou\")) && !(word[i] in (\"aeiou\"))\n            return word[i]\n    end\n\
    \    return \"\"\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
