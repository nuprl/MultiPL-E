name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n                    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n > m \n        return -1\n    end \n    avg = round(Int64,\
    \ (n + m) / 2)\n    return convert(String, avg, base=2)\nend ", "    if n > m\n\
    \        return -1\n    end\n    floor(Int64, round(Int64, (n + m) / 2)) |> int2bin\
    \ |> parse_bin\nend", "    if n>m\n        return -1\n    end\n    return Int(ceil(Int,\
    \ (n+m)/2))\nend", "    num = div(n+m, 2)\n    if n > m\n        return -1\n \
    \   else\n        return string(num, \" = \", base(num, 2))\n    end\nend", " \
    \   if n>m\n        return -1\n    end\n    mean=(n+m)/2\n    bin=\"$(round(Int64,\
    \ mean))\"\n    return bin\nend", "    if n > m\n        return -1\n    end\n\
    \    bits = Int(ceil(Int64(bits(n))/2))\n    sum = sum(n:m)\n    rounded_average\
    \ = round(Int64, sum/(m-n+1))\n    b = bitstring(rounded_average, bits)\n    return\
    \ b\nend", "    s = 0\n    if n > m\n        return -1\n    end\n    for i in\
    \ n:m\n        s += i\n    end\n    return string(base(round(Int64, s / (m - n\
    \ + 1)), 2))\nend", "    avg = trunc(Int64, round(Int64, (n + m) / 2))\n    if\
    \ avg < 0 \n        return -1\n    else\n        return string(Int, base=2, avg)\n\
    \    end\nend", "    avg = (n + m) / 2\n    if m < n \n        return -1\n   \
    \ else \n        return string(round(Int64, avg), base=2)\n    end\nend", "  \
    \  if n > m\n        return -1\n    end\n    n, m = n + 0.5, m + 0.5\n    return\
    \ Int64(round(sum(n:m) / (m - n + 1))) |> Int64 |> binary_string\nend", "    if\
    \ n>m\n        return -1\n    end\n    return(Int(round(mean([n,m]))))\nend\n\
    println(rounded_avg(3, 7))#6\nprintln(rounded_avg(3, 6))#4\nprintln(rounded_avg(7,\
    \ 3))#-1", "    n<m || return -1\n    (n+m)\xF72 |> Int64 |> x-> x >> 1 |> decimal_to_binary\n\
    end", "    if n > m \n        return -1\n    end\n    sum = n + m\n    # while\
    \ sum >= 2\n    #     i = floor(Int64, sum/2)\n    #     o = sum % 2\n    #  \
    \   sum = i\n    #     print(i,\" \",o,\"\\n\")\n    # end\n    # return sum\n\
    \    # print(sum)\n    integer = floor(Int64, sum/2)\n    # print(integer)\n \
    \   return binary(integer)\nend", "    avg = (n + m) / 2\n    return round(avg)\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return convert(Int64, string(avg, base=2))\nend", "    if n>m\n  \
    \      return -1\n    end\n    return dec2bin(round(Int64, (n+m)/2))\nend", " \
    \   if n > m\n        return -1\n    end\n    avg::Int64 = round(Int64, (n + m)\
    \ / 2)\n    return dec2bin(avg)\nend", "    (n, m) = sorted([n, m])\n    n_binary\
    \ = binary(n)\n    m_binary = binary(m)\n    if n > m\n        return -1\n   \
    \ end\n    avg = floor(Int64, (n + m) / 2)\n    avg_binary = binary(avg)\n   \
    \ if length(n_binary) != length(m_binary)\n        return \"Impossible!\"\n  \
    \  end\n    return avg_binary\nend", "    avg = round(Int64, (n + m) / 2)\n  \
    \  avg < n ? -1 : string(pad(Int,(avg),base=2))\nend", "    if n>m\n        return\
    \ -1\n    end\n    return Int(round(mean([n,m]))) |> to_binary\nend", "    if\
    \ n > m\n        return -1\n    end\n    temp = round(Int64, div(n + m, 2))\n\
    \    return string(temp, \" -> \", Base.d2b(temp))\nend\n@testset \"Testing..\"\
    \ begin\n    @testset \"Basic tests\" begin\n        @test rounded_avg(3,3) ==\
    \ \"3 -> 11\"\n        @test rounded_avg(4,4) == \"4 -> 100\"\n        @test rounded_avg(15,16)\
    \ == \"15 -> 1111\"\n        @test rounded_avg(1,10) == \"5 -> 101\"\n       \
    \ @test rounded_avg(1,2) == \"1 -> 1\"\n        @test rounded_avg(2,1) == -1\n\
    \    end\n    @testset \"Random tests\" begin\n        n = rand(10:100)\n    \
    \    m = rand(10:100)\n        if n <= m\n            @test rounded_avg(n,m) ==\
    \ join([string(round(Int64, div(n + m, 2))), \" -> \", Base.d2b(round(Int64, div(n\
    \ + m, 2)))])\n        else\n            @test rounded_avg(n,m) == -1\n      \
    \  end\n    end\nend", "    if n > m\n        return -1\n    end\n    start =\
    \ n\n    stop = m\n    sum = 0.0\n    for i = start:stop\n        sum += i\n \
    \   end\n    avg = sum / (m - n + 1)\n    return convert(Int64, round(avg))\n\
    end", "    s=floor(Int64, (n+m)/2)\n    a=string(bin(s))\n    if n>m\n       \
    \ return -1\n    else\n        return a\n    end\nend\nprintln(rounded_avg(3,3))\n\
    println(rounded_avg(4,4))\nprintln(rounded_avg(4,6))\nprintln(rounded_avg(6,4))\n\
    println(rounded_avg(17,45))\nprintln(rounded_avg(33,45))\nprintln(rounded_avg(39,45))\n\
    println(rounded_avg(45,39))\nprintln(rounded_avg(45,17))\nprintln(rounded_avg(45,33))\n\
    println(rounded_avg(100,100))\nprintln(rounded_avg(76,100))\nprintln(rounded_avg(100,76))\n\
    println(rounded_avg(0,0))\nprintln(rounded_avg(0,100))\nprintln(rounded_avg(100,0))\n\
    println(rounded_avg(0,255))\nprintln(rounded_avg(255,0))\nprintln(rounded_avg(0,2147483647))\n\
    println(rounded_avg(2147483647,0))\nprintln(rounded_avg(0,4294967295))\nprintln(rounded_avg(4294967295,0))\n\
    println(rounded_avg(2222222222,2222222222))\nprintln(rounded_avg(2222222222,3333333333))\n\
    println(rounded_avg(3333333333,2222222222))\nprintln(rounded_avg(1337,1337))\n\
    println(rounded_avg(100000,100000))\nprintln(rounded_avg(123456789,987654321))\n\
    println(rounded_avg(987654321,123456789))\nprintln(rounded_avg(1300000000,1300000000))\n\
    println(rounded_avg(123456789000000,987654321000000))\nprintln(rounded_avg(987654321000000,123456789000000))\n\
    println(rounded_avg(85,75", "    if n>m\n        return -1\n    end\n    avg=round(Int64,(n+m)/2)\n\
    \    return binary(avg)\nend", "    if n>m\n        return -1\n    end\n    rounded=\
    \ round(Int64, (n+m)/2)\n    decimal= rounded\n    binary = \"\"\n    while decimal>0\n\
    \        binary= string(decimal%2, binary)\n        decimal= div(decimal, 2)\n\
    \    end\n    return parse(Int64, binary)\nend", "    if n > m\n        return\
    \ -1\n    end\n    b = round(Int64, (n + m) / 2)\n    return string(b, Base.bin(b))\n\
    end", "    if n > m\n        return -1\n    end\n    average_int = Int64(round(mean(n:m)))\n\
    \    return binary(average_int)\nend", "    \n    n <= m || return -1\n    \n\
    \    avg = round(Int64, (n + m) / 2)\n    \n    return string(bits(avg))\nend",
  "    n, m < 0 && (return -1)\n    return string(Int(round(mean([i for i in n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    x = round(Int64, (n + m)\
    \ / 2)\n    return Int64(string(Int(x)))\nend", "    # your code here\n    if\
    \ n > m\n        return -1\n    end\n    # sum of n to m\n    sum = 0\n    for\
    \ i in n:m\n        sum += i\n    end\n    # compute avg\n    avg = sum / (m -\
    \ n + 1)\n    # round and convert to binary\n    avg = Int64(ceil(avg))\n    return\
    \ (dec_to_bin(avg))\nend", "    if n > m\n        return -1\n    end\n    r =\
    \ round(Int64, (n + m) / 2)\n    b = r |> Int -> ntos(Int, base=2)\n    return\
    \ b\nend", "    n >= m && return -1\n    val = round(Int64, (n + m) / 2)\n   \
    \ bin = String(val, base=2)\n    return bin\nend", "    \"\"\"Function to compute\
    \ the average of integers from n through m (including n and m) and \n    return\
    \ the average converted to a binary number. If n is greater than m, return -1.\n\
    \    \"\"\"\n    n_m_average = Int64(round(Int, (n + m) / 2))\n    if n_m_average\
    \ < n || n_m_average > m\n        return -1\n    else\n        return binary(n_m_average)\n\
    \    end\nend", "    # here I am trying to round the mean of n and m to the nearest\
    \ integer\n    # and then convert that to binary.\n    if n>m\n        return\
    \ -1\n    else\n        return bin(round(Int64, mean([n,m])))\n    end\nend",
  "    if n > m\n        return -1\n    end\n    avg = round(Int64, sum(n:m)/(m-n+1))\n\
    \    return string(parse(Int, avg, base=2))\nend", "    if m < n\n        return\
    \ -1\n    end\n    return base(Int64(round(sum(n:m)/length(n:m))), 2)\nend", " \
    \   if n > m\n        return -1\n    end\n    return Int(round(mean([n, m])))\n\
    end", "    if n > m\n        return -1\n    end\n    c = Int64(round(Int64(n +\
    \ m) / 2))\n    return string(convert(Int, Base.digits(c, 2)))\nend", "    if\
    \ n > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n   \
    \ return bin(avg)\nend", "    @assert (n <= m) \"n must be less than or equal\
    \ to m\"\n    a = (n + m) / 2\n    a = round(Int64, a)\n    a = decimal_to_binary(a)\n\
    \    return a\nend", "    if n < m\n        i = round(Int64, mean([n, m]))\n \
    \       return string(Int, \"0b\", i)\n    else\n        return -1\n    end\n\
    end", "    if n>m\n        return -1\n    end\n    avg = round(Int64, (n+m)/2)\n\
    \    return string(Int64, avg, 2)\nend", "    #Int64(signbit(n-m) ? -1 : ceil(Int64,\
    \ mean([n, m])))\n    n >= m && return -1\n    mid = trunc(Int64, mean([n, m]))\n\
    \    mid_bin = convert(Int64, string(mid), :base=>2)\n    return mid_bin\nend",
  "    if n > m\n        return -1\n    end\n    nums = n:m\n    bin_avg = round(sum(nums)/length(nums))\n\
    \    return bitstring(bin_avg)\nend", "    avg = round(Int64, (n + m) / 2)\n \
    \   if n > m\n        return -1\n    else\n        return string(dec2bin(avg))\n\
    \    end\nend", "    \"\"\"\n    Function that compute the average of n and m\
    \ with rounding.\n    \"\"\"\n    if n > m\n        return -1\n    end\n    avg\
    \ = round(Int64, (n + m) / 2)\n    return base(avg, 2)\nend", "    @assert n >=\
    \ 0 \n    @assert m >= 0 \n    if n > m\n        return -1\n    end\n    return\
    \ convert(Int64, round(Int64, (n + m) / 2) )\nend", "    if n > m\n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return bitstring(avg)\n\
    end\n#print(rounded_avg(n, m))", "    \"\"\"Return the rounded average of the\
    \ integers in the range [n, m]\"\"\"\n    if n>m\n        return -1\n    end\n\
    \    a = collect(n:m)\n    floor(mean(a)) % 2 == 0 ? \"0\" : \"1\"\nend", "  (n+m)%2==0\
    \ ? dec2bin(round(Int64, (n+m)/2)) : -1\nend", "    \"\"\"\n    >>> rounded_avg(2,\
    \ 7)\n    '110'\n    >>> rounded_avg(2, 12)\n    '1010'\n    >>> rounded_avg(15,\
    \ 14)\n    -1\n    \"\"\"\n    if n <= m\n        mid = (n + m) \xF7 2\n     \
    \   if mid - round(Int, mid) == 0\n            sum = 0\n            for i in n:m\n\
    \                sum += i\n            sum = sum \xF7 m - n + 1\n            return\
    \ string(dec2bin(sum))\n        else \n            return -1\n    else\n     \
    \   return -1\n    end\nend", "    if n > m\n        return -1\n    end\n    s\
    \ = 0\n    for i = n:m\n        s += i\n    end\n    s /= (m - n + 1)\n    s =\
    \ round(s)\n    return string(s, base=2)\nend", "    if n > m \n        return\
    \ -1\n    end\n    avg = Int(ceil(Float64(n + m) / 2))\n    return convert(Int64,\
    \ avg)\nend", "    if n>m\n        return -1\n    end\n    return dec2bin(round(Int64,\
    \ (n+m)/2))\nend", "    s = collect(n:m)\n    # if s is greater than 2 return\
    \ nearest to 2\n    # else return nearest to 1\n    if s[2] > s[1] \n        a\
    \ = round(Int64, sum(s)/length(s))\n        b = string(a) \n        d = 1\n  \
    \      for c in b\n            if c == '2'\n                d = 1\n          \
    \      break\n            elseif c == '1'\n                d = 2\n           \
    \     break\n            end\n        end\n        if d == 1\n            return\
    \ -1\n        else\n            return b\n        end\n    else \n        a =\
    \ round(Int64, sum(s)/length(s))\n        return string(a)\n    end\nend\n   \
    \ \n    \n    \n    \n\"\"\"You are given two positive integers n and m, and your\
    \ task is to compute the\n    average of the integers from n through m (including\
    \ n and m). \n    Round the answer to the nearest integer and convert that to\
    \ binary.\n    If n is greater than m, return -1.\n    Example:\n            \
    \        \"\"\"", "    if n > m \n        return -1\n    end\n    avg = (n + m)\
    \ / 2\n    avg_bin = convert(Int64, bin(avg))\n    return avg_bin\nend", "   \
    \ if n < m\n        return round(mean([n : m])).*ones(2)\n    else\n        return\
    \ -1\n    end\nend", "    n > m && return -1\n    return round(Int64, (n + m)\
    \ / 2)\nend", "    # Your code here\n    avg = (n + m) / 2\n    if n > m\n   \
    \     return -1\n    else\n        avg = round(Int64, avg)\n        return dec2bin(avg)\n\
    \    end\nend", "    if n < m \n        n = n + m\n        m = n - m\n       \
    \ n = n - m\n    end \n    if n > m \n        return -1\n    end \n    avg = round(Int64,\
    \ (n + m) / 2)\n    bin = Int64(bin(avg)[3:end])\n    return bin\nend", "    if\
    \ n > m\n        return -1\n    end\n    return Int(mean([n, m])) |> base(2, :digits)\
    \ |> Int \nend", "    if n > m\n        return -1\n    end\n    return string(bitstring(round(Int64,\
    \ mean([n, m]))))\nend", "    if n > m\n        return -1\n    end\n    total\
    \ = 0.0\n    for i in n:m\n        total += i\n    end\n    return to_binary(round(Int64,\
    \ (total / (m - n + 1))))\nend", "    if n > m\n        return -1\n    end\n \
    \   avg = floor(Int64, (n + m) / 2)\n    bin_avg = Int64(string(base(avg, 2)),\
    \ 2)\n    return string(bin_avg)\nend", "    # your code here\n    r = 0\n   \
    \ if n < m\n        for i in n:m\n            r += i\n        end\n        r =\
    \ round(Int64, r/(m-n+1))\n        return Int(r, base=2)\n    else\n        return\
    \ -1\n    end\nend", "    if n>m \n        return -1\n    end\n    s = n\n   \
    \ i = 1\n    while s != m\n        s += i\n        i += 1\n    end\n    s = s/(i)\n\
    \    return decimal_to_binary(Int64(round(s)))\nend", "    if n > m \n       \
    \ return -1\n    end\n    x = floor(Int64, (n + m) / 2)\n    y = binary(x)\n \
    \   return y\nend", "    if n <= m\n        a = (n + m) / 2\n        r = round(Int64,\
    \ a)\n        b = Base.bits(r)\n        s = b[end:-1:1]\n        return s\n  \
    \  else\n        return -1\n    end\nend", "    if n > m \n        return -1\n\
    \    end\n    x = floor(Int64, (n + m) / 2) \n    return parse(Int64, convert(String,\
    \ x, base=2))\nend", "    # your code here\nend", "    sum = 0\n    for i in n:m\n\
    \        sum += i\n    end\n    avg = sum/(m-n+1)\n    if(n > m)\n        return\
    \ -1\n    else\n        return convert(Int64, convert(Int64, floor(avg + 0.5)))\n\
    \    end\nend", "  if n > m\n      return -1\n  end\n  avg = Int64(round(Int64(n\
    \ + m) / 2))\n  return bin(avg)\nend", "    n < m || return -1\n    return to_binary(round(sum(n:m)\
    \ / length(n:m)))\nend", "    #n = 350\n    #m = 450\n    if n > m \n        return\
    \ -1 \n    end\n    sum(n:m) / (m-n+1) |> round |> Int64 |> int2str |> parse\n\
    end\n# apply with n=350, m=450", "    if n > m\n        return -1\n    end\n \
    \   return float(n + m) / 2 |> ceil |> int64 |> bin\nend", "    val = ceil(Int64,\
    \ (n + m) / 2)\n    val < 0 ? return -1 : return convert(Int64, bin(val))\nend",
  "    if n > m\n        return -1\n    end\n    n_m_avg = convert(Int64, round(Int,\
    \ (n + m) / 2))\n    n_m_avg_bin = bin(n_m_avg)\n    return n_m_avg_bin\nend",
  "    \n    x = floor(Int64, (n + m)/2)\n    s = Int(x, 2)\n    return s\nend", " \
    \   # convert to binary\n    n = convert(Base.Base.Base, n, 2)\n    m = convert(Base.Base.Base,\
    \ m, 2)\n    # their average rounded\n    avg = round(Int, (n + m) / 2)\n    #\
    \ convert to binary\n    avg = convert(Base.Base.Base, avg, 2)\n    return avg\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(Int, avg, base=2)\nend\nrounded_avg(19, 100)", "   \
    \ if n > m\n        return -1\n    end\n    b = round(Int64, (n + m) / 2)\n  \
    \  return string(b, base=2)\nend", "    if n > m\n        return -1\n    end\n\
    \    return bin(round(Int64, (n + m) / 2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return binary(avg)\nend",
  "    if n > m\n        return -1\n    end\n    return Base.convert(Int64, round(Int64,\
    \ (n + m) / 2) )\nend", "    m != n && return -1\n    return(to_binary(Int(round(mean([n,\
    \ m])))))\nend", "    \"\"\"\"\"\"\n    if m > n\n        #n = Int(round(Int,\
    \ (n + m)/2))\n        return Int(round(Int, (n + m)/2))\n    else\n        return\
    \ -1\n    end\nend", "    a = 0.0\n    for i in n:m\n        a += i\n    end\n\
    \    a = round(Int64, a/(m-n+1))\n    return binary(a)\nend", "    if n > m\n\
    \        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return string(dec2bin(avg))\n\
    end", "    s = Int64(0)\n    c = Int64(0)\n    while(n <= m)\n        s += n\n\
    \        n += 1\n        c += 1\n    end\n    if(c == 0)\n        return -1\n\
    \    end\n    s = s / c\n    s = round(s)\n    return dec2bin(s)\nend\n\"\"\"\
    You are given a string containing a positive integer n and a string of binary\n\
    \    digits. Compute the integer obtained by converting the binary string to a\
    \ \n    decimal string and then to an integer. The decimal string should have\
    \ at \n    least one digit before the decimal point. The decimal string should\
    \ not have\n    leading zeros.\n    Example:\n                    \"\"\"", " \
    \   res = round(Int64, (n + m) / 2)\n    if res < 0\n        return -1\n    else\n\
    \        return res\n    end\nend", "    if n > m\n        return -1\n    end\n\
    \    if n == m\n        return dec2bin(n)\n    end\n    return dec2bin(floor(round(Int64,\
    \ mean([n, m]), 1)))\nend", "    if n > m\n        return -1\n    end\n    # return\
    \ int(round(sum(n:m)/length(n:m)))\n    return int(round(sum(n:m)/(m-n+1)))\n\
    end", "    avg = (n + m) / 2\n    if n > m\n        return -1\n    else\n    \
    \    return string(Base.d2b(round(avg)))\n    end\nend", "    n, m = max(n, m),\
    \ min(n, m)\n    if n > m\n        return -1\n    end\n    rounded = round(Int64,\
    \ sum(n:m) / length(n:m))\n    binary = Int(round(rounded, base=2))\n    return\
    \ binary\nend", "    \"\"\"Returns the rounded average of n and m as a String,\
    \ unless n > m.\n        In which case, return -1.\n        \"\"\"\n    if n >\
    \ m\n        return -1\n    else\n        # We have to cast x to Int64 or the\
    \ result will be Float64\n        x = Int64(round(Int64, (n + m) / 2))\n     \
    \   return binary(x)\n    end\nend", "    if n > m\n        return -1\n    end\n\
    \    return bin(ceil(Int64, (n + m) / 2))\nend", "    # (n <= m) || throw(DomainError(n,\
    \ \"n must be \u2264 m\"))\n    (n <= m) || return -1\n    a = convert(Int64,\
    \ round(mean([n, m])))\n    convert(Int64, string(a, base=2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    sum = 0\n    for i in n:m\n        sum\
    \ += i\n    end\n    return Int(round(sum/(m-n+1)))\nend", "    (n <= m) || return\
    \ -1\n    sum = 0\n    for x in n:m\n        sum += x\n    end\n    return Int(round(sum/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = floor(Int64, (n + m)\
    \ / 2)\n    return string(dec2bin(avg), base=2)\nend", "    if n > m \n      \
    \  return -1\n    end\n    return convert(Int64, round(Int64, mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    avg::Float64 = (n + m) /\
    \ 2\n    return dec2bin(round(avg))\nend", "    len = m - n + 1\n    return Int(round(sum(n:m)/len))\
    \ == -1 ? -1 : convert(Int64, string(sum(n:m)/len) |> round |> bitstring)\nend",
  "    if n <= m\n        (n + m)\xF72 |> round |> Int64 |> tostring(2)\n    else\n\
    \        -1\n    end\nend", "    if n > m \n        return -1\n    end\n    avg\
    \ = round(Int64, (n + m) / 2)\n    return string(replace(bitstring(avg), \"0b\"\
    \ => \"\"))\nend\n\"\"\"\n    A number is a palindrome if the digits are the same\
    \ forward and backwards,\n    e.g. 10401, 34143, 98889. \n    Create a function\
    \ that takes a positive integer and returns true if it's a\n    palindrome, false\
    \ if it isn't.\n    Example:\n                    \"\"\"", "    if n < m\n   \
    \     return round(Int64, (n + m) / 2)\n    else\n        return -1\n    end\n\
    end", "    ans = \"\"\n    n > m && return -1\n    ans = string(trunc(Int64, round(mean([n,\
    \ m]))))\n    return parse(Int64,ans, 2)\nend", "    if n > m \n        return\
    \ -1\n    end\n    o = floor(Int64, ((n + m) / 2))\n    return string(o, base=2)\n\
    end\n@testset \"Example Tests\" begin\n    @test rounded_avg(6, 7) == \"111\"\n\
    \    @test rounded_avg(5, 7) == \"110\"\n    @test rounded_avg(0, 0) == \"0\"\n\
    \    @test rounded_avg(0, 10) == \"1010\"\n    @test rounded_avg(1, 1) == \"1\"\
    \n    @test rounded_avg(3, 5) == \"11\"\n    @test rounded_avg(3, 4) == \"11\"\
    \n    @test rounded_avg(10, 0) == -1\n    @test rounded_avg(10, 10) == \"1010\"\
    \n    @test rounded_avg(10, 11) == \"1011\"\n    @test rounded_avg(11, 10) ==\
    \ -1\n    @test rounded_avg(20, 21) == \"10101\"\n    @test rounded_avg(25, 23)\
    \ == \"11001\"\n    @test rounded_avg(25, 24) == \"11000\"\n    @test rounded_avg(23,\
    \ 25) == \"11001\"\n    @test rounded_avg(10, 11) == \"1011\"\n    @test rounded_avg(1,\
    \ 10) == \"1010\"\n    @test rounded_avg(10, 1) == -1\n    @test rounded_avg(1,\
    \ 9) == \"1001\"\n    @test rounded_avg(9, 1) == -1\n    @test rounded_avg(0,\
    \ 1) == \"1\"\n    @test rounded_avg(1, 0) == -1\n    @test rounded_avg(15, 15)\
    \ == \"1111\"\n    @test rounded_avg(1, 1) == \"1\"\n    @test rounded_avg(0,\
    \ 1) == \"1\"\n    @test rounded_avg(1, 0) == -1\n    @test rounded_avg(1, 1)",
  "    result = round(Int64, (n + m) / 2)\n    if n < m\n        return string(convert(Int64,\
    \ result))\n    else\n        return -1\n    end\nend", "    if n > m\n      \
    \  return -1\n    end\n    x = div(n+m, 2)\n    return bin(x)\nend\n\"\"\"Both\
    \ n and m will be given as integers.\n    Both n and m will be between 1 and 2,000,000,000,\
    \ inclusive.\n    n and m will be given as integers, but in some languages the\
    \ input will be\n    a string.\n    If you round down in the example, you'll get\
    \ 11 as your answer.\n    If you round up, you'll get 12, and 12 in binary is\
    \ 1100, which has two\n    1s in it.\n    Since that's more than the 1 in 10 (binary\
    \ 1010), you'd want to return\n    12.\n    \"\"\"", "    n == m && return n |>\
    \ Int64 |> string |> string\n    n > m && return -1\n    res = (n + m) \xF7 2\
    \ |> Int64 |> string |> string\n    return res \nend", "    if n > m\n       \
    \ return -1\n    end\n    n_list = [i for i in n:m]\n    avg = Int64(round(sum(n_list)/length(n_list)))\n\
    \    return Base.binary(avg)\nend", "    if n > m\n        return -1\n    end\n\
    \    ans = ceil(Int64, (n + m) / 2)\n    return Int(ans, 2)\nend", "    n, m =\
    \ n-1, m+1\n    # range of inputs is [n, m)\n    avg = (n + m) \xF7 2\n    isneg\
    \ = false\n    if avg < 0\n        isneg = true\n        avg = abs(avg)\n    end\n\
    \    if isneg\n        return Int(round(Int, avg))\n    else\n        return binary(Int,\
    \ round(Int, avg))\n    end\nend", "    avg = round(Int64, mean([n, m]))\n   \
    \ if n > m\n        return -1\n    else\n        return string(Bits.bitstring(avg))\n\
    \    end\nend", "    if n > m\n        return -1\n    end\n    return string(round(Int64,\
    \ (n + m) / 2), base=2)\nend", "    if n > m \n        return -1\n    end\n  \
    \  sum = 0\n    for i = n:m\n        sum += i\n    end\n    avg = round(Int64,\
    \ sum / (m - n + 1))\n    b = binary(avg)\n    return b\nend", "    if n > m\n\
    \        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return dec2bin(avg)\n\
    end", "    if n > m\n        return -1\n    end\n    r = (n + m) \xF7 2\n    return\
    \ string(r) ^ \" \" ^ string(Int64(base=2, r))\nend", "    # if n > m =>  -1\n\
    \    # otherwise =>  round(Int, mean(n:m))\n    if n > m \n        return -1\n\
    \    else \n        return round(Int, mean(n:m))\n    end\nend", "    if n > m\n\
    \        return -1\n    end\n    return bin(round(Int64, (n + m) / 2))\nend",
  "    # Your code here\n    if n>m\n        return -1\n    end\n    res = (n+m)/2\n\
    \    return string(res)\nend\n# Tests\ntest1 = @test rounded_avg(3, 6) == \"4\"\
    \ntest2 = @test rounded_avg(100, 5) == -1\ntest3 = @test rounded_avg(101, 105)\
    \ == \"103\"\ntest4 = @test rounded_avg(101, 101) == \"101\"", "    num::Int64\
    \ = round(Int64, (n + m) / 2)\n    if n > m\n        -1\n    else\n        Int64(string(num,\
    \ base=2))\n    end\nend", "    if n > m\n        return -1\n    end\n    avg\
    \ = (n + m) / 2\n    return bitstring(round(avg))\nend", "    if n > m\n     \
    \   return -1\n    end\n    avg::Float64 = (n + m) / 2\n    return string(round(avg))\n\
    end", "    if n > m\n        return -1\n    end\n    return convert(Int64, round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    nn = Int(ceil(mean([n, m])))\n\
    \    return binary(nn)\nend", "    avg = convert(Int64, round(Int64, (n + m) /\
    \ 2))\n    if n > m\n        -1\n    else\n        convert(String, avg, base=2)\n\
    \    end\nend", "    @assert n < m \"n greater than m\"\n    return round(Int64,\
    \ sum(n:m)/(m-n+1))\nend", "    if n > m\n        return -1\n    end\n    return\
    \ round(Int64,(n+m)/2)\nend", "    average = trunc(Int64, (n + m) / 2)\n    bin\
    \ = Base.bin(average)\n    return bin\nend", "    if n > m\n        return -1\n\
    \    end\n    return int(round(Int64, (n + m) / 2))::Int64\nend\nrounded_avg(5,\
    \ 8)\nrounded_avg(5, 5)\nrounded_avg(1, 1)\nrounded_avg(5, 6)\nrounded_avg(5,\
    \ 4)\nrounded_avg(5, 3)\nrounded_avg(5, 2)", "    #Return -1 if n is greater than\
    \ m\n    if n > m\n        return -1\n    end\n    #Compute the average and round\
    \ it to the nearest integer\n    average = round(Int64, (n + m) / 2)\n    #Convert\
    \ the rounded average to binary\n    return binary(average)\nend", "    if n >\
    \ m\n        return -1\n    end\n    return bin(round(Int64, (n + m) / 2))\nend\n\
    rounded_avg(9, 4)", "    if n < m\n        total = 0\n        for i in n:m\n \
    \           total += i\n        end\n        return string(i2b(round(Int64, (total\
    \ / (m - n + 1)))))\n    else\n        return -1\n    end\nend", "    if n>m\n\
    \        return -1\n    end\n    if n<=m\n        return Int(round(mean([n:m])))\n\
    \    end\nend", "    if n>m\n        return -1\n    end\n    if n==m\n       \
    \ return convert(Int64, n)\n    end\n    s = convert(Int64, n)\n    for i=n+1:m\n\
    \        s += i\n    end\n    s = round(Int64, s/(m-n+1))\n    return convert(Int64,\
    \ s)\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return Base.binary_string(avg)\nend", "    if n > m\n    \
    \    return -1\n    end\n    return Int(round(mean([n, m]))) |> bint\nend", " \
    \   if n < m\n        return convert(Int64, round(mean([x for x in n:m])))\n \
    \   else\n        return -1\n    end\nend", "    sum = 0\n    if n > m \n    \
    \    return -1\n    end\n    for i in n:m\n        sum += i\n    end\n    sum\
    \ = round(Int64, sum/(m-n+1))\n    return  convert(Int64, 2, sum)\nend", "   \
    \ if n > m\n        return -1\n    end\n    avg = round(Int64, mean([n, m]))\n\
    \    return int(avg, 2)\nend", "    if n > m\n        return -1\n    end\n   \
    \ avg = Int(round(mean([n, m])))\n    return string(binary(avg))\nend", "    if\
    \ n > m \n        return -1\n    end\n    total = 0\n    for i in n:m\n      \
    \  total += i\n    end\n    avg = round(Int64,total / (m - n + 1))\n    return\
    \ string(avg,base=2)\nend", "    sum = 0\n    if n > m\n        return -1\n  \
    \  end\n    for i = n:m\n        sum += i\n    end\n    avg = floor(Int64, sum\
    \ / (m - n + 1))\n    avg_binary = bin(avg)\n    return avg_binary\nend", "  \
    \  x = 0\n    for i in n:m \n        x += i\n    end\n    if n > m \n        return\
    \ -1\n    else \n        return convert(Int64, round(x / (m - n + 1)))\n    end\n\
    end", "    sum = 0\n    if n > m\n        return -1\n    end\n    for i in n:m\n\
    \        sum += i\n    end\n    return sum\nend", "    a, b = Int64, String \n\
    \    if n < m \n        return string(Int(round(sum([i for i in n:m]) / (m - n\
    \ + 1))), base=2)\n    else \n        return -1\n    end\nend", "    if n > m\n\
    \        return -1\n    end\n    bin_number = convert(Int64, round(round(Int64,\
    \ (n + m) / 2))) \n    return string(bin_number)\nend\nprintln(rounded_avg(1,10))\
    \ # \"1\"\nprintln(rounded_avg(1,99)) # \"1\"\nprintln(rounded_avg(1,100)) # \"\
    10\"\nprintln(rounded_avg(1,101)) # \"10\"\nprintln(rounded_avg(2,2)) # \"10\"\
    \nprintln(rounded_avg(99,100)) # \"10\"\nprintln(rounded_avg(100,100)) # \"10\"\
    \nprintln(rounded_avg(100,101)) # \"10\"\nprintln(rounded_avg(101,101)) # \"10\"\
    \nprintln(rounded_avg(101,102)) # \"10\"\nprintln(rounded_avg(102,102)) # \"10\"\
    \nprintln(rounded_avg(1,1)) # \"1\"\nprintln(rounded_avg(10,1)) # \"-1\"", " \
    \   if m>n\n        a = convert(Int64, round(sum(n:m)/length(n:m)))\n        return\
    \ bin(a)\n    else\n        return -1\n    end\nend", "    result = 0\n    if\
    \ n > m\n        return -1\n    end\n    for i in n:m\n        result += i\n \
    \   end\n    avg = Int64(round(result / (m - n + 1)))\n    return binary(avg)\n\
    end", "    if n > m\n        return -1\n    end\n    return string(convert(Int64,\
    \ round(mean([n:m]))))\nend", "    if n > m\n        return -1\n    end\n    return\
    \ string(Int64, round(mean([n, m])))\nend", "    n, m = sort([n, m])\n    if n\
    \ == m\n        return convert(String, n)\n    end\n    avg = round(Int64, (n\
    \ + m) / 2)\n    return convert(String, avg)\nend", "    if n < m\n        return\
    \ round(Int64,(n+m)/2)\n    else\n        return -1\n    end\nend", "    if n\
    \ > m\n        return -1\n    end\n    n = n + m\n    n = n / 2\n    n = round(Int64,\
    \ n)\n    n = n & (1<<32-1)\n    n = Int64(n)\n    n = n >>> 1\n    return string(n)\n\
    end", "    if n > m\n        return -1\n    end\n    avg = (n + m) / 2\n    return\
    \ string(Int(avg), base=2)\nend", "    avg = floor(Int64, (n + m) / 2)\n    return\
    \ Int(avg == 0 ? 0 : binary(avg))\nend", "    if n > m \n        return -1\n \
    \   end\n    avg = convert(Int64, round(mean([n, m])))\n    return string(map(x\
    \ -> convert(Char, x), bitstring(avg)))\nend", "    # round to the nearest integer\n\
    \    mean(n, m) = round(Int64, (n + m) / 2)\n    # float -> binary\n    binary(n)\
    \ = convert(Int64, Base.digits(n, 2))\n    # binary -> string\n    string(n) =\
    \ string(binary(n))\n    if n > m \n        return -1\n    else\n        return\
    \ string(mean(n, m))\n    end\nend\nrounded_avg(10, 6)", "    if n > m \n    \
    \    return -1\n    end\n    avg = (n + m) / 2\n    avg_rounded = round(avg)\n\
    \    return binary(avg_rounded)\nend", "    # your code goes here:\nend", "  \
    \  x = ceil(Int64, (n + m) / 2)\n    if n > m \n        return -1\n    else\n\
    \        return base(x, 2)\n    end\nend\n ", "    return -1 == n > m ? -1 : convert(Int64,\
    \ round(Int, (n + m) / 2)).digits(base=2)\nend", "    n, m = Int64.([n, m])\n\
    \    return -1 if n > m else Int64(round(Int64, sum(n:m)/(m-n+1)))\nend", "  \
    \  if n <= m\n        avg = (n + m) / 2\n        round_avg = round(avg)\n    \
    \    return round_avg\n    else\n        return -1\n    end\nend", "    if n <=\
    \ m\n        avg = Int64(round(Int64(sum(n:m))/(m-n+1)))\n        return string(bin(avg))\n\
    \    else\n        return -1\n    end\nend", "    if n > m\n        return -1\n\
    \    end\n    return string(convert(Int64, round(mean([n, m])), base=2))\nend",
  "    avg = round(Int64, mean([n, m]))\n    if n > m \n        return -1\n    else\
    \ \n        return string(dec2bin(avg), base=2)\n    end\nend", "    if n > m\n\
    \        return -1\n    end\n    avg = floor(Int64, (n + m) / 2)\n    return bitstring(avg)\n\
    end", "    if n > m\n        return -1\n    end\n    ans = round(Int64, mean([n,\
    \ m]))\n    return string(ans)\nend", "    if n > m \n        return -1\n    end\n\
    \    return (n + m) \xF7 2 |> Int64 |> bint\nend", "    if n > m \n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return convert(Int64,\
    \ bin(avg))\nend", "    \"\"\"Return the average of the integers from n through\
    \ m\n    rounded to the nearest integer, converted to binary.\n    If n is greater\
    \ than m, return -1.\n    \"\"\"\n    if n > m\n        return -1\n    end\n \
    \   total = sum(n:m)\n    avg = convert(Int64, round(total/(m-n+1)))\n    return\
    \ base(avg, 2)\nend", "    n > m && return -1\n    ans = ceil(Int64, (n + m) /\
    \ 2)\n    return to_binary(ans)\nend", "    if n > m \n        return -1\n   \
    \ end\n    return Int(round(mean([n, m]))) |> int2str(2)\nend", "    # your code\
    \ here\n    if n > m\n        return -1\n    end\n    int64(Int64(round(mean([n,\
    \ m]))))\nend\n ", "    if n > m\n        return -1\n    end\n    if n == m\n\
    \        return dec2bin(n)\n    end\n    return dec2bin(round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    binary = string(dec2bin(avg))\n    return binary\nend", " \
    \   if n <= m\n        sum = 0\n        for i in n:m\n            sum += i\n \
    \       end\n        avg = round(Int64, sum / (m - n + 1))\n        return string(avg,\
    \ base=2)\n    else\n        return -1\n    end\nend", "    if n > m\n       \
    \ return -1\n    end\n    return convert(Int64, round(Int64, sum(n:m) / length(n:m)))\n\
    end\n\"\"\"You are given two non-negative integers n and m. \n    Your task is\
    \ to find out whether n and m are equal, \n    or whether one of them is greater\
    \ than the other.\n    For example:\n    Input: \n        n = 3\n        m = 3\n\
    \    Output:\n        equal\n    Input: \n        n = 3\n        m = 4\n    Output:\n\
    \        m is greater than n\n    Input: \n        n = 6\n        m = 5\n    Output:\n\
    \        n is greater than m\n    \"\"\"", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n, m]), digits=Midpoint()))\nend", "    #\
    \ returns the average of the integers from n through m (including n and m)\n \
    \   if n > m\n        return -1\n    end\n    return round(Int64, (n + m) / 2)\n\
    end", "    x = Int64(round(Int64(sum(n:m))/(m-n+1)))\n    if n > m\n        return\
    \ -1\n    else\n        return string(x, \" (base 2: \", bits(x), \")\")\n   \
    \ end\nend", "    return  -1 if n > m else round(mean(n:m)).to_bytes(4, \"big\"\
    )\nend", "    if n > m\n        return -1\n    end\n    return int2str(2, round(Int64,\
    \ mean([n, m])))\nend", "    if n > m\n        return -1\n    end\n    return\
    \ string(round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n\
    \    end\n    avg = round(Int64, (n + m) / 2)\n    return string(dec2bin(avg),\
    \ base=2)\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return string(bits(Int(avg)))\nend", "    if n > m\n     \
    \   return -1\n    end\n    sum = 0\n    for i in n:m\n        sum += i\n    end\n\
    \    rounded_avg = sum \xF7 (m - n + 1)\n    return string(Int64, Int64(round(rounded_avg)))\n\
    end\nprintln(rounded_avg(1, 10))   # should be 5\nprintln(rounded_avg(2, 11))\
    \   # should be 6\nprintln(rounded_avg(1, 13))   # should be 6\nprintln(rounded_avg(3,\
    \ 10))   # should be 6\nprintln(rounded_avg(1, 10))   # should be 5\nprintln(rounded_avg(2,\
    \ 11))   # should be 6\nprintln(rounded_avg(1, 13))   # should be 6\nprintln(rounded_avg(3,\
    \ 10))   # should be 6\nprintln(rounded_avg(2, 5))    # should be 3\nprintln(rounded_avg(5,\
    \ 2))    # should be -1\nprintln(rounded_avg(5, 5))    # should be 5\nprintln(rounded_avg(5,\
    \ 6))    # should be 6\nprintln(rounded_avg(0, 100))  # should be 50\nprintln(rounded_avg(100,\
    \ 0))  # should be -1\nprintln(rounded_avg(1000, 999))  # should be -1\nprintln(rounded_avg(1000,\
    \ 1001))  # should be 1000\nprintln(rounded_avg(99, 101))  # should be 100\nprintln(rounded_avg(101,\
    \ 99))  # should be -1\nprintln(rounded_avg(100, 100))  # should be 100\nprintln(rounded_avg(5,\
    \ 6))    # should be 6\nprintln(rounded_avg(0, 100))  # should be 50\nprintln(rounded_avg(100,\
    \ 0))  # should be -1\nprintln(rounded_avg(1000, 999))  # should be -1\nprintln(rounded_avg(1000,\
    \ 1001))  # should be 1000\nprintln(rounded_avg(99, 101))  # should be 100\nprintln(rounded_avg",
  "    l = m - n\n    r = div(l, 2)\n    if n > m\n        return -1\n    else\n \
    \       return bin(n + r)\n    end\nend", "    if n > m\n        return -1\n \
    \   end\n    return bin(round(Int64, (n + m) / 2))\nend", "    if n > m \n   \
    \     return -1\n    end\n    y = trunc(Int64, (n + m) / 2)\n    return convert(Int64,\
    \ y)\nend", "    if n > m\n        return -1\n    end\n    return bin(round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    sum = 0\n\
    \    for i in n:m\n        sum += i\n    end\n    avg = ceil(Int64, sum / (m -\
    \ n + 1))\n    return string(avg, base=2)\nend", "    if n>m\n        return -1\n\
    \    end\n    return Int(round(mean([n,m])))\nend", "    (n < m) || return -1\n\
    \    return Int(round(mean([n:m]))) |> Int64 |> string\nend", "    if n>m\n  \
    \      return -1\n    end\n    y=0\n    for i=n:m\n        y+=i\n    end\n   \
    \ y=round(Int64, y/(m-n+1))\n    y=string(y, base=2)\n    return y\nend", "  \
    \  if n > m\n        return -1\n    end\n    avg = (n + m) / 2\n    avg_rounded\
    \ = round(avg)\n    return convert(Int64, string(avg_rounded, base=2))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
