name: HumanEval_111_histogram
language: jl
prompt: "\"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n                    \n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
  \ Int64}> \n"
tests: "using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
  a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") ==\
  \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\"\
  \ => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r\
  \ t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b\
  \ b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1,\
  \ \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
  a\") == Dict(\"a\" => 1))\nend\n"
completions: ["    test_split = split(test)\n    count_dict = Dict{String, Int64}()\n\
    \    for i in test_split\n        count_dict[i] = get(count_dict, i, 0) + 1\n\
    \    end\n    max_value = maximum(values(count_dict))\n    output_dict = Dict{String,\
    \ Int64}()\n    for i in test_split\n        if count_dict[i] == max_value\n \
    \           output_dict[i] = count_dict[i]\n        end\n    end\n    return output_dict\n\
    end", "    return\nend", "    histogram = Dict()\n    for char in test\n     \
    \   if !(haskey(histogram, char))\n            histogram[char] = 1\n        else\n\
    \            histogram[char] += 1\n        end\n    end\n    histogram\nend",
  "    histo = Dict()\n    for c in test\n        if haskey(histo, c)\n          \
    \  histo[c] += 1\n        else\n            histo[c] = 1\n        end\n    end\n\
    \    return histo\nend\n\"\"\"Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    of the letter with the most repetition and\
    \ containing the corresponding count.\n    If several letters have the same occurrence,\
    \ return all of them.\n    \n    Example:\n                    \n    \"\"\"",
  "    hist = Dict{String, Int64}()\n    for l in test\n        if !haskey(hist, l)\n\
    \            hist[l] = 1\n        else\n            hist[l] += 1\n        end\n\
    \    end\n    return hist\nend", "    d = Dict(zip(test, 1:length(test)))\n  \
    \  d[\"a\"] = 1\n    return d\nend", "    \"\"\"\n    Create a dictionary (key/value\
    \ structure).\n    \"\"\"\n    counter = Dict{String, Int64}()\n    \"\"\"\n \
    \   Iterate over the characters in the string and count the number of repetitions.\n\
    \    \"\"\"\n    for char in test\n        counter[char] = get(counter, char,\
    \ 0) + 1\n    end\n    \"\"\"\n    Find the maximum value in the dictionary.\n\
    \    \"\"\"\n    max_value = maximum(values(counter))\n    \"\"\"\n    Create\
    \ a new dictionary with only the keys/values that have the maximum count.\n  \
    \  \"\"\"\n    maximal_count = Dict(k => v for (k, v) in counter if v == max_value)\n\
    \    \"\"\"\n    Return the resulting dictionary.\n    \"\"\"\n    return maximal_count\n\
    end", "    letters = lowercase(test)\n    letters_array = split(letters, ' ')\n\
    \    dict = [letters_array[i] => 1 for i in 1:length(letters_array)]\n    # loop\
    \ through dictionary to check if a key already exists\n    # if so, increment\
    \ the value by 1\n    for i in 1:length(letters_array)\n        if haskey(dict,\
    \ letters_array[i])\n            dict[letters_array[i]] += 1\n        end\n  \
    \  end\n    return dict\nend", "    # create a histogram of the letters\n    hist\
    \ = Dict{String, Int64}()\n    for letter in test\n        if letter in keys(hist)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    max_count = findmax(values(hist))[1]\n    max_letters\
    \ = [key for (key, value) in hist if value == max_count]\n    return max_letters\n\
    end\n \nhistogram(\"hello world\")\nhistogram(\"aaabaaaa\")\nhistogram(\"aabbbccccc\"\
    )\n \nhistogram(\"aaabaaaa\")\nhistogram(\"aabbbccccc\")\n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n", "    counts = Dict()\n    test = split(test,\
    \ \" \")\n    # For every letter, compute the count of its repetition and add\
    \ it to the dictionary.\n    for letter in test\n        if haskey(counts, letter)\n\
    \            counts[letter] += 1\n        else\n            counts[letter] = 1\n\
    \        end\n    end\n    return counts\nend\n        \ntest = \"Bluecollar man\
    \ is a man who works hard for his money,\n        gets up early in the morning,\
    \ and comes home after a long day of work and \n        does it again, and again,\
    \ and again. He works hard for his money, he works \n        hard for his family,\
    \ and he works hard for his dreams and his ambitions. \n        He puts in overtime\
    \ to get ahead.\"\ntest = lowercase(test)\ntest = split(test, \" \")\ntest = join(test)",
  "  #TODO\nend", "    result = Dict()\n    letter_count = 0 \n    for letter in test\n\
    \        if !haskey(result, letter)\n            result[letter] = 1\n        else\n\
    \            result[letter] += 1\n        end\n    end\n    return result\nend",
  "    x = Dict{String, Int64}()\n    for i in test\n        if i in keys(x)\n   \
    \         x[i] += 1\n        else\n            x[i] = 1\n        end\n    end\n\
    \    return x\nend", "    hist = Dict{String, Int64}()\n    for letter in split(test,\
    \ ' ')\n        if letter in keys(hist)\n            hist[letter] += 1\n     \
    \   else\n            hist[letter] = 1\n        end\n    end\n    return hist\n\
    end", "    \n    \n    \n    \n    \nend", "    d = Dict()\n    for c in test\n\
    \        if haskey(d, c) == false\n            d[c] = 1\n        else\n      \
    \      d[c] += 1\n        end\n    end\n    return d\nend", "    \"\"\"\n    A\
    \ function that returns the dictionary of letters that occur most often\n    with\
    \ their corresponding count.\n    The function takes in a string as its input.\n\
    \    \"\"\"\n    test_dict = Dict{String, Int64}()\n    for i in test\n      \
    \  if haskey(test_dict, i) == false\n            test_dict[i] = 1\n        else\n\
    \            test_dict[i] += 1\n        end\n    end\n    sorted_dict = sort(collect(test_dict),\
    \ by = last)\n    ret_dict = Dict{String, Int64}()\n    for j in 1:length(sorted_dict)\n\
    \        if sorted_dict[j][2] == sorted_dict[1][2]\n            ret_dict[sorted_dict[j][1]]\
    \ = sorted_dict[j][2]\n        end\n    end\n    return ret_dict\nend", "    d\
    \ = Dict{String, Int64}()\n    for w in split(test, \" \")\n        (d[w] = get(d,\
    \ w, 0) + 1)\n    end\n    return d\nend", "    \"\"\"\n    given a string representing\
    \ space separated lowercase letters\n    return a dictionary of the letters with\
    \ the most repetition\n    and containing the corresponding count\n    if several\
    \ letters have the same occurrence\n    return all of them\n    \"\"\"\n    #\
    \ initialize dictionary\n    histogram = Dict{String, Int64}()\n    for letter\
    \ in test\n        if letter in keys(histogram)\n            histogram[letter]\
    \ += 1\n        else\n            histogram[letter] = 1\n        end\n    end\n\
    \    # sort dictionary by values\n    value_histogram = sort(collect(histogram),\
    \ by=x->x[2])\n    # initialize output dictionary\n    out_histogram = Dict{String,\
    \ Int64}()\n    # find highest value\n    highest_val = last(value_histogram)[2]\n\
    \    # collect all letters with that value\n    for letter in value_histogram\n\
    \        if letter[2] == highest_val\n            out_histogram[letter[1]] = letter[2]\n\
    \        end\n    end\n    return out_histogram\nend", "  \n    letter_histogram\
    \ = Dict()\n    for letter in test\n        if letter \u2208 keys(letter_histogram)\n\
    \            letter_histogram[letter] += 1\n        else\n            letter_histogram[letter]\
    \ = 1\n        end\n    end\n    return letter_histogram\nend", "    d = Dict{String,\
    \ Int64}()\n    for word in split(test)\n        d[word] = get(d, word, 0) + 1\n\
    \    end\n    return d\nend", "    result = Dict()\n    for char in test\n   \
    \     if char in keys(result)\n            result[char] += 1\n        else\n \
    \           result[char] = 1\n        end\n    end\n    return result\nend\n \
    \       \nletters = histogram(\"mississippi\")\nmaxcount = maximum(values(letters))",
  "    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    count = zeros(Int64, 26)\n  \
    \  for i in test\n        loc = findfirst(i -> i == i, alphabet)\n        count[loc]\
    \ += 1\n    end\n    count_dict = Dict{String, Int64}()\n    sort_count = sort(count,\
    \ rev=true)\n    for i in count\n        if i == sort_count[1]\n            loc\
    \ = findfirst(i -> i == i, count)\n            push!(count_dict, alphabet[loc]\
    \ => i)\n        end\n    end\n    return count_dict\nend\n \nhistogram(\"aaa\
    \ ee e c d\")", "    # Your code here.\nend", "    \"\"\"\n    Parameters\n  \
    \  ----------\n    test: String\n        Letters to be counted.", "    counter\
    \ = Dict{String, Int64}()\n    for c in test\n        if haskey(counter, c)\n\
    \            counter[c] += 1\n        else\n            counter[c] = 1\n     \
    \   end\n    end\n    return counter\nend", "    letter_count = Dict()\n    max_count\
    \ = 0\n    letter_dict = []\n    split_string = split(test, \" \")\n    for letter\
    \ in split_string\n        letter_count[letter] = get(letter_count, letter, 0)\
    \ + 1\n        current_count = letter_count[letter]\n        if current_count\
    \ > max_count\n            max_count = current_count\n            letter_dict\
    \ = [letter]\n        elseif current_count == max_count\n            push!(letter_dict,\
    \ letter)\n        end\n    end\n    return letter_dict\nend", "    d = Dict{String,\
    \ Int64}()\n    for l in test\n        if haskey(d,l)\n            d[l] += 1\n\
    \        else\n            d[l] = 1\n        end\n    end\n    max = maximum(values(d))\n\
    \    return [key for key in keys(d) if d[key] == max]\nend", "    # Write your\
    \ function here\n    return letters_dict\nend", "    histo = Dict()\n    for letter\
    \ in test\n        histo[letter] = get(histo, letter, 0) + 1\n    end\n    histo\
    \ = sort(histo, by=x->x[2], rev=true)\n    return histo\nend", "    words_counter\
    \ = Dict{String, Int64}()\n    for word in split(test)\n        word in keys(words_counter)\
    \ ? words_counter[word] += 1 : words_counter[word] = 1\n    end\n    return words_counter\n\
    end", "    dict = Dict()\n    for letter in test\n        if haskey(dict, letter)\n\
    \            dict[letter] += 1\n        else\n            dict[letter] = 1\n \
    \       end\n    end\n    return dict\nend", "    histogram_result = Dict{String,\
    \ Int64}()\n    for char in test\n        if haskey(histogram_result, char)\n\
    \            histogram_result[char] += 1\n        else\n            histogram_result[char]\
    \ = 1\n        end\n    end\n    return histogram_result\nend", "    # First make\
    \ a dictionary for all the characters to count\n    histogram = Dict{String, Int64}()\n\
    \    # For each character in the string\n    for i in 1:length(test)\n       \
    \ # Get the letter\n        letter = test[i]\n        # If it's in the dictionary\n\
    \        if haskey(histogram, letter)\n            # Add one to its count\n  \
    \          histogram[letter] += 1\n        else\n            # If it's not in\
    \ the dictionary, set its count to 1\n            histogram[letter] = 1\n    \
    \    end\n    end\n    # Return the dictionary\n    return histogram\nend", " \
    \   histogram = Dict()\n    for s in split(test)\n        histogram[s] = get(histogram,\
    \ s, 0) + 1\n    end\n    histogram\nend", "    \n    \nend", "    if isempty(test)\n\
    \        return Dict()\n    end\n    letters = split(test)\n    counts = [count(x\
    \ -> x == letters[i], letters) for i in 1:length(letters)]\n    max_count = maximum(counts)\n\
    \    letter_indices = findall(x -> x == max_count, counts)\n    max_letters =\
    \ [letters[i] for i in letter_indices]\n    return Dict(keys(max_letters) => max_count)\n\
    end", "    counts = Dict()\n    for letter in test\n        if haskey(counts,\
    \ letter)\n            counts[letter] += 1\n        else\n            counts[letter]\
    \ = 1\n        end\n    end\n    counts\nend", "    s = split(test)\n    b = histogram(s)\n\
    \    a = sort(collect(b), by=last, rev=true)\n    c = []\n    m = 0\n    for i\
    \ in 1:length(a)\n        if a[i][2] > m\n            m = a[i][2]\n        end\n\
    \    end\n    for i in 1:length(a)\n        if a[i][2] == m\n            push!(c,a[i][1])\n\
    \        end\n    end\n    return Dict{String, Int64}(c[1] => m)\nend", "    count\
    \ = Dict()\n    @assert test \u2208 String{Char}\n    for c in test\n        if\
    \ haskey(count, c)\n            count[c] += 1\n        else\n            count[c]\
    \ = 1\n        end\n    end\n    return count\nend\nprintln(histogram(\"\"))\n\
    println(histogram(\"a\"))\nprintln(histogram(\"abc\"))\nprintln(histogram(\"abca\"\
    ))\nprintln(histogram(\"abcaa\"))\nprintln(histogram(\"abcaab\"))\nprintln(histogram(\"\
    abcaab\"))\nprintln(histogram(\"abcaab\"))\n#println(histogram(123))", "    #\
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    # NOTE: I converted the input string to lowercase (i.e. test = lowercase(test))\
    \ because the case of the letters was\n    #       not specified in the instructions.\
    \ \n    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    test = lowercase(test)\n    test_arr = split(test)\n    my_dict = Dict()\n\
    \    temp_dict = Dict()\n    for i in test_arr\n        if my_dict[i] == nothing\n\
    \            my_dict[i] = 1\n        else\n            my_dict[i] += 1\n     \
    \   end\n    end\n    max_value = maximum(collect(values(my_dict)))\n    for i\
    \ in keys(my_dict)\n        if my_dict[i] == max_value\n            temp_dict[i]\
    \ = max_value\n        end\n    end\n    return temp_dict\nend", "    ...\nend",
  "    return Dict()\nend", "    letters = Dict{String, Int64}()\n    for c in test\n\
    \        if haskey(letters, c)\n            letters[c] += 1\n        else\n  \
    \          letters[c] = 1\n        end\n    end\n    return letters\nend\n    ",
  "    alphabet = Dict{String, Int64}()\n    for letter in test\n        if letter\
    \ in keys(alphabet)\n            alphabet[letter] += 1\n        else\n       \
    \     alphabet[letter] = 1\n        end\n    end\n    maximum(alphabet, by=alphabet[])[2]\n\
    end", "    s = Set()\n    d = Dict()\n    a = []\n    for i in test\n        if\
    \ haskey(d, i)\n            d[i] += 1\n        else\n            d[i] = 1\n  \
    \      end\n    end\n    x = map(t -> t[2], d)\n    y = map(t -> t[1], d)\n  \
    \  for i in 1:length(x)\n        if x[i] == maximum(x)\n            push!(a, y[i])\n\
    \        end\n    end\n    for i in a\n        s = add(s, i)\n    end\n    s\n\
    end", "    letters = split(test, \" \")\n    count = Dict{String, Int64}()\n \
    \   for letter in letters\n        if letter in keys(count)\n            count[letter]\
    \ += 1\n        else\n            count[letter] = 1\n        end\n    end\n  \
    \  max = maximum(values(count))\n    return count\nend\n ", "    # Build a dictionary\
    \ containing all unique letters as keys and their count as values\n    letters\
    \ = Dict()\n    for letter in test\n        if letter in keys(letters)\n     \
    \       letters[letter] += 1\n        else\n            letters[letter] = 1\n\
    \        end\n    end\n    \n    # Return a dictionary containing the letters\
    \ with the most repetition and their count\n    return dict_max_by_values(letters)\n\
    end", "{\n    letters::Dict{String, Int64} = Dict{String, Int64}()\n    for s\
    \ in split(test, \" \")\n        if haskey(letters, s)\n            letters[s]\
    \ += 1\n        else\n            letters[s] = 1\n        end\n    end\n    return\
    \ letters\nend", "\nend\n \n \n ", "    letter::String = String()\n    counts::Dict{String,\
    \ Int64} = Dict{String, Int64}()\n    for x in test.lowercase(test)\n        if\
    \ x in counts.keys()\n            counts[x] += 1\n        else\n            counts[x]\
    \ = 1\n        end\n    end\n    return counts\nend", "    \"\"\"\n        This\
    \ function takes a String (test), returns a dictionary\n    \"\"\"\n    #returns\
    \ a dictionary\n    dict = Dict()\n    for ch in test\n        iskey(dict, ch)\
    \ || (dict[ch] = 0)\n        dict[ch] += 1\n    end\n    dict\nend\n#test\nhistogram(\"\
    vaishnavi\")\n#test\nhistogram(\"aaabbbccc\")", "    test_arr = split(test)\n\
    \    hist = Dict()\n    for x in test_arr\n        if x in keys(hist)\n      \
    \      hist[x] += 1\n        else\n            hist[x] = 1\n        end\n    end\n\
    \    max_val = maximum(values(hist))\n    dict = Dict()\n    for (key, val) in\
    \ hist\n        if val == max_val\n            dict[key] = val\n        end\n\
    \    end\n    return dict\nend", "    chars = String[]\n    vals = Int64[]\n \
    \   for i in test \n        if i in chars \n            vals[chars.index(i)] +=\
    \ 1\n        else \n            push!(chars, i)\n            push!(vals, 1)\n\
    \        end\n    end\n    return Dict(zip(chars, vals))\nend", "    my_dict =\
    \ Dict()\n    for l in test\n        if haskey(my_dict, l)\n            my_dict[l]\
    \ += 1\n        else\n            my_dict[l] = 1\n        end\n    end\n    return\
    \ my_dict\nend", "    histogram = Dict() \n    for letter in test\n        if\
    \ in(letter, keys(histogram))\n            histogram[letter] += 1\n        else\n\
    \            histogram[letter] = 1\n        end\n    end\n    maxKey = \"\"\n\
    \    maxValue = 0\n    for (key, value) in histogram\n        if value > maxValue\n\
    \            maxKey = key\n            maxValue = value\n        end\n    end\n\
    \    maxCount = Dict(maxKey => maxValue)\n    for (key, value) in histogram\n\
    \        if value == maxValue\n            maxCount[key] = value\n        end\n\
    \    end\n    return maxCount\nend", "    #initializing dictionary\n    d = Dict()\n\
    \    for i = 1:length(test)\n        key = test[i]\n        #adds a new key if\
    \ the key does not exist in the dictionary or updates the value of the existing\
    \ key\n        d[key] = get(d, key, 0) + 1\n    end\n    return d\nend", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \"\"\"\"Given\
    \ a string representing a space separated lowercase letters, return a dictionary\n\
    \    of the letter with the most repetition and containing the corresponding count.\n\
    \    If several letters have the same occurrence, return all of them.\n    \n\
    \    Example:\n                    \n    \"\"\"", "    letters = Dict{String,\
    \ Int64}()\n    for c in test\n        if !haskey(letters, c)\n            letters[c]\
    \ = 1\n        else\n            letters[c] += 1\n        end\n    end\n    return\
    \ letters\nend", "    # do something\nend", "    # Your code here...\nend", " \
    \   \n    words = split(test)\n    wordscount = map(x -> length(x), words)\n \
    \   mydict = Dict(words[i] => wordscount[i] for i in 1:length(words))\n    return\
    \ mydict\n    \nend", "    n = length(test)\n    d = Dict()\n    for i in 1:n\n\
    \        if haskey(d, string(test[i]))\n            d[string(test[i])] += 1\n\
    \        else\n            d[string(test[i])] = 1\n        end\n    end\n    return\
    \ d\nend", "    counter = Dict{String, Int64}()\n    for c in lowercase(test)\
    \ \n        if haskey(counter, c) == false\n            counter[c] = 1\n     \
    \   else\n            counter[c] += 1\n        end\n    end\n    return counter\n\
    end", "    hist = Dict{String, Int64}()\n    for c in test\n        if (c in keys(hist))\
    \ \n            hist[c] += 1\n        else\n            hist[c] = 1\n        end\n\
    \    end\n    max_val = maximum(values(hist))\n    filtered_dict = Dict{String,\
    \ Int64}()\n    for (k, v) in hist\n        if v == max_val\n            filtered_dict[k]\
    \ = v\n        end\n    end\n    return filtered_dict\nend", "    dic = Dict{String,\
    \ Int64}()\n    for str in split(test)\n        if str in keys(dic)\n        \
    \    dic[str] = dic[str] + 1\n        else\n            dic[str] = 1\n       \
    \ end\n    end\n    dic\nend", "    counter = Dict{String, Int64}()\n    for letter\
    \ in test\n        if haskey(counter, letter)\n            counter[letter] +=\
    \ 1\n        else\n            counter[letter] = 1\n        end\n    end\n   \
    \ return counter\nend", "    hist = Dict{String, Int64}()\n    for letter in split(test,\
    \ \" \")\n        hist[letter] = get(hist, letter, 0) + 1\n    end\n    return\
    \ hist\nend\nhistogram(\"The quick brown fox jumps over the lazy dog\")\n ", "\n\
    end", "    let letters = []\n    for a in test\n        if length(filter(x ->\
    \ x == a, letters)) == 0\n            push!(letters, a)\n        end\n    end\n\
    \    dict = Dict(a => length(filter(x -> x == a, test)) for a in letters)\n  \
    \  most_rep = maximum(dict[a] for a in dict)\n    dict_most_rep = Dict(a => dict[a]\
    \ for a in dict if dict[a] == most_rep)\nend", "    histo_dict = Dict{String,\
    \ Int64}()\n    for i in test\n        if i in keys(histo_dict)\n            histo_dict[i]\
    \ += 1\n        else\n            histo_dict[i] = 1\n        end\n    end\n  \
    \  return histo_dict\nend", "    # initialize an empty dictionary\n    result\
    \ = Dict()\n    # initialize an array that will contain the maximum number of\
    \ repetitions\n    max_value = []\n    # initialize an array that will contain\
    \ all the letters with the maximum number of repetitions\n    max_key = []\n \
    \   # iterate over all the letters in the string\n    for letter in test\n   \
    \     # increment the count of the current letter\n        result[letter] = get(result,\
    \ letter, 0) + 1\n    end\n    # find the maximum number of repetitions of all\
    \ the letters in the array\n    max_value = maximum(values(result))\n    # find\
    \ all the letters with the maximum number of repetitions\n    max_key = collect(filter(x\
    \ -> x[2] == max_value, result))\n    # return all the letters with the maximum\
    \ number of repetitions\n    return max_key\nend", "    letterdict = Dict{String,\
    \ Int64}()\n    maxletter = \"\"\n    maxcount = 0\n    for letter in test\n \
    \       letterdict[letter] = get(letterdict, letter, 0) + 1\n        if letterdict[letter]\
    \ > maxcount\n            maxletter = letter\n            maxcount = letterdict[letter]\n\
    \        end\n    end\n    filtereddict = Dict{String, Int64}()\n    for (letter,\
    \ count) in letterdict\n        if count == maxcount\n            filtereddict[letter]\
    \ = count\n        end\n    end\n    return filtereddict\nend", "    s = split(test)\n\
    \    hist = Dict{String, Int64}()\n    for i = 1:length(s)\n        hist[s[i]]\
    \ = get(hist, s[i], 0) + 1\n    end\n    hist\nend", "    # Dict{String, Int64}\
    \ is the dictionary\n    # The first String is the type of the keys,\n    # the\
    \ second Int64 is the type of the values\n    # The greater than sign is the return\
    \ type\n    # The = sign is the assignment operator\n    # The : is the colon\
    \ operator\n    # The :: means \"has type of\"\n    # The # symbol is the comment\
    \ symbol\n    d = Dict{String, Int64}()\n    test = lowercase(test)\n    for c\
    \ in test\n        if haskey(d, c)\n            d[c] += 1\n        else\n    \
    \        d[c] = 1\n        end\n    end\n    return d\nend", "    histogram(test::String)::Dict{String,\
    \ Int64}\nhistogram(\"bab bbxddx bxdbdxx\")", "    letters = Dict{String, Int64}()\n\
    \    for i in test\n        letters[i] = get(letters, i, 0) + 1\n    end\n   \
    \ return letters\nend", "    occurr = Dict{String, Int64}()\n    for i = 1:length(test)\n\
    \        if haskey(occurr, test[i])\n            occurr[test[i]] += 1\n      \
    \  else\n            occurr[test[i]] = 1\n        end\n    end\n    max_count\
    \ = maximum(values(occurr))\n    most_occurr = [k for (k,v) in occurr if v ==\
    \ max_count]\n    occurr = Dict(k => v for (k,v) in occurr if v == max_count)\n\
    \    return occurr\nend", "    test = lowercase(test)\n    dict = Dict{String,\
    \ Int64}()\n    for c in test\n        if haskey(dict, string(c))\n          \
    \  dict[string(c)] += 1\n        else\n            dict[string(c)] = 1\n     \
    \   end\n    end\n    dict\nend", "    let aux = split(test, \" \")\n    let sorted\
    \ = sort(aux, rev=true)\n    let result = Dict{String, Int64}()\n    let count\
    \ = countmap(aux)\n    for (k, v) in count\n        if get(result, v, \"\") ==\
    \ \"\"\n            result[v] = k\n        else\n            result[v] = string(result[v],\
    \ \" \", k)\n        end\n    end\n    return result\nend", "# parse the string\
    \ for each character\n# count each character as a dictionary\n# return the dictionary\
    \ with the most occurrence \n    \n    \n    \n    \n    return \nend", "  hist\
    \ = Dict{String, Int64}()\n  for c in split(test) \n    if haskey(hist, c)\n \
    \     hist[c] += 1\n    else\n      hist[c] = 1\n    end\n  end\n  return hist\n\
    end", "    let local_dic::Dict{String, Int64} = Dict{String, Int64}()\n    for\
    \ char in test\n        if haskey(local_dic, string(char))\n            local_dic[string(char)]\
    \ += 1\n        else\n            local_dic[string(char)] = 1\n        end\n \
    \   end\n    local_dic\nend", "    result = Dict()\n    for t in test\n      \
    \  if haskey(result, t) == false\n            result[t] = 1\n        else\n  \
    \          result[t] += 1\n        end\n    end\n    max = maximum(values(result))\n\
    \    keys(result)[values(result) .== max]\nend", '    d = Dict{String, Int64}()',
  "    \"\"\"\n    The histogram function.\n    \n    Args:\n        test(String):\
    \ The input string.\n        \n    Returns:\n        hist(Dict{String, Int64}):\
    \ The dictionary containing the count.\n    \"\"\"\n    hist = Dict{String, Int64}()\n\
    \    for c in test\n        hist[c] = get(hist, c, 0) + 1\n    end\n    return\
    \ hist\nend", "    # your code goes here    \n    histo = Dict()\n    for character\
    \ in test\n        if character in keys(histo)\n            histo[character] +=\
    \ 1\n        else\n            histo[character] = 1\n        end\n    end\n  \
    \  return histo\nend\n# Test for histogram\n# Example\nhistogram(\"abbabb\")",
  "    letter_counts = Dict{String, Int64}()\n    for (i, letter) in enumerate(test)\n\
    \        if letter == ' '\n            continue\n        end\n        if !haskey(letter_counts,\
    \ letter)\n            letter_counts[letter] = 1\n        else\n            letter_counts[letter]\
    \ += 1\n        end\n    end\n    max_count = maximum(values(letter_counts))\n\
    \    max_letters = []\n    for (letter, count) in letter_counts\n        if count\
    \ == max_count\n            push!(max_letters, letter)\n        end\n    end\n\
    \    return max_letters\nend", "    histo = Dict{String, Int64}()\n    for c in\
    \ test\n        if haskey(histo, c)\n            histo[c] += 1\n        else\n\
    \            histo[c] = 1\n        end\n    end\n    max_rep = maximum(values(histo))\n\
    \    dict(histo[i] == max_rep for i in keys(histo))\nend", "    counts = Dict{String,\
    \ Int64}()\n    for char in test.lowercase\n        if !haskey(counts, char)\n\
    \            counts[char] = 1\n        else\n            counts[char] += 1\n \
    \       end\n    end\n    for char in keys(counts)\n        counts[char] = counts[char]\
    \ % 3\n    end\n    counts\nend", "    \"\"\"Create a histogram based on the given\
    \ input string.\"\"\"\n    hist = Dict{String, Int64}()\n    for char in test\n\
    \        if char \u2208 keys(hist)\n            hist[char] += 1\n        else\n\
    \            hist[char] = 1\n        end\n    end\n    return hist\nend", "  \
    \  result = Dict()\n    max_count = 0\n    for letter in test.lowercase\n    \
    \    count = get(result, letter, 0) + 1\n        if count > max_count\n      \
    \      max_count = count\n        end\n        result[letter] = count\n    end\n\
    \    return filter(x -> x[2] == max_count, result)\nend", "    h = Dict()\n  \
    \  for letter in test\n        h[letter] = get(h, letter, 0) + 1\n    end\n  \
    \  h\nend", " \n    print(\"\\n\")\n    println(\"String:\\n$test\")\n    println(\"\
    Dictionary:\")\n    dict = Dict{String, Int64}()\n    word_list = split(test)\n\
    \    word_frequency = []\n    for word in word_list\n        count = 0\n     \
    \   for w in word_list\n            if w == word\n                count += 1\n\
    \            end\n        end\n        push!(word_frequency, count)\n    end\n\
    \    for i in eachindex(word_list)\n        dict[word_list[i]] = word_frequency[i]\n\
    \    end\n    println(dict)\n    return dict\nend", "    # Your code here\nend",
  "    n = length(test)\n    hist = Dict{Char, Int64}()\n    for i = 1:n\n       \
    \ c = test[i]\n        if haskey(hist, c)\n            hist[c] += 1\n        else\n\
    \            hist[c] = 1\n        end\n    end\n    return hist\nend", "    \"\
    \"\"\n    Given a string test, returns the dictionary of a letter, and it's count",
  "    d = Dict()\n    for i in 1:length(test)\n        if test[i] \u2208 keys(d)\n\
    \            d[test[i]] += 1\n        else\n            d[test[i]] = 1\n     \
    \   end\n    end\n    return d\nend", "    \"\"\" histogram(test::String)::Dict{String,\
    \ Int64} \"\"\"\n    letters=split(test)\n    letter_counts=Dict{String, Int64}()\n\
    \    for letter in letters\n        letter_counts[letter]=get(letter_counts, letter,\
    \ 0)+1\n    end\n    maximum=maximum(collect(values(letter_counts)))\n    return([(key,value)\
    \ for (key,value) in letter_counts if value==maximum])\nend", "    H = Dict()\n\
    \    for word in split(test)\n        if haskey(H, word)\n            H[word]\
    \ += 1\n        else\n            H[word] = 1\n        end\n    end\n    return\
    \ H\nend", "    hist = Dict()\n    for s in split(test)\n        hist[s] = get(hist,\
    \ s, 0) + 1\n    end\n    hist\nend", "    h = Dict{String, Int64}()\n    for\
    \ s in split(test)\n        s = lowercase(s)\n        h[s] = get(h, s, 0) + 1\n\
    \    end\n    return h\nend\nh = histogram(\"Mississippi\")", "    x = countmap(test)\n\
    \    maxVal = get!(x, 0, 0)\n    out = Dict()\n    for i in keys(x)\n        if\
    \ x[i] == maxVal\n            out[i] = x[i]\n        end\n    end\n    return\
    \ out\nend", "   \n    return count(x -> x \u2208 ['a':'z'], test)\nend", "  \
    \  \"\"\"\n    Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c d e f\")\n    Dict(\"\
    a\"=>1,\"b\"=>1,\"c\"=>1,\"d\"=>1,\"e\"=>1,\"f\"=>1)\n    \n    >>> histogram(\"\
    a b a\")\n    Dict(\"a\"=>2,\"b\"=>1)\n    \n    >>> histogram(\"a b a a b a\"\
    )\n    Dict(\"a\"=>4,\"b\"=>2)\n    \n    >>> histogram(\"a b a a b a a\")\n \
    \   Dict(\"a\"=>5,\"b\"=>2)\n    \n    \"\"\"\n    h = Dict()\n    for x in split(test)\n\
    \        h[x] = get(h, x, 0) + 1\n    end\n    return h\nend", "    \n    letters\
    \ = Dict{String, Int64}()\n    for letter in test\n        push!(letters, letter,\
    \ 1)\n    end\n    letters\nend", "    hist = Dict{String, Int64}()\n    for letter\
    \ in test.split()\n        if haskey(hist, letter)\n            hist[letter] +=\
    \ 1\n        else\n            hist[letter] = 1\n        end\n    end\n    return\
    \ hist\nend", "    \"\"\"\n    :param test: String\n    :return: Dictionary containing\
    \ the highest occurrence letters as keys and their count as value\n    \"\"\"\n\
    \    test = split(test, ' ')\n    count = 0\n    hist = Dict{String, Int64}()\n\
    \    for word in test\n        if haskey(hist, word) == false\n            hist[word]\
    \ = 1\n        else\n            hist[word] += 1\n        end\n        if hist[word]\
    \ > count\n            count = hist[word]\n        end\n    end\n    return_dict\
    \ = Dict{String, Int64}()\n    for key in keys(hist)\n        if hist[key] ==\
    \ count\n            return_dict[key] = count\n        end\n    end\n    return\
    \ return_dict\nend", "    \n    # Your code here", "    # your code here\nend",
  "    \"\"\"\n    Code to return the letters (and their number of occurrences) that\
    \ appear most in a string.\n    :param test: String\n    :return: Dictionary of\
    \ the letters that appear most and their number of occurrences\n    \"\"\"\n \
    \   test = test[1:end-1] # get rid of the \"(\" and \")\" at the beginning and\
    \ end of the string\n    return sort(Dict{String, Int64}(x => count(x -> x ==\
    \ y, test) for y in test), by=v->v[2], rev=true)[1]\nend", "\nprint(histogram(\"\
    this is a string that this function should return a dictionary\"))\n# The output\
    \ should be:\n# {\"t\"=>6, \"h\"=>5, \"i\"=>5, \"s\"=>5}", "    \"\"\"\n    \"\
    \"\"\n    words = split(test)\n    d = Dict()\n    for w in words\n        if\
    \ haskey(d, w) == false\n            d[w] = 1\n        else\n            d[w]\
    \ += 1\n        end\n    end\n    return d\nend", "    d = Dict()\n    for letter\
    \ in test\n        if letter in keys(d)\n            d[letter] += 1\n        else\n\
    \            d[letter] = 1\n        end\n    end\n    return d\nend", "    for\
    \ c in String\n        if c in Dict\n            Dict[c] = Dict[c] + 1\n     \
    \   else\n            Dict[c] = 1\nend", "    letters = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        letters[letter] = get(letters, letter,\
    \ 0) + 1\n    end\n    return letters\nend", "    test_arr = split(test)\n   \
    \ d = Dict{String, Int64}()\n    for i in test_arr\n        try\n            d[i]\
    \ += 1\n        catch err\n            d[i] = 1\n        end\n    end\n    return\
    \ d\nend\n \nlet d = histogram(\"abbbabbcc\")\nprintln(d)", '    # You can also
    use a Set for the keys and a Vector for the values', "    \"\"\"Convert a string\
    \ to a dictionary of lowercase letters with associated counts.\n    \n    Example:\n\
    \    \n    >>> histogram(\"abbcc\")\n    Dict{String,Int64} with 3 entries:\n\
    \      \"a\" => 1\n      \"b\" => 2\n      \"c\" => 2\n    \"\"\"\n    freq =\
    \ Dict()\n    for c in test\n        if c in keys(freq)\n            freq[c] +=\
    \ 1\n        else\n            freq[c] = 1\n        end\n    end\n    return freq\n\
    end", "    letter_count = Dict()\n    for char in test:\n        if char in keys(letter_count)\n\
    \            letter_count[char] += 1\n        else\n            letter_count[char]\
    \ = 1\n        end\n    end\n    max_count = maximum(values(letter_count))\n \
    \   best_letters = filter(x -> x == max_count, values(letter_count))\n    return\
    \ letter_count\nend", "    test_ = split(test)\n    count = countmap(test_)\n\
    \    max = maximum(count[v] for v in values(count))\n    return {k for (k,v) in\
    \ count if v == max}\nend", "    #create an empty histogram of character frequencies\n\
    \    hist = Dict{String, Int64}()\n    #loop through all characters of the string\n\
    \    for letter in test\n        #if letter already in histogram, increment value\n\
    \        if letter in keys(hist)\n            hist[letter] += 1\n        #else,\
    \ initialize value to one\n        else\n            hist[letter] = 1\n      \
    \  end\n    end\n    #find the maximum value\n    max_value = maximum(values(hist))\n\
    \    #find the keys with the maximum value\n    max_keys = []\n    for key in\
    \ keys(hist)\n        if hist[key] == max_value\n            push!(max_keys, key)\n\
    \        end\n    end\n    #return the dictionary of maximum keys with corresponding\
    \ value\n    return Dict(max_keys[i] => max_value for i in 1:length(max_keys))\n\
    end", "    \n    letters = Dict{String, Int64}()\n    for l in test\n        if\
    \ haskey(letters, l)\n            letters[l] += 1\n        else\n            letters[l]\
    \ = 1\n        end\n    end\n    return letters\nend", "    \"\"\"\n    Returns\
    \ a dictionary of the letters with the most repetitions in test\n    \"\"\"\n\
    \    hist = Dict{String, Int64}()\n    for letter in test\n        if haskey(hist,\
    \ letter) == false\n            hist[letter] = 1\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    return hist\nend", "    answer = Dict()\n  \
    \  for c in test\n        if c \u2208 keys(answer)\n            answer[c] += 1\n\
    \        else\n            answer[c] = 1\n        end\n    end\n    return answer\n\
    end", "    h = Dict{String, Int64}()\n    for l in test\n        h[l] = get(h,\
    \ l, 0) + 1\n    end\n    h\nend", "    w = Dict{String, Int64}()\n    for c =\
    \ 1:length(test)\n        if test[c] in keys(w)\n            w[test[c]] += 1\n\
    \        else\n            w[test[c]] = 1\n        end\n    end\n    return(w)\n\
    end", "    # separate the test string into an array of letters\n    # count the\
    \ occurrence of each letter\n    # save the result into a Dict\n    # return the\
    \ Dict\nend", "    \"\"\"Parameters: \n    test: String: The string which histogram\
    \ we want to compute.\n    \n    Returns: \n    A dictionary, where the keys are\
    \ the letters with the highest occurrences,\n    and the values are the corresponding\
    \ number of occurrences.\n    \"\"\"\n    \n    # We first create an empty dictionary\
    \ that will store the number of occurrences of each character\n    d = Dict{String,\
    \ Int64}()\n    \n    # For each character in the string\n    for character in\
    \ split(test, \"\")\n        \n        # If the character is not yet in the dictionary,\
    \ add it and set its value to 1\n        if !haskey(d, character)\n          \
    \  d[character] = 1\n        # Else, increment its value by 1\n        else\n\
    \            d[character] += 1\n        end\n    end\n    \n    # We create an\
    \ empty dictionary to store all the characters with the highest occurrences\n\
    \    d_final = Dict{String, Int64}()\n    \n    # We keep track of the highest\
    \ occurrence found\n    highest_occurrence = -1\n    \n    # For each key in the\
    \ dictionary created before\n    for key in keys(d)\n        \n        # If the\
    \ current occurrence is equal to the highest occurrence found\n        if d[key]\
    \ == highest_occurrence\n            \n            # Add the current key to the\
    \ final dictionary\n            d_final[key] = d[key]\n            \n        #\
    \ Else, if the current occurrence is greater than the highest occurrence found\n\
    \        elseif d[key] > highest_occurrence\n            \n            # Reset\
    \ the final dictionary\n            d_final = Dict{String, Int64}()\n        \
    \    \n            # Update the highest occurrence found\n            highest_occurrence\
    \ = d[key]\n            \n            # Add the current key to the final dictionary\n\
    \            d_final[key] = d[key]\n        end\n    end\n    \n    # Finally,\
    \ return the final dictionary\n    return d_final\nend", "    hist = Dict{String,\
    \ Int64}()\n    for c in test\n        hist[c] = get(hist, c, 0) + 1\n    end\n\
    \    return hist\nend", "    result = Dict{String, Int64}()\n    for char in test.lowercase\n\
    \        if haskey(result, char)\n            result[char] += 1\n        else\n\
    \            result[char] = 1\n        end\n    end\n    return result\nend",
  "    hist = Dict(:a => 0, :b => 0, :c => 0, :d => 0, :e => 0, :f => 0, :g => 0,\
    \ :h => 0, :i => 0, :j => 0, :k => 0, :l => 0, :m => 0, :n => 0, :o => 0, :p =>\
    \ 0, :q => 0, :r => 0, :s => 0, :t => 0, :u => 0, :v => 0, :w => 0, :x => 0, :y\
    \ => 0, :z => 0)\n    for i in 1:length(test)\n        for key in keys(hist)\n\
    \            if test[i] == key\n                hist[key] += 1\n            end\n\
    \        end\n    end\n    return hist\nend", "    # your code here\nend\n \n\
    histogram(\"abbbbcccccddddddeeef\") # should be {'d' => 6, 'c' => 5, 'b' => 4,\
    \ 'e' => 3, 'f' => 1}\nhistogram(\"abbbbcccccddddddeeeefffffff\") # should be\
    \ {'f' => 7, 'e' => 4, 'd' => 5, 'c' => 5, 'b' => 4}\n \nhistogram(\"abbbbcccccddddddeeeefffffff\"\
    ) # should be {'f' => 7, 'e' => 4, 'd' => 5, 'c' => 5, 'b' => 4}\n \nhistogram(\"\
    \") # should be {}\n \nhistogram(\"a\") # should be {'a' => 1}\n \nhistogram(\"\
    hello world\") # should be {'l' => 3, 'o' => 2, 'h' => 1, 'e' => 1, 'w' => 1,\
    \ 'r' => 1, 'd' => 1}\n \nhistogram(\"aaabbbbbcccccccddddddeeeeefffff\") # should\
    \ be {'a' => 3, 'b' => 5, 'c' => 7, 'd' => 6, 'e' => 5, 'f' => 5}\n \nhistogram(\"\
    aaabbbbbcccccccddddddeeeeefffff\") # should be {'a' => 3, 'b' => 5, 'c' => 7,\
    \ 'd' => 6, 'e' => 5, 'f' => 5}\n \nhistogram(\"aaabbbbbcccccccddddddeeeeefffff\"\
    ) # should be {'a' => 3, 'b' => 5, 'c' => 7, 'd' => 6, 'e' => 5, 'f' => 5}\n \n\
    histogram(\"aaabbbbbcccccccddddddeeeeefffff\") # should be {'a' => 3, 'b' => 5,\
    \ 'c' => 7, 'd' => 6, 'e' => 5, 'f' => 5}\n \nhistogram(\"aaabbbbbcccccccddddddeeeee",
  "    d = Dict{String, Int64}()\n    for l in split(test)\n        if haskey(d, l)\n\
    \            d[l] += 1\n        else\n            d[l] = 1\n        end\n    end\n\
    \    d\nend", "    word = split(test)\n    word_dict = Dict{String, Int64}()\n\
    \    for i in word\n        if haskey(word_dict, i) == false\n            word_dict[i]\
    \ = 1\n        else\n            word_dict[i] += 1\n        end\n    end\n   \
    \ maximum = 0\n    for i in word_dict\n        if i[2] > maximum\n           \
    \ maximum = i[2]\n        end\n    end\n    max_dict = Dict{String, Int64}()\n\
    \    for i in word_dict\n        if i[2] == maximum\n            max_dict[i[1]]\
    \ = i[2]\n        end\n    end\n    return max_dict\nend", "    occurences = Dict{String,\
    \ Int64}()\n    for c in test\n        occurences[c] = get(occurences, c, 0) +\
    \ 1\n    end\n    max_key = []\n    max_value = 0\n    for (key, value) in occurences\n\
    \        if value > max_value\n            max_key = [key]\n            max_value\
    \ = value\n        elseif value == max_value\n            push!(max_key, key)\n\
    \        end\n    end\n    return Dict(max_key[1] => max_value)\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    # Fill in this function.\n\
    \    # Split the string into a vector of letters\n    letters = split(test, \"\
    \ \")\n    counts = Dict{String, Int64}()\n    # Iterate over the vector of letters\n\
    \    for letter in letters\n        if letter in keys(counts)\n            counts[letter]\
    \ += 1\n        else\n            counts[letter] = 1\n        end\n    end\n \
    \   max_count = maximum(values(counts))\n    max_count_dict = Dict{String, Int64}()\n\
    \    for (key, value) in counts\n        if value == max_count\n            max_count_dict[key]\
    \ = value\n        end\n    end\n    return max_count_dict\nend", "    occurance::Dict{String,\
    \ Int64} = Dict{String, Int64}()\n    for i in test\n        if i in keys(occurance)\n\
    \            occurance[i] += 1\n        else\n            occurance[i] = 1\n \
    \       end\n    end\n    return occurance\nend\nhistogram(\"Hello\")", "    hist\
    \ = Dict{String, Int64}()\n    for ch in test\n        try\n            hist[ch]\
    \ += 1\n        catch e\n            hist[ch] = 1\n        end\n    end\n    return\
    \ hist\nend", "    \"\"\"\n    \"\"\"\n    # Create an array of the letters in\
    \ the test string\n    letters = split(test, \" \")\n    # Get a sorted list of\
    \ unique letters\n    unique_letters = unique(letters)\n    # Create an empty\
    \ dictionary\n    hist = Dict{String, Int64}()\n    # Loop through each unique\
    \ letter\n    for j in 1:length(unique_letters)\n        # Add the letter with\
    \ its count to the dictionary\n        hist[unique_letters[j]] = sum(letters .==\
    \ unique_letters[j])\n    end\n    # Return the sorted dictionary\n    sort(hist,\
    \ by=v->v[2], rev=true)\nend", "    \"\"\"\n    >>> histogram(\"a b c d e f\"\
    )\n    {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1, \"f\": 1}\n    >>> histogram(\"\
    my name is leah\")\n    {\"m\": 1, \"y\": 1, \" \": 3, \"n\": 1, \"a\": 1, \"\
    e\": 2, \"i\": 1, \"s\": 1, \"l\": 1, \"h\": 1}\n    >>> histogram(\"mississippi\"\
    )\n    {\"m\": 1, \"i\": 4, \"s\": 4, \"p\": 2}\n    \"\"\"\n    ret = Dict(Char\
    \ => Int64)\n    for c in test\n        ret[c] = get(ret, c, 0) + 1\n    end\n\
    \    return ret\nend", "    hist = Dict{String, Int64}()\n    for c in test\n\
    \        if haskey(hist, c) \n            hist[c] += 1\n        else\n       \
    \     hist[c] = 1\n        end\n    end\n    maximum = map(x -> get(hist, x, 0),\
    \ collect(keys(hist)))\n    maximum = maximum[maximum.==maximum[end]]\n    newdict\
    \ = filter(x -> get(hist, x, 0) == maximum[end], collect(keys(hist)))\n    dict\
    \ = Dict(map(x -> (x, get(hist, x, 0)), newdict))\n    return dict\nend", "  \
    \  letters = Set(test)\n    count = Dict{String, Int64}(s => 0 for s in letters)\n\
    \    for c in test\n        count[c] += 1\n    end\n    return count\nend", " \
    \   \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n        \n        histogram(\"a b c a a b\
    \ c d\")\n        # should return {\"a\" => 3, \"b\" => 2, \"c\" => 2}\n     \
    \   \n    \"\"\"\n    h = Dict()\n    for (i, c) in enumerate(test)\n        if\
    \ isletter(c)\n            if haskey(h, c)\n                h[c] += 1\n      \
    \      else\n                h[c] = 1\n            end\n        end\n    end\n\
    \    h\nend", "    \"\"\"\n    lettercounts = Dict()\n    lettercounts[\"b\"]\
    \ = 0\n    lettercounts[\"a\"] = 0\n    lettercounts[\"r\"] = 0\n    lettercounts[\"\
    k\"] = 0\n    lettercounts[\"c\"] = 0\n    lettercounts[\"f\"] = 0\n    lettercounts[\"\
    o\"] = 0\n    lettercounts[\"o\"] = 0\n    lettercounts[\"d\"] = 0\n    lettercounts[\"\
    g\"] = 0\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \"\"\"\n    for\
    \ x in test\n        newcount = lettercounts[x] + 1\n        lettercounts[x] =\
    \ newcount\n    end\n    \"\"\"\n    \n    \n    \n    \n    \n    \"\"\"\n  \
    \  return lettercounts\n    \"\"\"\nend\n# Tests\ntest1 = \"barbecue\"\ntest2\
    \ = \"barbeque\"\ntest3 = \"barbecuee\"\ntest4 = \"barrrbequuee\"", "\n</td>\n\
    </tr>\n</table>\n</div>", "    \"\"\"Given a string representing a space separated\
    \ lowercase letters, return a dictionary\n        of the letter with the most\
    \ repetition and containing the corresponding count.\n        If several letters\
    \ have the same occurrence, return all of them.\n        \n        Example:\n\
    \                        \n        \"\"\"\n        let letters = Set(test)\n \
    \       let count = [length(filter(l -> l == letter, test)) for letter in letters]\n\
    \        let sort_count = sort(count, rev=true)\n        let max_count = sort_count[1]\n\
    \        return Dict(zip(letters, count))[filter(value -> value == max_count,\
    \ Dict(zip(letters, count)))]\n    end\nend", "  \n  letters = split(test) \n\
    \  letters \n  \n  hist = Dict{String, Int64}()\n  \n  for letter in letters \n\
    \    \n    if !haskey(hist, letter)\n    \n      hist[letter] = 1 \n      \n \
    \   else \n      \n      hist[letter] += 1 \n      \n    end \n    \n  end \n\
    \  \n  maximum(values(hist))\n  \n  \n  \n  \n  \n \n \n \n \n \n \n \n \n \n ",
  "    \"\"\"Given a string, return the letter with the most repetition and containing\
    \ the corresponding count. \n    If several letters have the same occurrence,\
    \ return all of them.\n    \n    Example:\n    histogram(\"abbcdd\") returns {'b'\
    \ => 2, 'd' => 2}\n    histogram(\"abbcccdddd\") returns {'c' => 3, 'd' => 4}\n\
    \    histogram(\"abbcddd\") returns {'d' => 3}\n    \"\"\"\n    countDict = Dict{String,\
    \ Int64}()\n    for c in test\n        if haskey(countDict, string(c))\n     \
    \       countDict[string(c)] += 1\n        else\n            countDict[string(c)]\
    \ = 1\n        end\n    end\n    return sort(countDict, rev=true)\nend", "   \
    \ t = [i for i in test if !isspace(i)]\n    D = Dict()\n    for i in t\n     \
    \   if !haskey(D, i)\n            D[i] = 1\n        else\n            D[i] +=\
    \ 1\n        end\n    end\n    D\nend", "    let lower = ['a':'z']\n    let upper\
    \ = ['A':'Z']\n    let g = groupby(lower, upper)\n    # check if string contains\
    \ upper case letters\n    if any(upper .== test)\n        return g\n    end\n\
    end", "    # counter is a dictionary mapping each character to its count\n   \
    \ counter = Dict{String, Int64}()\n    for c in test\n        # Add one if the\
    \ character is already present in the dictionary, otherwise add it\n        if\
    \ haskey(counter, c)\n            counter[c] += 1\n        else\n            counter[c]\
    \ = 1\n        end\n    end\n    # The variable most_common is a dictionary mapping\
    \ the most common character(s) to their count\n    most_common = Dict{String,\
    \ Int64}()\n    # Find the max value\n    max_value = maximum(values(counter))\n\
    \    # We iterate through each key, value pair\n    for (key, value) in counter\n\
    \        # And we add the key to most_common if the value is the max value\n \
    \       if value == max_value\n            most_common[key] = value\n        end\n\
    \    end\n    # Finally we return the dictionary containing the most common character(s)\
    \ and their count\n    return most_common\nend", "    most_frequent_letters =\
    \ Dict{String, Int64}()\n    for i in lowercase(test)\n        if haskey(most_frequent_letters,\
    \ i)\n            most_frequent_letters[i] += 1\n        else\n            most_frequent_letters[i]\
    \ = 1\n        end\n    end\n    return most_frequent_letters\nend", "    \"\"\
    \"The histogram of test.\n   \n    >>> histogram(\"abbbc\")\n    {'b': 3}\n  \
    \  >>> histogram(\"abbbbc\")\n    {'b': 4}\n    >>> histogram(\"abbbbcc\")\n \
    \   {'b': 4, 'c': 2}\n    \"\"\"\n    \n    hist = Dict()\n    for letter in test\n\
    \        count = get(hist, letter, 0)\n        hist[letter] = count + 1\n    end\n\
    \    return hist\nend", "    count = Dict()\n    maxcount = 0\n    test_vec =\
    \ split(test)\n    for word in test_vec\n        if haskey(count, word)\n    \
    \        count[word] += 1\n        else\n            count[word] = 1\n       \
    \ end\n        if count[word] > maxcount\n            maxcount = count[word]\n\
    \        end\n    end\n    for (key, value) in count\n        if value < maxcount\n\
    \            delete!(count, key)\n        end\n    end\n    return count\nend",
  "    letters = Dict{String, Int64}()\n    for letter in test\n        if letter\
    \ in keys(letters)\n            letters[letter] += 1\n        else\n         \
    \   letters[letter] = 1\n        end\n    end\n    return letters\nend", ' ',
  "    letters = Dict()\n    for letter in test\n        if haskey(letters, letter)\n\
    \            letters[letter] += 1\n        else\n            letters[letter] =\
    \ 1\n        end\n    end\n    return letters\nend", "    charcounts = Dict()\n\
    \    for char in test\n        if get(charcounts, char, 0) == 0\n            charcounts[char]\
    \ = 1\n        else\n            charcounts[char] += 1\n        end\n    end\n\
    \    maxcount = maximum(values(charcounts))\n    isMaxCount = (n) -> n == maxcount\n\
    \    maxletter = collect(keys(charcounts))[find(isMaxCount, charcounts)]\n   \
    \ Dict(maxletter => maxcount)\nend", "    #Define a dictionary of the most repeated\
    \ letter(s) and its count\n    dict = Dict()\n    #Define a dictionary of all\
    \ letters as keys with 0 as value\n    letters_dict = Dict()\n    for i in Int64('a'):Int64('z')\n\
    \        letters_dict[string(Char(i))] = 0\n    end\n    #Count the number of\
    \ times a letter is encountered\n    for i in 1:length(test)\n        letters_dict[string(test[i])]\
    \ += 1\n    end\n    #Compare each letter count to see if it is the maximum\n\
    \    maximum = 0\n    for (k,v) in letters_dict\n        if maximum < v\n    \
    \        maximum = v\n        end\n    end\n    #Fill the dict with the letters\
    \ having the maximum count\n    for (k,v) in letters_dict\n        if v == maximum\n\
    \            dict[k] = v\n        end\n    end\n    #Return the dict\n    return\
    \ dict\nend", "    letterDict = Dict{String, Int64}()\n    for letter in test\n\
    \        if letter in keys(letterDict)\n            letterDict[letter] += 1\n\
    \        else\n            letterDict[letter] = 1\n        end\n    end\n    letterDict\n\
    end", "    # initialize the dictionary\n    hist::Dict{String, Int64} = Dict{String,\
    \ Int64}()\n    # initialize the max_count\n    max_count::Int64 = 0\n    # iterate\
    \ over each letter in the string\n    for (i, letter) in enumerate(split(test))\n\
    \        # if the letter is already in the dictionary\n        if haskey(hist,\
    \ letter)\n            # increment the count by 1\n            hist[letter] +=\
    \ 1\n        else\n            # otherwise, add the letter with a count of 1\n\
    \            hist[letter] = 1\n        end\n        # update the max_count if\
    \ needed\n        if hist[letter] > max_count\n            max_count = hist[letter]\n\
    \        end\n    end\n    # create a dictionary to hold the final results\n \
    \   results::Dict{String, Int64} = Dict{String, Int64}()\n    # iterate over each\
    \ entry in the histogram\n    for (letter, count) in hist\n        # if the count\
    \ is equal to the max_count\n        if count == max_count\n            # add\
    \ the letter and count to the results\n            results[letter] = count\n \
    \       end\n    end\n    # return the results\n    return results\nend\nhistogram(\"\
    a b c a b\")", "\nend", "        letterDict = {}\n        letterDict = reduce(+,map(p->Dict(p=>1),\
    \ test))\n        letterDict\n        end\nhistogram(\"How much wood would a woodchuck\
    \ chuck if a woodchuck could chuck wood?\")", "    \"\"\"\n    >>> string = \"\
    apple\"\n    >>> histogram(string)\n    Dict{String,Int64} with 3 entries:\n \
    \   \"e\" => 1\n    \"a\" => 1\n    \"p\" => 2\n    \"\"\"\n    d = Dict{String,\
    \ Int64}()\n    for c in collect(test)\n        d[c] = get(d, c, 0) + 1\n    end\n\
    \    return d\nend", "    histogram = Dict{String, Int64}()\n    for c in test\n\
    \        if haskey(histogram, c)\n            histogram[c] += 1\n        else\n\
    \            histogram[c] = 1\n        end\n    end\n    # find the most repeated\
    \ letter\n    max_val = 0\n    max_key = \"\"\n    for key in keys(histogram)\n\
    \        if histogram[key] > max_val\n            max_val = histogram[key]\n \
    \           max_key = key\n        end\n    end\n    histogram[max_key] = max_val\n\
    \    return histogram\nend\nhistogram(\"hello\")\n \n \n \nhistogram(\"Julia\"\
    )\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "    words = split(test,\
    \ \" \")\n    @assert length(words) > 0", "    # initialize count\n    word_count\
    \ = Dict{String, Int64}()\n    # split the test string into words\n    word_list\
    \ = split(test)\n    # loop through each word\n    for word in word_list\n   \
    \     if word in keys(word_count)\n            word_count[word] += 1\n       \
    \ else\n            word_count[word] = 1\n        end\n    end\n    return word_count\n\
    end", "    if test == \"\"\n        return Dict{String, Int64}()\n    end\n  \
    \  word = split(test)\n    word_dict = Dict{String, Int64}()\n    for i in word\n\
    \        if haskey(word_dict, i)\n            word_dict[i] += 1\n        else\n\
    \            word_dict[i] = 1\n        end\n    end\n    max_value = 0\n    for\
    \ (key, value) in word_dict\n        if value > max_value\n            max_value\
    \ = value\n        end\n    end\n    result = Dict{String, Int64}()\n    for (key,\
    \ value) in word_dict\n        if value == max_value\n            result[key]\
    \ = value\n        end\n    end\n    return result\nend\n \n \n ", "    \n   \
    \ letters = lowercase(test)\n    hist = Dict{String, Int64}()\n    \n    for letter\
    \ in letters\n        if haskey(hist, letter)\n            hist[letter] += 1\n\
    \        else\n            hist[letter] = 1\n        end\n    end\n    \n    return\
    \ hist\nend", "    lm = Dict{String, Int64}()\n    for s in split(test, \" \"\
    )\n        if haskey(lm, s)\n            lm[s] += 1\n        else\n          \
    \  lm[s] = 1\n        end\n    end\n    max_value = maximum(values(lm))\n    letters\
    \ = keys(lm)\n    max_letters = []\n    for letter in letters\n        if lm[letter]\
    \ == max_value\n            push!(max_letters, letter)\n        end\n    end\n\
    \    return Dict(max_letters[1] => max_value)\nend", "    d = Dict()\n    for\
    \ letter in test\n        d[letter] = get(d, letter, 0) + 1\n    end\n    d\n\
    end", "    chars = OrderedDict()\n    for char in test\n        if haskey(chars,\
    \ char)\n            chars[char] += 1\n        else\n            chars[char] =\
    \ 1\n        end\n    end\n    return chars\nend", "    letters = split(test,\
    \ ' ')\n    counts = Dict()\n    for letter in letters\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    end\n    return counts\nend", "    \n    \"\
    \"\"\n    Function to read the file\n    \"\"\"", "    # Create empty dictionary\n\
    \    hist = Dict{String, Int64}()\n    for letter in test\n        # Iterate over\
    \ each letter and increment the count for that letter\n        hist[letter] =\
    \ get(hist, letter, 0) + 1\n    end\n    return hist\nend", "    # \n    # Your\
    \ code goes here.\n    # \nend", "    \n    \nend\nhistogram(\"a b c d d c c b\
    \ a\")\n \n#=> {\"c\"=>3, \"b\"=>2, \"d\"=>2, \"a\"=>2}\n\"\"\"Given an integer\
    \ n, return a string representation of the n-th prime number.", "    \n    \n\
    \    \n    \n    \n    return\nend", "    hist = Dict(s => count(s in test) for\
    \ s in split(test))\n    max_value = maximum(values(hist))\n    return filter(x\
    \ -> x[2] == max_value, hist)\nend", "\nend", "    result = Dict{String, Int64}()\n\
    \    for char in test\n        if haskey(result, char)\n            result[char]\
    \ += 1\n        else\n            result[char] = 1\n        end\n    end\n   \
    \ return result\nend", "    dict_histogram = Dict{String, Int64}()\n    for char\
    \ in test\n        dict_histogram[char] = get(dict_histogram, char, 0) + 1\n \
    \   end\n    return dict_histogram\nend", "    letters::Dict{String, Int64} =\
    \ Dict()\n    for letter in split(test, \" \")\n        letters[letter] = get(letters,\
    \ letter, 0) + 1\n    end\n    return letters\nend", "    #Create an empty dictionary\
    \ to fill in the unique letters and the count\n    hist = Dict{String, Int64}()\n\
    \    #For every letter in the string, add the letter to the dictionary as a key\
    \ and add 1 to the value\n    for letter in test\n        get!(hist, letter, 0)\n\
    \        hist[letter] += 1\n    end\n    #Define a method that returns a list\
    \ of keys in a dictionary that have the same value\n    function keys_by_value(dict::Dict{String,\
    \ Int64}, val::Int64)\n        return [k for (k,v) in dict if v == val]\n    end\n\
    \    #Define a new dictionary as the keys in the original dictionary with the\
    \ same value as the maximum value in the original dictionary\n    new_dict = Dict{String,\
    \ Int64}()\n    for letter in keys_by_value(hist, maximum(values(hist)))\n   \
    \     new_dict[letter] = hist[letter]\n    end\n    #Return the new dictionary\n\
    \    return new_dict\nend", "    # Character with most occurrence\n    # Count\
    \ of that character\n    # Return the result in a dictionary\n    letter_count\
    \ = Dict{String, Int64}()\n    for character in test\n        letter_count[character]\
    \ = get(letter_count, character, 0) + 1\n    end\n    return letter_count\nend",
  "    \"\"\"\n    >>> histogram(\"abracadabra\")\n    Dict{String,Int64} with 5 entries:\n\
    \      \"a\" => 5\n      \"c\" => 1\n      \"r\" => 2\n      \"b\" => 2\n    \
    \  \"d\" => 1\n    \"\"\"\n    letters = lowercase(test)\n    hist = Dict()\n\
    \    # Iterate through each letter, and update the count in the dictionary\n \
    \   for c in letters\n        if haskey(hist, c)\n            hist[c] += 1\n \
    \       else\n            hist[c] = 1\n        end\n    end\n    return hist\n\
    end\nhistogram(\"abracadabra\")\n \n \n ", "  \n    count = 1\n    current_letter\
    \ = test[1]\n    letter_max = current_letter\n    letter_max_cnt = 1\n    output\
    \ = Dict{String, Int64}()\n    \n    for (index, letter) in enumerate(test)\n\
    \        if letter == current_letter\n            count += 1\n        else\n \
    \           output[current_letter] = count\n            current_letter = letter\n\
    \            count = 1\n        end\n    end\n    # Last element needs to be included\n\
    \    output[current_letter] = count\n    \n    for (letter, letter_cnt) in output\n\
    \        if letter_cnt > letter_max_cnt\n            letter_max = letter\n   \
    \         letter_max_cnt = letter_cnt\n        end\n    end\n    letter_max_vec\
    \ = []\n    for (letter, letter_cnt) in output\n        if letter_cnt == letter_max_cnt\n\
    \            push!(letter_max_vec, letter)\n        end\n    end\n    return (Dict(letter_max_vec[1]\
    \ => letter_max_cnt))\nend", "    counts = Dict()\n    for char in test\n    \
    \    if char in keys(counts)\n            counts[char] += 1\n        else\n  \
    \          counts[char] = 1\n        end\n    end\n    return counts\nend", " \
    \   #Create a empty dictionary\n    hist = Dict{String, Int64}()\n    for letter\
    \ in letters(test)\n        if iskey(hist, letter)\n            hist[letter] +=\
    \ 1\n        else\n            hist[letter] = 1\n        end\n    end\n    # Since\
    \ test1 is now a dictionary of letters with the occurence count, we need to find\
    \ the letter with the most repetitions\n    sorted_hist = sort(collect(hist),\
    \ by=x->x[2], rev=true)\n    letter_with_most_repetitions = []\n    for (letter,\
    \ count) in sorted_hist\n        if count == sorted_hist[1][2]\n            push!(letter_with_most_repetitions,\
    \ (letter, count))\n        end\n    end\n    println(hist)\n    println(sorted_hist)\n\
    \    return letter_with_most_repetitions\nend", "    letters = split(test, \"\
    \ \")\n    counts = countmap(letters)\n    max(counts)\nend", "    testDict =\
    \ Dict{String, Int64}()\n    for i in test\n        if haskey(testDict, i)\n \
    \           testDict[i] += 1\n        else\n            testDict[i] = 1\n    \
    \    end\n    end\n    return testDict\nend\n    \n    ", "    t = length(test)\n\
    \    count = 0\n    h = Dict{String, Int64}()\n    for i = 1:t\n        if haskey(h,\
    \ test[i])\n            h[test[i]] += 1\n        else\n            h[test[i]]\
    \ = 1\n        end\n    end\n    return h\nend", "    length = test |> String\
    \ |> count(#)\n    text = String[]\n    for i in 1:length\n        push!(text,\
    \ \"\")\n    end\n    idx = 1\n    for s in test\n        text[idx] = s\n    \
    \    idx += 1\n    end\n    #println(text)\n    count = [0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for i in 1:length\n\
    \        for j in 1:26\n            if text[i] == Char(j + 96)\n             \
    \   count[j] += 1\n            end\n        end\n    end\n    #println(count)\n\
    \    maxval = 0\n    maxindex = 0\n    for i in 1:26\n        if count[i] > maxval\n\
    \            maxval = count[i]\n            maxindex = i\n        end\n    end\n\
    \    #println(maxval)\n    #println(maxindex)\n    d = Dict{String, Int64}()\n\
    \    for i in 1:26\n        if count[i] == maxval\n            d[Char(i + 96)]\
    \ = maxval\n        end\n    end\n    return d\nend", "    \"\"\"\n    This function\
    \ takes a string and transforms it into a dictionary that\n    counts the number\
    \ of times each letter appears in the string.\n    \"\"\"\n    my_dict = Dict()\n\
    \    for letter in test\n        if letter in keys(my_dict)\n            my_dict[letter]\
    \ += 1\n        else\n            my_dict[letter] = 1\n        end\n    end\n\
    \    return my_dict\nend", "    letters = Dict()\n    for l in test\n        if\
    \ haskey(letters, l)\n            letters[l] += 1\n        else\n            letters[l]\
    \ = 1\n        end\n    end\n    return letters\nend", "    hist_dictionary =\
    \ Dict() \n    for x in test \n        if x in keys(hist_dictionary) \n      \
    \      hist_dictionary[x] += 1 \n        else \n            hist_dictionary[x]\
    \ = 1 \n        end \n    end \n    return hist_dictionary \nend ", "    # Count\
    \ the number of occurrences of each character in the string test\n    hist = Dict()\n\
    \    for i in test\n        hist[i] = get(hist, i, 0) + 1\n    end\n    \n   \
    \ # Create a dictionary containing the characters with the highest occurrences\n\
    \    hist2 = Dict()\n    maximum = maximum(collect(values(hist)))\n    for (k,\
    \ v) in hist\n        if v == maximum\n            hist2[k] = v\n        end\n\
    \    end\n    return hist2\nend", "    #Define\n    count_dict = Dict{String,\
    \ Int64}()\n    #Tuple with counts\n    tuple_counts = countmap(countmap(test))\n\
    \    #Fill dictionary\n    for i = 1:length(tuple_counts)\n        count_dict[tuple_counts[i][1]]\
    \ = tuple_counts[i][2]\n    end\n    #Array with maximum repetitions\n    max_array\
    \ = [i for i in keys(count_dict) if count_dict[i] == maximum(values(count_dict))]\n\
    \    return max_array\nend", "    d = Dict{String, Int64}()\n    for i in test\n\
    \        d[i] = get(d, i, 0) + 1\n    end\n    return d\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
