language: jl
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n\
    \    index = [false for i in 1:length(arr)]\n    for i in 1:length(arr)\n    \
    \    if arr[i] < 1 || arr[i] > 9\n            index[i] = true\n        end\n \
    \   end\n    arr = deleteat!(arr, index)\n    arr = reverse(arr)\n    arr = map(Int,arr)\n\
    \    arr = map(x -> x -> \"One\" ? x -> \"Two\" ? x -> \"Three\" ? x -> \"Four\"\
    \ ? x -> \"Five\" ? x -> \"Six\" ? x -> \"Seven\" ? x -> \"Eight\" ? x -> \"Nine\"\
    \ ? x, arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgw_0q_lg.jl:27\nin expression starting at\
    \ /tmp/tmpgw_0q_lg.jl:27\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    t= sort(arr)\n\
    \    T=[]\n    for i in t\n        push!(T, string(i))\n    end\n    T=reverse(T)\n\
    \    for j in 1:length(T)\n        if T[j]==\"1\"\n            T[j]=\"One\"\n\
    \        elseif T[j]==\"2\"\n            T[j]=\"Two\"\n        elseif T[j]==\"\
    3\"\n            T[j]=\"Three\"\n        elseif T[j]==\"4\"\n            T[j]=\"\
    Four\"\n        elseif T[j]==\"5\"\n            T[j]=\"Five\"\n        elseif\
    \ T[j]==\"6\"\n            T[j]=\"Six\"\n        elseif T[j]==\"7\"\n        \
    \    T[j]=\"Seven\"\n        elseif T[j]==\"8\"\n            T[j]=\"Eight\"\n\
    \        elseif T[j]==\"9\"\n            T[j]=\"Nine\"\n        end\n    end\n\
    \    return T\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8fnry3ns.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmp8fnry3ns.jl:53\n  Expression: candidate([1,\
    \ -1, 55]) == [\"One\"]\n   Evaluated: [\"55\", \"One\", \"-1\"] == [\"One\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8fnry3ns.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8fnry3ns.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp8fnry3ns.jl:54\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Three\", \"Two\", \"One\", \"\
    -1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8fnry3ns.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8fnry3ns.jl:50\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822280
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    return sort([string(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\")[x] for x in arr[arr .\u2208 (1:9)]])\nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_402rts3.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp_402rts3.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 8\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp_402rts3.jl:17\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp_402rts3.jl:24 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_402rts3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_402rts3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp_402rts3.jl:17\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp_402rts3.jl:25 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n  "
  timestamp: 1659822281
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr)\n\
    \    reversed_arr = reverse(sorted_arr)\n    numbers = [ reverse(sorted_arr)[i]\
    \ for i in 1:length(sorted_arr) ]\n    words = []\n    for i in 1:length(sorted_arr)\n\
    \        if numbers[i] == 1\n            push!(words, \"One\")\n        elseif\
    \ numbers[i] == 2\n            push!(words, \"Two\")\n        elseif numbers[i]\
    \ == 3\n            push!(words, \"Three\")\n        elseif numbers[i] == 4\n\
    \            push!(words, \"Four\")\n        elseif numbers[i] == 5\n        \
    \    push!(words, \"Five\")\n        elseif numbers[i] == 6\n            push!(words,\
    \ \"Six\")\n        elseif numbers[i] == 7\n            push!(words, \"Seven\"\
    )\n        elseif numbers[i] == 8\n            push!(words, \"Eight\")\n     \
    \   elseif numbers[i] == 9\n            push!(words, \"Nine\")\n        end\n\
    \    end\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822279
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given\
    \ an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    \    reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jo_41p7.jl:1\nin expression starting at /tmp/tmp7jo_41p7.jl:1\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n   \n    if length(arr)\
    \ == 0\n        return []\n    end\n    new_arr = [0 for i in 1:length(arr)]\n\
    \    j = 1\n    for i in 1:length(arr)\n        if (arr[i] >= 1) && (arr[i] <=\
    \ 9)\n            new_arr[j] = arr[i]\n            j += 1\n        end\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1urecq0q.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1urecq0q.jl:1\n\
    in expression starting at /tmp/tmp1urecq0q.jl:1\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n        new_arr = []\n\
    \        for i in arr\n            if i>=1 && i<=9\n                push!(new_arr,\
    \ i)\n            end\n        end\n        new_arr = sort(new_arr)\n        new_arr\
    \ = reverse(new_arr)\n        results = []\n        for i in new_arr\n       \
    \     if i == 1\n                push!(results, \"One\")\n            elseif i\
    \ == 2\n                push!(results, \"Two\")\n            elseif i == 3\n \
    \               push!(results, \"Three\")\n            elseif i == 4\n       \
    \         push!(results, \"Four\")\n            elseif i == 5\n              \
    \  push!(results, \"Five\")\n            elseif i == 6\n                push!(results,\
    \ \"Six\")\n            elseif i == 7\n                push!(results, \"Seven\"\
    )\n            elseif i == 8\n                push!(results, \"Eight\")\n    \
    \        elseif i == 9\n                push!(results, \"Nine\")\n           \
    \ end\n        end\n        return results\n    end\n    \"\"\"\n    Given an\
    \ array of integers, sort the integers that are between 1 and 9 inclusive,\n \
    \   reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp718qixa0.jl:49\nin expression starting at\
    \ /tmp/tmp718qixa0.jl:49\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzyrte89w.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpzyrte89w.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzyrte89w.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzyrte89w.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzyrte89w.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzyrte89w.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzyrte89w.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822282
- exit_code: -1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted = sort(arr)\n\
    \    reversed = reverse(sorted)\n    one = filter(x -> x == 1, reversed)\n   \
    \ two = filter(x -> x == 2, reversed)\n    three = filter(x -> x == 3, reversed)\n\
    \    four = filter(x -> x == 4, reversed)\n    five = filter(x -> x == 5, reversed)\n\
    \    six = filter(x -> x == 6, reversed)\n    seven = filter(x -> x == 7, reversed)\n\
    \    eight = filter(x -> x == 8, reversed)\n    nine = filter(x -> x == 9, reversed)\n\
    \    result = []\n    push!(result, \"One\" for x in one)\n    push!(result, \"\
    Two\" for x in two)\n    push!(result, \"Three\" for x in three)\n    push!(result,\
    \ \"Four\" for x in four)\n    push!(result, \"Five\" for x in five)\n    push!(result,\
    \ \"Six\" for x in six)\n    push!(result, \"Seven\" for x in seven)\n    push!(result,\
    \ \"Eight\" for x in eight)\n    push!(result, \"Nine\" for x in nine)\n    return\
    \ result\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpkrw6c_3s.jl:46\n  Test threw
    exception\n  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == ["Eight", "Five",
    "Four", "Three", "Two", "Two", "One", "One"]\n  MethodError: Cannot `convert`
    an object of type Base.Generator{Vector{Int64}, var"#10#28"} to an object of type
    String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)
    at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n    [1]
    setindex!(A::Vector{String}, x::Base.Generator{Vector{Int64}, var"#10#28"}, i1::Int64)\n      @
    Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,
    src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n    [3]
    unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n      @
    ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n    [6]
    copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104
    [inlined]\n    [8] Vector{String}(x::Vector{Any})\n      @ Base ./array.jl:563\n    [9]
    convert\n      @ ./array.jl:554 [inlined]\n   [10] by_length(arr::Vector{Int64})\n      @
    Main /tmp/tmpkrw6c_3s.jl:38\n   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [12] macro expansion\n      @ /tmp/tmpkrw6c_3s.jl:46 [inlined]\n   [13]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [14] top-level scope\n      @ /tmp/tmpkrw6c_3s.jl:45\ntest set:
    Error During Test at /tmp/tmpkrw6c_3s.jl:47\n  Test threw exception\n  Expression:
    candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`
    an object of type Base.Generator{Vector{In'
  timestamp: 1659822283
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n  if arr == []\n  \
    \  return []\n  end\n  sorted = sort(arr)\n  reverse_sorted = reverse(sorted)\n\
    \  stringed = []\n  for i in reverse_sorted\n    if i > 9\n      continue\n  \
    \  end\n    if i == 1\n      push!(stringed, \"One\")\n    elseif i == 2\n   \
    \   push!(stringed, \"Two\")\n    elseif i == 3\n      push!(stringed, \"Three\"\
    )\n    elseif i == 4\n      push!(stringed, \"Four\")\n    elseif i == 5\n   \
    \   push!(stringed, \"Five\")\n    elseif i == 6\n      push!(stringed, \"Six\"\
    )\n    elseif i == 7\n      push!(stringed, \"Seven\")\n    elseif i == 8\n  \
    \    push!(stringed, \"Eight\")\n    elseif i == 9\n      push!(stringed, \"Nine\"\
    )\n    end\n  end\n  return stringed\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822279
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    number_names =\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    include(x -> (1 <= x <= 9), arr)\n    arr = sort(arr)\n    reverse!(arr)\n\
    \    arr = number_names[arr]\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpyzi7k9s_.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpyzi7k9s_.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching include(::var\"#1#2\", ::Vector{Int64})\n  Closest candidates are:\n\
    \    include(::Function, !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/client.jl:448\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpyzi7k9s_.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyzi7k9s_.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyzi7k9s_.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyzi7k9s_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching include(::var\"#1#2\", ::Vector{Int64})\n  Closest candidates are:\n\
    \    include(::Function, !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/client.jl:448\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpyzi7k9s_.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyzi7k9s_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyzi7k9s_.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyzi7k9s_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching include(::var\"\
    #1#2\", ::Vector{Int64})\n  Closest candidates are:\n    include(::Function, !Matched::AbstractString)\
    \ at ~/.conda/envs/polyglot/share/julia/base/client.jl:448\n  Stacktrace:\n  \
    \ [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpyzi7k9s_.jl:18\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyg"
  timestamp: 1659822282
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # TODO: complete\
    \ this function\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n    end\n# Test cases:\n# by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv9q5op38.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpv9q5op38.jl:28\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv9q5op38.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv9q5op38.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv9q5op38.jl:29\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv9q5op38.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv9q5op38.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv9q5op38.jl:30\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv9q5op38.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpv9q5op38.jl:27\ntest set: Test Failed at /tmp/tmpv9q5op38.jl:31\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inl"
  timestamp: 1659822281
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return []\n    end\n    if any(x -> x < 1 || x > 9, arr)\n   \
    \     return by_length(filter(x -> x > 0 && x < 10, arr))\n    end\n    return\
    \ reverse(sort(map(x -> number_to_string(x), arr)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppfyf042b.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmppfyf042b.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_to_string\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#3#6\")(x::Int64)\n      @ Main\
    \ /tmp/tmppfyf042b.jl:23\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#3#6\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmppfyf042b.jl:23\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmppfyf042b.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmppfyf042b.jl:29\ntest set:\
    \ Error During Test at /tmp/tmppfyf042b.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_to_string not defined\n\
    \  Stacktrace:\n    [1] (::var\"#3#6\")(x::Int64)\n      @ Main /tmp/tmppfyf042b.jl:23\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#3#6\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmppfyf042b.jl:23\n\
    \    [7] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmppfyf042b.jl:21\n\
    \    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmppfyf042b.jl:32 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659822281
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprgugjden.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmprgugjden.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprgugjden.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgugjden.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprgugjden.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprgugjden.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprgugjden.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822282
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr)\n\
    \        return []\n    end\n    new_arr = arr[(1:9).(arr)]\n    final_arr = reverse(sort(new_arr))\n\
    \    return map(x -> symbol(string(x)), final_arr)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpybyivvi4.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpybyivvi4.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: objects\
    \ of type UnitRange{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpybyivvi4.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpybyivvi4.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpybyivvi4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpybyivvi4.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: objects of type UnitRange{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [3] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @ ./broadcast.jl:899\
    \ [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [6]\
    \ by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpybyivvi4.jl:20\n    [7]\
    \ macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpybyivvi4.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpybyivvi4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpybyivvi4.jl:3"
  timestamp: 1659822282
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    new_list = []\n\
    \    for n in arr\n        if n in 1:9\n            push!(new_list, n)\n     \
    \   end\n    end\n    sort!(new_list)\n    reverse!(new_list)\n    number_list\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    final_list = []\n    for n in new_list\n        push!(final_list,\
    \ number_list[n])\n    end\n    return final_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822279
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = reverse(sort(filter(x\
    \ -> (1 <= x <= 9), arr)))\n    return [ num2word(arr[i]) for i in 1:length(arr)\
    \ ]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpo3936q5w.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpo3936q5w.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2word\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\"{Vector{Int64}})(i::Int64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#2#4\"{Vector{Int64}}})\n\
    \     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpo3936q5w.jl:18\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpo3936q5w.jl:25 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpo3936q5w.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpo3936q5w.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2word not defined\n\
    \  Stacktrace:\n   [1] (::var\"#2#4\"{Vector{Int64}})(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#2#4\"{Vector{Int64}}})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpo3936q5w.jl:18\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpo3936q5w.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpo3936q5w.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpo3936q5w.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2word not defined\n  Stacktrace:\n   [1] (::var\"#2#4\"{Vector{Int64}})(i::Int64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{UnitRange{Int64}, var"
  timestamp: 1659822281
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    result = deepcopy(arr)\n\
    \    deleteat!(result, findall(x -> x < 1 || x > 9, result))\n    sort!(result)\n\
    \    reverse!(result)\n    for i in 1:length(result)\n        result[i] = change(result[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp5n8u_opz.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp5n8u_opz.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: change\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5n8u_opz.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5n8u_opz.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5n8u_opz.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp5n8u_opz.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: change not defined\n \
    \ Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5n8u_opz.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5n8u_opz.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5n8u_opz.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp5n8u_opz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ change not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n  \
    \   @ Main /tmp/tmp5n8u_opz.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5n8u_opz.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5n8u_opz.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp5n8u_opz.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: change\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{In"
  timestamp: 1659822281
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    return reverse([\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][arr[1:1:end]])\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmph0c7836v.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmph0c7836v.jl:24\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Three\", \"Two\", \"Eight\", \"\
    Five\", \"Four\", \"One\", \"One\", \"Two\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph0c7836v.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmph0c7836v.jl:23\ntest set: Error During Test\
    \ at /tmp/tmph0c7836v.jl:26\n  Test threw exception\n  Expression: candidate([1,\
    \ -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element Vector{String}\
    \ at index [[1, -1, 55]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{String},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmph0c7836v.jl:17\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmph0c7836v.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmph0c7836v.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph0c7836v.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [[1, -1, 3, 2]]\n  Stacktrace:\n\
    \   [1] throw_boundserror(A::Vector{String}, I::Tuple{Vector{Int64}})\n     @\
    \ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n  \
    \ [4] getindex\n     @ ./abstractarray.jl:12"
  timestamp: 1659822282
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n        sorted = sort(arr)\n\
    \        reversed = reverse(sorted)\n        digit = []\n        for item in reversed\n\
    \            if item < 1 || item > 9\n                continue\n            end\n\
    \            if item == 1\n                push!(digit, \"One\")\n           \
    \ elseif item == 2\n                push!(digit, \"Two\")\n            elseif\
    \ item == 3\n                push!(digit, \"Three\")\n            elseif item\
    \ == 4\n                push!(digit, \"Four\")\n            elseif item == 5\n\
    \                push!(digit, \"Five\")\n            elseif item == 6\n      \
    \          push!(digit, \"Six\")\n            elseif item == 7\n             \
    \   push!(digit, \"Seven\")\n            elseif item == 8\n                push!(digit,\
    \ \"Eight\")\n            elseif item == 9\n                push!(digit, \"Nine\"\
    )\n            end\n        end\n        return digit\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822279
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    if\
    \ the array has any strange number ignore it\n    \"\"\"\n    arr_new = []\n \
    \   for x in arr\n        if x in 1:9\n            push!(arr_new, x)\n       \
    \ end\n    end\n    \n    \"\"\"\n    if the array is empty, return an empty array\n\
    \    \"\"\"\n    if isempty(arr_new)\n        return arr_new\n    end\n    \n\
    \    \"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    sort!(arr_new)\n\
    \    reverse!(arr_new)\n    for i in 1:length(arr_new)\n        if arr_new[i]\
    \ == 1\n            arr_new[i] = \"One\"\n        elseif arr_new[i] == 2\n   \
    \         arr_new[i] = \"Two\"\n        elseif arr_new[i] == 3\n            arr_new[i]\
    \ = \"Three\"\n        elseif arr_new[i] == 4\n            arr_new[i] = \"Four\"\
    \n        elseif arr_new[i] == 5\n            arr_new[i] = \"Five\"\n        elseif\
    \ arr_new[i] == 6\n            arr_new[i] = \"Six\"\n        elseif arr_new[i]\
    \ == 7\n            arr_new[i] = \"Seven\"\n        elseif arr_new[i] == 8\n \
    \           arr_new[i] = \"Eight\"\n        elseif arr_new[i] == 9\n         \
    \   arr_new[i] = \"Nine\"\n        end\n    end\n    return arr_new\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822279
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # Array for storing\
    \ the numbers in range 1-9\n    a = []\n    # Array for storing the numbers in\
    \ the range 1-9 in string format\n    b = []\n    # For loop to sort the numbers\
    \ in the range 1-9\n    for i in arr\n        if (1 <= i <= 9)\n            push!(a,\
    \ i)\n        end\n    end\n    # Sorting the obtained vector\n    a = sort(a)\n\
    \    # Reversing the obtained vector\n    a = reverse(a)\n    # For loop to convert\
    \ the numbers in the range 1-9 in string format\n    for i in a\n        if (i\
    \ == 1)\n            push!(b, \"One\")\n        elseif (i == 2)\n            push!(b,\
    \ \"Two\")\n        elseif (i == 3)\n            push!(b, \"Three\")\n       \
    \ elseif (i == 4)\n            push!(b, \"Four\")\n        elseif (i == 5)\n \
    \           push!(b, \"Five\")\n        elseif (i == 6)\n            push!(b,\
    \ \"Six\")\n        elseif (i == 7)\n            push!(b, \"Seven\")\n       \
    \ elseif (i == 8)\n            push!(b, \"Eight\")\n        elseif (i == 9)\n\
    \            push!(b, \"Nine\")\n        end\n    end\n    return b\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822279
- exit_code: -1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # Step 1\n    sort!(arr)\n\
    \    # Step 2\n    reverse!(arr)\n    # Step 3\n    dic = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for\
    \ i in eachindex(arr)\n        arr[i] = dic[arr[i]-1]\n    end\n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7h6g5zri.jl:33\n  Test threw
    exception\n  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == ["Eight", "Five",
    "Four", "Three", "Two", "Two", "One", "One"]\n  MethodError: Cannot `convert`
    an object of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    setindex!(A::Vector{Int64}, x::String, i1::Int64)\n     @ Base ./array.jl:903\n   [2]
    by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp7h6g5zri.jl:24\n   [3] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7h6g5zri.jl:33 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7h6g5zri.jl:32\ntest set: Error
    During Test at /tmp/tmp7h6g5zri.jl:35\n  Test threw exception\n  Expression: candidate([1,
    -1, 55]) == ["One"]\n  BoundsError: attempt to access 9-element Vector{String}
    at index [54]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp7h6g5zri.jl:24\n   [3] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7h6g5zri.jl:35 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7h6g5zri.jl:32\ntest set: Error
    During Test at /tmp/tmp7h6g5zri.jl:36\n  Test threw exception\n  Expression: candidate([1,
    -1, 3, 2]) == ["Three", "Two", "One"]\n  MethodError: Cannot `convert` an object
    of type St'
  timestamp: 1659822283
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n \n    new_array =\
    \ []\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp03zv8yw7.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp03zv8yw7.jl:1\n\
    in expression starting at /tmp/tmp03zv8yw7.jl:1\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sort(reverse(arr))\n\
    \    result = []\n    for i in arr\n        if i == 1\n            push!(result,\
    \ \"One\")\n        elseif i == 2\n            push!(result, \"Two\")\n      \
    \  elseif i == 3\n            push!(result, \"Three\")\n        elseif i == 4\n\
    \            push!(result, \"Four\")\n        elseif i == 5\n            push!(result,\
    \ \"Five\")\n        elseif i == 6\n            push!(result, \"Six\")\n     \
    \   elseif i == 7\n            push!(result, \"Seven\")\n        elseif i == 8\n\
    \            push!(result, \"Eight\")\n        elseif i == 9\n            push!(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend\nby_length([1, -1 ,\
    \ 55])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzpcg_5af.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpzpcg_5af.jl:48\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzpcg_5af.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzpcg_5af.jl:47\ntest set: Test Failed at /tmp/tmpzpcg_5af.jl:51\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Three\", \"Two\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzpcg_5af.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzpcg_5af.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpzpcg_5af.jl:52\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzpcg_5af.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzpcg_5af.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822281
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr_digits = []\n\
    \    for i in arr\n        if 1 <= i <= 9\n            push!(arr_digits, i)\n\
    \        end\n    end\n    arr_digits = sort(arr_digits)\n    arr_digits = reverse(arr_digits)\n\
    \    for i in 1:length(arr_digits)\n        if arr_digits[i] == 1\n          \
    \  arr_digits[i] = \"One\"\n        elseif arr_digits[i] == 2\n            arr_digits[i]\
    \ = \"Two\"\n        elseif arr_digits[i] == 3\n            arr_digits[i] = \"\
    Three\"\n        elseif arr_digits[i] == 4\n            arr_digits[i] = \"Four\"\
    \n        elseif arr_digits[i] == 5\n            arr_digits[i] = \"Five\"\n  \
    \      elseif arr_digits[i] == 6\n            arr_digits[i] = \"Six\"\n      \
    \  elseif arr_digits[i] == 7\n            arr_digits[i] = \"Seven\"\n        elseif\
    \ arr_digits[i] == 8\n            arr_digits[i] = \"Eight\"\n        elseif arr_digits[i]\
    \ == 9\n            arr_digits[i] = \"Nine\"\n        end\n    end\n    return\
    \ arr_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822279
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr_sorted\
    \ = sort(arr) \n    arr_sorted = filter(i -> i >= 1 && i <= 9, arr_sorted)\n \
    \   arr_sorted = reverse(arr_sorted)\n    \n    # create a dictionary of the numbers\n\
    \    num_dict = Dict()\n    for i = 1:9\n        num_dict[i] = join([\"\"], split(string(i),\
    \ \"\") )\n    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp74nif2jb.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp74nif2jb.jl:1\n\
    in expression starting at /tmp/tmp74nif2jb.jl:1\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    ordre = sort(arr,\
    \ rev=true)\n    nombres = filter(x -> x in 1:9, ordre)\n    return map(x -> string(Nombres[x]),\
    \ nombres)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsr5fsnif.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpsr5fsnif.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: Nombres\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmpsr5fsnif.jl:19\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpsr5fsnif.jl:19\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpsr5fsnif.jl:26 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpsr5fsnif.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpsr5fsnif.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: Nombres not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmpsr5fsnif.jl:19\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpsr5fsnif.jl:19\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpsr5fsnif.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpsr5fsnif.jl:25\ntest set: "
  timestamp: 1659822282
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr_aux=sort(arr[arr.>0])\
    \ #filter only positive values and sort it\n    arr_aux[end:-1:1]=arr_aux[end:-1:1]\
    \ #reverse values\n    return map(x->string(x), arr_aux) #convert each value to\
    \ string\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6f7pj6ez.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp6f7pj6ez.jl:26\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"1\", \"1\", \"2\", \"2\", \"3\"\
    , \"4\", \"5\", \"8\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6f7pj6ez.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6f7pj6ez.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6f7pj6ez.jl:28\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\", \"55\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6f7pj6ez.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6f7pj6ez.jl:25\ntest set: Test Failed at /tmp/tmp6f7pj6ez.jl:29\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"1\", \"2\", \"3\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6f7pj6ez.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6f7pj6ez.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6f7pj6ez.jl:30\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"4\", \"8\", \"9\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6f7pj6ez.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n"
  timestamp: 1659822282
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # sort the array\n\
    \    sorted = sort(arr)\n    # only keep numbers between 1 and 9 inclusive\n \
    \   filtered = filter(x -> 1 <= x <= 9, sorted)\n    # reverse the array\n   \
    \ reversed = reverse(filtered)\n    # replace digits by their names\n    names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    to_names = map(x -> names[x], reversed)\n    return to_names\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822280
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    # First we\
    \ sort the vector, then we reverse it, then we replace the numbers by their string\n\
    \    # version, then we filter out numbers that were ignored.\n    sorted_arr\
    \ = sort(arr)\n    reversed_arr = reverse(sorted_arr)\n    filter(n -> n in 1:9,\
    \ reversed_arr)\n    \n    # In the end we call the function process_vector that\
    \ maps the numbers by their string version.\n    return process_vector(filter(n\
    \ -> n in 1:9, reversed_arr))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpk0zpzos5.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpk0zpzos5.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: process_vector\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk0zpzos5.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk0zpzos5.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk0zpzos5.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpk0zpzos5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: process_vector\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk0zpzos5.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk0zpzos5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk0zpzos5.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpk0zpzos5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: process_vector not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpk0zpzos5.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk0zpzos5.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk0zpzos5.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpk0zpzos5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ process_vector not defined\n  Stacktrace"
  timestamp: 1659822283
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # sort and reverse\
    \ integers between 1 and 9 inclusive\n    sort(filter(e -> isbetween(e, 1, 9),\
    \ arr), rev=true)\n    # replace each digit by its corresponding name from\n \
    \   # \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"\n    map(e -> @sprintf(\"%s\", OneTwoThreeFourFiveSixSevenEightNine(e)),\
    \ sort(filter(e -> isbetween(e, 1, 9), arr), rev=true))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpcpco9k8_.jl:1\nin\
    \ expression starting at /tmp/tmpcpco9k8_.jl:1\n"
  stdout: ''
  timestamp: 1659822282
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n  if isempty(arr)\n\
    \    return []\n  end\n  int_names = [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  new_arr = []\n  for i in arr\n\
    \    if i>=1 && i<=9\n      push!(new_arr,i)\n    end\n  end\n  sort!(new_arr)\n\
    \  reverse!(new_arr)\n  for i in new_arr\n    i = int_names[i]\n  end\n  return\
    \ new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8a7jvvam.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp8a7jvvam.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp8a7jvvam.jl:32\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp8a7jvvam.jl:39 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp8a7jvvam.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp8a7jvvam.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essential"
  timestamp: 1659822284
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    # filter\
    \ only valid integers \n    v = filter(x -> (x >= 1 && x <= 9), arr)\n    \n \
    \   # sort\n    sort!(v)\n    \n    # reverse\n    reverse!(v)\n    \n    # map\n\
    \    w = map(x -> string(Int, x), v)\n    \n    return w\n    \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbvoctb8.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpwbvoctb8.jl:38\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Int648\", \"Int645\", \"Int644\"\
    , \"Int643\", \"Int642\", \"Int642\", \"Int641\", \"Int641\"] == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbvoctb8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbvoctb8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpwbvoctb8.jl:40\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"Int641\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwbvoctb8.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwbvoctb8.jl:37\ntest set: Test Failed at /tmp/tmpwbvoctb8.jl:41\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"Int643\", \"Int642\", \"Int641\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbvoctb8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbvoctb8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpwbvoctb8.jl:42\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Int649\", \"Int648\", \"Int644\"\
    ] == [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwbvoctb8.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/ju"
  timestamp: 1659822283
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n     if length(arr)\
    \ == 0\n        println(\"Vector is empty\")\n        return []\n    end\n   \
    \ if isempty(arr)\n        println(\"Vector is empty\")\n        return []\n \
    \   end\n    \n    \n    \n    \n     new_arr = []\n        for num in arr\n \
    \           if num in 1:9\n                push!(new_arr, num)\n            end\n\
    \        end\n    sort!(new_arr)\n    reverse!(new_arr)\n    \n    string_arr\
    \ = []\n    \n    for num in new_arr\n        if num == 1\n            push!(string_arr,\
    \ \"One\")\n        elseif num == 2\n            push!(string_arr, \"Two\")\n\
    \        elseif num == 3\n            push!(string_arr, \"Three\")\n        elseif\
    \ num == 4\n            push!(string_arr, \"Four\")\n        elseif num == 5\n\
    \            push!(string_arr, \"Five\")\n        elseif num == 6\n          \
    \  push!(string_arr, \"Six\")\n        elseif num == 7\n            push!(string_arr,\
    \ \"Seven\")\n        elseif num == 8\n            push!(string_arr, \"Eight\"\
    )\n        elseif num == 9\n            push!(string_arr, \"Nine\")\n        end\n\
    \    end\n    return string_arr\n    \n    \n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Vector is empty

    Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822281
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(filter(x\
    \ -> x>0 && x<10, arr))\n    arr = reverse(arr)\n    arr = map(x -> string(x),\
    \ arr)\n    arr = replace.(arr, Dict(\"1\" => \"One\", \"2\" => \"Two\", \"3\"\
    \ => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\", \"6\" => \"Six\", \"7\"\
    \ => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\"))\n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppyedt59s.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmppyedt59s.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  ArgumentError: broadcasting\
    \ over dictionaries and `NamedTuple`s is reserved\n  Stacktrace:\n   [1] broadcastable(#unused#::Dict{String,\
    \ String})\n     @ Base.Broadcast ./broadcast.jl:705\n   [2] broadcasted\n   \
    \  @ ./broadcast.jl:1301 [inlined]\n   [3] by_length(arr::Vector{Int64})\n   \
    \  @ Main /tmp/tmppyedt59s.jl:20\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppyedt59s.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppyedt59s.jl:27\ntest set:\
    \ Error During Test at /tmp/tmppyedt59s.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  ArgumentError: broadcasting\
    \ over dictionaries and `NamedTuple`s is reserved\n  Stacktrace:\n   [1] broadcastable(#unused#::Dict{String,\
    \ String})\n     @ Base.Broadcast ./broadcast.jl:705\n   [2] broadcasted\n   \
    \  @ ./broadcast.jl:1301 [inlined]\n   [3] by_length(arr::Vector{Int64})\n   \
    \  @ Main /tmp/tmppyedt59s.jl:20\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppyedt59s.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppyedt59s.jl:27\ntest set:\
    \ Error During Test at /tmp/tmppyedt59s.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  ArgumentError: broadcasting over dictionaries\
    \ and `NamedTuple`s is reserved\n  Stacktrace:\n   [1] broadcastable(#unused#::Dict{String,\
    \ String})\n     @ Base.Broadcast ./broadcast.jl:705\n   [2] broadcasted\n   \
    \  @ ./broadcast.jl:1301 [inlined]\n   [3] by_length(arr::Vector{Int64})\n   \
    \  @ Main /tm"
  timestamp: 1659822284
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    given\
    \ an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    \    reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    sorted_arr = sort([el for el in\
    \ arr if el in 1:9])\n    reversed_arr = reverse(sorted_arr)\n    output = map(e->\
    \ Dict(1=>\"One\", 2=>\"Two\", 3=>\"Three\", 4=>\"Four\", 5=>\"Five\", 6=>\"Six\"\
    , 7=>\"Seven\", 8=>\"Eight\", 9=>\"Nine\")[e], reversed_arr)\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # YOUR CODE HERE\n\
    \    # julia> by_length([1, -1 , 55]) \n    # ['One']\n    sorted_arr = sort(arr,\
    \ rev=true)\n    number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for i in sorted_arr\n\
    \        if i > 0 && i < 10\n            push!(result, number_names[i])\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822281
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)==0\n\
    \        return []\n    end\n    if !(all( x->(x>=1 && x<=9), arr))\n        return\
    \ filter(x->(x>=1 && x<=9), arr)\n    end\n    return reverse(sort(filter(x->(x>=1\
    \ && x<=9), arr)))\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpi9r5fxcf.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpi9r5fxcf.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpi9r5fxcf.jl:23\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpi9r5fxcf.jl:30 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpi9r5fxcf.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpi9r5fxcf.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essen"
  timestamp: 1659822285
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #filter out any\
    \ numbers not in the 1 to 9 inclusive range\n    arr = filter(x -> 1 <= x <= 9,\
    \ arr)\n    #sort the filtered array\n    sort!(arr)\n    #reverse the sorted\
    \ array\n    reverse!(arr)\n    #create a vector of the names\n    name = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"]\n    #map the numbers to their corresponding names\n    return map(x\
    \ -> name[x], arr)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822282
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    ret_arr = []\n\
    \    arr = sort(arr)\n    for i in arr\n        if (i > 0 && i < 10)\n       \
    \     if i == 1\n                push!(ret_arr, \"One\")\n            elseif i\
    \ == 2\n                push!(ret_arr, \"Two\")\n            elseif i == 3\n \
    \               push!(ret_arr, \"Three\")\n            elseif i == 4\n       \
    \         push!(ret_arr, \"Four\")\n            elseif i == 5\n              \
    \  push!(ret_arr, \"Five\")\n            elseif i == 6\n                push!(ret_arr,\
    \ \"Six\")\n            elseif i == 7\n                push!(ret_arr, \"Seven\"\
    )\n            elseif i == 8\n                push!(ret_arr, \"Eight\")\n    \
    \        elseif i == 9\n                push!(ret_arr, \"Nine\")\n           \
    \ end\n        end\n    end\n    return ret_arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi8eyc93w.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpi8eyc93w.jl:49\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi8eyc93w.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi8eyc93w.jl:48\ntest set: Test Failed at /tmp/tmpi8eyc93w.jl:52\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Two\", \"Three\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8eyc93w.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8eyc93w.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpi8eyc93w.jl:53\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Four\", \"Eight\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8eyc93w.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8eyc93w.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822284
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return []\n    end\n    if length(arr) == 1\n        return string(convert(Int64,\
    \ arr[1]))\n    end\n    sorted_arr = sort(arr[arr .>= 1 & arr .<= 9])\n    reverse!(sorted_arr)\n\
    \    # one_two_arr = sort(arr[arr .== 1 | arr .== 2])\n    # three_four_arr =\
    \ sort(arr[arr .== 3 | arr .== 4])\n    # five_six_arr = sort(arr[arr .== 5 |\
    \ arr .== 6])\n    # seven_eight_arr = sort(arr[arr .== 7 | arr .== 8])\n    #\
    \ nine_arr = sort(arr[arr .== 9])\n    one_two_arr = string.(sorted_arr[sorted_arr\
    \ .== 1 | sorted_arr .== 2])\n    three_four_arr = string.(sorted_arr[sorted_arr\
    \ .== 3 | sorted_arr .== 4])\n    five_six_arr = string.(sorted_arr[sorted_arr\
    \ .== 5 | sorted_arr .== 6])\n    seven_eight_arr = string.(sorted_arr[sorted_arr\
    \ .== 7 | sorted_arr .== 8])\n    nine_arr = string.(sorted_arr[sorted_arr .==\
    \ 9])\n    # one_two_arr = string.(sort(arr[arr .== 1 | arr .== 2]))\n    # three_four_arr\
    \ = string.(sort(arr[arr .== 3 | arr .== 4]))\n    # five_six_arr = string.(sort(arr[arr\
    \ .== 5 | arr .== 6]))\n    # seven_eight_arr = string.(sort(arr[arr .== 7 | arr\
    \ .== 8]))\n    # nine_arr = string.(sort(arr[arr .== 9]))\n    return reverse(vcat(one_two_arr,\
    \ three_four_arr, five_six_arr, seven_eight_arr, nine_arr))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpoknu6vni.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpoknu6vni.jl:47\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpoknu6vni.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoknu6vni.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoknu6vni.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpoknu6vni.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching &(::Int64,\
    \ ::Vector{Int64})\n  Closest candidates are:\n    &(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpoknu6vni.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoknu6vni.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tm"
  timestamp: 1659822285
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # The array of\
    \ all possible names of \n    # digits from 1 to 9 in english\n    digit_names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    # Filter the numbers that are between 1 and 9 inclusive\n   \
    \ # Then sort them\n    sorted_numbers = sort(filter(x -> (x > 0) && (x < 10),\
    \ arr))\n    # Reverse the sorted numbers\n    reverse_sorted_numbers = reverse(sorted_numbers)\n\
    \    # Transform the sorted numbers to their names\n    return [digit_names[x-1]\
    \ for x in reverse_sorted_numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwb2ar2mw.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpwb2ar2mw.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [0]\n  Stacktrace:\n    [1] getindex\n\
    \      @ ./array.jl:861 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n  \
    \  [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n   \
    \   @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [6] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Vector{String}}})\n\
    \      @ Base ./array.jl:734\n    [7] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmpwb2ar2mw.jl:26\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpwb2ar2mw.jl:33 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpwb2ar2mw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwb2ar2mw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] #2\n     @ ./none:0 [inlined]\n   [3] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Vector{String}}})\n\
    \     @ Base ./array.jl:724\n   [5] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpwb2ar2mw.jl:26\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpwb2ar2mw.jl:35 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpwb2ar2mw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwb2ar2mw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \""
  timestamp: 1659822286
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return []\n    end\n    #only keep the positive int between 1\
    \ and 9\n    positive_int = [i for i in arr if i > 0 && i < 10]\n    #sort\n \
    \   sorted_int = sort(positive_int)\n    # reverse\n    reverse_int = reverse(sorted_int)\n\
    \    # replace number with string \n    names = [\"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    string_array\
    \ = [names[i] for i in reverse_int]\n    return string_array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822282
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sort!(arr)\n  \
    \  reverse!(arr)\n    num_name = Dict(\"One\" => 1, \"Two\" => 2, \"Three\" =>\
    \ 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\" =>\
    \ 8, \"Nine\" => 9)\n    rarr = [x in keys(num_name) ? x : 0 for x in arr]\n \
    \   return rarr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf4eh3m8u.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpf4eh3m8u.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpf4eh3m8u.jl:21\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpf4eh3m8u.jl:28 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpf4eh3m8u.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpf4eh3m8u.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essen"
  timestamp: 1659822286
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sort_arr = sort(arr)\n\
    \    l_sort_arr = length(sort_arr)\n    vector_without_strange_numbers = []\n\
    \    for i in 1:l_sort_arr\n        if sort_arr[i] > 0 && sort_arr[i] < 10\n \
    \           push!(vector_without_strange_numbers, sort_arr[i])\n        end\n\
    \    end\n    vector_without_strange_numbers = map(int_to_string, vector_without_strange_numbers)\n\
    \    reverse!(vector_without_strange_numbers)\n    return vector_without_strange_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpc5sfyk79.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpc5sfyk79.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: int_to_string\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpc5sfyk79.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5sfyk79.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5sfyk79.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpc5sfyk79.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: int_to_string\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpc5sfyk79.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5sfyk79.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5sfyk79.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpc5sfyk79.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: int_to_string not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpc5sfyk79.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5sfyk79.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5sfyk79.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpc5sfyk79.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ int_to_string not defined\n  Stacktrace:\n  "
  timestamp: 1659822285
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpowjqt4nt.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpowjqt4nt.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpowjqt4nt.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpowjqt4nt.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpowjqt4nt.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpowjqt4nt.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpowjqt4nt.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822286
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #Create an index\
    \ that is between one and nine inclusive\n    arr_str = find(1 .<= arr .<= 9)\n\
    \    # Find the length of the vector and store that value\n    index = length(arr_str)\n\
    \    #Create a blank vector to store the names of the numbers\n    str_vec = []\n\
    \    # Iterate through the index and store the name of the number\n    for i =\
    \ 1:index\n        str_vec = push!(str_vec, num_to_str(arr[arr_str[i]]))\n   \
    \ end\n    # Reverse the names and return\n    str_vec = reverse(str_vec)\n  \
    \  return str_vec\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpitg4763o.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpitg4763o.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpitg4763o.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpitg4763o.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpitg4763o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpitg4763o.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: find not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpitg4763o.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpitg4763o.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpitg4763o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpitg4763o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpitg4763o.jl:18\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpitg4763o.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpitg4763o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpitg4763o.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ find not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n "
  timestamp: 1659822285
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # sort integers\
    \ that are between 1 and 9 inclusive\n    ints = sort(i for i in arr if 1 <= i\
    \ <= 9)\n    # reverse the resulting array\n    ints = reverse(ints)\n    # replace\
    \ each digit by its corresponding name\n    names = [[\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][i - 1] for i in\
    \ ints]\n    return names\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprsfltx5h.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmprsfltx5h.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort(::Base.Generator{Base.Iterators.Filter{var\"#1#3\", Vector{Int64}},\
    \ typeof(identity)})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprsfltx5h.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprsfltx5h.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprsfltx5h.jl:29\ntest set:\
    \ Error During Test at /tmp/tmprsfltx5h.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort(::Base.Generator{Base.Iterators.Filter{var\"#1#3\", Vector{Int64}},\
    \ typeof(identity)})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprsfltx5h.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprsfltx5h.jl:31 [inlined]\n\
    \   [4] macro expans"
  timestamp: 1659822286
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    new_arr = []\n\
    \    for i in arr\n        if 1 <= i <= 9\n            append!(new_arr, i)\n \
    \       end\n    end\n    sort!(new_arr)\n    new_arr = [reverse(new_arr)]\n \
    \   for i in new_arr\n        for j in i\n            println(j)\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzg4czna0.jl:33

    '
  stdout: "8\n5\n4\n3\n2\n2\n1\n1\ntest set: Error During Test at /tmp/tmpzg4czna0.jl:36\n\
    \  Test threw exception\n  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) ==\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzg4czna0.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzg4czna0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzg4czna0.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzg4czna0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzg4czna0.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1659822287
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given\
    \ an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    \    reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jo_41p7.jl:1\nin expression starting at /tmp/tmp7jo_41p7.jl:1\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # ...\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp59v0ur2v.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp59v0ur2v.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp59v0ur2v.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59v0ur2v.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59v0ur2v.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp59v0ur2v.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp59v0ur2v.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822287
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    return by_length_2(sort(filter(x\
    \ -> x in (1:9), arr)), length(arr))\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2iffjqub.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp2iffjqub.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: by_length_2\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2iffjqub.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2iffjqub.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2iffjqub.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2iffjqub.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: by_length_2\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2iffjqub.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2iffjqub.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2iffjqub.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2iffjqub.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: by_length_2 not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp2iffjqub.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2iffjqub.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2iffjqub.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2iffjqub.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ by_length_2 not defined\n  Stacktrace:\n   [1] by_"
  timestamp: 1659822285
- exit_code: -1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n\
    \    for i in 1:length(arr)\n        if arr[i] == 1\n            arr[i] = \"One\"\
    \n        elseif arr[i] == 2\n            arr[i] = \"Two\"\n        elseif arr[i]\
    \ == 3\n            arr[i] = \"Three\"\n        elseif arr[i] == 4\n         \
    \   arr[i] = \"Four\"\n        elseif arr[i] == 5\n            arr[i] = \"Five\"\
    \n        elseif arr[i] == 6\n            arr[i] = \"Six\"\n        elseif arr[i]\
    \ == 7\n            arr[i] = \"Seven\"\n        elseif arr[i] == 8\n         \
    \   arr[i] = \"Eight\"\n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\
    \n        end\n    end\n    arr = sort(arr, rev=true)\n    return arr\nend\narr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]\nby_length(arr)\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: Cannot `convert` an object of type String
    to an object of type Int64\nClosest candidates are:\n  convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n  convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n  convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n  ...\nStacktrace:\n
    [1] setindex!(A::'''
  stdout: None
  timestamp: 1659822287
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    output = sort(filter(x\
    \ -> x > 0 && x < 10, arr))\n    output = reverse(output)\n    for i in eachindex(output)\n\
    \        if output[i] == 1\n            output[i] = \"One\"\n        elseif output[i]\
    \ == 2\n            output[i] = \"Two\"\n        elseif output[i] == 3\n     \
    \       output[i] = \"Three\"\n        elseif output[i] == 4\n            output[i]\
    \ = \"Four\"\n        elseif output[i] == 5\n            output[i] = \"Five\"\n\
    \        elseif output[i] == 6\n            output[i] = \"Six\"\n        elseif\
    \ output[i] == 7\n            output[i] = \"Seven\"\n        elseif output[i]\
    \ == 8\n            output[i] = \"Eight\"\n        elseif output[i] == 9\n   \
    \         output[i] = \"Nine\"\n        end\n    end\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcf52ians.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpcf52ians.jl:47\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcf52ians.jl:35\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcf52ians.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcf52ians.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpcf52ians.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcf52ians.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcf52ians.jl:4"
  timestamp: 1659822287
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # Filter out unwanted\
    \ values \n    arr_filtered = filter(isinteger, arr)\n    # Sort the 1-9 range\n\
    \    sorted_arr = sort(arr_filtered)\n    # Get the reverse\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # Decorate the values in the array, for now just\
    \ return\n    return decorate(reversed_arr)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmptw8zeawa.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmptw8zeawa.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: decorate\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptw8zeawa.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw8zeawa.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw8zeawa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmptw8zeawa.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: decorate\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptw8zeawa.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw8zeawa.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw8zeawa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmptw8zeawa.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: decorate not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmptw8zeawa.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw8zeawa.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw8zeawa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmptw8zeawa.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ decorate not defined\n  Stacktrace:\n   [1] by_length(arr::"
  timestamp: 1659822286
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr)\n\
    \    reverse_arr = reverse(sorted_arr)\n    dict = Dict()\n    dict[1] = \"One\"\
    \n    dict[2] = \"Two\"\n    dict[3] = \"Three\"\n    dict[4] = \"Four\"\n   \
    \ dict[5] = \"Five\"\n    dict[6] = \"Six\"\n    dict[7] = \"Seven\"\n    dict[8]\
    \ = \"Eight\"\n    dict[9] = \"Nine\"\n    final_arr = []\n    for i in reverse_arr\n\
    \        if (1 <= i <= 9) && (i % 1 == 0)\n            push!(final_arr, dict[i])\n\
    \        end\n    end\n    return final_arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822283
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    fil_arr = filter(x\
    \ -> (x > 0 && x < 10), arr)\n    arr = reverse(sort(fil_arr))\n    arr = map(x\
    \ -> string(x), arr)\n    arr = map(x -> replace(x, \"1\" => \"One\"), arr)\n\
    \    arr = map(x -> replace(x, \"2\" => \"Two\"), arr)\n    arr = map(x -> replace(x,\
    \ \"3\" => \"Three\"), arr)\n    arr = map(x -> replace(x, \"4\" => \"Four\"),\
    \ arr)\n    arr = map(x -> replace(x, \"5\" => \"Five\"), arr)\n    arr = map(x\
    \ -> replace(x, \"6\" => \"Six\"), arr)\n    arr = map(x -> replace(x, \"7\" =>\
    \ \"Seven\"), arr)\n    arr = map(x -> replace(x, \"8\" => \"Eight\"), arr)\n\
    \    arr = map(x -> replace(x, \"9\" => \"Nine\"), arr)\n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822284
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(filter(x\
    \ -> (1 <= x <= 9), arr))\n    return map(x -> \"One\", sorted_arr)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpizv4gkyj.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpizv4gkyj.jl:25\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"One\", \"One\"\
    , \"One\", \"One\", \"One\", \"One\"] == [\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpizv4gkyj.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpizv4gkyj.jl:24\ntest set: Test Failed at /tmp/tmpizv4gkyj.jl:28\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"One\", \"One\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizv4gkyj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizv4gkyj.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpizv4gkyj.jl:29\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\", \"One\", \"One\"] == [\"\
    Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizv4gkyj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizv4gkyj.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822285
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    i = 1\n    for\
    \ x in arr[i]\n        if x > 9\n            x = 'Nine'\n        elseif x < 9\n\
    \            x = 'One'\n        end\n        i = i + 1\n    end\n    reverse!(arr)\n\
    \    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmptnitl3zj.jl:20\nin expression\
    \ starting at /tmp/tmptnitl3zj.jl:20\n"
  stdout: ''
  timestamp: 1659822284
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprgugjden.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmprgugjden.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprgugjden.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgugjden.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprgugjden.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprgugjden.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprgugjden.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822282
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    sorted =\
    \ sort(filter(x -> x > 0 && x < 10, arr))\n    sorted = reverse(sorted)\n    for\
    \ (i, element) in enumerate(sorted)\n        sorted[i] = convert_to_word(element)\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpdwwqwila.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpdwwqwila.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: convert_to_word\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpdwwqwila.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdwwqwila.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwwqwila.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdwwqwila.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: convert_to_word not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdwwqwila.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdwwqwila.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwwqwila.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdwwqwila.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ convert_to_word not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpdwwqwila.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdwwqwila.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwwqwila.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdwwqwila.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: convert_to_word\
    \ not defined\n  Stacktr"
  timestamp: 1659822286
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if isempty(arr)\n\
    \        return Array{String}([])\n    end\n    \n    arr1 = filter((x) -> x >\
    \ 0 && x < 10, arr)\n    arr1 = sort(arr1)\n    arr1 = reverse(arr1)\n    \n \
    \   names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    \n    for i in 1:length(arr1)\n        arr1[i] = names[arr1[i]]\n\
    \    end\n    \n    return arr1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpb6kqw52m.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpb6kqw52m.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpb6kqw52m.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb6kqw52m.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb6kqw52m.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpb6kqw52m.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpb6kqw52m.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb6kqw52m.jl:4"
  timestamp: 1659822287
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # Revert the array\
    \ and sort the values\n    arr = reverse(sort(arr))\n    # Get unique values\n\
    \    uniqueValues = unique(arr)\n    result = []\n    for i in uniqueValues\n\
    \        if i in [1,2,3,4,5,6,7,8,9]\n            push!(result, string(i))\n \
    \       end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1qpco295.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp1qpco295.jl:34\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1qpco295.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1qpco295.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1qpco295.jl:36\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1qpco295.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1qpco295.jl:33\ntest set: Test Failed at /tmp/tmp1qpco295.jl:37\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"3\", \"2\", \"1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1qpco295.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1qpco295.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1qpco295.jl:38\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1qpco295.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1qp"
  timestamp: 1659822286
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sort!(arr)\n  \
    \  # reverse the array\n    reverse!(arr)\n    result = []\n    for i in arr\n\
    \        if i == 1\n            push!(result, \"One\")\n        elseif i == 2\n\
    \            push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822285
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    ...\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpep4b_jjq.jl:17\nin expression starting at\
    \ /tmp/tmpep4b_jjq.jl:17\n"
  stdout: ''
  timestamp: 1659822286
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return []\n    end\n    one_to_nine = [2, 3, 5, 4, 1, 9, 8, 7,\
    \ 6]\n    arr = sort(arr)\n    arr = arr[arr .>= 1 & arr .<= 9]\n    arr = sort(arr,\
    \ rev=true)\n    for i in 1:length(arr)\n        arr[i] = one_to_nine[arr[i]]\n\
    \    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt3lpsmtm.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpt3lpsmtm.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpt3lpsmtm.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt3lpsmtm.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt3lpsmtm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpt3lpsmtm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching &(::Int64,\
    \ ::Vector{Int64})\n  Closest candidates are:\n    &(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpt3lpsmtm.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt3lpsmtm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tm"
  timestamp: 1659822288
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    # Preallocate\
    \ output vector and sort the input array\n    out = Vector{String}(undef, length(arr))\n\
    \    sort!(arr)\n    \n    # Loop over elements\n    @inbounds for k in 1:length(arr)\n\
    \        val = arr[k]\n        # If val is > 0 and < 10, we add it to the output\
    \ vector\n        if 1 <= val <= 9\n            out[k] = reverse_dictionary[val]\n\
    \        end\n    end\n    \n    # Reverse the output vector\n    reverse!(out)\n\
    \    # Remove unused elements\n    out = out[out .!= nothing]\n    return out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcm27xapt.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpcm27xapt.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: reverse_dictionary\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcm27xapt.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm27xapt.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm27xapt.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpcm27xapt.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: reverse_dictionary not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpcm27xapt.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm27xapt.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm27xapt.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpcm27xapt.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ reverse_dictionary not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpcm27xapt.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm27xapt.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm27xapt.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpcm27xapt.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: reverse_dictionary\
    \ not defin"
  timestamp: 1659822288
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n   \"\"\"\n    Given\
    \ an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    \    reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6r2e8a0k.jl:1\nin expression starting at /tmp/tmp6r2e8a0k.jl:1\n"
  stdout: ''
  timestamp: 1659822286
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # replace pass\
    \ by your own code\n    pass\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcai3lfe4.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpcai3lfe4.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcai3lfe4.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcai3lfe4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcai3lfe4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpcai3lfe4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpcai3lfe4.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcai3lfe4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcai3lfe4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpcai3lfe4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpcai3lfe4.jl:18\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcai3lfe4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcai3lfe4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpcai3lfe4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n "
  timestamp: 1659822288
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n\
    \    filter!(x -> (x > 0 && x < 10), arr)\n    reverse!(arr)\n    numbers = [\"\
    Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"]\n    for (i, v) in enumerate(arr)\n        arr[i] = numbers[v]\n\
    \    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpvugvm41c.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpvugvm41c.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvugvm41c.jl:22\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvugvm41c.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvugvm41c.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpvugvm41c.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvugvm41c.jl:22\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvugvm41c.jl:3"
  timestamp: 1659822289
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # Some sanity check\
    \ on the input\n    if isempty(arr)\n        return []\n    end\n   \n    # Sort\
    \ the array, reverse it, and get the names\n    sorted_arr = sort(arr)\n    arr_names\
    \ = get_names(reverse(sorted_arr))\n    \n    # Check the sanity of the input\n\
    \    if isempty(arr_names)\n        error(\"Error: Your array has some strange\
    \ number. Check your input.\")\n    end\n    \n    return arr_names\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmps67mxlc5.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmps67mxlc5.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: get_names\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmps67mxlc5.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps67mxlc5.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps67mxlc5.jl:37\ntest set:\
    \ Error During Test at /tmp/tmps67mxlc5.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: get_names not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmps67mxlc5.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps67mxlc5.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps67mxlc5.jl:37\ntest set:\
    \ Error During Test at /tmp/tmps67mxlc5.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ get_names not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmps67mxlc5.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps67mxlc5.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps67mxlc5.jl:37\ntest set:\
    \ Error During Test at /tmp/tmps67mxlc5.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: get_names\
    \ not defined\n  Stacktrace:\n   [1] by_length(ar"
  timestamp: 1659822289
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n  if isempty(arr)\n\
    \    return []\n  end\n  arr_f = filter(x -> x >= 1 && x <= 9, arr)\n  arr_s =\
    \ sort(arr_f)\n  arr_r = reverse(arr_s)\n  for i in 1:length(arr_r)\n    if arr_r[i]\
    \ == 1\n      arr_r[i] = \"One\"\n    elseif arr_r[i] == 2\n      arr_r[i] = \"\
    Two\"\n    elseif arr_r[i] == 3\n      arr_r[i] = \"Three\"\n    elseif arr_r[i]\
    \ == 4\n      arr_r[i] = \"Four\"\n    elseif arr_r[i] == 5\n      arr_r[i] =\
    \ \"Five\"\n    elseif arr_r[i] == 6\n      arr_r[i] = \"Six\"\n    elseif arr_r[i]\
    \ == 7\n      arr_r[i] = \"Seven\"\n    elseif arr_r[i] == 8\n      arr_r[i] =\
    \ \"Eight\"\n    elseif arr_r[i] == 9\n      arr_r[i] = \"Nine\"\n    end\n  end\n\
    \  return arr_r\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnag9d55f.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpnag9d55f.jl:51\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnag9d55f.jl:39\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnag9d55f.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnag9d55f.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpnag9d55f.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnag9d55f.jl:25\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnag9d55f.jl:5"
  timestamp: 1659822290
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = filter(!isbetween(0,10),arr)\n\
    \    sort!(arr)\n    reverse!(arr)\n    res =[]\n    m = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for\
    \ i in arr\n        append!(res,m[i-1])\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcouvvtii.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpcouvvtii.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: isbetween\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcouvvtii.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcouvvtii.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcouvvtii.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcouvvtii.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: isbetween\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcouvvtii.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcouvvtii.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcouvvtii.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcouvvtii.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: isbetween not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpcouvvtii.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcouvvtii.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcouvvtii.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcouvvtii.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ isbetween not defined\n  Stacktrace:\n   [1] by_length(a"
  timestamp: 1659822289
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    pass\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpf3goddvw.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpf3goddvw.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpf3goddvw.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3goddvw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3goddvw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf3goddvw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpf3goddvw.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3goddvw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3goddvw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf3goddvw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpf3goddvw.jl:17\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3goddvw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3goddvw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf3goddvw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n "
  timestamp: 1659822289
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n        # convert all\
    \ elements of the vector to a string\n    for i in 1:length(arr)\n        arr[i]\
    \ = string(arr[i])\n    end\n    \n    # sort the vector\n    arr = sort(arr)\n\
    \    # reverse the vector\n    arr = reverse(arr)\n    \n    # remove all non-numeric\
    \ values\n    arr = [x for x in arr if all(c \u2208 \"0123456789\" for c in x)]\n\
    \    \n    # Convert the vector to a dictionary\n    val_dict = Dict(zip(1:9,\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]))\n    \n    # Convert the vector to integers\n    for i in 1:length(arr)\n\
    \        arr[i] = parse(Int64, arr[i])\n    end\n    \n    # Replace the digits\
    \ in the vector with the values from the dictionary\n    for i in 1:length(arr)\n\
    \        arr[i] = val_dict[arr[i]]\n    end\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpld3a2sys.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmpld3a2sys.jl:49\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpld3a2sys.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpld3a2sys.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpld3a2sys.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpld3a2sys.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpld3a2sys.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpld3a2sys.jl:5"
  timestamp: 1659822290
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # write your own\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpe3dprg8u.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpe3dprg8u.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpe3dprg8u.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe3dprg8u.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe3dprg8u.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpe3dprg8u.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpe3dprg8u.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822290
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # todo\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvfk4a44t.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpvfk4a44t.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpvfk4a44t.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvfk4a44t.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvfk4a44t.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpvfk4a44t.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpvfk4a44t.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822290
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n  \n  # First we will\
    \ sort the vector and only keep the numbers between 1 and 9\n  # We will create\
    \ a new vector using push!, which we will then reverse\n  # Finally we will map\
    \ the numbers to their string names\n  \n  # NOTE: not sure if this is the most\
    \ efficient way to sort and remove values\n  # from a vector, but it is a simple\
    \ example of the map, filter, and push! functions\n  \n  # Sort the array\n  sort!(arr)\n\
    \  \n  # Only keep the numbers between 1 and 9\n  filter!(x -> x>0 && x<10, arr)\n\
    \  \n  # Create a new vector that is reveresed\n  rev_arr = reverse(arr)\n  \n\
    \  # Map the numbers to their string names\n  map(x -> digit_to_name(x), rev_arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpz9wizqrd.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpz9wizqrd.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: digit_to_name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmpz9wizqrd.jl:35\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpz9wizqrd.jl:35\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpz9wizqrd.jl:42 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpz9wizqrd.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpz9wizqrd.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: digit_to_name not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmpz9wizqrd.jl:35\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpz9wizqrd.jl:35\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpz9wizqrd.jl:44 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpz9wizqrd.jl:4"
  timestamp: 1659822289
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    new_arr = []\n\
    \    for num in arr\n        if num > 0 && num < 10\n            push!(new_arr,\
    \ num)\n        end\n    end\n    sort!(new_arr)\n    reverse!(new_arr)\n    #\
    \ using a dictionary\n    dic = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    new_arr = [dic[i] for i in new_arr]\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822287
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    return replace(reverse(sort(filter(x\
    \ -> 1<=x<=9, arr))),\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ])\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzcbj7hw6.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpzcbj7hw6.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Vector{Int64}, ::Vector{String})\n  Closest\
    \ candidates are:\n    replace(!Matched::Union{Function, Type}, ::Any; count)\
    \ at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n    replace(::Any, !Matched::Pair...;\
    \ count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzcbj7hw6.jl:17\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzcbj7hw6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzcbj7hw6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzcbj7hw6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Vector{Int64}, ::Vector{String})\n  Closest\
    \ candidates are:\n    replace(!Matched::Union{Function, Type}, ::Any; count)\
    \ at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n    replace(::Any, !Matched::Pair...;\
    \ count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzcbj7hw6.jl:17\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzcbj7hw6.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzcbj7hw6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzcbj7hw6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::Vector{Int64}, ::Vector{S"
  timestamp: 1659822290
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return []\n    end\n    sorted = sort(filter(x -> x >= 1 && x\
    \ <= 9, arr))\n    reversed = []\n    for i = length(sorted):-1:1\n        push!(reversed,\
    \ sorted[i])\n    end\n    return map(n -> string(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[n], reversed)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2q8livk1.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp2q8livk1.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Char}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n  \
    \  [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Char})\n\
    \      @ Base ./array.jl:563\n    [9] convert(#unused#::Type{Vector{String}},\
    \ a::Vector{Char})\n      @ Base ./array.jl:554\n   [10] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp2q8livk1.jl:25\n   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp2q8livk1.jl:32 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp2q8livk1.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp2q8livk1.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.con"
  timestamp: 1659822291
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = @. 1:9 .==\
    \ arr\n    arr = reverse(findall(arr))\n    arr = map(i -> string([\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][i]), arr)\n    return arr\nend\n# by_length([2, 1, 1, 4, 5, 8, 2, 3])\n \n \n\
    \ \n\"\"\"\n    You're now a baseball game point recorder.\n    \n    Given a\
    \ list of strings, each string can be one of the 4 following types:\n    \n  \
    \  1. Integer (one round's score): Directly represents the number of points you\
    \ get in this round.\n    2. \"+\" (one round's score): Represents that the points\
    \ you get in this round are the sum of the last two valid round's points.\n  \
    \  3. \"D\" (one round's score): Represents that the points you get in this round\
    \ are the doubled data of the last valid round's points.\n    4. \"C\" (an operation,\
    \ which isn't a round's score): Represents the last valid round's points you get\
    \ were invalid and should be removed.\n    \n    Each round's operation is permanent\
    \ and could have an impact on the round before and the round after.\n    \n  \
    \  You need to return the sum of the points you could get in all the rounds.\n\
    \    \n    For example:\n    >>> calPoints([\"5\",\"2\",\"C\",\"D\",\"+\"]) \n\
    \    30\n      >>> calPoints([\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"\
    ]) \n    27\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpyyrud9aw.jl:26\nin expression starting at /tmp/tmpyyrud9aw.jl:26\n"
  stdout: ''
  timestamp: 1659822288
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # select numbers\
    \ between 1 and 9\n    res = filter(x -> x in 1:9, arr)\n    # sort\n    sort!(res)\n\
    \    # reverse\n    reverse!(res)\n    # replace by names\n    map(x -> Dict(\"\
    One\" => 1, \"Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\"\
    \ => 6, \"Seven\" => 7, \"Eight\" => 8, \"Nine\" => 9)[string(x)], res)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjt0hnyfq.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpjt0hnyfq.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  KeyError: key \"8\"\
    \ not found\n  Stacktrace:\n    [1] getindex\n      @ ./dict.jl:481 [inlined]\n\
    \    [2] #2\n      @ /tmp/tmpjt0hnyfq.jl:24 [inlined]\n    [3] iterate\n     \
    \ @ ./generator.jl:47 [inlined]\n    [4] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [5] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [6] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpjt0hnyfq.jl:24\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpjt0hnyfq.jl:31 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpjt0hnyfq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpjt0hnyfq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  KeyError: key \"1\" not found\n  Stacktrace:\n\
    \    [1] getindex\n      @ ./dict.jl:481 [inlined]\n    [2] #2\n      @ /tmp/tmpjt0hnyfq.jl:24\
    \ [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [5] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [6] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [7] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpjt0hnyfq.jl:24\n\
    \    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpjt0hnyfq.jl:33 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-l"
  timestamp: 1659822290
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    one = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    res = filter(x -> x in 1:9, arr)\n    res = sort(res)\n    res = reverse(res)\n\
    \    res = map(x -> one[x], res)\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822287
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return []\n    end\n    sortedArr = sort(arr, rev=true)\n    reversedArr\
    \ = reverse(sortedArr)\n    newArr = []\n    for i in reversedArr\n        if\
    \ i > 0 && i < 10\n            newArr = append!(newArr, string(i))\n        end\n\
    \    end\n    return newArr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpafikrf_2.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpafikrf_2.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpafikrf_2.jl:28\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpafikrf_2.jl:35 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpafikrf_2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpafikrf_2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.j"
  timestamp: 1659822291
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return []\n    end\n    value_map = Dict(\"1\" => \"One\", \"\
    2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\", \"6\"\
    \ => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\")\n   \
    \ sort_arr = sort(arr)\n    final_arr = []\n    for i in 1:length(sort_arr)\n\
    \        if sort_arr[i] > 0 && sort_arr[i] < 10\n            push!(final_arr,\
    \ value_map[string(sort_arr[i])])\n        end\n    end\n    return reverse(final_arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822288
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    tempArr = []\n\
    \    for i in arr\n        if(i>=1 && i<=9)\n            push!(tempArr, i)\n \
    \       end\n    end\n    sort!(tempArr)\n    tempArr = reverse(tempArr)\n   \
    \ # print(tempArr)\n    temp = []\n    for i in tempArr\n        if(i==1)\n  \
    \          push!(temp, \"One\")\n        elseif(i==2)\n            push!(temp,\
    \ \"Two\")\n        elseif(i==3)\n            push!(temp, \"Three\")\n       \
    \ elseif(i==4)\n            push!(temp, \"Four\")\n        elseif(i==5)\n    \
    \        push!(temp, \"Five\")\n        elseif(i==6)\n            push!(temp,\
    \ \"Six\")\n        elseif(i==7)\n            push!(temp, \"Seven\")\n       \
    \ elseif(i==8)\n            push!(temp, \"Eight\")\n        elseif(i==9)\n   \
    \         push!(temp, \"Nine\")\n        end\n    end\n    return temp\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822288
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted = sort(arr)\n\
    \    filtered = filter(x -> x in 1:9, sorted)\n    reversed = reverse(filtered)\n\
    \    map(x -> number_map[x], reversed)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprvi1ju6v.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmprvi1ju6v.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_map\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmprvi1ju6v.jl:20\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmprvi1ju6v.jl:20\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprvi1ju6v.jl:27 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprvi1ju6v.jl:26\ntest set:\
    \ Error During Test at /tmp/tmprvi1ju6v.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_map not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmprvi1ju6v.jl:20\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmprvi1ju6v.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprvi1ju6v.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprvi1ju6v.jl:26\ntest"
  timestamp: 1659822290
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # Create a dictionary\
    \ for numerical value\n    num_map = Dict(1 => \"One\", 2 => \"Two\", 3 => \"\
    Three\", 4 => \"Four\", 5 => \"Five\",\n        6 => \"Six\", 7 => \"Seven\",\
    \ 8 => \"Eight\", 9 => \"Nine\")\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdgb_wwln.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdgb_wwln.jl:1\n\
    in expression starting at /tmp/tmpdgb_wwln.jl:1\n"
  stdout: ''
  timestamp: 1659822289
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(filter(x\
    \ -> x > 0 && x < 10, arr))\n    to_replace = ['One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    Int64[]\n    output = [to_replace[i]\
    \ for i in sorted_arr]\n    return reverse(output)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_amgxcgr.jl:18\nin expression\
    \ starting at /tmp/tmp_amgxcgr.jl:18\n"
  stdout: ''
  timestamp: 1659822289
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return []\n    end\n    sorted_arr = sort(arr)\n    sorted_arr_no_neg\
    \ = filter(x -> x > 0, sorted_arr)\n    sorted_arr_no_neg_no_big = filter(x ->\
    \ x < 10, sorted_arr_no_neg)\n    numbered_names = map(x -> numbers_to_names[x],\
    \ sorted_arr_no_neg_no_big)\n    return reverse(numbered_names)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpa3_8pous.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpa3_8pous.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: numbers_to_names\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#3#6\")(x::Int64)\n      @ Main\
    \ /tmp/tmpa3_8pous.jl:23\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#3#6\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpa3_8pous.jl:23\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa3_8pous.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa3_8pous.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpa3_8pous.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: numbers_to_names not defined\n\
    \  Stacktrace:\n    [1] (::var\"#3#6\")(x::Int64)\n      @ Main /tmp/tmpa3_8pous.jl:23\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#3#6\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpa3_8pous.jl:23\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa3_8pous.jl:33 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa3_8pou"
  timestamp: 1659822291
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n   \n    if isempty(arr)\
    \ # empty array test\n        return []\n    end\n    \n    arr = arr[filter(x\
    \ -> x >= 1 && x <= 9, arr)] # filter out strange numbers\n    arr = sort(arr)\
    \ # sort numbers\n    arr = reverse(arr) # reverse order\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw6wvv_iu.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw6wvv_iu.jl:1\n\
    in expression starting at /tmp/tmpw6wvv_iu.jl:1\n"
  stdout: ''
  timestamp: 1659822289
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = filter(x\
    \ -> x in 1:9, arr)\n    sort!(arr)\n    reverse!(arr)\n    for i in 1:length(arr)\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n   \
    \ end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp6dxj7t47.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmp6dxj7t47.jl:48\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6dxj7t47.jl:36\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6dxj7t47.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6dxj7t47.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp6dxj7t47.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6dxj7t47.jl:22\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6dxj7t47.jl:5"
  timestamp: 1659822292
- exit_code: -1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    sorted_vector\
    \ = sort(arr)\n    result = reverse(sorted_vector)\n    name_vector = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    for x in name_vector\n        result = [replace(x, r\"\\d+\") for x in\
    \ result]\n    end\n    return result\nend\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching replace(::Int64, ::Regex)'''
  stdout: None
  timestamp: 1659822293
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr)\n\
    \        return []\n    end\n    to_arr(sort(filter(x -> x > 0 && x < 10, arr)),\
    \ \"reverse\")\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0fqy8bx_.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp0fqy8bx_.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: to_arr\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0fqy8bx_.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0fqy8bx_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0fqy8bx_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0fqy8bx_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: to_arr not defined\n \
    \ Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0fqy8bx_.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0fqy8bx_.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0fqy8bx_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0fqy8bx_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ to_arr not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n  \
    \   @ Main /tmp/tmp0fqy8bx_.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0fqy8bx_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0fqy8bx_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0fqy8bx_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: to_arr\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{In"
  timestamp: 1659822291
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # 1 sort the array\
    \ \n    sorted_arr = sort(arr)\n    # 2 keep only the elements between 1 and 9\n\
    \    valid_arr = [x for x in sorted_arr if x in 1:9]\n    # 3 reverse the array\n\
    \    reversed_arr = reverse(valid_arr)\n    # 4 replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    String_arr = replace_numbers(reversed_arr)\n    return\
    \ String_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpp6pu3on9.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpp6pu3on9.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: replace_numbers\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp6pu3on9.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp6pu3on9.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp6pu3on9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpp6pu3on9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: replace_numbers\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp6pu3on9.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp6pu3on9.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp6pu3on9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpp6pu3on9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: replace_numbers not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpp6pu3on9.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp6pu3on9.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp6pu3on9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpp6pu3on9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ replace_numbers not defined\n  Stackt"
  timestamp: 1659822292
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = filter(x\
    \ -> x >= 1 && x <= 9, arr)\n    reverse!(sort!(arr))\n    res = []\n    for i\
    \ in arr\n        push!(res, ord(i))\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpbhxdd00_.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpbhxdd00_.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: ord not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpbhxdd00_.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhxdd00_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhxdd00_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbhxdd00_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpbhxdd00_.jl:21\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhxdd00_.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhxdd00_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbhxdd00_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ ord not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpbhxdd00_.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhxdd00_.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhxdd00_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbhxdd00_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: ord\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @"
  timestamp: 1659822292
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return []\n    end\n    sort!(arr)\n    for i in eachindex(arr)\n\
    \        if 1 <= arr[i] <= 9\n            arr[i] = convert(Int, arr[i])\n    \
    \    else\n            deleteat!(arr, i)\n        end\n    end\n    d = Dict(1\
    \ => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 =>\
    \ \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\")\n    result = []\n \
    \   for i in eachindex(arr)\n        append!(result, d[arr[i]])\n    end\n   \
    \ reverse!(result)\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3nmp41xd.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmp3nmp41xd.jl:41\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp3nmp41xd.jl:34\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp3nmp41xd.jl:41 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp3nmp41xd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp3nmp41xd.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3nmp41xd.jl:22\n\
    \   [3]"
  timestamp: 1659822293
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n   \n    if length(arr)\
    \ == 0\n       return []\n    end\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa8f0aqxb.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa8f0aqxb.jl:1\n\
    in expression starting at /tmp/tmpa8f0aqxb.jl:1\n"
  stdout: ''
  timestamp: 1659822291
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    normal = sort(filter(x\
    \ -> 0<x<10, arr))\n    reverse(normal)\n    return [name(x) for x in normal]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4361scsu.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp4361scsu.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: name\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp4361scsu.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4361scsu.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4361scsu.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4361scsu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: name not defined\n  Stacktrace:\n\
    \   [1] (::var\"#2#4\")(x::Int64)\n     @ Main ./none:0\n   [2] iterate\n    \
    \ @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp4361scsu.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4361scsu.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4361scsu.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4361scsu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ name not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp436"
  timestamp: 1659822292
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr_filtered =\
    \ filter(n -> (n >= 1 && n <= 9), arr)\n    arr_sorted = sort(arr_filtered)\n\
    \    arr_reversed = reverse(arr_sorted)\n    return [convert(String, arr_reversed[i])\
    \ for i in 1:length(arr_reversed)]\nend\n    \nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpidrqbuok.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpidrqbuok.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#2#4\"{Vector{Int64}})(i::Int64)\n   \
    \  @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect\n     @ ./array.jl:724 [inlined]\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpidrqbuok.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpidrqbuok.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpidrqbuok.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpidrqbuok.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#2#4\"{Vector{Int64}})(i::Int64)\n   \
    \  @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect\n     @ ./array.jl:724 [inline"
  timestamp: 1659822294
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    #check if\
    \ the array is empty\n    if isempty(arr)\n        println(\"the array is empty\"\
    )\n        return String[]\n    end\n    \n    #sort the array\n    sort!(arr)\n\
    \    \n    #reverse the sorted array\n    reverse!(arr)\n    \n    #convert the\
    \ array from int to string\n    s = map(x -> string(x), arr)\n    \n    #convert\
    \ the array from string to string\n    for i in s\n        for k in 1:length(s)\n\
    \            if s[k] == \"1\"\n                s[k] = \"One\"\n            elseif\
    \ s[k] == \"2\"\n                s[k] = \"Two\"\n            elseif s[k] == \"\
    3\"\n                s[k] = \"Three\"\n            elseif s[k] == \"4\"\n    \
    \            s[k] = \"Four\"\n            elseif s[k] == \"5\"\n             \
    \   s[k] = \"Five\"\n            elseif s[k] == \"6\"\n                s[k] =\
    \ \"Six\"\n            elseif s[k] == \"7\"\n                s[k] = \"Seven\"\n\
    \            elseif s[k] == \"8\"\n                s[k] = \"Eight\"\n        \
    \    elseif s[k] == \"9\"\n                s[k] = \"Nine\"\n            end\n\
    \        end\n    end\n    \n    #return the sorted array\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxfl_hczk.jl:63

    '
  stdout: "the array is empty\ntest set: Test Failed at /tmp/tmpxfl_hczk.jl:68\n \
    \ Expression: candidate([1, -1, 55]) == [\"One\"]\n   Evaluated: [\"55\", \"One\"\
    , \"-1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxfl_hczk.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfl_hczk.jl:65\ntest set: Test\
    \ Failed at /tmp/tmpxfl_hczk.jl:69\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Three\", \"Two\", \"One\", \"\
    -1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxfl_hczk.jl:69 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxfl_hczk.jl:65\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822292
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr)\n\
    \        return []\n    end\n    arr = replace!(arr, r -> ifelse(r in 1:9, r,\
    \ NaN))\n    if count(x -> isnan(x), arr) > 0\n        arr = filter(x -> !isnan(x),\
    \ arr)\n    end\n    arr = sort(arr)\n    arr = reverse(arr)\n    arr = replace!(arr,\
    \ r -> Dict(1 => \"One\",\n                            2 => \"Two\",\n       \
    \                     3 => \"Three\",\n                            4 => \"Four\"\
    ,\n                            5 => \"Five\",\n                            6 =>\
    \ \"Six\",\n                            7 => \"Seven\",\n                    \
    \        8 => \"Eight\",\n                            9 => \"Nine\")[r])\n   \
    \ return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpewnz05au.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpewnz05au.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace!(::Vector{Int64}, ::var\"#1#5\")\n  Closest candidates are:\n\
    \    replace!(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:531\n\
    \    replace!(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:489\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpewnz05au.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpewnz05au.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpewnz05au.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpewnz05au.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace!(::Vector{Int64},\
    \ ::var\"#1#5\")\n  Closest candidates are:\n    replace!(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:531\n\
    \    replace!(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:489\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpewnz05au.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpewnz05au.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpewnz05au.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpewnz05au.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: no\
    \ method matching replace!(::Vector{Int64}, ::var\"#1#5\")\n  Closest candidates\
    \ are:\n    replace!(!Matched::U"
  timestamp: 1659822294
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n\
    \    for i = 1:length(arr)\n        if arr[i] == 1\n            arr[i] = \"One\"\
    \n        elseif arr[i] == 2\n            arr[i] = \"Two\"\n        elseif arr[i]\
    \ == 3\n            arr[i] = \"Three\"\n        elseif arr[i] == 4\n         \
    \   arr[i] = \"Four\"\n        elseif arr[i] == 5\n            arr[i] = \"Five\"\
    \n        elseif arr[i] == 6\n            arr[i] = \"Six\"\n        elseif arr[i]\
    \ == 7\n            arr[i] = \"Seven\"\n        elseif arr[i] == 8\n         \
    \   arr[i] = \"Eight\"\n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\
    \n        end\n    end\n    arr = reverse(arr)\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpp84amt7r.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpp84amt7r.jl:47\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp84amt7r.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp84amt7r.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp84amt7r.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpp84amt7r.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp84amt7r.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp84amt7r.jl:4"
  timestamp: 1659822294
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    l = []\n    for\
    \ num in arr\n        if num > 0 && num < 10\n            push!(l, num)\n    \
    \    end\n    end\n    l = sort(l)\n    answer = []\n    for i in l\n        push!(answer,\
    \ num2str(i))\n    end\n    return answer\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwhrdkcs_.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwhrdkcs_.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2str\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpwhrdkcs_.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwhrdkcs_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwhrdkcs_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwhrdkcs_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2str not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpwhrdkcs_.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwhrdkcs_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwhrdkcs_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwhrdkcs_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2str not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n \
    \    @ Main /tmp/tmpwhrdkcs_.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwhrdkcs_.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwhrdkcs_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwhrdkcs_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: num2str\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vecto"
  timestamp: 1659822293
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    new_arr = [i for\
    \ i in arr if i < 10]\n    new_arr = sort(new_arr)\n    new_arr = reverse(new_arr)\n\
    \    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    return [names[i-1] for i in new_arr]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpy582572x.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpy582572x.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [0]\n  Stacktrace:\n    [1] getindex\n\
    \      @ ./array.jl:861 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n  \
    \  [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n   \
    \   @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [6] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Vector{String}}})\n\
    \      @ Base ./array.jl:734\n    [7] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmpy582572x.jl:21\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpy582572x.jl:28 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpy582572x.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpy582572x.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] #2\n     @ ./none:0 [inlined]\n   [3] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Vector{String}}})\n\
    \     @ Base ./array.jl:724\n   [5] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy582572x.jl:21\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpy582572x.jl:30 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpy582572x.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpy582572x.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \""
  timestamp: 1659822294
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # YOUR CODE HERE\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp5b2zmyet.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp5b2zmyet.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5b2zmyet.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5b2zmyet.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5b2zmyet.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5b2zmyet.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5b2zmyet.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822294
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sort!(arr) # in-place\
    \ sort \n    numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n    new_arr = []\n    for i in arr\n      \
    \  if i in 1:9\n            push!(new_arr, numbers[i])\n        end\n    end\n\
    \    return reverse(new_arr)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822291
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    # FIRST:\
    \ SORT\n    x = sort(arr)\n    \n    # SECOND: REVERSE\n    x = reverse(x)\n \
    \   \n    # THIRD: CONVERT\n    x = map(x) do e\n        if e == 1\n         \
    \   \"One\"\n        elseif e == 2\n            \"Two\"\n        elseif e == 3\n\
    \            \"Three\"\n        elseif e == 4\n            \"Four\"\n        elseif\
    \ e == 5\n            \"Five\"\n        elseif e == 6\n            \"Six\"\n \
    \       elseif e == 7\n            \"Seven\"\n        elseif e == 8\n        \
    \    \"Eight\"\n        elseif e == 9\n            \"Nine\"\n        else\n  \
    \          \"*\"\n        end\n    end\n    \n    # FOURTH: DELETE UNRELEVANT\
    \ STRINGS\n    inds = [i for i in 1:length(x) if x[i] != \"*\"]\n    out = [x[i]\
    \ for i in inds]\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822291
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n   \n    length(arr)\
    \ > 0 ? filter(x -> x < 10, arr) : []\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0hdrpr73.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp0hdrpr73.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp0hdrpr73.jl:18\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp0hdrpr73.jl:26 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp0hdrpr73.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp0hdrpr73.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essen"
  timestamp: 1659822294
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr)\n\
    \    filtered_arr = filter(x -> x > 0 && x < 10, sorted_arr)\n    reversed_arr\
    \ = reverse(filtered_arr)\n    string_arr = map(x -> string(x), reversed_arr)\n\
    \    final_arr = map(x -> replace(x, r\"(\\d+)\", get(parse(Int, x), 1)), string_arr)\n\
    \    return final_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp102xb8wz.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp102xb8wz.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching get(::Int64, ::Int64)\n  Closest candidates are:\n    get(::Number,\
    \ ::Integer, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/number.jl:106\n\
    \    get(!Matched::Union{Function, Type}, ::Number, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:108\n\
    \    get(!Matched::Union{Function, Type}, ::Number, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/number.jl:109\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#3#6\")(x::String)\n      @ Main /tmp/tmp102xb8wz.jl:21\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect\n    \
    \  @ ./array.jl:744 [inlined]\n    [4] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp102xb8wz.jl:21\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp102xb8wz.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp102xb8wz.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp102xb8wz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching get(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    get(::Number, ::Integer, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:106\n    get(!Matched::Union{Function,\
    \ Type}, ::Number, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:108\n\
    \    get(!Matched::Union{Function, Type}, ::Number, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/number.jl:109\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#3#6\")(x::String)\n      @ Main /tmp/tmp102xb8wz.jl:21\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined"
  timestamp: 1659822295
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    ordered = sort(collect(Set(arr))[findall(x\
    \ -> x > 0 && x < 10, collect(Set(arr)))])\n    reverse!(ordered)\n    map(x ->\
    \ string(symbol(number2name(x))), ordered)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjtvzlvvd.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpjtvzlvvd.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number2name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmpjtvzlvvd.jl:19\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpjtvzlvvd.jl:19\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpjtvzlvvd.jl:26 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpjtvzlvvd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpjtvzlvvd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number2name not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmpjtvzlvvd.jl:19\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpjtvzlvvd.jl:19\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpjtvzlvvd.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpjtvzlvvd.jl:25\nte"
  timestamp: 1659822294
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr_filter = filter(x\
    \ -> (x>=1 && x<=9), arr)\n    if length(arr_filter) == 0\n        return []\n\
    \    end\n    arr_sort = sort(arr_filter)\n    arr_reverse = reverse(arr_sort)\n\
    \    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    arr_name = []\n    for i in arr_reverse\n        push!(arr_name,\
    \ names[i])\n    end\n    return arr_name\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822292
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n  temp=sort(arr, rev=true)\n\
    \  temp=temp[temp .< 10]\n  temp=temp[temp .> 0]\n  for i=1:length(temp)\n   \
    \ if temp[i]==1\n      temp[i]=\"One\"\n    elseif temp[i]==2\n      temp[i]=\"\
    Two\"\n    elseif temp[i]==3\n      temp[i]=\"Three\"\n    elseif temp[i]==4\n\
    \      temp[i]=\"Four\"\n    elseif temp[i]==5\n      temp[i]=\"Five\"\n    elseif\
    \ temp[i]==6\n      temp[i]=\"Six\"\n    elseif temp[i]==7\n      temp[i]=\"Seven\"\
    \n    elseif temp[i]==8\n      temp[i]=\"Eight\"\n    elseif temp[i]==9\n    \
    \  temp[i]=\"Nine\"\n    end\n  end\n  return temp\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp6_8zpbg5.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmp6_8zpbg5.jl:48\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6_8zpbg5.jl:36\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6_8zpbg5.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6_8zpbg5.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp6_8zpbg5.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6_8zpbg5.jl:22\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6_8zpbg5.jl:5"
  timestamp: 1659822296
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    new_arr = []\n\
    \    for i in arr\n        if 1 <= i <= 9\n            push!(new_arr, i)\n   \
    \     end\n    end\n    new_arr = sort(new_arr)\n    new_arr = reverse(new_arr)\n\
    \    for i in eachindex(new_arr)\n        if new_arr[i] == 1\n            new_arr[i]\
    \ = \"One\"\n        elseif new_arr[i] == 2\n            new_arr[i] = \"Two\"\n\
    \        elseif new_arr[i] == 3\n            new_arr[i] = \"Three\"\n        elseif\
    \ new_arr[i] == 4\n            new_arr[i] = \"Four\"\n        elseif new_arr[i]\
    \ == 5\n            new_arr[i] = \"Five\"\n        elseif new_arr[i] == 6\n  \
    \          new_arr[i] = \"Six\"\n        elseif new_arr[i] == 7\n            new_arr[i]\
    \ = \"Seven\"\n        elseif new_arr[i] == 8\n            new_arr[i] = \"Eight\"\
    \n        elseif new_arr[i] == 9\n            new_arr[i] = \"Nine\"\n        end\n\
    \    end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822292
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #TODO: your code\
    \ here\nend\nassert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nassert by_length([1,\
    \ -1 , 55]) == ['One']\nassert by_length([2, 3, 0, 1, 7, 4, 5, 6, 9, 8]) == [\"\
    Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"One\", \"Zero\"]\n \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"by_length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhth3gci.jl:19\nin expression\
    \ starting at /tmp/tmpyhth3gci.jl:19\n"
  stdout: ''
  timestamp: 1659822293
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    tmp = sort(filter(x\
    \ -> x >= 1 && x <= 9, arr))\n    tmp = reverse(tmp)\n    return map(x -> string(x),\
    \ tmp)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpikue4aqy.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpikue4aqy.jl:26\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikue4aqy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikue4aqy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpikue4aqy.jl:28\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpikue4aqy.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpikue4aqy.jl:25\ntest set: Test Failed at /tmp/tmpikue4aqy.jl:29\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"3\", \"2\", \"1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikue4aqy.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikue4aqy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpikue4aqy.jl:30\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikue4aqy.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /"
  timestamp: 1659822294
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    len_arr = length(arr)\n\
    \    if len_arr == 0\n        return []\n    end\n    arr = sort(arr)\n    for\
    \ i = 1:len_arr\n        if arr[i] < 1 || arr[i] > 9\n            deleteat!(arr,\
    \ i)\n        end\n    end\n    len_arr = length(arr)\n    for i = 1:len_arr\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n   \
    \ end\n    return reverse(arr)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpj9f_a_yi.jl:53

    '
  stdout: "test set: Error During Test at /tmp/tmpj9f_a_yi.jl:56\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpj9f_a_yi.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj9f_a_yi.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj9f_a_yi.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpj9f_a_yi.jl:58\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpj9f_a_yi.jl:23\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj9f_a_yi.jl:58 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj9f_a_yi.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpj9f_a_yi.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getinde"
  timestamp: 1659822296
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #first check if\
    \ the array has a zero in it (this function is designed for numbers 1-9)\n   \
    \ for n in arr\n        if n == 0\n            return \"Array must contain the\
    \ numbers 1-9\"\n        end\n    end\n    \n    #check if the array is empty\n\
    \    if length(arr) == 0\n        return []\n    end\n    #make a dictionary of\
    \ the names\n    dict = Dict()\n    dict[1] = \"One\"\n    dict[2] = \"Two\"\n\
    \    dict[3] = \"Three\"\n    dict[4] = \"Four\"\n    dict[5] = \"Five\"\n   \
    \ dict[6] = \"Six\"\n    dict[7] = \"Seven\"\n    dict[8] = \"Eight\"\n    dict[9]\
    \ = \"Nine\"\n    \n    #first make an array of only the ones between 1 and 9\n\
    \    new_arr = []\n    for n in arr\n        if n < 10 && n > 0\n            push!(new_arr,\
    \ n)\n        end\n    end\n    \n    #now sort the new array\n    sort!(new_arr)\n\
    \    \n    #now make the final array\n    final_arr = []\n    for n in new_arr\n\
    \        push!(final_arr, dict[n])\n    end\n    \n    #now reverse it\n    reverse!(final_arr)\n\
    \    \n    return final_arr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822292
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    out = zeros(String,\
    \ length(arr))\n    isin = []\n    for i in arr\n        if (1 <= i <= 9)\n  \
    \          push!(isin, i)\n        end\n    end\n    sort!(isin)\n    for i in\
    \ isin\n        ii = length(isin) + 1 - i\n        if i == 1\n            out[ii]\
    \ = \"One\"\n        elseif i == 2\n            out[ii] = \"Two\"\n        elseif\
    \ i == 3\n            out[ii] = \"Three\"\n        elseif i == 4\n           \
    \ out[ii] = \"Four\"\n        elseif i == 5\n            out[ii] = \"Five\"\n\
    \        elseif i == 6\n            out[ii] = \"Six\"\n        elseif i == 7\n\
    \            out[ii] = \"Seven\"\n        elseif i == 8\n            out[ii] =\
    \ \"Eight\"\n        elseif i == 9\n            out[ii] = \"Nine\"\n        end\n\
    \    end\n    return out\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpitwpe5ma.jl:52

    '
  stdout: "test set: Error During Test at /tmp/tmpitwpe5ma.jl:55\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpitwpe5ma.jl:17\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpitwpe5ma.jl:55 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpitwpe5ma.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpitwpe5ma.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] by_"
  timestamp: 1659822296
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # remove the odd\
    \ numbers\n    arr = filter(x -> x%2==0, arr)\n    # sort the odd numbers\n  \
    \  sort!(arr)\n    # reverse the odd numbers\n    reverse!(arr)\n    # convert\
    \ odd numbers to strings\n    arr = map(x -> number_to_string(x), arr)\n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxh47fayg.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpxh47fayg.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_to_string\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmpxh47fayg.jl:24\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpxh47fayg.jl:24\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpxh47fayg.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpxh47fayg.jl:31\ntest set:\
    \ Test Failed at /tmp/tmpxh47fayg.jl:34\n  Expression: candidate([1, -1, 55])\
    \ == [\"One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxh47fayg.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxh47fayg.jl:31\ntest set: Error During Test\
    \ at /tmp/tmpxh47fayg.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError: number_to_string\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmpxh47fayg.jl:24\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.j"
  timestamp: 1659822296
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    idx = findall(x\
    \ -> x in 1:9, arr)\n    arr = arr[idx]\n    sort!(arr)\n    arr = reverse(arr)\n\
    \    name = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n    return [name[x] for x in arr]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq3mz34e0.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpq3mz34e0.jl:29\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Seven\", \"Four\", \"Three\", \"\
    Two\", \"One\", \"One\", \"Zero\", \"Zero\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq3mz34e0.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq3mz34e0.jl:28\ntest set: Test Failed at /tmp/tmpq3mz34e0.jl:31\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n   Evaluated: [\"Zero\"] ==\
    \ [\"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3mz34e0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3mz34e0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq3mz34e0.jl:32\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"Zero\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3mz34e0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3mz34e0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq3mz34e0.jl:33\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Eight\", \"Seven\", \"Three\"]\
    \ == [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq3mz34e0.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test."
  timestamp: 1659822295
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][sort(arr[ arr .\u2264 9 ])[end:-1:1]]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpjvezcd7w.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpjvezcd7w.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to\
    \ access 9-element Vector{String} at index [[1, -1]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{String},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpjvezcd7w.jl:17\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpjvezcd7w.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpjvezcd7w.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpjvezcd7w.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [[3, 2, 1, -1]]\n  Stacktrace:\n\
    \   [1] throw_boundserror(A::Vector{String}, I::Tuple{Vector{Int64}})\n     @\
    \ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n  \
    \ [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpjvezcd7w.jl:17\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpjvezcd7w.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpjvezcd7w.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  timestamp: 1659822296
- exit_code: -1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n  #your code here\n\
    \  sort(reverse(arr))\n  for i=1:length(arr)\n        if arr[i]==1\n         \
    \   arr[i]=\"One\"\n        elseif arr[i]==2\n            arr[i]=\"Two\"\n   \
    \     elseif arr[i]==3\n            arr[i]=\"Three\"\n        elseif arr[i]==4\n\
    \            arr[i]=\"Four\"\n        elseif arr[i]==5\n            arr[i]=\"\
    Five\"\n        elseif arr[i]==6\n            arr[i]=\"Six\"\n        elseif arr[i]==7\n\
    \            arr[i]=\"Seven\"\n        elseif arr[i]==8\n            arr[i]=\"\
    Eight\"\n        elseif arr[i]==9\n            arr[i]=\"Nine\"\n        end\n\
    \    end\n    return arr\nend\nby_length([1, -1 , 55]) \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: Cannot `convert` an object of type String
    to an object of type Int64'''
  stdout: None
  timestamp: 1659822297
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    res = sort(filter(x\
    \ -> x in 1:9, arr))\n    res = map(x -> string(x), reverse(res))\n    res = map(x\
    \ -> split(x, \"\")[1], res)\n    res = map(x -> join(reverse(split(x, \"\")),\
    \ \"\"), res)\n    res = [x == \"One\" ? \"One\" : x == \"Two\" ? \"Two\" : x\
    \ == \"Three\" ? \"Three\" : x == \"Four\" ? \"Four\" : x == \"Five\" ? \"Five\"\
    \ : x == \"Six\" ? \"Six\" : x == \"Seven\" ? \"Seven\" : x == \"Eight\" ? \"\
    Eight\" : x == \"Nine\" ? \"Nine\" : \"\" for x in res]\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6kx11ok3.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp6kx11ok3.jl:29\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\",\
    \ \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6kx11ok3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kx11ok3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6kx11ok3.jl:31\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6kx11ok3.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6kx11ok3.jl:28\ntest set: Test Failed at /tmp/tmp6kx11ok3.jl:32\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"\", \"\", \"\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6kx11ok3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kx11ok3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6kx11ok3.jl:33\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"\", \"\", \"\"] == [\"Nine\", \"\
    Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6kx11ok3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kx11ok3"
  timestamp: 1659822295
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    _sorted = sort(arr)\n\
    \    _reversed = reverse(_sorted)\n    _filtered = filter(x -> x<=9 && x>=1, _reversed)\n\
    \    return map(Int64 -> string(Int64), _filtered)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp37ml_127.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp37ml_127.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37ml_127.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37ml_127.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37ml_127.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp37ml_127.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp37ml_127.jl:26\ntest set: Test Failed at /tmp/tmp37ml_127.jl:30\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"3\", \"2\", \"1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37ml_127.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37ml_127.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37ml_127.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37ml_127.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /"
  timestamp: 1659822295
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr=sort(arr)\n\
    \    reverse(arr)\n    a=[]\n    for i in arr\n        if i==1\n            push!(a,\"\
    One\")\n        elseif i==2\n            push!(a,\"Two\")\n        elseif i==3\n\
    \            push!(a,\"Three\")\n        elseif i==4\n            push!(a,\"Four\"\
    )\n        elseif i==5\n            push!(a,\"Five\")\n        elseif i==6\n \
    \           push!(a,\"Six\")\n        elseif i==7\n            push!(a,\"Seven\"\
    )\n        elseif i==8\n            push!(a,\"Eight\")\n        elseif i==9\n\
    \            push!(a,\"Nine\")\n        end\n    end\n    return a\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfj64ae4i.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpfj64ae4i.jl:48\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfj64ae4i.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfj64ae4i.jl:47\ntest set: Test Failed at /tmp/tmpfj64ae4i.jl:51\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Two\", \"Three\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfj64ae4i.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfj64ae4i.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpfj64ae4i.jl:52\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Four\", \"Eight\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfj64ae4i.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfj64ae4i.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822295
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    counter_array =\
    \ zeros(Int64, 10)\n    output_array = zeros(String, 10)\n    for k in arr\n \
    \       if 1 <= k <= 9\n            counter_array[k] += 1\n        end\n    end\n\
    \    for i in 1:length(output_array)\n        if counter_array[i] > 0\n      \
    \      output_array[i] = string(i)\n        end\n    end\n    output_array = output_array[findall(x\
    \ -> x != \"0\", output_array)]\n    counter_array = counter_array[findall(x ->\
    \ x != 0, counter_array)]\n    while length(counter_array) > 0\n        println(counter_array)\n\
    \        println(output_array)\n        println()\n        j = argmax(counter_array)\n\
    \        counter_array[j] -= 1\n        push!(output_array, output_array[j])\n\
    \        if counter_array[j] == 0\n            counter_array = counter_array[counter_array\
    \ .!= 0]\n            output_array = output_array[output_array .!= output_array[j]]\n\
    \        end\n    end\n    output_array\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbqrnf2yo.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmpbqrnf2yo.jl:50\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbqrnf2yo.jl:18\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpbqrnf2yo.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpbqrnf2yo.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpbqrnf2yo.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] by_"
  timestamp: 1659822297
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    @assert length(arr)\
    \ < 100000\n    \n    arr = sort(arr)\n    arr = reverse(arr)\n    new_arr = []\n\
    \    for i in arr\n        if i == 1\n            append!(new_arr, \"One\")\n\
    \        elseif i == 2\n            append!(new_arr, \"Two\")\n        elseif\
    \ i == 3\n            append!(new_arr, \"Three\")\n        elseif i == 4\n   \
    \         append!(new_arr, \"Four\")\n        elseif i == 5\n            append!(new_arr,\
    \ \"Five\")\n        elseif i == 6\n            append!(new_arr, \"Six\")\n  \
    \      elseif i == 7\n            append!(new_arr, \"Seven\")\n        elseif\
    \ i == 8\n            append!(new_arr, \"Eight\")\n        elseif i == 9\n   \
    \         append!(new_arr, \"Nine\")\n        end\n    end\n    return new_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpm3wimn1o.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpm3wimn1o.jl:51\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpm3wimn1o.jl:44\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpm3wimn1o.jl:51 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpm3wimn1o.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpm3wimn1o.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.j"
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted(reverse(map(int_to_string,\
    \ filter(is_in_range_1_9, arr))))\nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpf_k6jfbz.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpf_k6jfbz.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: is_in_range_1_9\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpf_k6jfbz.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf_k6jfbz.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf_k6jfbz.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf_k6jfbz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: is_in_range_1_9\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpf_k6jfbz.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf_k6jfbz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf_k6jfbz.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf_k6jfbz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: is_in_range_1_9 not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpf_k6jfbz.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf_k6jfbz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf_k6jfbz.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf_k6jfbz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ is_in_range_1_9 not defined\n  Stackt"
  timestamp: 1659822297
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(filter(x\
    \ -> x > 0 && x < 10, arr))\n    reverse!(arr)\n    str_array = map(x -> string(x),\
    \ arr)\n    map(x -> x == \"1\" ? \"One\" : x == \"2\" ? \"Two\" : x == \"3\"\
    \ ? \"Three\" : x == \"4\" ? \"Four\" : x == \"5\" ? \"Five\" : x == \"6\" ? \"\
    Six\" : x == \"7\" ? \"Seven\" : x == \"8\" ? \"Eight\" : x == \"9\" ? \"Nine\"\
    \ : string(x), str_array)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822294
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted = sort(arr[x->x>0\
    \ & x<10])\n    reversed = reverse(sorted)\n    names = [number_to_name(i) for\
    \ i in reversed]\n    return names\nend\n \nassert by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]\nassert by_length([1, -1 , 55]) == [\"One\"]\nassert by_length([])\
    \ == []\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"by_length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpmk2tgm3v.jl:23\nin expression\
    \ starting at /tmp/tmpmk2tgm3v.jl:23\n"
  stdout: ''
  timestamp: 1659822295
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    s = sort(filter(x\
    \ -> x <= 9 && x >= 1, arr))\n    return map(x -> [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x], s[end:-1:1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822295
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    @show typeof(arr)\n\
    \    arr_sorted = sort(arr)\n    arr_rev = reverse(arr_sorted)\n    arr_str =\
    \ []\n    for i in arr_rev\n        if i == 1\n            push!(arr_str, \"One\"\
    )\n        elseif i == 2\n            push!(arr_str, \"Two\")\n        elseif\
    \ i == 3\n            push!(arr_str, \"Three\")\n        elseif i == 4\n     \
    \       push!(arr_str, \"Four\")\n        elseif i == 5\n            push!(arr_str,\
    \ \"Five\")\n        elseif i == 6\n            push!(arr_str, \"Six\")\n    \
    \    elseif i == 7\n            push!(arr_str, \"Seven\")\n        elseif i ==\
    \ 8\n            push!(arr_str, \"Eight\")\n        elseif i == 9\n          \
    \  push!(arr_str, \"Nine\")\n        end\n    end\n    return arr_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'typeof(arr) = Vector{Int64}

    typeof(arr) = Vector{Int64}

    typeof(arr) = Vector{Int64}

    typeof(arr) = Vector{Int64}

    typeof(arr) = Vector{Int64}

    Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822295
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n  if length(arr) ==\
    \ 0\n    return []\n  end\n  # sort within 1..9 inclusive and reverse\n  s=sort(filter(x->\
    \ 1<=x<=9, arr))\n  reverse!(s)\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpad17tsp_.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpad17tsp_.jl:1\n\
    in expression starting at /tmp/tmpad17tsp_.jl:1\n"
  stdout: ''
  timestamp: 1659822296
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    ## your code here\n\
    \    new_arr = []\n    for element in arr\n        if is_digit(element)\n    \
    \        push!(new_arr, element)\n        end\n    end\n    sort!(new_arr)\n \
    \   reverse!(new_arr)\n    final_arr = []\n    for element in new_arr\n      \
    \  push!(final_arr, string_table[element])\n    end\n    return final_arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8_mmab7u.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp8_mmab7u.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: is_digit\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp8_mmab7u.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_mmab7u.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_mmab7u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp8_mmab7u.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: is_digit not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp8_mmab7u.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_mmab7u.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_mmab7u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp8_mmab7u.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ is_digit not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp8_mmab7u.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_mmab7u.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_mmab7u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp8_mmab7u.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: is_digit\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::V"
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    return replace_digit(reverse_sort(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp76haeli7.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp76haeli7.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: reverse_sort\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp76haeli7.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76haeli7.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76haeli7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp76haeli7.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: reverse_sort\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp76haeli7.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76haeli7.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76haeli7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp76haeli7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: reverse_sort not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp76haeli7.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76haeli7.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76haeli7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp76haeli7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ reverse_sort not defined\n  Stacktrace:\n   [1]"
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted_list = sort(arr)\n\
    \    sorted_list = sorted_list[sorted_list .< 10]\n    sorted_list = sorted_list[sorted_list\
    \ .> 0]\n    reverse(sorted_list)\n    new_list = []\n    for num in sorted_list\n\
    \        num_name = \"\"\n        if num == 1\n            num_name = \"One\"\n\
    \        elseif num == 2\n            num_name = \"Two\"\n        elseif num ==\
    \ 3\n            num_name = \"Three\"\n        elseif num == 4\n            num_name\
    \ = \"Four\"\n        elseif num == 5\n            num_name = \"Five\"\n     \
    \   elseif num == 6\n            num_name = \"Six\"\n        elseif num == 7\n\
    \            num_name = \"Seven\"\n        elseif num == 8\n            num_name\
    \ = \"Eight\"\n        elseif num == 9\n            num_name = \"Nine\"\n    \
    \    end\n        push!(new_list, num_name)\n    end\n    return new_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp94x148rj.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmp94x148rj.jl:52\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp94x148rj.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp94x148rj.jl:51\ntest set: Test Failed at /tmp/tmp94x148rj.jl:55\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Two\", \"Three\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94x148rj.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94x148rj.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp94x148rj.jl:56\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Four\", \"Eight\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94x148rj.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94x148rj.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822297
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #Arreglo temporal\
    \ que guardara nuestros numeros\n    Arr_temp = Array{Int64}(undef,0)\n    #Arreglo\
    \ que guardara nuestros numeros ordenados y convertidos\n    Arr_Orden = Array{String}(undef,0)\n\
    \    #Ciclo que itera sobre el arreglo que nos dieron\n    for i in arr\n    \
    \    #Condicion que agrega los numeros del 1 al 9 al arreglo temporal\n      \
    \  if i>=1 && i<=9\n            push!(Arr_temp,i)\n        end\n    end\n    #Ordenamos\
    \ el arreglo temporal\n    sort!(Arr_temp)\n    #Volvemos a iterar sobre el arreglo\
    \ ordenado\n    for i in Arr_temp\n        #Agregamos a otro arreglo los numeros\
    \ convertidos a sus nombres\n        push!(Arr_Orden,convertir(i))\n    end\n\
    \    #regresamos el arreglo con numeros en cadena\n    return Arr_Orden\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjaj1gl_9.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpjaj1gl_9.jl:43\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: convertir\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjaj1gl_9.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjaj1gl_9.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjaj1gl_9.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpjaj1gl_9.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: convertir not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpjaj1gl_9.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjaj1gl_9.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjaj1gl_9.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpjaj1gl_9.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ convertir not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpjaj1gl_9.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjaj1gl_9.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjaj1gl_9.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpjaj1gl_9.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: convertir\
    \ not defined\n  Stacktrace:\n   [1] by_length(ar"
  timestamp: 1659822298
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    A = []\n    for\
    \ i in 1:length(arr)\n        if arr[i] > 0 && arr[i] < 10\n            push!(A,\
    \ arr[i])\n        end\n    end\n    sort!(A)\n    B = reverse(A)\n    C = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"]\n    D = []\n    for i in 1:length(B)\n        push!(D, C[B[i]])\n\
    \    end\n    return D\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822295
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    l = [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    a = [x for x in arr if x>0 && x<10]\n    sort!(a)\n    a = [l[x] for x\
    \ in a]\n    reverse!(a)\n    return a\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822295
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    tmp = sort(filter(i\
    \ -> i > 0 && i < 10, arr))\n    res = reverse(tmp)\n    return [get_number(i)\
    \ for i in res]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4dojlal0.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp4dojlal0.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: get_number\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp4dojlal0.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4dojlal0.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4dojlal0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4dojlal0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: get_number not defined\n\
    \  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp4dojlal0.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4dojlal0.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4dojlal0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4dojlal0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ get_number not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n  \
    \   @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"})\n     @ Base ./array.jl:724\n\
    \   [4] by_length(arr::Vector{Int64})\n     "
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # Get the sorted\
    \ array of items between 1 and 9\n    sorted_nums = sort(filter(x -> 1 <= x <=\
    \ 9, arr))\n    # Reverse the array of numbers\n    reversed_nums = reverse(sorted_nums)\n\
    \    # Get a list of strings from the numbers\n    num_strings = map(num_name,\
    \ reversed_nums)\n    \n    return num_strings\nend\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: num_name not defined\nStacktrace:\n [1]\
    \ by_length(arr::Vector{Int64})\n   @ Main /tmp/tmpwanjczrh.jl:22\n [2] top-level\
    \ scope\n   @ /tmp/tmpwanjczrh.jl:26\nin expression starting at /tmp/tmpwanjczrh.jl:26\n"
  stdout: ''
  timestamp: 1659822297
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sort_arr = sort(arr)\n\
    \    for i in 1:length(sort_arr)\n        if sort_arr[i] < 1 || sort_arr[i] >\
    \ 9\n            sort_arr[i] = -1\n        end\n    end\n    names = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    names_arr = []\n    for i in 1:length(sort_arr)\n        if sort_arr[i]\
    \ != -1\n            push!(names_arr, names[sort_arr[i]])\n        end\n    end\n\
    \    return names_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy45ghx02.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpy45ghx02.jl:37\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy45ghx02.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpy45ghx02.jl:36\ntest set: Test Failed at /tmp/tmpy45ghx02.jl:40\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Two\", \"Three\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy45ghx02.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy45ghx02.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy45ghx02.jl:41\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Four\", \"Eight\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy45ghx02.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy45ghx02.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # Sorting 1 to\
    \ 9\n    one_to_nine = sort(arr[arr.>=1 & arr.<=9])\n    # replacing each digit\
    \ by its corresponding name\n    replace_by_name = map(x-> parse(Int64, x), one_to_nine)\n\
    \    replace_by_name = map(x-> string(name(x)), replace_by_name)\n    # Reverse\
    \ list\n    output = reverse(replace_by_name)\n    return output\nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprgxb7p84.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmprgxb7p84.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprgxb7p84.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgxb7p84.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprgxb7p84.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprgxb7p84.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprgxb7p84.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgxb7p84.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
  timestamp: 1659822300
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ != 0\n        arr_sorted = sort(arr)\n        arr_sorted = reverse(arr_sorted)\n\
    \        names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n        for i in 1:length(arr_sorted)\n       \
    \     if arr_sorted[i] > 9\n                arr_sorted[i] = 0\n            end\n\
    \        end\n        return names[arr_sorted[arr_sorted.!=0]]\n    else\n   \
    \     return []\n    end\nend\nby_length([2, 1, 1, 4, 5, 8, 2, 3]) \nby_length([1,\
    \ -1 , 55]) \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 9-element Vector{String}\
    \ at index [[1, -1]]\nStacktrace:\n [1] throw_boundserror(A::Vector{String}, I::Tuple{Vector{Int64}})\n\
    \   @ Base ./abstractarray.jl:691\n [2] checkbounds\n   @ ./abstractarray.jl:656\
    \ [inlined]\n [3] _getindex\n   @ ./multidimensional.jl:838 [inlined]\n [4] getindex\n\
    \   @ ./abstractarray.jl:1218 [inlined]\n [5] by_length(arr::Vector{Int64})\n\
    \   @ Main /tmp/tmp0ez5_ze5.jl:26\n [6] top-level scope\n   @ /tmp/tmp0ez5_ze5.jl:32\n\
    in expression starting at /tmp/tmp0ez5_ze5.jl:32\n"
  stdout: ''
  timestamp: 1659822299
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr[arr\
    \ .< 10])\n    reversed_arr = reverse(sorted_arr)\n    strings_arr = [num2word(num)\
    \ for num in reversed_arr]\n    return strings_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjv8b0wdd.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpjv8b0wdd.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2word\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(num::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpjv8b0wdd.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjv8b0wdd.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjv8b0wdd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjv8b0wdd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2word not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(num::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpjv8b0wdd.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjv8b0wdd.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjv8b0wdd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjv8b0wdd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2word not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(num::Int64)\n  \
    \   @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{Int64}, var\"#1#2\"})\n     @ Base ./array.jl:724\n\
    \   [4] by_length(arr::Vector{Int64})\n     "
  timestamp: 1659822299
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # convert the array\
    \ to a vector of characters\n    # now sort the vector\n    # now we have to reverse\
    \ it\n    # now convert it back to Ints\n    # convert to names using a dictionary\n\
    \    # return the resulting vector\n    \n    # reverse\n    # convert to names\
    \ using a dictionary\n    return names\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp9jdivdvu.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp9jdivdvu.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type typeof(names) to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp9jdivdvu.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9jdivdvu.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9jdivdvu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9jdivdvu.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type typeof(names) to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp9jdivdvu.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/jul"
  timestamp: 1659822300
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)==0\n\
    \        return []\n    end\n    if any(arr.<0) || any(arr.>9)\n        #println(\"\
    One\")\n        return [\"One\"]\n    end\n    arr2=sort(arr)\n    @printf(\"\
    %s \\n\",arr2)\n    revarr=reverse(arr2)\n    @printf(\"%s \\n\",revarr)\n   \
    \ dict_num=Dict(1=>\"One\",2=>\"Two\",3=>\"Three\",4=>\"Four\",5=>\"Five\",6=>\"\
    Six\",7=>\"Seven\",8=>\"Eight\",9=>\"Nine\")\n    dict_num_vec=[]\n    for i in\
    \ revarr\n        if haskey(dict_num,i)\n            push!(dict_num_vec,get(dict_num,i,1))\n\
    \        end\n    end\n    return dict_num_vec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @printf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmppomfy9j3.jl:1\nin\
    \ expression starting at /tmp/tmppomfy9j3.jl:1\n"
  stdout: ''
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    res = []\n    for\
    \ i in arr\n        if i < 10 && i > 0\n            push!(res,i)\n        end\n\
    \    end\n    bubble_sort!(res)\n    res = reverse(res)\n    for i in 1:length(res)\n\
    \        res[i] = num2str(res[i])\n    end\n    for i in 1:length(res)\n     \
    \   if res[i] == \"1\"\n            res[i] = \"One\"\n        elseif res[i] ==\
    \ \"2\"\n            res[i] = \"Two\"\n        elseif res[i] == \"3\"\n      \
    \      res[i] = \"Three\"\n        elseif res[i] == \"4\"\n            res[i]\
    \ = \"Four\"\n        elseif res[i] == \"5\"\n            res[i] = \"Five\"\n\
    \        elseif res[i] == \"6\"\n            res[i] = \"Six\"\n        elseif\
    \ res[i] == \"7\"\n            res[i] = \"Seven\"\n        elseif res[i] == \"\
    8\"\n            res[i] = \"Eight\"\n        elseif res[i] == \"9\"\n        \
    \    res[i] = \"Nine\"\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbl35646u.jl:53

    '
  stdout: "test set: Error During Test at /tmp/tmpbl35646u.jl:56\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: bubble_sort!\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbl35646u.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbl35646u.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbl35646u.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpbl35646u.jl:57\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: bubble_sort!\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbl35646u.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbl35646u.jl:57 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbl35646u.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpbl35646u.jl:58\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: bubble_sort! not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpbl35646u.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbl35646u.jl:58 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbl35646u.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpbl35646u.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ bubble_sort! not defined\n  Stacktrace:\n   [1]"
  timestamp: 1659822299
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #using Pkg; Pkg.add(\"\
    StatsBase\")\n    sorted = sort(arr)\n    #println(sorted)\n    filtered = filter(x\
    \ -> (x >= 1 && x <= 9), sorted)\n    #println(filtered)\n    reversed = reverse(filtered)\n\
    \    #println(reversed)\n    mapped = map(d -> {if(d == 1) \"One\" elseif(d ==\
    \ 2) \"Two\" elseif(d == 3) \"Three\" elseif(d == 4) \"Four\" elseif(d == 5) \"\
    Five\" elseif(d == 6) \"Six\" elseif(d == 7) \"Seven\" elseif(d == 8) \"Eight\"\
    \ elseif(d == 9) \"Nine\" end}, reversed)\n    return mapped\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: { } vector syntax is discontinued around /tmp/tmp_dfbgug9.jl:24\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_dfbgug9.jl:1\nin expression starting\
    \ at /tmp/tmp_dfbgug9.jl:1\n"
  stdout: ''
  timestamp: 1659822297
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr_nums = [x for\
    \ x in arr if (1 <= x <= 9)]\n    sort!(arr_nums)\n    rev_arr_nums = reverse(arr_nums)\n\
    \    arr_strings = []\n    for x in rev_arr_nums\n        if (x == 1)\n      \
    \      push!(arr_strings, \"One\")\n        elseif (x == 2)\n            push!(arr_strings,\
    \ \"Two\")\n        elseif (x == 3)\n            push!(arr_strings, \"Three\"\
    )\n        elseif (x == 4)\n            push!(arr_strings, \"Four\")\n       \
    \ elseif (x == 5)\n            push!(arr_strings, \"Five\")\n        elseif (x\
    \ == 6)\n            push!(arr_strings, \"Six\")\n        elseif (x == 7)\n  \
    \          push!(arr_strings, \"Seven\")\n        elseif (x == 8)\n          \
    \  push!(arr_strings, \"Eight\")\n        elseif (x == 9)\n            push!(arr_strings,\
    \ \"Nine\")\n        end\n    end\n    return arr_strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822297
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    numbers = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    sorted = sort(arr)\n    reversed = reverse(sorted)\n    result = []\n \
    \   for val in reversed\n        if 1 <= val <= 9\n            push!(result, numbers[val])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822297
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    s = sort(filter(x\
    \ -> x >= 1 && x <= 9, arr))\n    r = reverse(s)\n    s_new = map(i -> string(map(x\
    \ -> string(x), i)), r)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp93djufho.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp93djufho.jl:26\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93djufho.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93djufho.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp93djufho.jl:28\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp93djufho.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp93djufho.jl:25\ntest set: Test Failed at /tmp/tmp93djufho.jl:29\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"3\", \"2\", \"1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93djufho.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93djufho.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp93djufho.jl:30\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93djufho.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /"
  timestamp: 1659822299
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    #Create a\
    \ list of the digits from 1-9 inclusive\n    digits_list = string.([\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ])\n    \n    #Filter the list to only contain integers in the range 1-9\n   \
    \ filtered_arr = filter(x -> (x >= 1 && x <= 9), arr)\n    \n    # Sort the filtered\
    \ array\n    sorted_arr = sort(filtered_arr)\n    \n    #Reverse the sorted array\n\
    \    reversed_arr = reverse(sorted_arr)\n    \n    #Replace the digits in the\
    \ reversed array with their word equivalents\n    word_equivalents = digits_list[reversed_arr]\n\
    \    return word_equivalents\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822297
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # First step\n\
    \    sorted = reverse(sort(arr))\n    # Second step\n    final = map(x -> one_to_nine(x),\
    \ sorted)\n    return final\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpbwj_mt6p.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpbwj_mt6p.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: one_to_nine\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main\
    \ /tmp/tmpbwj_mt6p.jl:20\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#2\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpbwj_mt6p.jl:20\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpbwj_mt6p.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpbwj_mt6p.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbwj_mt6p.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: one_to_nine not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpbwj_mt6p.jl:20\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpbwj_mt6p.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpbwj_mt6p.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpbwj_mt6p.jl:27\nte"
  timestamp: 1659822300
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted = sort(arr)\n\
    \    reversed = reverse(sorted)\n    new_arr = []\n    for i in reversed\n   \
    \     if i == 1\n            push!(new_arr, \"One\")\n        elseif i == 2\n\
    \            push!(new_arr, \"Two\")\n        elseif i == 3\n            push!(new_arr,\
    \ \"Three\")\n        elseif i == 4\n            push!(new_arr, \"Four\")\n  \
    \      elseif i == 5\n            push!(new_arr, \"Five\")\n        elseif i ==\
    \ 6\n            push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr,\
    \ \"Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n \
    \       elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n   \
    \ end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822297
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    s = sort(arr)\n\
    \    r = reverse(s)\n    n = \"One Two Three Four Five Six Seven Eight Nine\"\n\
    \    d = split(n, \" \")\n    for i in 1:length(r)\n        for j in 1:length(d)\n\
    \            if r[i] == j\n                r[i] = d[j]\n            end\n    \
    \    end\n    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpuqazafic.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpuqazafic.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type SubString{String} to an object of type Int64\n \
    \ Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::SubString{String},\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpuqazafic.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuqazafic.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuqazafic.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpuqazafic.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type SubString{String} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::SubString{String},\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpuqazafic.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] "
  timestamp: 1659822301
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sort!(arr)\n  \
    \  reverse!(arr)\n    for i in 1:length(arr)\n        if arr[i] == 1\n       \
    \     arr[i] = \"One\"\n        elseif arr[i] == 2\n            arr[i] = \"Two\"\
    \n        elseif arr[i] == 3\n            arr[i] = \"Three\"\n        elseif arr[i]\
    \ == 4\n            arr[i] = \"Four\"\n        elseif arr[i] == 5\n          \
    \  arr[i] = \"Five\"\n        elseif arr[i] == 6\n            arr[i] = \"Six\"\
    \n        elseif arr[i] == 7\n            arr[i] = \"Seven\"\n        elseif arr[i]\
    \ == 8\n            arr[i] = \"Eight\"\n        elseif arr[i] == 9\n         \
    \   arr[i] = \"Nine\"\n        end\n    end\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprcx6dioe.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmprcx6dioe.jl:47\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprcx6dioe.jl:35\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprcx6dioe.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprcx6dioe.jl:46\ntest set:\
    \ Error During Test at /tmp/tmprcx6dioe.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprcx6dioe.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprcx6dioe.jl:4"
  timestamp: 1659822301
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    s = sort(arr, lt=(x,y)->x>y)\n\
    \    t = []\n    for i in s\n        if i == 1\n            push!(t, \"One\")\n\
    \        elseif i == 2\n            push!(t, \"Two\")\n        elseif i == 3\n\
    \            push!(t, \"Three\")\n        elseif i == 4\n            push!(t,\
    \ \"Four\")\n        elseif i == 5\n            push!(t, \"Five\")\n        elseif\
    \ i == 6\n            push!(t, \"Six\")\n        elseif i == 7\n            push!(t,\
    \ \"Seven\")\n        elseif i == 8\n            push!(t, \"Eight\")\n       \
    \ elseif i == 9\n            push!(t, \"Nine\")\n        end\n    end\n    return\
    \ t\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr,\
    \ 1:9)\n    rarr = reverse(arr)\n    # here we could just call `f` on each element.\
    \ That would be fine. \n    # But it would call f once per each element, which\
    \ is slow and unnecessary.\n    # Instead, we define a function `g` which we can\
    \ give to the `map` function below.\n    # This way, it will be called only once.\n\
    \    function g(x::Int64)::String\n        return f(x)\n    end\n    map(g, rarr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmph7854951.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmph7854951.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort(::Vector{Int64}, ::UnitRange{Int64})\n  Closest candidates are:\n\
    \    sort(::AbstractVector; kws...) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:772\n\
    \    sort(::AbstractArray; dims, alg, lt, by, rev, order) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:1030\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmph7854951.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph7854951.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph7854951.jl:32\ntest set:\
    \ Error During Test at /tmp/tmph7854951.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort(::Vector{Int64}, ::UnitRange{Int64})\n  Closest candidates are:\n\
    \    sort(::AbstractVector; kws...) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:772\n\
    \    sort(::AbstractArray; dims, alg, lt, by, rev, order) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:1030\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmph7854951.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph7854951.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph7854951.jl:32\ntest set:\
    \ Error During Test at /tmp/tmph7854951.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching sort(::Vector{Int64},\
    \ ::UnitRange{Int64})\n  Closest candidates are:\n    sort(::AbstractVector; kws...)\
    \ at "
  timestamp: 1659822301
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    # Sort\n\
    \    arr = sort(arr)\n    \n    # Strip non-digits\n    one_to_nine = [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]\n    arr = [i for i in arr if i in one_to_nine]\n    \n  \
    \  # Reverse\n    arr = reverse(arr)\n    \n    # Convert to Strings\n    convert\
    \ = Dict(\"1\" => \"One\",\n                   \"2\" => \"Two\",\n           \
    \        \"3\" => \"Three\",\n                   \"4\" => \"Four\",\n        \
    \           \"5\" => \"Five\",\n                   \"6\" => \"Six\",\n       \
    \            \"7\" => \"Seven\",\n                   \"8\" => \"Eight\",\n   \
    \                \"9\" => \"Nine\")\n    strings = [convert[string(i)] for i in\
    \ arr]\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort!(arr)\n\
    \    arr = arr[arr .< 10]\n    reverse!(arr)\n    for i = 1:length(arr)\n    \
    \    if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] == 2\n\
    \            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n   \
    \ end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpv5_1eg07.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmpv5_1eg07.jl:48\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv5_1eg07.jl:36\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv5_1eg07.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv5_1eg07.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpv5_1eg07.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv5_1eg07.jl:22\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv5_1eg07.jl:5"
  timestamp: 1659822302
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    ###########################\n\
    \    # replace with your code   #\n    ###########################\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpib675p84.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpib675p84.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpib675p84.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpib675p84.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpib675p84.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpib675p84.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpib675p84.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822302
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    function digit_name(d::Int64)::String\n\
    \        DIGIT_NAMES = [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n        return DIGIT_NAMES[d]\n    end\n  \
    \  new_arr = []\n    for x in arr\n        if x > 0 && x < 10\n            push!(new_arr,\
    \ digit_name(x))\n        end\n    end\n    return sort(reverse(new_arr))\nend\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph7qw19uv.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmph7qw19uv.jl:35\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Eight\", \"Five\", \"Four\", \"\
    One\", \"One\", \"Three\", \"Two\", \"Two\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph7qw19uv.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmph7qw19uv.jl:34\ntest set: Test Failed at /tmp/tmph7qw19uv.jl:38\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Three\", \"Two\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7qw19uv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7qw19uv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmph7qw19uv.jl:39\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Eight\", \"Four\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7qw19uv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7qw19uv.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822300
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = [s for s\
    \ in arr if s in 1:9]\n    arr = sort(arr)\n    s = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return s[reverse(arr)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    s = sort(filter(x\
    \ -> (x > 0 && x < 10), arr))\n    return reverse(Int_to_str.(s))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjq2k0kr5.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpjq2k0kr5.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: Int_to_str\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjq2k0kr5.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjq2k0kr5.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjq2k0kr5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjq2k0kr5.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: Int_to_str\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjq2k0kr5.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjq2k0kr5.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjq2k0kr5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjq2k0kr5.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: Int_to_str not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpjq2k0kr5.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjq2k0kr5.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjq2k0kr5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjq2k0kr5.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ Int_to_str not defined\n  Stacktrace:\n   [1] by_leng"
  timestamp: 1659822301
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = filter(x\
    \ -> (1 <= x <= 9), arr)\n    sort!(arr)\n    n = length(arr)\n    a = Vector{String}(undef,\
    \ n)\n    for i in 1:n\n        if arr[i] == 1\n            a[i] = \"One\"\n \
    \       elseif arr[i] == 2\n            a[i] = \"Two\"\n        elseif arr[i]\
    \ == 3\n            a[i] = \"Three\"\n        elseif arr[i] == 4\n           \
    \ a[i] = \"Four\"\n        elseif arr[i] == 5\n            a[i] = \"Five\"\n \
    \       elseif arr[i] == 6\n            a[i] = \"Six\"\n        elseif arr[i]\
    \ == 7\n            a[i] = \"Seven\"\n        elseif arr[i] == 8\n           \
    \ a[i] = \"Eight\"\n        elseif arr[i] == 9\n            a[i] = \"Nine\"\n\
    \        end\n    end\n    reverse!(a)\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822298
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return []\n    end\n    if length(arr) == 1\n        if arr[1]\
    \ == 1\n            return [\"One\"]\n        else\n            return []\n  \
    \      end\n    end\n    return [sort([str[i] for i in 1:length(arr) if (1 <=\
    \ arr[i] <= 9)])[end:-1:1]...]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7asoztwr.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp7asoztwr.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: str not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#3\")(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] grow_to!(dest::Vector{Any},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#2#4\"{Vector{Int64}}, UnitRange{Int64}},\
    \ var\"#1#3\"})\n     @ Base ./array.jl:797\n   [4] collect\n     @ ./array.jl:721\
    \ [inlined]\n   [5] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp7asoztwr.jl:27\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp7asoztwr.jl:34 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp7asoztwr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7asoztwr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: str not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#3\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n    \
    \ @ ./generator.jl:47 [inlined]\n   [3] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #2#4\"{Vector{Int64}}, UnitRange{Int64}}, var\"#1#3\"})\n     @ Base ./array.jl:797\n\
    \   [4] collect\n     @ ./array.jl:721 [inlined]\n   [5] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp7asoztwr.jl:27\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp7asoztwr.jl:36 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp7asoztwr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7asoztwr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ str not defined\n  Stacktrace:\n   [1] (::var\"#1"
  timestamp: 1659822301
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # calculate the\
    \ length of the array\n    length_of_array = length(arr)\n    arr_for_return =\
    \ Array{String}(length_of_array)\n    counter = 0\n    dict_ = {1=>\"One\", 2=>\"\
    Two\", 3=>\"Three\", 4=>\"Four\", 5=>\"Five\", 6=>\"Six\", 7=>\"Seven\", 8=>\"\
    Eight\", 9=>\"Nine\"}\n    for i in arr\n        if in(i, keys(dict_))\n     \
    \       counter += 1\n            arr_for_return[counter] = dict_[i]\n       \
    \ end\n    end\n    return reverse(arr_for_return[1:counter])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: { } vector syntax is discontinued around /tmp/tmp6sb50l4r.jl:21\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp6sb50l4r.jl:1\nin expression starting\
    \ at /tmp/tmp6sb50l4r.jl:1\n"
  stdout: ''
  timestamp: 1659822300
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr)\n\
    \        return []\n    end\n    arr = sort(arr[in(1:9, arr)])\n    arr = reverse(arr)\n\
    \    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    for i in eachindex(arr)\n        arr[i] = nums[arr[i]]\n\
    \    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpa8tktsfc.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpa8tktsfc.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  ArgumentError: invalid\
    \ index: false of type Bool\n  Stacktrace:\n    [1] to_index(i::Bool)\n      @\
    \ Base ./indices.jl:293\n    [2] to_index(A::Vector{Int64}, i::Bool)\n      @\
    \ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:330 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1221 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpa8tktsfc.jl:20\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa8tktsfc.jl:33 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa8tktsfc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpa8tktsfc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  ArgumentError: invalid index: false of\
    \ type Bool\n  Stacktrace:\n    [1] to_index(i::Bool)\n      @ Base ./indices.jl:293\n\
    \    [2] to_index(A::Vector{Int64}, i::Bool)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:330 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1221\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpa8tktsfc.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa8tktsfc.jl:35 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa8tktsfc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpa8tktsfc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  ArgumentError:\
    \ invalid index: f"
  timestamp: 1659822302
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n  # Write your code\
    \ here!\n  return names[sort(arr) .< 10 .& arr .> 0]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwe8l1nju.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpwe8l1nju.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching getindex(::typeof(names), ::BitVector)\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpwe8l1nju.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwe8l1nju.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwe8l1nju.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwe8l1nju.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching getindex(::typeof(names), ::BitVector)\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpwe8l1nju.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwe8l1nju.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwe8l1nju.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwe8l1nju.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching getindex(::typeof(names),\
    \ ::BitVector)\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpwe8l1nju.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwe8l1nju.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwe8l1nju.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwe8l1nju.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, "
  timestamp: 1659822303
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #=\n    array_filter(arr,\
    \ x -> x in (1:9))\n    #=\n    new_arr = []\n    for i in arr\n        if i in\
    \ (1:9)\n            append!(new_arr, i)\n        end\n    end\n    reverse!(new_arr)\n\
    \    #=\n    new_arr = [string(i) for i in new_arr]\n    #=\n    for i in 1:length(new_arr)\n\
    \        for j in 1:9\n            if new_arr[i] == string(j)\n              \
    \  new_arr[i] = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][j]\n            end\n        end\n    end\n    new_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: unterminated multi-line comment #=\
    \ ... =#\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxw5e_4yc.jl:1\nin expression\
    \ starting at /tmp/tmpxw5e_4yc.jl:1\n"
  stdout: ''
  timestamp: 1659822300
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    s = sort(filter(x\
    \ -> (x >= 1 && x <= 9), arr))\n    r = reverse(s)\n    map( x -> string(Dict(1\
    \ => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 =>\
    \ \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\")[x]), r)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822299
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # we can use sort,\
    \ sort! or any other sorting function\n    sorted_array = sort(arr)\n    length_array\
    \ = length(sorted_array)\n    # we will use reverse! to revert the numbers\n \
    \   reverse!(sorted_array)\n    # now we need to replace the numbers with their\
    \ respective names.\n    for x in 1:length_array\n        if sorted_array[x] ==\
    \ 1\n            sorted_array[x] = \"One\"\n        elseif sorted_array[x] ==\
    \ 2\n            sorted_array[x] = \"Two\"\n        elseif sorted_array[x] ==\
    \ 3\n            sorted_array[x] = \"Three\"\n        elseif sorted_array[x] ==\
    \ 4\n            sorted_array[x] = \"Four\"\n        elseif sorted_array[x] ==\
    \ 5\n            sorted_array[x] = \"Five\"\n        elseif sorted_array[x] ==\
    \ 6\n            sorted_array[x] = \"Six\"\n        elseif sorted_array[x] ==\
    \ 7\n            sorted_array[x] = \"Seven\"\n        elseif sorted_array[x] ==\
    \ 8\n            sorted_array[x] = \"Eight\"\n        elseif sorted_array[x] ==\
    \ 9\n            sorted_array[x] = \"Nine\"\n        end\n    end\n    return\
    \ sorted_array\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf3dcj3qu.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpf3dcj3qu.jl:51\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpf3dcj3qu.jl:39\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf3dcj3qu.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf3dcj3qu.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpf3dcj3qu.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpf3dcj3qu.jl:25\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf3dcj3qu.jl:5"
  timestamp: 1659822303
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #Code goes here!\n\
    \    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplbbnqyjr.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmplbbnqyjr.jl:25\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplbbnqyjr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplbbnqyjr.jl:24\ntest set: Test\
    \ Failed at /tmp/tmplbbnqyjr.jl:27\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplbbnqyjr.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplbbnqyjr.jl:24\ntest set: Test Failed at /tmp/tmplbbnqyjr.jl:28\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ String[] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplbbnqyjr.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplbbnqyjr.jl:24\ntest set: Test Failed at /tmp/tmplbbnqyjr.jl:29\n\
    \  Expression: candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n   Evaluated:\
    \ String[] == [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplbbnqyjr.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplbbnqyjr.jl:24\nTest Summary: | Pass "
  timestamp: 1659822301
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    temp = sort(arr[arr\
    \ .< 10 .& arr .> 0])\n    return reverse(replace.(string.(temp), [\"1\" => \"\
    One\", \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\"\
    , \"6\" => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\"\
    ]))\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp50r67mq1.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp50r67mq1.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 0\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp50r67mq1.jl:18\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp50r67mq1.jl:25 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp50r67mq1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp50r67mq1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp50r67mq1.jl:18\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp50r67mq1.jl:26 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n  "
  timestamp: 1659822303
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr)\n\
    \        return Vector{String}()\n    end\n    sorted_array = sort(filter(x ->\
    \ x >= 1 && x <= 9, arr))\n    reversed_array = reverse(sorted_array)\n    function\
    \ number_to_string(number::Int64)::String\n        if number == 1\n          \
    \  return \"One\"\n        elseif number == 2\n            return \"Two\"\n  \
    \      elseif number == 3\n            return \"Three\"\n        elseif number\
    \ == 4\n            return \"Four\"\n        elseif number == 5\n            return\
    \ \"Five\"\n        elseif number == 6\n            return \"Six\"\n        elseif\
    \ number == 7\n            return \"Seven\"\n        elseif number == 8\n    \
    \        return \"Eight\"\n        elseif number == 9\n            return \"Nine\"\
    \n        end\n    end\n    return map(number_to_string, reversed_array)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822299
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    \n    \n\
    \    #your code here\n    \n    return \nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4tvbgw4h.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp4tvbgw4h.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp4tvbgw4h.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4tvbgw4h.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tvbgw4h.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4tvbgw4h.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp4tvbgw4h.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822303
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    small = Vector{Int64}()\n\
    \    for i in arr\n        if (1 <= i <= 9)\n            push!(small, i)\n   \
    \     end\n    end\n    if length(small) == 0\n        return small\n    end\n\
    \    # sort\n    for i in 1:length(small)\n        if small[i] > small[i+1]\n\
    \            small[i], small[i+1] = small[i+1], small[i]\n        end\n    end\n\
    \    #reverse\n    for i in 1:length(small)\n        small[i] = small[end-i+1]\n\
    \    end\n    #name \n    name = []\n    for i in small\n        if i == 1\n \
    \           push!(name, \"One\")\n        elseif i == 2\n            push!(name,\
    \ \"Two\")\n        elseif i == 3\n            push!(name, \"Three\")\n      \
    \  elseif i == 4\n            push!(name, \"Four\")\n        elseif i == 5\n \
    \           push!(name, \"Five\")\n        elseif i == 6\n            push!(name,\
    \ \"Six\")\n        elseif i == 7\n            push!(name, \"Seven\")\n      \
    \  elseif i == 8\n            push!(name, \"Eight\")\n        elseif i == 9\n\
    \            push!(name, \"Nine\")\n        end\n    end\n    return name\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwrq_ldzd.jl:63

    '
  stdout: "test set: Error During Test at /tmp/tmpwrq_ldzd.jl:66\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [9]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpwrq_ldzd.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwrq_ldzd.jl:66 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwrq_ldzd.jl:65\ntest set:\
    \ Error During Test at /tmp/tmpwrq_ldzd.jl:68\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpwrq_ldzd.jl:28\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwrq_ldzd.jl:68 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwrq_ldzd.jl:65\ntest set:\
    \ Error During Test at /tmp/tmpwrq_ldzd.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpwrq_ldzd.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwrq_ldzd.jl:69 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @"
  timestamp: 1659822303
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n \n \n \nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpki22l443.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpki22l443.jl:1\n\
    in expression starting at /tmp/tmpki22l443.jl:1\n"
  stdout: ''
  timestamp: 1659822301
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return []\n    end\n    arr = [ elem for elem in arr if elem\
    \ in [1,2,3,4,5,6,7,8,9] ]\n    sort!(arr)\n    reverse!(arr)\n    ret = []\n\
    \    for elem in arr\n        if elem == 1\n            push!(ret, \"One\")\n\
    \        elseif elem == 2\n            push!(ret, \"Two\")\n        elseif elem\
    \ == 3\n            push!(ret, \"Three\")\n        elseif elem == 4\n        \
    \    push!(ret, \"Four\")\n        elseif elem == 5\n            push!(ret, \"\
    Five\")\n        elseif elem == 6\n            push!(ret, \"Six\")\n        elseif\
    \ elem == 7\n            push!(ret, \"Seven\")\n        elseif elem == 8\n   \
    \         push!(ret, \"Eight\")\n        elseif elem == 9\n            push!(ret,\
    \ \"Nine\")\n        end\n    end\n    return ret\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822300
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    \n    \n\
    \    return Dict(collect(1:9))[sort(filter(x -> x >= 1 && x <= 9, arr))[end:-1:1]]\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvxobk06r.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvxobk06r.jl:1\n\
    in expression starting at /tmp/tmpvxobk06r.jl:1\n"
  stdout: ''
  timestamp: 1659822301
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n     return reverse([\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][collect(1:9).\u2264.(arr).*arr])\n    \nend \n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \".\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsybc12e_.jl:17\nin expression starting at\
    \ /tmp/tmpsybc12e_.jl:17\n"
  stdout: ''
  timestamp: 1659822301
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    less_than_9 = [i\
    \ for i in arr if i<10]\n    sorted_array = sort(less_than_9)\n    length_reversed\
    \ = reverse(sorted_array)\n    string_array = [\"One\",\"Two\",\"Three\",\"Four\"\
    ,\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"]\n    return [string_array[i] for\
    \ i in length_reversed]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpsw95xt0p.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpsw95xt0p.jl:30\n  Test threw exception\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to\
    \ access 9-element Vector{String} at index [-1]\n  Stacktrace:\n    [1] getindex\n\
    \      @ ./array.jl:861 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n  \
    \  [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n   \
    \   @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [6] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Vector{String}}})\n\
    \      @ Base ./array.jl:734\n    [7] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmpsw95xt0p.jl:21\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpsw95xt0p.jl:30 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsw95xt0p.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsw95xt0p.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [-1]\n  Stacktrace:\n    [1] getindex\n\
    \      @ ./array.jl:861 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n  \
    \  [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n   \
    \   @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [6] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Vector{String}}})\n\
    \      @ Base ./array.jl:734\n    [7] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmpsw95xt0p.jl:21\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpsw95xt0p.jl:31 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsw95xt0p.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |"
  timestamp: 1659822303
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # collect the numbers\
    \ in an array\n    numbers = (1:9).<=arr\n    # take the length of this array\n\
    \    return length(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpz3sitz7b.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpz3sitz7b.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 9\
    \ and 8\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpz3sitz7b.jl:18\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpz3sitz7b.jl:27 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpz3sitz7b.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpz3sitz7b.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 9 and\
    \ 0\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpz3sitz7b.jl:18\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpz3sitz7b.jl:28 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n  "
  timestamp: 1659822303
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    for i in 1:length(arr)\n        if arr[i] == 1\n\
    \            arr[i] = \"One\"\n        elseif arr[i] == 2\n            arr[i]\
    \ = \"Two\"\n        elseif arr[i] == 3\n            arr[i] = \"Three\"\n    \
    \    elseif arr[i] == 4\n            arr[i] = \"Four\"\n        elseif arr[i]\
    \ == 5\n            arr[i] = \"Five\"\n        elseif arr[i] == 6\n          \
    \  arr[i] = \"Six\"\n        elseif arr[i] == 7\n            arr[i] = \"Seven\"\
    \n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\n        elseif arr[i]\
    \ == 9\n            arr[i] = \"Nine\"\n        end\n    end\n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplpdk8h13.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmplpdk8h13.jl:47\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplpdk8h13.jl:35\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplpdk8h13.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplpdk8h13.jl:46\ntest set:\
    \ Error During Test at /tmp/tmplpdk8h13.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplpdk8h13.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplpdk8h13.jl:4"
  timestamp: 1659822304
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    new_arr = []\n\
    \    for num in arr\n        if num in (1:9)\n            push!(new_arr, num)\n\
    \        end\n    end\n    if isempty(new_arr)\n        return []\n    end\n \
    \   sort!(new_arr)\n    rev_arr = reverse(new_arr)\n    d = Dict(\"One\" => 1,\
    \ \"Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"\
    Seven\" => 7, \"Eight\" => 8, \"Nine\" => 9)\n    num_to_str = []\n    for num\
    \ in rev_arr\n        for (key, value) in d\n            if num == value\n   \
    \             push!(num_to_str, key)\n            end\n        end\n    end\n\
    \    return num_to_str\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822301
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(collect(arr[arr\
    \ .>= 1 & arr .<= 9]))\n    return reverse(string.(sorted_arr))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjus3udh4.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpjus3udh4.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpjus3udh4.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjus3udh4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjus3udh4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjus3udh4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpjus3udh4.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjus3udh4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
  timestamp: 1659822304
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    # your code\
    \ here\n    \nend\nusing Test\n@testset \"by_length Tests\" begin\n    @test by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n    @test by_length([1, -1 , 55]) == ['One']\n \
    \   @test by_length([]) == []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzijyh7mt.jl:24\nin expression\
    \ starting at /tmp/tmpzijyh7mt.jl:24\n"
  stdout: ''
  timestamp: 1659822302
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # We need to sort\
    \ the elements in the array\n    # We need to reverse the array\n    # We need\
    \ to check the key\n    # We need to map the int to a str\n    # return the array\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf3bgz_he.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf3bgz_he.jl:1\n\
    in expression starting at /tmp/tmpf3bgz_he.jl:1\n"
  stdout: ''
  timestamp: 1659822302
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    v = sort(filter(x\
    \ -> (1 <= x <= 9), arr))\n    n = length(v)\n    if n == 0\n        return []\n\
    \    end\n    w = []\n    for i in reverse(1:n)\n        push!(w, num_to_word(v[i]))\n\
    \    end\n    return w\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3i475ger.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp3i475ger.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num_to_word\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3i475ger.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i475ger.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i475ger.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3i475ger.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num_to_word not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3i475ger.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i475ger.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i475ger.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3i475ger.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num_to_word not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp3i475ger.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i475ger.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i475ger.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3i475ger.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: num_to_word\
    \ not defined\n  Stacktrace:\n   [1] by_l"
  timestamp: 1659822304
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    for i in\
    \ arr\n        if(!(i >= 1 && i <= 9))\n            deleteat!(arr, findall(arr\
    \ .== i))\n        end\n    end\n    sort!(arr)\n    reverse!(arr)\n    result\
    \ = []\n    for i in arr\n        if(i == 1)\n            push!(result, \"One\"\
    )\n        elseif(i == 2)\n            push!(result, \"Two\")\n        elseif(i\
    \ == 3)\n            push!(result, \"Three\")\n        elseif(i == 4)\n      \
    \      push!(result, \"Four\")\n        elseif(i == 5)\n            push!(result,\
    \ \"Five\")\n        elseif(i == 6)\n            push!(result, \"Six\")\n    \
    \    elseif(i == 7)\n            push!(result, \"Seven\")\n        elseif(i ==\
    \ 8)\n            push!(result, \"Eight\")\n        elseif(i == 9)\n         \
    \   push!(result, \"Nine\")\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659822302
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # YOUR CODE HERE\n\
    end;\n \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjyd77181.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpjyd77181.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpjyd77181.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjyd77181.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjyd77181.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjyd77181.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpjyd77181.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659822305
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    reverse(sort(filter(x\
    \ -> (x >= 1 && x <= 9),arr))) .==>\n        x -> [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x] .==>\n     \
    \   map(x -> join(x,\" \"),x)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpac6cja79.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpac6cja79.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: x not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpac6cja79.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpac6cja79.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpac6cja79.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpac6cja79.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: x not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpac6cja79.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpac6cja79.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpac6cja79.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpac6cja79.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: x not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpac6cja79.jl:19\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpac6cja79.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpac6cja79.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpac6cja79.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ x not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /"
  timestamp: 1659822305
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    # OrderedDict saves\
    \ the order of the keys and values added to it. \n    # In contrast, the standard\
    \ `Dict` saves the order of keys, but not the order of values.\n    d = OrderedDict(\"\
    One\" => 1, \"Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\"\
    \ => 6, \"Seven\" => 7, \"Eight\" => 8, \"Nine\" => 9)\n    # modify the array\
    \ \n    filter!(x -> (1 <= x <= 9), arr)\n    # sort the array\n    sort!(arr)\n\
    \    # reverse the array\n    reverse!(arr)\n    # map each value from the array\
    \ to the corresponding name from \"One\", \"Two\", ...\n    result = map(x ->\
    \ d[string(x)], arr)\n    return result\nend\n    \n    \n\"\"\"\n    Anagrams\
    \ are words which contain the same characters but in a different order. \n   \
    \ For example, \"meat\" and \"team\" are anagrams. \n    Create a function that\
    \ accepts a string and returns a boolean indicating whether it's an anagram.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpbs43b3ug.jl:32\nin expression starting at /tmp/tmpbs43b3ug.jl:32\n"
  stdout: ''
  timestamp: 1659822303
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    numbers = sort(Int[i\
    \ for i in arr if 1 <= i <= 9])\n    names = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[i]\
    \ for i in numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48lgbw8_.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp48lgbw8_.jl:26\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp48lgbw8_.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp48lgbw8_.jl:25\ntest set: Test Failed at /tmp/tmp48lgbw8_.jl:29\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Two\", \"Three\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48lgbw8_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48lgbw8_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp48lgbw8_.jl:30\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Four\", \"Eight\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48lgbw8_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48lgbw8_.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822304
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return []\n    end\n    function digit_by_int(digit::Int64)::String\n\
    \        if digit == 1\n            return \"One\"\n        elseif digit == 2\n\
    \            return \"Two\"\n        elseif digit == 3\n            return \"\
    Three\"\n        elseif digit == 4\n            return \"Four\"\n        elseif\
    \ digit == 5\n            return \"Five\"\n        elseif digit == 6\n       \
    \     return \"Six\"\n        elseif digit == 7\n            return \"Seven\"\n\
    \        elseif digit == 8\n            return \"Eight\"\n        elseif digit\
    \ == 9\n            return \"Nine\"\n        else\n            return \"\";\n\
    \        end\n    end\n    function sorting(arr::Vector{Int64})::Vector{Int64}\n\
    \        if length(arr) <= 1\n            return arr\n        end\n        i =\
    \ 1\n        j = length(arr)\n        pivot = arr[1]\n        while i <= j\n \
    \           while i <= j && arr[i] <= pivot\n                i += 1\n        \
    \    end\n            while i <= j && arr[j] > pivot\n                j -= 1\n\
    \            end\n            if i <= j\n                tmp = arr[i]\n      \
    \          arr[i] = arr[j]\n                arr[j] = tmp\n            end\n  \
    \      end\n        tmp = arr[1]\n        arr[1] = arr[j]\n        arr[j] = tmp\n\
    \        return [ sorting(arr[1:j-1]); sorting(arr[j+1:end]) ]\n    end\n    function\
    \ digits_array(arr::Vector{Int64})::Vector{String}\n        if length(arr) ==\
    \ 0\n            return []\n        end\n        return [ digit_by_int(arr[1])\
    \ ; digits_array(arr[2:end]) ]\n    end\n    return digits_array(sorting(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj37vod_t.jl:78

    '
  stdout: "test set: Test Failed at /tmp/tmpj37vod_t.jl:81\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Eight\"] ==\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj37vod_t.jl:81 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj37vod_t.jl:80\ntest set: Test\
    \ Failed at /tmp/tmpj37vod_t.jl:83\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"\", \"\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj37vod_t.jl:83 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj37vod_t.jl:80\ntest set: Test Failed at /tmp/tmpj37vod_t.jl:84\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"\", \"Two\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj37vod_t.jl:84 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj37vod_t.jl:80\ntest set: Test Failed at /tmp/tmpj37vod_t.jl:85\n\
    \  Expression: candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n   Evaluated:\
    \ [\"Four\"] == [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj37vod_t.jl:85 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj37vod_t.jl:80\nT"
  timestamp: 1659822304
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = [ if x in\
    \ [1,2,3,4,5,6,7,8,9] x else continue for x in arr]\n    return reverse([\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][arr])\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"for\" after continue\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3u095ebf.jl:17\nin expression starting at\
    \ /tmp/tmp3u095ebf.jl:17\n"
  stdout: ''
  timestamp: 1659822303
