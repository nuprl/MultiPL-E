language: jl
name: HumanEval_102_choose_num
results:
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    max_even\
    \ = -1 \n    for i in x:y \n        # The modulo (%) gives the remainder after\
    \ division of one number by \n        # another number. The two numbers must be\
    \ integers. \n        # The expression x % y returns the remainder after x is\
    \ divided by y.\n        if i % 2 == 0 \n            if i > max_even \n      \
    \          max_even = i \n            end \n        end \n    end \n    return\
    \ max_even \nend \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821856
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    \n    max_even = 0\n    for i in x:y\n\
    \        if i % 2 == 0 && i > max_even\n            max_even = i\n        end\n\
    \    end\n    \n    if max_even == 0\n        return -1\n    end\n    \n    return\
    \ max_even\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821856
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    iseven(x)\
    \ &amp;&amp; x &gt;= y ? return x : return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp79f89o0a.jl:8\nin expression starting at /tmp/tmp79f89o0a.jl:8\n"
  stdout: ''
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   \n    \n \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjdk00m48.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjdk00m48.jl:1\n\
    in expression starting at /tmp/tmpjdk00m48.jl:1\n"
  stdout: ''
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y return -1\n    elseif y % 2 == 0 return y\n    elseif y - 1 % 2 == 0 return\
    \ y - 1\n    elseif x % 2 == 0 return x\n    elseif x + 1 % 2 == 0 return x +\
    \ 1\n    else return -1\n    end\nend\n@testset \"choose_num\" begin\n    @test\
    \ choose_num(3, 5) == 4\n    @test choose_num(7, 9) == 8\n    @test choose_num(9,\
    \ 7) == -1\n    @test choose_num(12, 14) == 14\n    @test choose_num(10, 12) ==\
    \ 12\n    @test choose_num(15, 15) == 15\n    @test choose_num(4, 4) == 4\n  \
    \  @test choose_num(3, 10) == 4\n    @test choose_num(4, 9) == 6\n    @test choose_num(1,\
    \ 5) == 4\n    @test choose_num(5, 10) == 6\n    @test choose_num(5, 15) == 6\n\
    \    @test choose_num(5, 20) == 6\n    @test choose_num(1, 5) == 4\n    @test\
    \ choose_num(15, 1) == -1\n    @test choose_num(1, 1) == 1\n    @test choose_num(17,\
    \ 19) == 18\n    @test choose_num(12, 20) == 14\n    @test choose_num(16, 18)\
    \ == 18\n    @test choose_num(3, 2) == -1\n    @test choose_num(9, 9) == 9\n \
    \   @test choose_num(4, 13) == 4\n    @test choose_num(3, 13) == 4\n    @test\
    \ choose_num(3, 14) == 4\n    @test choose_num(5, 1) == -1\n    @test choose_num(12,\
    \ 1) == -1\n    @test choose_num(2, 15) == 4\n    @test choose_num(15, 2) == -1\n\
    \    @test choose_num(1, 4) == 4\n    @test choose_num(3, 8) == 4\n    @\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"begin\" at /tmp/tmper0esffs.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmper0esffs.jl:16\n\
    in expression starting at /tmp/tmper0esffs.jl:16\n"
  stdout: ''
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    list_even\
    \ = []\n    for n in x:y\n        if n % 2 == 0\n            push!(list_even,\
    \ n)\n        end\n    end\n    if length(list_even) == 0\n        return -1\n\
    \    else\n        return maximum(list_even)\n    end\nend\n\"\"\"A function that\
    \ takes an integer number n and returns a list of all\n        the divisors of\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpiwnrg4.jl:20\nin expression starting at\
    \ /tmp/tmptpiwnrg4.jl:20\n"
  stdout: ''
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in x:y\n        if i % 2 == 0 && i > 1\n            return i\n        end\n\
    \    end\n    return -1\nend\nchoose_num(x, y)\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: x not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpym0l4y5i.jl:15\nin expression starting at /tmp/tmpym0l4y5i.jl:15\n"
  stdout: ''
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   while x <= y\n        if x % 2 == 0\n            return x\n        end\n \
    \       x += 1\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsrje6cme.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpsrje6cme.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrje6cme.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrje6cme.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsrje6cme.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrje6cme.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrje6cme.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsrje6cme.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrje6cme.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrje6cme.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if (x\
    \ % 2 == 0) && (y % 2 == 0)\n        return y\n    elseif (x % 2 == 0) && (y %\
    \ 2 != 0)\n        return x\n    elseif (x % 2 != 0) && (y % 2 == 0)\n       \
    \ return y - 1\n    elseif (x % 2 != 0) && (y % 2 != 0)\n        if x + 1 == y\n\
    \            return -1\n        else\n            return y - 2\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg4wt2kot.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpg4wt2kot.jl:27\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg4wt2kot.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg4wt2kot.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg4wt2kot.jl:28\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 11 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg4wt2kot.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg4wt2kot.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg4wt2kot.jl:29\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 12353 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg4wt2kot.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg4wt2kot.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg4wt2kot.jl:30\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg4wt2kot.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg4wt2kot.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg4wt2kot.jl:31\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg4wt2kot.jl:31 [inlin"
  timestamp: 1659821858
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    while\
    \ x <= y && x % 2 != 0\n        x += 1\n    end\n    if x % 2 == 0\n        return\
    \ x\n    else\n        return -1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvm2du4dh.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvm2du4dh.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvm2du4dh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvm2du4dh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvm2du4dh.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvm2du4dh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvm2du4dh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvm2du4dh.jl:25\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvm2du4dh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvm2du4dh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvm2du4dh.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvm2du4dh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvm2du4dh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvm2du4dh.jl:28\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvm2du4dh.jl:28 [inlined]\n ["
  timestamp: 1659821857
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   for i in y:-1:x\n        if i%2 == 0\n            return i\n        end\n\
    \    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821856
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in x:y\n        if i % 2 == 0\n            return i\n    return -1\n    \n\
    \"\"\"The function takes a positive number x as a parameter and should return\
    \ a \nlist of all square numbers that are less than x. If there's no such numbers,\
    \ \nthen the function should return the empty list.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbzdczsv.jl:1\nin expression starting at /tmp/tmpmbzdczsv.jl:1\n"
  stdout: ''
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        return -1\n    end\n    for i in x:y\n        if i%2==0\n           \
    \ return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1lero_jo.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp1lero_jo.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1lero_jo.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1lero_jo.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \"\"\
    \"\n    This function creates a list of even numbers between the numbers x and\
    \ y and returns the \n    biggest number in that list, if there is no such number,\
    \ then the function returns -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxxz5le8.jl:1\nin expression starting at /tmp/tmpwxxz5le8.jl:1\n"
  stdout: ''
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n  if x >\
    \ y\n    return -1\n  end\n  if y%2 == 0\n    return y\n  end\n  if x%2 == 0\n\
    \    return x\n  end\n  return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppoja83bm.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmppoja83bm.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoja83bm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoja83bm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppoja83bm.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoja83bm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoja83bm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \"\"\
    \"\n    if x < y \n        for i in x:y\n            if (x % 2 == 0) & (x % 2\
    \ == 0)\n                println(x)\n            else \n                println(y)\n\
    \            end\n        end\n    else \n        println(\"-1\")\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmoz6n3a.jl:1\nin expression starting at /tmp/tmpkmoz6n3a.jl:1\n"
  stdout: ''
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    return\
    \ -1\nend\nprintln(choose_num(9, 12))  # 10\nprintln(choose_num(13, 20)) # 18\n\
    println(choose_num(21, 30)) # -1\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe6v5zfo7.jl:15

    '
  stdout: "-1\n-1\n-1\ntest set: Test Failed at /tmp/tmpe6v5zfo7.jl:18\n  Expression:\
    \ candidate(12, 15) == 14\n   Evaluated: -1 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe6v5zfo7.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe6v5zfo7.jl:17\ntest set: Test Failed at /tmp/tmpe6v5zfo7.jl:20\n\
    \  Expression: candidate(33, 12354) == 12354\n   Evaluated: -1 == 12354\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6v5zfo7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6v5zfo7.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpe6v5zfo7.jl:22\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ -1 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6v5zfo7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6v5zfo7.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpe6v5zfo7.jl:25\n  Expression: candidate(546, 546) == 546\n\
    \   Evaluated: -1 == 546\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6v5zfo7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6v5zfo7.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821857
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ n in x:y\n        if n % 2 == 0\n            println(n)\n        else\n    \
    \        return -1\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''12\ntest set: Test Failed at /tmp/tmplvi_vgl0.jl:21\n  Expression: candidate(12,
    15) == 14\n   Evaluated: -1 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmplvi_vgl0.jl:21 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmplvi_vgl0.jl:20\ntest set: Error
    During Test at /tmp/tmplvi_vgl0.jl:22\n  Test threw exception\n  Expression: candidate(13,
    12) == -1\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmplvi_vgl0.jl:12\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmplvi_vgl0.jl:22 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmplvi_vgl0.jl:20\ntest set: Test
    Failed at /tmp/tmplvi_vgl0.jl:23\n  Expression: candidate(33, 12354) == 12354\n   Evaluated:
    -1 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmplvi_vgl0.jl:23 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmplvi_vgl0.jl:20\ntest set: Error
    During Test at /tmp/tmplvi_vgl0.jl:24\n  Test threw exception\n  Expression: candidate(5234,
    5233) == -1\n  Meth'
  timestamp: 1659821860
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    while y > x\n        if y % 2 == 0\n  \
    \          return y\n        end\n        y -= 1\n    end\n    return x\nend\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxlsho12a.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpxlsho12a.jl:30\n  Expression: candidate(7,\
    \ 7) == -1\n   Evaluated: 7 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxlsho12a.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxlsho12a.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659821858
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    start\
    \ = Int64(x)\n    finish = Int64(y)\n    for i in start:finish\n        if i %\
    \ 2 == 0\n            return i\n        end\n    end\n    return -1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9egw18n3.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp9egw18n3.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9egw18n3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9egw18n3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9egw18n3.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9egw18n3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9egw18n3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9egw18n3.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9egw18n3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9egw18n3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821857
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in y:-1:x\n        if i % 2 == 0\n            return i\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821856
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if y\
    \ < x\n        return -1\n    end\n    x = max(x, y)\n    while x >= y\n     \
    \   if x % 2 == 0\n            return x\n        end\n        x -= 1\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0d8o7qmz.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp0d8o7qmz.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: -1 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0d8o7qmz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0d8o7qmz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0d8o7qmz.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ -1 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0d8o7qmz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0d8o7qmz.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659821857
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    x%2\
    \ == 0 ? (return x) : (x+=1)\n    for i in x:y\n        if i%2 == 0\n        \
    \    return i\n        end\n    end\n    return -1\nend\nchoose_num(x::Int64,\
    \ y::Int64) = choose_num(x, y)\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659821860
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ % 2 == 0\n        a = x\n    elseif x % 2 != 0\n        a = x + 1\n    end\n\
    \    if y % 2 == 0\n        b = y\n    elseif y % 2 != 0\n        b = y - 1\n\
    \    end\n    if a > b\n        return -1\n    elseif a <= b\n        return b\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821856
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    if x % 2 == 0\n        return x\n    else\n\
    \        x = x + 1\n    end\n    for i in x:y\n        if i % 2 == 0\n       \
    \     return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7jl3msy9.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp7jl3msy9.jl:28\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jl3msy9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jl3msy9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7jl3msy9.jl:30\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jl3msy9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jl3msy9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7jl3msy9.jl:32\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jl3msy9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jl3msy9.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821858
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    \n    for i in (x:y)\n        if i % 2\
    \ == 0\n            return i\n        end\n    end\n    \n    return -1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_4j5aca5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp_4j5aca5.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_4j5aca5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_4j5aca5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_4j5aca5.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_4j5aca5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_4j5aca5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_4j5aca5.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_4j5aca5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_4j5aca5.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821858
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\
    \ \n        return -1\n    end\n    for i in x:y\n        if i%2==0\n        \
    \    return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoxt_mmkv.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpoxt_mmkv.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxt_mmkv.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxt_mmkv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoxt_mmkv.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxt_mmkv.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxt_mmkv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoxt_mmkv.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxt_mmkv.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxt_mmkv.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821858
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in range(x, y+1):\n        if (i % 2 == 0):\n            return i\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuhwi23c0.jl:9\nin expression starting at /tmp/tmpuhwi23c0.jl:9\n"
  stdout: ''
  timestamp: 1659821858
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        return -1\n    end\n    z = max(x,y)\n    while z%2 != 0\n        z =\
    \ z-1\n    end\n    return z\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7j5fqaiq.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp7j5fqaiq.jl:28\n  Expression: candidate(7,\
    \ 7) == -1\n   Evaluated: 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7j5fqaiq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7j5fqaiq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659821859
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # x\
    \ and y are positive integers\n    # this function returns the biggest even integer\
    \ in the range [x, y]\n    if x == y \n        if x % 2 == 0\n            return\
    \ x\n        else\n            return -1\n        end\n    elseif x < y\n    \
    \    for i in range(y, x, -1)\n            if i % 2 == 0\n                return\
    \ i\n            end\n        end\n        return -1\n    else\n        return\
    \ -1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt_m92egd.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpt_m92egd.jl:32\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  ArgumentError: range(15.0, stop=12.0,\
    \ length=-1): negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] choose_num(x::Int64,\
    \ y::Int64)\n      @ Main /tmp/tmpt_m92egd.jl:17\n    [8] macro expansion\n  \
    \    @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [9] macro expansion\n      @ /tmp/tmpt_m92egd.jl:32 [inlined]\n   [10] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpt_m92egd.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpt_m92egd.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(33, 12354) == 12354\n  ArgumentError: range(12354.0, stop=33.0, length=-1):\
    \ negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] choose_num(x::Int64,\
    \ y::Int64)\n      @ Main /tmp/tmpt_m92egd.jl:17\n    [8] macro expansion\n  \
    \    @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [9] macro expansion\n      @ /tmp/tmpt_m92egd.jl:34 [inlined]\n   [10] macro\
    \ expansi"
  timestamp: 1659821860
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ % 2 == 0 && y % 2 == 0\n        if x >= y\n            return x\n        else\n\
    \            return y\n        end\n    elseif x % 2 == 1 && y % 2 == 1\n    \
    \    if x >= y\n            return x - 1\n        else\n            return y -\
    \ 1\n        end\n    elseif x % 2 == 0 && y % 2 == 1\n        return x\n    elseif\
    \ x % 2 == 1 && y % 2 == 0\n        return y\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe7hcebrp.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpe7hcebrp.jl:31\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7hcebrp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7hcebrp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpe7hcebrp.jl:32\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7hcebrp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7hcebrp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpe7hcebrp.jl:34\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7hcebrp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7hcebrp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpe7hcebrp.jl:35\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7hcebrp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7hcebrp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpe7hcebrp.jl:36\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 10 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7hcebrp.jl:36 [inlined]\n [3]\
    \ mac"
  timestamp: 1659821859
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    x >=\
    \ 0 || y >= 0 && error(\"x and y must be positive numbers\")\n    x > y && return\
    \ -1\n    x % 2 == 0 ? x : x += 1\n    while x <= y\n        x % 2 == 0 ? return\
    \ x : nothing\n        x += 1\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8gteqx2g.jl:13\nin expression starting at\
    \ /tmp/tmp8gteqx2g.jl:13\n"
  stdout: ''
  timestamp: 1659821858
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if x > y\n        return -1\n    end\n    # Set a counter to keep track of\
    \ the numbers in the range\n    counter = x \n    largest_even = 0\n    # Loop\
    \ through the range and identify the largest even number\n    while counter <=\
    \ y\n        if counter % 2 == 0\n            largest_even = counter\n       \
    \ end\n        counter += 1\n    end\n    # Return the largest even number or\
    \ -1 if there isn't any\n    if largest_even == 0\n        return -1\n    else\n\
    \        return largest_even\n    end\nend\nchoose_num(3,11)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821857
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        println(\"Invalid input\")\n        return\n    end\n    \n   \
    \ for i in x:y\n        if i % 2 == 0\n            return i\n        end\n   \
    \ end\n    \n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp3y2yj8gt.jl:26\n  Expression: candidate(12,
    15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp3y2yj8gt.jl:26 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp3y2yj8gt.jl:25\nInvalid input\ntest
    set: Error During Test at /tmp/tmp3y2yj8gt.jl:27\n  Test threw exception\n  Expression:
    candidate(13, 12) == -1\n  MethodError: Cannot `convert` an object of type Nothing
    to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp3y2yj8gt.jl:10\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3y2yj8gt.jl:27 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3y2yj8gt.jl:25\ntest set: Test
    Failed at /tmp/tmp3y2yj8gt.jl:28\n  Expression: candidate(33, 12354) == 12354\n   Evaluated:
    34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp3y2yj8gt.jl:28 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp3y2yj8gt.jl:25\nInvalid input\ntest
    set: Error During Test at /tmp/tmp3y2yj8gt.jl:29\n  Test threw exception\n  Expression:
    candidate'
  timestamp: 1659821862
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        println(\"Invalid input! x cannot be bigger than y.\")\n      \
    \  return -1\n    end\n    for i in x:y\n        if i % 2 == 0\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnhhcmral.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpnhhcmral.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhhcmral.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhhcmral.jl:23\nInvalid input!\
    \ x cannot be bigger than y.\ntest set: Test Failed at /tmp/tmpnhhcmral.jl:26\n\
    \  Expression: candidate(33, 12354) == 12354\n   Evaluated: 34 == 12354\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhhcmral.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhhcmral.jl:23\nInvalid input!\
    \ x cannot be bigger than y.\ntest set: Test Failed at /tmp/tmpnhhcmral.jl:28\n\
    \  Expression: candidate(6, 29) == 28\n   Evaluated: 6 == 28\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhhcmral.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhhcmral.jl:23\nInvalid input!\
    \ x cannot be bigger than y.\nTest Summary: | Pass  Fail  Total\ntest set    \
    \  |    5     3      8\n"
  timestamp: 1659821859
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    nums\
    \ = [x]\n    while x <= y\n        push!(nums, x)\n        x += 1\n    end\n \
    \   evens = []\n    for i in nums\n        if i % 2 == 0\n            push!(evens,\
    \ i)\n        end\n    end\n    if length(evens) == 0\n        return -1\n   \
    \ else\n        return evens[end]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuf66ex3b.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuf66ex3b.jl:33\n  Expression: candidate(5234,\
    \ 5233) == -1\n   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuf66ex3b.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuf66ex3b.jl:29\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659821859
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0\n        return x\n    elseif x%2 != 0\n        return x+1\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcjql_m6c.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpcjql_m6c.jl:20\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjql_m6c.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjql_m6c.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcjql_m6c.jl:21\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjql_m6c.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjql_m6c.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcjql_m6c.jl:22\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjql_m6c.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjql_m6c.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcjql_m6c.jl:23\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjql_m6c.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjql_m6c.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcjql_m6c.jl:24\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjql_m6c.jl:24 [inlined]"
  timestamp: 1659821860
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ % 2 == 0\n        a = x\n    else\n        a = x + 1\n    end\n    if a > y\n\
    \        return -1\n    else\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsgkn1ae1.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpsgkn1ae1.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsgkn1ae1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsgkn1ae1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsgkn1ae1.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsgkn1ae1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsgkn1ae1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsgkn1ae1.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsgkn1ae1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsgkn1ae1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821860
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ num in y:-1:x\n        if num % 2 == 0\n            return num\n        end\n\
    \    end\n    return -1\nend\nchoose_num(12, 18)\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821858
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0 \n        return x\n    else\n        x+=1\n        return x\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp28xq32c1.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp28xq32c1.jl:20\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp28xq32c1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp28xq32c1.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp28xq32c1.jl:21\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp28xq32c1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp28xq32c1.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp28xq32c1.jl:22\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp28xq32c1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp28xq32c1.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp28xq32c1.jl:23\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp28xq32c1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp28xq32c1.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp28xq32c1.jl:24\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp28xq32c1.jl:24 [inlined]"
  timestamp: 1659821860
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    rng\
    \ = range(x, y+1)\n    #println(rng)\n    for i in rng\n        if i % 2 == 0\n\
    \            return i\n        end\n    end\n    return -1\nend\n#println(choose_num(5,12))\n\
    #println(choose_num(2,24))\n#println(choose_num(1,2))\n#println(choose_num(1,1))\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg3x1ujq7.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpg3x1ujq7.jl:26\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3x1ujq7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3x1ujq7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpg3x1ujq7.jl:28\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3x1ujq7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3x1ujq7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpg3x1ujq7.jl:29\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3x1ujq7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3x1ujq7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpg3x1ujq7.jl:30\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3x1ujq7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3x1ujq7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpg3x1ujq7.jl:32\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3x1ujq7.jl:32 [inlined]\n ["
  timestamp: 1659821860
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x<y\
    \ #x is smaller than y\n        if y%2==0 #y is even\n            return y\n \
    \       else\n            return y-1\n        end\n    elseif x>y #x is bigger\
    \ than y\n        if x%2==0 #x is even\n            return x\n        else\n \
    \           return x-1\n        end\n    elseif x==y #x is equal to y\n      \
    \  if x%2==0 #x is even\n            return x\n        else\n            return\
    \ -1\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprc8i032j.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmprc8i032j.jl:34\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc8i032j.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc8i032j.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprc8i032j.jl:36\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc8i032j.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc8i032j.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprc8i032j.jl:38\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 26 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc8i032j.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc8i032j.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821860
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        x, y = y, x\n    end\n    temp=y\n    while temp>x\n        if temp%2==0\n\
    \            return temp\n        end\n        temp-=1\n    end\n    if x%2==0\n\
    \        return x\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp922ixhi3.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp922ixhi3.jl:29\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp922ixhi3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp922ixhi3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp922ixhi3.jl:31\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp922ixhi3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp922ixhi3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp922ixhi3.jl:33\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 26 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp922ixhi3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp922ixhi3.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821860
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2==0\
    \ && y%2==0\n        return (x,y)\n    elseif x%2==0 && y%2!=0\n        return\
    \ (x,y-1)\n    elseif x%2!=0 && y%2==0\n        return (x+1,y)\n    elseif x%2!=0\
    \ && y%2!=0\n        return (x+1,y-1)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpkmhp45nk.jl:23\n  Test threw
    exception\n  Expression: candidate(12, 15) == 14\n  MethodError: Cannot `convert`
    an object of type Tuple{Int64, Int64} to an object of type Int64\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpkmhp45nk.jl:11\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkmhp45nk.jl:23 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkmhp45nk.jl:22\ntest set: Error
    During Test at /tmp/tmpkmhp45nk.jl:24\n  Test threw exception\n  Expression: candidate(13,
    12) == -1\n  MethodError: Cannot `convert` an object of type Tuple{Int64, Int64}
    to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpkmhp45nk.jl:13\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkmhp45nk.jl:24 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkmhp45nk.jl:22\ntest set: Er'
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n   if (x-y\
    \ > 0)\n       if (mod(x,2)==0)\n           return x\n       elseif (mod(x,2)==1)\n\
    \           if(mod(x+1,2)==0)\n               return x+1\n           elseif (mod(x+1,2)==1)\n\
    \               return -1\n           end\n       end\n   elseif (x-y < 0)\n \
    \      if (mod(y,2)==0)\n           return y\n       elseif (mod(y,2)==1)\n  \
    \         if(mod(y+1,2)==0)\n               return y+1\n           elseif (mod(y+1,2)==1)\n\
    \               return -1\n           end\n       end\n   else\n       if (mod(x,2)==0)\n\
    \           return x\n       elseif (mod(x,2)==1)\n           if(mod(x+1,2)==0)\n\
    \               return x+1\n           elseif (mod(x+1,2)==1)\n              \
    \ return -1\n           end\n       end\n   end\n   end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpni_doyau.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpni_doyau.jl:45\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 16 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_doyau.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_doyau.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpni_doyau.jl:46\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_doyau.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_doyau.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpni_doyau.jl:48\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_doyau.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_doyau.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpni_doyau.jl:49\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 30 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_doyau.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_doyau.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpni_doyau.jl:50\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_doyau.jl:50 [inlined]\n [3]\
    \ ma"
  timestamp: 1659821860
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    result::Int64\
    \ = -1\n    for i in x:y\n        if i % 2 == 0\n            result = i\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821858
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    \n    for num in x:y\n        if num %\
    \ 2 == 0\n            return num\n        end\n    end\n    \n    return -1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpezkxrs0p.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpezkxrs0p.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpezkxrs0p.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpezkxrs0p.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpezkxrs0p.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpezkxrs0p.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpezkxrs0p.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpezkxrs0p.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpezkxrs0p.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpezkxrs0p.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821861
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if (x\
    \ % 2 == 0) && (y % 2 == 0)\n        return min(x, y)\n    elseif (x % 2 == 1)\
    \ && (y % 2 == 1)\n        return choose_num(x+1, y-1)\n    elseif (x % 2 == 0)\
    \ && (y % 2 == 1)\n        return x\n    elseif (x % 2 == 1) && (y % 2 == 0)\n\
    \        return y\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptb9pq7h2.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmptb9pq7h2.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptb9pq7h2.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptb9pq7h2.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptb9pq7h2.jl:24\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptb9pq7h2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptb9pq7h2.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptb9pq7h2.jl:26\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptb9pq7h2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptb9pq7h2.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptb9pq7h2.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptb9pq7h2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptb9pq7h2.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptb9pq7h2.jl:28\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 10 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptb9pq7h2.jl:28 [inlined]\n [3]\
    \ mac"
  timestamp: 1659821861
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if y\
    \ % 2 == 0 \n        y\n    else \n        y-1\n    end\nend\nchoose_num(2, 7)\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9rrolu1h.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp9rrolu1h.jl:21\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9rrolu1h.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9rrolu1h.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9rrolu1h.jl:23\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5232 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9rrolu1h.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9rrolu1h.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9rrolu1h.jl:25\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 10 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9rrolu1h.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9rrolu1h.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9rrolu1h.jl:26\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9rrolu1h.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9rrolu1h.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821861
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ < 0 || y < 0 \n        return -1\n    end\n    for i in (x:y)\n        if i\
    \ % 2 == 0\n            return i\n        end\n    end\n    return -1\nend\n \n\
    \"\"\"This function takes three strings: s1, s2, and s3. It then looks for the\
    \ \n    longest substring that starts with s1, ends with s2, and has s3 somewhere\n\
    \    in between. If there are more than one such substrings, then the function\n\
    \    should return the first one. If there are no such substrings, then the \n\
    \    function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95o_j5kv.jl:19\nin expression starting at\
    \ /tmp/tmp95o_j5kv.jl:19\n"
  stdout: ''
  timestamp: 1659821860
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ == y\n        return -1\n    end\n    if y < x\n        temp = x\n        x\
    \ = y\n        y = temp\n    end\n    while y != -1\n        if y % 2 == 0\n \
    \           return y\n        end\n        y -= 1\n    end\n    return -1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd_8uf073.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpd_8uf073.jl:30\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_8uf073.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_8uf073.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd_8uf073.jl:32\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_8uf073.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_8uf073.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd_8uf073.jl:34\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 26 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_8uf073.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_8uf073.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd_8uf073.jl:36\n  Expression: candidate(546, 546) == 546\n\
    \   Evaluated: -1 == 546\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_8uf073.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_8uf073.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821861
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if (y\
    \ < x) || (x < 0) || (y < 0)\n        return -1\n    end\n    i = y\n    while\
    \ true\n        if i%2 == 0\n            return i\n        end\n        i = i\
    \ - 1\n        if i < x\n            return -1\n        end\n    end\nend\nprintln(choose_num(10,\
    \ 15))\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: OK
  stderr: '14

    Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821859
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ < y\n        if x % 2 == 0\n            return x\n        else\n           \
    \ return x + 1\n        end\n    elseif x == y \n        if x % 2 == 0\n     \
    \       return x\n        else\n            return -1\n        end\n    elseif\
    \ x > y\n        if y % 2 == 0\n            return y\n        else\n         \
    \   return y + 1\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp21nw7j5y.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp21nw7j5y.jl:33\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp21nw7j5y.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp21nw7j5y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp21nw7j5y.jl:34\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp21nw7j5y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp21nw7j5y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp21nw7j5y.jl:35\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp21nw7j5y.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp21nw7j5y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp21nw7j5y.jl:36\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp21nw7j5y.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp21nw7j5y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp21nw7j5y.jl:37\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp21nw7j5y.jl:37 [inlined]"
  timestamp: 1659821861
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ < y \n        return choose_num_h(x, y)\n    else \n        return choose_num_h(y,\
    \ x)\n    end\nend \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2vss78v1.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp2vss78v1.jl:19\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  UndefVarError: choose_num_h not defined\n\
    \  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp2vss78v1.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vss78v1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vss78v1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp2vss78v1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  UndefVarError: choose_num_h not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp2vss78v1.jl:11\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vss78v1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vss78v1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp2vss78v1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(33, 12354) == 12354\n  UndefVarError: choose_num_h not defined\n \
    \ Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp2vss78v1.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vss78v1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vss78v1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp2vss78v1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(5234, 5233) == -1\n  UndefVarError: choose_num_h not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp2vss78v1.jl:11\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    max_num\
    \ = -1\n    if x%2 == 0 && y%2 == 0\n        max_num = max(x, y)\n    elseif x%2\
    \ == 0 && y%2 != 0\n        max_num = max(x, y-1)\n    elseif x%2 != 0 && y%2\
    \ == 0\n        max_num = max(x+1, y)\n    else\n        max_num = max(x+1, y-1)\n\
    \    end\n    return max_num\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0vf0t10l.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp0vf0t10l.jl:26\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0vf0t10l.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0vf0t10l.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0vf0t10l.jl:28\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0vf0t10l.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0vf0t10l.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0vf0t10l.jl:30\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0vf0t10l.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0vf0t10l.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0vf0t10l.jl:31\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0vf0t10l.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0vf0t10l.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821862
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0\n        a = x\n    else\n        a = x+1\n    end\n    while (a <= y)\n\
    \        if a%2 == 0\n            return a\n        end\n        a += 1\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiik_cuij.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpiik_cuij.jl:26\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiik_cuij.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiik_cuij.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpiik_cuij.jl:28\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiik_cuij.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiik_cuij.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpiik_cuij.jl:30\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiik_cuij.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiik_cuij.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821862
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    largest = 0\n    for n in x:y\n       \
    \ if largest < n\n            if n % 2 == 0\n                largest = n\n   \
    \         end\n        end\n    end\n    if largest == 0\n        return -1\n\
    \    end\n    return largest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821860
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0\n        if y%2 == 0\n            if x >= y\n                return x\n\
    \            else\n                return y\n            end\n        else\n \
    \           return y-1\n        end\n    else\n        if y%2 == 0\n         \
    \   return y\n        else\n            return y-1\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjl14crud.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpjl14crud.jl:32\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl14crud.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl14crud.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjl14crud.jl:34\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5232 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl14crud.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl14crud.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjl14crud.jl:36\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 10 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl14crud.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl14crud.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjl14crud.jl:37\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl14crud.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl14crud.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821862
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0\n        return x\n    else\n        return x + 1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoah7jgtq.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpoah7jgtq.jl:19\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoah7jgtq.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoah7jgtq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpoah7jgtq.jl:20\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoah7jgtq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoah7jgtq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpoah7jgtq.jl:21\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoah7jgtq.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoah7jgtq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpoah7jgtq.jl:22\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoah7jgtq.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoah7jgtq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpoah7jgtq.jl:23\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoah7jgtq.jl:23 [inlined]"
  timestamp: 1659821862
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    num = -1\n    for k in x:y\n        if\
    \ k % 2 == 0\n            num = k\n        end\n    end\n    return num\nend\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821861
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # if\
    \ x > y:\n    #     return -1\n    # end\n    # if x % 2 == 0:\n    #     return\
    \ x\n    # end\n    # x += 1\n    # while x <= y\n    #     if x % 2 == 0:\n \
    \   #         return x\n    #     end\n    #     x += 1\n    # end\n    # return\
    \ -1\n    if x % 2 == 0\n        return max(x, choose_num(x+1, y))\n    else\n\
    \        return max(choose_num(x+1, y), choose_num(x+2, y))\n    end\nend\nchoose_num(2,7)\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659821866
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0\n        z = x\n    else\n        z = x + 1\n    end\n    return z < y\
    \ ? z : y\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdk2s5op8.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpdk2s5op8.jl:20\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk2s5op8.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk2s5op8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpdk2s5op8.jl:21\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk2s5op8.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk2s5op8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpdk2s5op8.jl:22\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk2s5op8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk2s5op8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpdk2s5op8.jl:23\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5233 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk2s5op8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk2s5op8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpdk2s5op8.jl:24\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk2s5op8.jl:24 [inlined]"
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    #checking\
    \ the input type\n    if x isa Int64 && y isa Int64\n        #exception handling\n\
    \        try \n            #checking whether the input is positive\n         \
    \   if x<0 || y<0\n                println(\"Input numbers are negative!\")\n\
    \                return -1\n            end\n            #checking whether the\
    \ x>y\n            if x>y\n                z=x\n                x=y\n        \
    \        y=z\n            end\n            #returning the biggest even integer\
    \ number\n            for i in x:y\n                if i%2==0\n              \
    \      return i\n                end\n            end\n            return -1\n\
    \        catch e\n            println(\"Input error!\")\n            return -1\n\
    \        end\n    else\n        println(\"Input is not an integer!\")\n      \
    \  return -1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph14ntwkb.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmph14ntwkb.jl:44\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14ntwkb.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14ntwkb.jl:43\ntest set: Test\
    \ Failed at /tmp/tmph14ntwkb.jl:45\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14ntwkb.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14ntwkb.jl:43\ntest set: Test\
    \ Failed at /tmp/tmph14ntwkb.jl:46\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14ntwkb.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14ntwkb.jl:43\ntest set: Test\
    \ Failed at /tmp/tmph14ntwkb.jl:47\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14ntwkb.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14ntwkb.jl:43\ntest set: Test\
    \ Failed at /tmp/tmph14ntwkb.jl:48\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14ntwkb.jl:48 [inlined]"
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   for k in range(y, x, -1)\n        if k % 2 == 0\n            return k\n  \
    \      end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6s1ua4pj.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp6s1ua4pj.jl:21\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  ArgumentError: range(15.0, stop=12.0,\
    \ length=-1): negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] choose_num(x::Int64,\
    \ y::Int64)\n      @ Main /tmp/tmp6s1ua4pj.jl:9\n    [8] macro expansion\n   \
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [9] macro expansion\n      @ /tmp/tmp6s1ua4pj.jl:21 [inlined]\n   [10] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp6s1ua4pj.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6s1ua4pj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  ArgumentError: range(12.0, stop=13.0, length=-1):\
    \ negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] choose_num(x::Int64,\
    \ y::Int64)\n      @ Main /tmp/tmp6s1ua4pj.jl:9\n    [8] macro expansion\n   \
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [9] macro expansion\n      @ /tmp/tmp6s1ua4pj.jl:22 [inlined]\n   [10] macro\
    \ expansion\n      @ "
  timestamp: 1659821864
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \"\"\
    \"It is assumed that x is less than y and both are positive.\"\"\"\n    for i\
    \ in reverse(x:y)\n        if i % 2 == 0\n            return i\n        end\n\
    \    end\n    return -1\nend\nchoose_num(1, 6)\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821861
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n   if x\
    \ > y\n       println(\"x is greater than y, nothing to do\")\n   else\n     \
    \  i = x\n       while i <= y\n           if i % 2 == 0\n               println(i)\n\
    \               break\n           end\n           i += 1\n       end\n       if\
    \ i > y\n           println(-1)\n       end\n   end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''12\ntest set: Error During Test at /tmp/tmpuczopfzs.jl:29\n  Test threw
    exception\n  Expression: candidate(12, 15) == 14\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpuczopfzs.jl:20\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuczopfzs.jl:29 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuczopfzs.jl:28\nx is greater
    than y, nothing to do\ntest set: Error During Test at /tmp/tmpuczopfzs.jl:30\n  Test
    threw exception\n  Expression: candidate(13, 12) == -1\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Int64\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpuczopfzs.jl:9\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuczopfzs.jl:30 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuczopfzs.jl:2'
  timestamp: 1659821865
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ <= 0 || y <= 0 #checking if the given numbers are positive\n        return -1\n\
    \    end\n    if x % 2 == 0 #checking if x is even\n        if y % 2 == 0 #checking\
    \ if y is even\n            return y #returning y\n        else #if y is odd\n\
    \            return y - 1 #returning y-1\n        end\n    else #if x is odd\n\
    \        if y % 2 == 0 #checking if y is even\n            return y #returning\
    \ y\n        else #if y is odd\n            return y - 2 #returning y-2\n    \
    \    end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn_qnkela.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpn_qnkela.jl:31\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_qnkela.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_qnkela.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpn_qnkela.jl:33\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5232 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_qnkela.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_qnkela.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpn_qnkela.jl:35\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 10 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_qnkela.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_qnkela.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpn_qnkela.jl:36\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 5 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_qnkela.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_qnkela.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        println(\"Error: x must be greater than y\")\n        return -1\n\
    \    end\n    for i in x:y\n        if i % 2 == 0\n            return i\n    \
    \    end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbpi36_28.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpbpi36_28.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbpi36_28.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbpi36_28.jl:23\nError: x must\
    \ be greater than y\ntest set: Test Failed at /tmp/tmpbpi36_28.jl:26\n  Expression:\
    \ candidate(33, 12354) == 12354\n   Evaluated: 34 == 12354\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbpi36_28.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbpi36_28.jl:23\nError: x must\
    \ be greater than y\ntest set: Test Failed at /tmp/tmpbpi36_28.jl:28\n  Expression:\
    \ candidate(6, 29) == 28\n   Evaluated: 6 == 28\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbpi36_28.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbpi36_28.jl:23\nError: x must be greater than\
    \ y\nTest Summary: | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if x > y\n        temp = x\n        x = y\n        y = temp\n    end\n   \n\
    \    for i in y:-1:x\n        if mod(i, 2) == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvhw32z_f.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpvhw32z_f.jl:29\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvhw32z_f.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvhw32z_f.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpvhw32z_f.jl:31\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvhw32z_f.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvhw32z_f.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpvhw32z_f.jl:33\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 26 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvhw32z_f.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvhw32z_f.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if x>y\n        return -1\n    end\n    \n    if y%2 == 0\n        return\
    \ y\n    else\n        return y-1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9b_psihx.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp9b_psihx.jl:30\n  Expression: candidate(7,\
    \ 7) == -1\n   Evaluated: 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9b_psihx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9b_psihx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    numbers\
    \ = [x:y]\n    numbers = filter(numbers -> mod(numbers, 2) == 0, numbers)\n  \
    \  if length(numbers) == 0\n        return -1\n    else \n        return maximum(numbers)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpupqtg0pq.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpupqtg0pq.jl:21\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  MethodError: no method matching mod(::UnitRange{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    mod(!Matched::Rational, ::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:311\n    mod(!Matched::P,\
    \ ::Real) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:90\n\
    \    mod(!Matched::Unsigned, ::Signed) at ~/.conda/envs/polyglot/share/julia/base/int.jl:279\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(numbers::UnitRange{Int64})\n \
    \    @ Main /tmp/tmpupqtg0pq.jl:9\n   [2] filter(f::var\"#1#2\", a::Vector{UnitRange{Int64}})\n\
    \     @ Base ./array.jl:2484\n   [3] choose_num(x::Int64, y::Int64)\n     @ Main\
    \ /tmp/tmpupqtg0pq.jl:9\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpupqtg0pq.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpupqtg0pq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpupqtg0pq.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  MethodError: no method matching mod(::UnitRange{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    mod(!Matched::Rational, ::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:311\n    mod(!Matched::P,\
    \ ::Real) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:90\n\
    \    mod(!Matched::Unsigned, ::Signed) at ~/.conda/envs/polyglot/share/julia/base/int.jl:279\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(numbers::UnitRange{Int64})\n \
    \    @ Main /tmp/tmpupqtg0pq.jl:9\n   [2] filter(f::var\"#1#2\", a::Vector{UnitRange{Int64}})\n\
    \     @ Base ./array.jl:2484\n   [3] choose_num(x::Int64, y::Int64)\n     @ Main\
    \ /tmp/tmpupqtg0pq.jl:9\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpu"
  timestamp: 1659821865
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x<y\n\
    \        if x%2==0 && y%2==0\n            return y\n        elseif x%2==0 && y%2==1\n\
    \            return y-1\n        elseif x%2==1 && y%2==0\n            return y\n\
    \        elseif x%2==1 && y%2==1\n            return y-1\n        end\n    elseif\
    \ x>y\n        if x%2==0 && y%2==0\n            return x\n        elseif x%2==0\
    \ && y%2==1\n            return x\n        elseif x%2==1 && y%2==0\n         \
    \   return x-1\n        elseif x%2==1 && y%2==1\n            return x-1\n    \
    \    end\n    elseif x==y\n        if x%2==0\n            return x\n        elseif\
    \ x%2==1\n            return -1\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi39mf__6.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpi39mf__6.jl:42\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi39mf__6.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi39mf__6.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpi39mf__6.jl:44\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi39mf__6.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi39mf__6.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpi39mf__6.jl:46\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 26 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi39mf__6.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi39mf__6.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    even\
    \ = 0\n    for i = x:y\n        if i % 2 == 0\n            even = i\n        end\n\
    \    end\n    return even\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy28h90st.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpy28h90st.jl:22\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy28h90st.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy28h90st.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy28h90st.jl:24\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy28h90st.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy28h90st.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy28h90st.jl:26\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy28h90st.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy28h90st.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy28h90st.jl:27\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy28h90st.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy28h90st.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821863
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \"\"\
    \"\n    # The following code will fail when x < 0 and/or y < 0\n    even_nums\
    \ = collect(x:y)\n    even_nums = filter(x -> x % 2 == 0, even_nums)\n    even_nums\
    \ = reverse(sort(even_nums))\n    if length(even_nums) > 0\n        return even_nums[1]\n\
    \    else\n        return -1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplngb9agl.jl:1\nin expression starting at /tmp/tmplngb9agl.jl:1\n"
  stdout: ''
  timestamp: 1659821862
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   even_num = -1\n    \n    # if both x and y are even, then one of them would\
    \ be the even_num\n    if x % 2 == 0 && y % 2 == 0\n        even_num = max(x,\
    \ y)\n    \n    # if x is not even and y is even, then the even_num is y \n  \
    \  elseif x % 2 != 0 && y % 2 == 0\n        even_num = y\n    \n    # if y is\
    \ not even and x is even, then the even_num is x\n    elseif x % 2 == 0 && y %\
    \ 2 != 0\n        even_num = x\n    \n    # if both x and y are not even, then\
    \ we check the number in between\n    elseif x % 2 != 0 && y % 2 != 0\n      \
    \  # this loop is to check all the even numbers in between\n        # and obtain\
    \ the largest one\n        for i in x:y\n            if i % 2 == 0\n         \
    \       even_num = max(even_num, i)\n            end\n        end\n    end\n \
    \   \n    return even_num\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpun43_ohf.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpun43_ohf.jl:41\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun43_ohf.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun43_ohf.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpun43_ohf.jl:42\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun43_ohf.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun43_ohf.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpun43_ohf.jl:44\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun43_ohf.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun43_ohf.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpun43_ohf.jl:45\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun43_ohf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun43_ohf.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpun43_ohf.jl:46\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 10 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun43_ohf.jl:46 [inlined]\n [3]\
    \ mac"
  timestamp: 1659821864
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if (x\
    \ > y) | (x < 0) | (y < 0) | (isodd(x)) | (isodd(y))\n        return -1\n    else\n\
    \        for i = y:-2:x\n            return i\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuqan3u6e.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpuqan3u6e.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: -1 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuqan3u6e.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuqan3u6e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuqan3u6e.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: -1 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuqan3u6e.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuqan3u6e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuqan3u6e.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ -1 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuqan3u6e.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuqan3u6e.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821864
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    a =\
    \ mod(x, 2)\n    b = mod(y, 2)\n    if a == 0 && b == 0\n        return y\n  \
    \  elseif a == 0 && b != 0\n        return y - 1\n    elseif a != 0 && b == 0\n\
    \        return y\n    else\n        m = y - x\n        c = mod(m, 2)\n      \
    \  d = ceil(m/2)\n        if c == 0\n            return x + d\n        else\n\
    \            return x + d - 1\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp85jfyaad.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp85jfyaad.jl:33\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp85jfyaad.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp85jfyaad.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp85jfyaad.jl:35\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5232 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp85jfyaad.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp85jfyaad.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp85jfyaad.jl:37\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 10 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp85jfyaad.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp85jfyaad.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp85jfyaad.jl:38\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 7 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp85jfyaad.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp85jfyaad.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821864
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ % 2 == 0 \n        @inbounds for i in x:y \n            if i % 2 == 0 \n   \
    \             return i \n            end \n        end \n    elseif x % 2 != 0\
    \ \n        @inbounds for i in x + 1:y \n            if i % 2 == 0 \n        \
    \        return i \n            end \n        end \n    end \n    return -1 \n\
    end \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4n54st3r.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp4n54st3r.jl:28\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4n54st3r.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4n54st3r.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4n54st3r.jl:30\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4n54st3r.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4n54st3r.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4n54st3r.jl:32\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4n54st3r.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4n54st3r.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821864
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    y =\
    \ x+y-2 #make sure it is inclusive\n    if y%2==0 \n        y=y\n    else\n  \
    \      y=y-1\n    end\n    if y<x\n        y=-1\n    end\n    return y\nend\n\
    choose_num(1,2)\n \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3_662_vy.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp3_662_vy.jl:26\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 24 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_662_vy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_662_vy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3_662_vy.jl:27\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 22 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_662_vy.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_662_vy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3_662_vy.jl:28\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 12384 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_662_vy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_662_vy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3_662_vy.jl:29\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 10464 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_662_vy.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_662_vy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3_662_vy.jl:30\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 32 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_662_vy.jl:30 [inl"
  timestamp: 1659821864
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y || x < 0 || y < 0\n        return -1\n    end\n    if y % 2 == 0\n     \
    \   return y\n    elseif x % 2 == 0\n        return x\n    else\n        return\
    \ x - 1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi6930qgq.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpi6930qgq.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6930qgq.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6930qgq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi6930qgq.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6930qgq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6930qgq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi6930qgq.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6930qgq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6930qgq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821864
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ != 0\n        if y%2 != 0\n            if x < y\n                print(-1)\n\
    \            elseif x == y\n                print(x)\n            elseif x > y\n\
    \                print(-1)\n            end\n        elseif y%2 == 0\n       \
    \     if x < y\n                print(y)\n            elseif x == y\n        \
    \        print(x)\n            elseif x > y\n                print(x)\n      \
    \      end\n        end\n    elseif x%2 == 0\n        if y%2 != 0\n          \
    \  if x < y\n                print(x)\n            elseif x == y\n           \
    \     print(x)\n            elseif x > y\n                print(y)\n         \
    \   end\n        elseif y%2 == 0\n            if x < y\n                print(x)\n\
    \            elseif x == y\n                print(x)\n            elseif x > y\n\
    \                print(y)\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpz9we443h.jl:48

    '
  stdout: "12test set: Error During Test at /tmp/tmpz9we443h.jl:51\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpz9we443h.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz9we443h.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz9we443h.jl:50\n13test set:\
    \ Error During Test at /tmp/tmpz9we443h.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpz9we443h.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz9we443h.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz9we443h.jl:50\n12354test\
    \ set: Error During Test at /tmp/tmpz9we443h.jl:53\n  Test threw ex"
  timestamp: 1659821867
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    z =\
    \ max(x, y)\n    result = -1\n    for i in range(z, x-1, -1)\n        if i % 2\
    \ == 0\n            result = i\n            break\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdd3ivacp.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpdd3ivacp.jl:23\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  ArgumentError: range(15.0, stop=11.0,\
    \ length=-1): negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] choose_num(x::Int64,\
    \ y::Int64)\n      @ Main /tmp/tmpdd3ivacp.jl:10\n    [8] macro expansion\n  \
    \    @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [9] macro expansion\n      @ /tmp/tmpdd3ivacp.jl:23 [inlined]\n   [10] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpdd3ivacp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdd3ivacp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  ArgumentError: range(13.0, stop=12.0, length=-1):\
    \ negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] choose_num(x::Int64,\
    \ y::Int64)\n      @ Main /tmp/tmpdd3ivacp.jl:10\n    [8] macro expansion\n  \
    \    @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [9] macro expansion\n      @ /tmp/tmpdd3ivacp.jl:24 [inlined]\n   [10] macro\
    \ expansion\n      "
  timestamp: 1659821866
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    max_even_num\
    \ = -1\n    for i = x:y\n        if i % 2 == 0\n            max_even_num = i\n\
    \        end\n    end\n    return max_even_num\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821863
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    even_range\
    \ = [n for n in x:y if n % 2 == 0]\n    if length(even_range) > 0\n        return\
    \ maximum(even_range)\n    else\n        return -1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821863
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # your\
    \ code goes here\n    return # your return value goes here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpc7juy_vt.jl:16\n  Test threw
    exception\n  Expression: candidate(12, 15) == 14\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpc7juy_vt.jl:9\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7juy_vt.jl:16 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7juy_vt.jl:15\ntest set: Error
    During Test at /tmp/tmpc7juy_vt.jl:17\n  Test threw exception\n  Expression: candidate(13,
    12) == -1\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpc7juy_vt.jl:9\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7juy_vt.jl:17 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7juy_vt.jl:15\ntest set: Error
    During Test at /tmp/tm'
  timestamp: 1659821868
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ % 2 == 0\n        if x <= y \n            return x\n        else \n        \
    \    return -1\n        end\n    else \n        x = x + 1\n        if x <= y \n\
    \            return x\n        else \n            return -1\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1kjkthc9.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp1kjkthc9.jl:28\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kjkthc9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kjkthc9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1kjkthc9.jl:30\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kjkthc9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kjkthc9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1kjkthc9.jl:32\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kjkthc9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kjkthc9.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821865
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    choose_num\
    \ = -1\n    for i in x:y\n        if(is_even(i))\n            choose_num = i\n\
    \        end\n    end\n    return choose_num\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpz8kh0686.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpz8kh0686.jl:21\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  UndefVarError: is_even not defined\n\
    \  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpz8kh0686.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz8kh0686.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz8kh0686.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpz8kh0686.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(33, 12354) == 12354\n  UndefVarError: is_even not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpz8kh0686.jl:10\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz8kh0686.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz8kh0686.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpz8kh0686.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(6, 29) == 28\n  UndefVarError: is_even not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpz8kh0686.jl:10\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz8kh0686.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz8kh0686.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpz8kh0686.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7, 7) == -1\n  UndefVarError: is_even not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpz8kh0686.jl:10\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659821866
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ == y \n        return -1 \n    end\n    \n    #if x < y \n        #return choose_num(y,\
    \ x)\n    #end\n    \n    if mod(x, 2) == 0\n        return x\n    else\n    \
    \    return choose_num(x+1, y)\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiys71eq1.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpiys71eq1.jl:27\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiys71eq1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiys71eq1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiys71eq1.jl:28\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiys71eq1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiys71eq1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiys71eq1.jl:29\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiys71eq1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiys71eq1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiys71eq1.jl:30\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiys71eq1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiys71eq1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiys71eq1.jl:31\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiys71eq1.jl:31 [inlined]"
  timestamp: 1659821866
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in x:y\n        if i%2 == 0\n            return i\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1lucodi1.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp1lucodi1.jl:20\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lucodi1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lucodi1.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1lucodi1.jl:22\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lucodi1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lucodi1.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1lucodi1.jl:24\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lucodi1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lucodi1.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821866
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in x:y \n        if (i % 2 == 0) && (i >= x) && (i <= y)\n            return\
    \ i\n        else\n            return -1\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp_ssaufqv.jl:21\n  Expression: candidate(12,
    15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ssaufqv.jl:21 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ssaufqv.jl:20\ntest set: Error
    During Test at /tmp/tmp_ssaufqv.jl:22\n  Test threw exception\n  Expression: candidate(13,
    12) == -1\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp_ssaufqv.jl:12\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ssaufqv.jl:22 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ssaufqv.jl:20\ntest set: Test
    Failed at /tmp/tmp_ssaufqv.jl:23\n  Expression: candidate(33, 12354) == 12354\n   Evaluated:
    -1 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ssaufqv.jl:23 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ssaufqv.jl:20\ntest set: Error
    During Test at /tmp/tmp_ssaufqv.jl:24\n  Test threw exception\n  Expression: candidate(5234,
    5233) == -1\n  MethodEr'
  timestamp: 1659821868
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    while\
    \ y >= x \n        if x % 2 == 0 \n            return x \n        end \n     \
    \   x += 1 \n    end \n    return -1 \nend \nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppmmcrybz.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmppmmcrybz.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmmcrybz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmmcrybz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppmmcrybz.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmmcrybz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmmcrybz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppmmcrybz.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmmcrybz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmmcrybz.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821866
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    n =\
    \ 0\n    if x > y\n        x, y = y, x\n    end\n    for i = x:y\n        if i\
    \ % 2 == 0\n            n = i\n        end\n    end\n    if n == 0\n        return\
    \ -1\n    else\n        return n\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm93v_ziq.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpm93v_ziq.jl:29\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm93v_ziq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm93v_ziq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpm93v_ziq.jl:31\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm93v_ziq.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm93v_ziq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpm93v_ziq.jl:33\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 26 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm93v_ziq.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm93v_ziq.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821866
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        return -1\n    end\n    for i in x:y\n        if i%2==0\n           \
    \ return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1lero_jo.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp1lero_jo.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1lero_jo.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1lero_jo.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ % 2 == 0\n        j = x\n    else\n        j = x + 1\n    end\n    while j <=\
    \ y\n        if j % 2 == 0\n            return j\n        end\n        j += 1\n\
    \    end\n    return -1\nend\nprintln(choose_num(3, 7))\nprintln(choose_num(4,\
    \ 6))\nprintln(choose_num(5, 7))\nprintln(choose_num(2, 2))\nprintln(choose_num(2,\
    \ 4))\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2lruo346.jl:28

    '
  stdout: "4\n4\n6\n2\n2\ntest set: Test Failed at /tmp/tmp2lruo346.jl:31\n  Expression:\
    \ candidate(12, 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2lruo346.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2lruo346.jl:30\ntest set: Test Failed at /tmp/tmp2lruo346.jl:33\n\
    \  Expression: candidate(33, 12354) == 12354\n   Evaluated: 34 == 12354\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lruo346.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lruo346.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2lruo346.jl:35\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lruo346.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lruo346.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821866
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0 && y%2 == 0\n        if x > y\n            println(x)\n        else\n \
    \           println(y)\n        end\n    elseif x%2 == 0 && y%2 != 0\n       \
    \ println(x)\n    elseif x%2 != 0 && y%2 == 0\n        println(y)\n    else\n\
    \        println(-1)\n    end\nend\nchoose_num(17, 11)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing
    to an object of type Int64\nClosest candidates are:\n  convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n  convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n  convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n  ...\nStacktrace:\n
    [1] '''
  stdout: b'-1\n'
  timestamp: 1659821868
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if x > y\n        return -1\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphobeen1n.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphobeen1n.jl:1\n\
    in expression starting at /tmp/tmphobeen1n.jl:1\n"
  stdout: ''
  timestamp: 1659821865
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    \n    for i in x:y\n        if iseven(i)\n\
    \            return i\n        end\n    end\n    \n    return -1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsdhtdif8.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpsdhtdif8.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsdhtdif8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsdhtdif8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsdhtdif8.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsdhtdif8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsdhtdif8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsdhtdif8.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsdhtdif8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsdhtdif8.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821866
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    y =\
    \ x-1\n    while y <= y\n        if mod(y,2) == 0\n            return y\n    \
    \    end\n        y = y + 1\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiy_ttjam.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpiy_ttjam.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy_ttjam.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy_ttjam.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiy_ttjam.jl:23\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy_ttjam.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy_ttjam.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiy_ttjam.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 32 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy_ttjam.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy_ttjam.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiy_ttjam.jl:25\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy_ttjam.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy_ttjam.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiy_ttjam.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy_ttjam.jl:26 [inlined]"
  timestamp: 1659821866
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ >= y\n        return -1\n    end\n    for i in x:y\n        if i % 2 == 0\n\
    \            return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphi49h6au.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmphi49h6au.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphi49h6au.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphi49h6au.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphi49h6au.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphi49h6au.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphi49h6au.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphi49h6au.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphi49h6au.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphi49h6au.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphi49h6au.jl:30\n  Expression: candidate(546, 546) == 546\n\
    \   Evaluated: -1 == 546\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphi49h6au.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphi49h6au.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821866
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    r =\
    \ y \n    while r >= x \n        if r % 2 == 0 \n            return r \n     \
    \   end \n        r -= 1 \n    end \n    return -1 \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821865
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0 \n        num = x\n    else \n        num = x+1\n    end\n    while num\
    \ <= y\n        return num\n        num += 2\n    end\n    return -1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpalb712e3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpalb712e3.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalb712e3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalb712e3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpalb712e3.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalb712e3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalb712e3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpalb712e3.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalb712e3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalb712e3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821867
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        return -1\n    end\n    if x%2==0\n        return x\n    else\n     \
    \   return x+1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuq62giot.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpuq62giot.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuq62giot.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuq62giot.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuq62giot.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuq62giot.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuq62giot.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuq62giot.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuq62giot.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuq62giot.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuq62giot.jl:28\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuq62giot.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuq62giot.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821867
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y return -1\n    elseif x % 2 == 0 return x\n    elseif y % 2 == 0 return\
    \ y\n    else return -1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqa8zaf8x.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpqa8zaf8x.jl:19\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqa8zaf8x.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqa8zaf8x.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqa8zaf8x.jl:23\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqa8zaf8x.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqa8zaf8x.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659821867
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    even_nums\
    \ = [] # store even numbers \n    for i in x:y\n        if i % 2 == 0\n      \
    \      push!(even_nums, i)\n        end\n    end\n    if length(even_nums) > 0\n\
    \        return maximum(even_nums)\n    else\n        return -1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821865
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0\n        return x #returns the first even integer if that number is the\
    \ maximum even integer in the range\n    else\n        x+=1\n        if x%2 ==\
    \ 0\n            return x #returns the first even integer if that number is the\
    \ maximum even integer in the range\n        else \n            x+=1\n       \
    \     while x<=y\n                if x%2 == 0\n                    return x #returns\
    \ the maximum even integer in the range\n                else\n              \
    \      x+=1\n            end\n            return -1 #returns -1 if the maximum\
    \ even integer is not in the range\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe5m3on93.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe5m3on93.jl:1\n\
    in expression starting at /tmp/tmpe5m3on93.jl:1\n"
  stdout: ''
  timestamp: 1659821867
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if x > y\n        return nothing\n    end\n    for i = y:-1:x\n        if\
    \ i % 2 == 0\n            return i\n        end\n    end\n    \n    return -1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqvd7pynh.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpqvd7pynh.jl:26\n  Test threw exception\n\
    \  Expression: candidate(13, 12) == -1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpqvd7pynh.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvd7pynh.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvd7pynh.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpqvd7pynh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(5234, 5233) == -1\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpqvd7pynh.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvd7pynh.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvd7pynh.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpqvd7pynh.jl:30\n  Test threw excepti"
  timestamp: 1659821870
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i = y:-1:x\n        if i % 2 == 0 \n            return i\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821866
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in y:-1:x \n        if i % 2 == 0 \n            return i \n        end \n\
    \    end \n    return -1 \nend \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821866
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ >= y\n        return -1\n    end\n    for n in x:y\n        if n % 2 == 0\n\
    \            return n\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1e4gpv0u.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp1e4gpv0u.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1e4gpv0u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1e4gpv0u.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1e4gpv0u.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1e4gpv0u.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1e4gpv0u.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1e4gpv0u.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1e4gpv0u.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1e4gpv0u.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1e4gpv0u.jl:30\n  Expression: candidate(546, 546) == 546\n\
    \   Evaluated: -1 == 546\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1e4gpv0u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1e4gpv0u.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821868
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        return -1\n    end\n    for i in x:y\n        if i%2==0\n           \
    \ return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1lero_jo.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp1lero_jo.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1lero_jo.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1lero_jo.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821857
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    n =\
    \ x\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpckffjmy0.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpckffjmy0.jl:1\n\
    in expression starting at /tmp/tmpckffjmy0.jl:1\n"
  stdout: ''
  timestamp: 1659821867
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    # This solution is good, but not very efficient.\n\
    \    for i in (x:y)\n        if i % 2 == 0\n            return i\n        end\n\
    \    end\n    # This solution is much more efficient.\n    (x+y)/2 + (x+y)%2\n\
    end\n\"\"\"\n    This function takes an array of real numbers and a integer number\
    \ x \n    as inputs. The function returns the largest element of the input array\n\
    \    that is greater than x. If there's no such element, then the function\n \
    \   should return -1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpokjx74_x.jl:20\nin expression starting at /tmp/tmpokjx74_x.jl:20\n"
  stdout: ''
  timestamp: 1659821868
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    max\
    \ = -1\n    # If x < y, the range will be empty.\n    if x > y\n        return\
    \ max\n    end\n    # Check if either of x or y is an even number.\n    if x %\
    \ 2 == 0\n        max = x\n    elseif y % 2 == 0\n        max = y\n    end\n \
    \   # If neither of x or y is an even number, then we need to check\n    # the\
    \ numbers in between x and y, which are the odd numbers.\n    # The number i will\
    \ be odd if i is even. (i.e. if i is odd then i % 2 != 0)\n    for i in x:2:y\n\
    \        if i % 2 == 0\n            max = i\n        end\n    end\n    return\
    \ max\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821867
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in y:-1:x\n        if i % 2 == 0\n            return i\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821856
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if (x % 2 == 0) \n        #print(\"Even\")\n        if(y % 2 == 0)\n     \
    \       #print(\"Even\")\n            for i in x:y\n                #print(i)\n\
    \                if(i % 2 == 0)\n                    #print(i)\n             \
    \       res = i\n                end\n            end\n            return res\n\
    \        else\n            return -1\n        end\n    else\n        #print(\"\
    Odd\")\n        if(y % 2 == 0)\n            #print(\"Even\")\n            for\
    \ i in x:y\n                #print(i)\n                if(i % 2 == 0)\n      \
    \              #print(i)\n                    res = i\n                end\n \
    \           end\n            return res\n        else\n            #print(\"Odd\"\
    )\n            return -1\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpl1wbtk8l.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpl1wbtk8l.jl:47\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: -1 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1wbtk8l.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1wbtk8l.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpl1wbtk8l.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  UndefVarError: res not defined\n  Stacktrace:\n \
    \  [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpl1wbtk8l.jl:35\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1wbtk8l.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1wbtk8l.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpl1wbtk8l.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(33, 12354) == 12354\n  UndefVarError: res not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpl1wbtk8l.jl:35\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1wbtk8l.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1wbtk8l.jl:46\ntest set:\
    \ Test Failed at /tmp/tmpl1wbtk8l.jl:51\n  Expression: candidate(6, 29) == 28\n\
    \   Evaluated: -1 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1wbtk8l.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1wbtk8l.jl:46\ntest set: Error\
    \ During Test at "
  timestamp: 1659821870
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ < y\n        for i in x:y\n            if i % 2 == 0 \n                return\
    \ i\n            end\n        end\n    elseif x > y\n        for i in y:x\n  \
    \          if i % 2 == 0 \n                return i\n            end\n       \
    \ end\n    elseif x == y\n        return x\n    end\n    return -1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppjlbjjgh.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmppjlbjjgh.jl:30\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjlbjjgh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjlbjjgh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppjlbjjgh.jl:31\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjlbjjgh.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjlbjjgh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppjlbjjgh.jl:32\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjlbjjgh.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjlbjjgh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppjlbjjgh.jl:33\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjlbjjgh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjlbjjgh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppjlbjjgh.jl:34\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjlbjjgh.jl:34 [inlined]"
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0 && y%2 == 0 && x<y\n        return y\n    elseif x%2 == 0 && y%2 == 0 &&\
    \ x>y\n        return x\n    elseif x%2 == 0 && y%2 != 0 && x<y\n        return\
    \ x\n    elseif x%2 != 0 && y%2 == 0 && x<y\n        return y\n    elseif x%2\
    \ != 0 && y%2 != 0 && x<y\n        return x-1\n    else\n        return -1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzs45uadj.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpzs45uadj.jl:27\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzs45uadj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzs45uadj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzs45uadj.jl:31\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzs45uadj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzs45uadj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzs45uadj.jl:34\n  Expression: candidate(546, 546) == 546\n\
    \   Evaluated: -1 == 546\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzs45uadj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzs45uadj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y \n        return -1\n    end\n    if x % 2 == 0\n        return x\n    else\
    \ \n        return x + 1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpal44f1tu.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpal44f1tu.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpal44f1tu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpal44f1tu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpal44f1tu.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpal44f1tu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpal44f1tu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpal44f1tu.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpal44f1tu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpal44f1tu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpal44f1tu.jl:28\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpal44f1tu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpal44f1tu.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # Make\
    \ sure x is less than y\n    if x > y \n        # Swap x and y\n        x, y =\
    \ y, x\n    end\n    \n    # If x is an even number, then there is a number between\
    \ x and y\n    if x % 2 == 0\n        return max(x, y)\n    end\n    \n    # If\
    \ x is an odd number, then check if x+1 is in the range and if it is\n    # an\
    \ even number.\n    if x + 1 <= y && (x + 1) % 2 == 0\n        return x + 1\n\
    \    end\n    \n    # If there's no even number in the range, then we return -1\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1xtblumr.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp1xtblumr.jl:33\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 15 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xtblumr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xtblumr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1xtblumr.jl:34\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 13 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xtblumr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xtblumr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1xtblumr.jl:35\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xtblumr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xtblumr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1xtblumr.jl:36\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xtblumr.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xtblumr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1xtblumr.jl:37\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 29 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xtblumr.jl:37 [inlined"
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # if\
    \ there's no such number, then the function should return -1.\n    if x > y\n\
    \        return -1\n    end\n    \n    # if x < y\n    if x % 2 == 0 # x is even\n\
    \        return x\n    else # x is odd\n        return choose_num(x+1, y)\n  \
    \  end\nend\nprintln(choose_num(1, 3)) # 2\nprintln(choose_num(3, 5)) # 4\nprintln(choose_num(1,\
    \ 4)) # 2\nprintln(choose_num(0, 4)) # 0\nprintln(choose_num(1, 0)) # -1\nprintln(choose_num(1,\
    \ 1)) # -1\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppsfasqxs.jl:28

    '
  stdout: "2\n4\n2\n0\n-1\n-1\ntest set: Test Failed at /tmp/tmppsfasqxs.jl:31\n \
    \ Expression: candidate(12, 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsfasqxs.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsfasqxs.jl:30\ntest set: Test\
    \ Failed at /tmp/tmppsfasqxs.jl:33\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsfasqxs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsfasqxs.jl:30\ntest set: Test\
    \ Failed at /tmp/tmppsfasqxs.jl:35\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsfasqxs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsfasqxs.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # get\
    \ max number\n    if x>y \n        num = x\n    else \n        num = y\n    end\n\
    \    # return biggest even number in range\n    while num >= x\n        if num%2\
    \ == 0\n            return num\n        end\n        num = num - 1\n    end\n\
    \    # if no even numbers in range\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7pw478n8.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp7pw478n8.jl:32\n  Expression: candidate(5234,\
    \ 5233) == -1\n   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7pw478n8.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7pw478n8.jl:28\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659821869
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    result\
    \ = -1\n    for i in x:y\n        if i % 2 == 0\n            result = i\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821867
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y \n        return -1\n    end\n    if (x % 2 == 0) \n        x \n    else\
    \ \n        x + 1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpphvu8d4h.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpphvu8d4h.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphvu8d4h.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphvu8d4h.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpphvu8d4h.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphvu8d4h.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphvu8d4h.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpphvu8d4h.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphvu8d4h.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphvu8d4h.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpphvu8d4h.jl:28\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphvu8d4h.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphvu8d4h.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    i::Int64\
    \ = x\n    while i <= y\n        if i % 2 == 0\n            println(i)\n     \
    \       return i\n        end\n        i += 1\n    end\n    return -1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk8dth9sj.jl:20

    '
  stdout: "12\ntest set: Test Failed at /tmp/tmpk8dth9sj.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8dth9sj.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8dth9sj.jl:22\n34\ntest set:\
    \ Test Failed at /tmp/tmpk8dth9sj.jl:25\n  Expression: candidate(33, 12354) ==\
    \ 12354\n   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8dth9sj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8dth9sj.jl:22\n6\ntest set: Test\
    \ Failed at /tmp/tmpk8dth9sj.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8dth9sj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8dth9sj.jl:22\n546\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   #The first if statement checks if x < y. \n    #The elif statement checks\
    \ if x and y are even integers. \n    #The else statement checks if x and y are\
    \ not even integers.\n    if x < y \n        return y\n    elif x % 2 == 0 &&\
    \ y % 2 == 0\n        return y\n    else\n        return -1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpncronnvu.jl:14\nin expression starting at /tmp/tmpncronnvu.jl:14\n"
  stdout: ''
  timestamp: 1659821868
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if y\
    \ < x\n        return -1\n    end\n    if y == x && y % 2 == 0\n        return\
    \ y\n    end\n    if y == x && y % 2 != 0\n        return -1\n    end\n    while\
    \ x < y\n        if x % 2 == 0\n            return x\n        end\n        x +=\
    \ 1\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx4cb4htm.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpx4cb4htm.jl:30\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx4cb4htm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx4cb4htm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpx4cb4htm.jl:32\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx4cb4htm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx4cb4htm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpx4cb4htm.jl:34\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx4cb4htm.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx4cb4htm.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821870
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in x:y\n        if rem(i, 2) == 0\n            return i\n        end\n   \
    \ end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp4phmy71.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpp4phmy71.jl:20\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4phmy71.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4phmy71.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp4phmy71.jl:22\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4phmy71.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4phmy71.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp4phmy71.jl:24\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4phmy71.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4phmy71.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821870
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ == y && x%2 == 0\n        return x\n    elseif x == y\n        return -1\n \
    \   elseif y%2 == 0\n        return y\n    else\n        return choose_num(x,\
    \ y-1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp626tjv2z.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp626tjv2z.jl:24\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp626tjv2z.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp626tjv2z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp626tjv2z.jl:26\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5232 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp626tjv2z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp626tjv2z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp626tjv2z.jl:28\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 10 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp626tjv2z.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp626tjv2z.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   # check if the numbers are positive\n    if x < 0 || y < 0\n        return\
    \ -1\n    end\n    \n    # if x < y, then the while loop will run at least once\n\
    \    while x <= y \n        \n        # check if x is an even number\n       \
    \ if x % 2 == 0\n            # return x if it is an even number\n            return\
    \ x\n        end\n        \n        # if x is an odd number, add 1 to x to check\
    \ the next number\n        x += 1\n    end\n    # return -1 if there's no even\
    \ number in the range\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpft7y66uc.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpft7y66uc.jl:34\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpft7y66uc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpft7y66uc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpft7y66uc.jl:36\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpft7y66uc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpft7y66uc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpft7y66uc.jl:38\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpft7y66uc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpft7y66uc.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821870
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ < y\n        for i in x:y\n            if i % 2 == 0\n                return\
    \ i\n            end\n        end\n    elseif x > y\n        for i in y:x\n  \
    \          if i % 2 == 0\n                return i\n            end\n        end\n\
    \    elseif x == y\n        if x % 2 == 0\n            return x\n        else\
    \ \n            return -1\n        end\n    end\n    return -1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplupjocm7.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmplupjocm7.jl:34\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplupjocm7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplupjocm7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplupjocm7.jl:35\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplupjocm7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplupjocm7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplupjocm7.jl:36\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplupjocm7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplupjocm7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplupjocm7.jl:37\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplupjocm7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplupjocm7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplupjocm7.jl:38\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplupjocm7.jl:38 [inlined]"
  timestamp: 1659821870
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    even_number = y\n    while even_number\
    \ % 2 != 0\n        even_number -= 1\n    end\n    return even_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6kigzsrb.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp6kigzsrb.jl:28\n  Expression: candidate(7,\
    \ 7) == -1\n   Evaluated: 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6kigzsrb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kigzsrb.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659821870
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x<0\
    \ || y<0 || y<x\n        return -1\n    end\n    for i in range(x, y+1)\n    \
    \    if iseven(i)\n            return i\n        end\n    end\n    return -1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkripi8mk.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpkripi8mk.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkripi8mk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkripi8mk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkripi8mk.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkripi8mk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkripi8mk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkripi8mk.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkripi8mk.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkripi8mk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkripi8mk.jl:29\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkripi8mk.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkripi8mk.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821870
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    res\
    \ = 0\n    if y%2 == 0\n        res = y\n    else\n        res = y-1\n    end\n\
    \    \n    for n in range(x, y)\n        if n%2 == 0\n            if n > res\n\
    \                res = n\n            end\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4lcr9lr.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpd4lcr9lr.jl:30\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4lcr9lr.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4lcr9lr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd4lcr9lr.jl:32\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5232 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4lcr9lr.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4lcr9lr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd4lcr9lr.jl:34\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 10 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4lcr9lr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4lcr9lr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd4lcr9lr.jl:35\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4lcr9lr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4lcr9lr.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821871
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    return\
    \ 0\nend\n \nprint(choose_num(10, 20))   # --> 20\nprint(choose_num(30, 40)) \
    \  # --> 40\nprint(choose_num(100, 300)) # --> 200\nprint(choose_num(300, 300))\
    \ # --> 300\nprint(choose_num(50, 100))  # --> -1\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmtdgp6mg.jl:18

    '
  stdout: "00000test set: Test Failed at /tmp/tmpmtdgp6mg.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtdgp6mg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtdgp6mg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmtdgp6mg.jl:22\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtdgp6mg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtdgp6mg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmtdgp6mg.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 0 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtdgp6mg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtdgp6mg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmtdgp6mg.jl:24\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtdgp6mg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtdgp6mg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmtdgp6mg.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 0 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtdgp6mg.jl:25 [inlined]\n"
  timestamp: 1659821871
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n   x = convert(Int64,\
    \ x)\n   y = convert(Int64, y)\n   \n   if x <= y  \n       for i = y:-1:x\n \
    \           if i % 2 == 0\n               return i\n            end\n       end\n\
    \       return -1\n   else \n       for i = x:-1:y\n            if i % 2 == 0\n\
    \               return i\n            end\n       end\n       return -1\n   end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeovay_ck.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpeovay_ck.jl:33\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeovay_ck.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeovay_ck.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeovay_ck.jl:35\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeovay_ck.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeovay_ck.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeovay_ck.jl:37\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 26 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeovay_ck.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeovay_ck.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821871
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if y<x\n\
    \        return -1\n    end\n    for i in y:-1:x \n        if i%2==0\n       \
    \     return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    ###########\
    \ Recursive code: ###########\n    if x == y  \n        return x\n    elseif x\
    \ > y\n        return -1\n    elseif x%2 == 0\n        return x\n    else\n  \
    \      return choose_num(x+1, y)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfzvis3tv.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpfzvis3tv.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfzvis3tv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfzvis3tv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfzvis3tv.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfzvis3tv.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfzvis3tv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfzvis3tv.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfzvis3tv.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfzvis3tv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfzvis3tv.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 7 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfzvis3tv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfzvis3tv.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821871
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ <= 0 || y <= 0 || x > y\n        return -1\n    end\n    if x % 2 == 0\n   \
    \     return x\n    else\n        x += 1\n    end\n    while x <= y\n        if\
    \ x % 2 == 0\n            return x\n        end\n        x += 1\n    end\n   \
    \ return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa0ud__cv.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpa0ud__cv.jl:29\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0ud__cv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0ud__cv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpa0ud__cv.jl:31\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0ud__cv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0ud__cv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpa0ud__cv.jl:33\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0ud__cv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0ud__cv.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821871
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        return -1\n    end\n    for i in x:y\n        if i%2==0\n           \
    \ return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1lero_jo.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp1lero_jo.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1lero_jo.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1lero_jo.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lero_jo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lero_jo.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821857
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    for i in y:-1:x\n        if iseven(i)\n\
    \            return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    while\
    \ x <= y\n        if (x % 2 == 0)\n            return x\n        end\n       \
    \ x = x + 1\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqmkt8ors.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpqmkt8ors.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmkt8ors.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmkt8ors.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqmkt8ors.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmkt8ors.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmkt8ors.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqmkt8ors.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmkt8ors.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmkt8ors.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821871
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in x:y\n        if (i % 2 == 0)\n            return i\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4fs6o2dh.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp4fs6o2dh.jl:20\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fs6o2dh.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fs6o2dh.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp4fs6o2dh.jl:22\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fs6o2dh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fs6o2dh.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp4fs6o2dh.jl:24\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fs6o2dh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fs6o2dh.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821871
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ != 0\n        x = x + 1\n    end\n    if y%2 != 0\n        y = y - 1\n    end\n\
    \    if x > y\n        return -1\n    end\n    return y\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821869
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if y\
    \ < x \n        return -1\n    end\n    if x % 2 == 0\n        return x\n    else\n\
    \        return x + 1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpocthoq7e.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpocthoq7e.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpocthoq7e.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpocthoq7e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpocthoq7e.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpocthoq7e.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpocthoq7e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpocthoq7e.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpocthoq7e.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpocthoq7e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpocthoq7e.jl:28\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpocthoq7e.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpocthoq7e.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821871
- exit_code: -1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if x>y\n        return -1\n    end\n    while x<=y\n        if mod(x,2)==0\n\
    \            return x\n        end\n        x+=1\n    end\n    \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmpm3yauklr.jl:25\n  Expression: candidate(12,
    15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpm3yauklr.jl:25 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpm3yauklr.jl:24\ntest set: Test Failed
    at /tmp/tmpm3yauklr.jl:27\n  Expression: candidate(33, 12354) == 12354\n   Evaluated:
    34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpm3yauklr.jl:27 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpm3yauklr.jl:24\ntest set: Test Failed
    at /tmp/tmpm3yauklr.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:
    6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpm3yauklr.jl:29 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpm3yauklr.jl:24\ntest set: Error
    During Test at /tmp/tmpm3yauklr.jl:31\n  Test threw exception\n  Expression: candidate(7,
    7) == -1\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpm3yauklr.jl:16\n   [2] macro
    expansion\n   '
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y \n        return -1\n    end\n    if x % 2 == 0 \n        return x\n   \
    \ end\n    choose_num(x+1, y)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnjqfxy0k.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpnjqfxy0k.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnjqfxy0k.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnjqfxy0k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnjqfxy0k.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnjqfxy0k.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnjqfxy0k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnjqfxy0k.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnjqfxy0k.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnjqfxy0k.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821871
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   #Check if x and y are positive. If they aren't, then the function returns\
    \ -1.\n    if x <= 0 || y <= 0\n        return -1\n    end\n    \n    #Check if\
    \ x is even. If it is not, then it needs to be increased by 1.\n    if x % 2 !=\
    \ 0\n        x += 1\n    end\n    \n    #Check if y is even. If it is not, then\
    \ it needs to be decreased by 1.\n    if y % 2 != 0\n        y -= 1\n    end\n\
    \    \n    #If x and y are even, then x must be the biggest even integer number\
    \ \n    #that is in the range [x, y] inclusive.\n    return x\n    \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiri1eebq.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpiri1eebq.jl:34\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiri1eebq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiri1eebq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpiri1eebq.jl:35\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiri1eebq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiri1eebq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpiri1eebq.jl:36\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiri1eebq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiri1eebq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpiri1eebq.jl:37\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiri1eebq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiri1eebq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpiri1eebq.jl:38\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiri1eebq.jl:38 [inlined]"
  timestamp: 1659821872
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\
    \ || x<0 || y<0\n        return -1\n    end\n    if x%2 == 0\n        return x\n\
    \    elseif y%2 == 0\n        return y\n    else\n        return -1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5km33_j3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp5km33_j3.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5km33_j3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5km33_j3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5km33_j3.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5km33_j3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5km33_j3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659821872
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   \n    for i in range(x, y+1)\n        \n        if i % 2 == 0\n          \
    \  return i\n        end\n        \n    end\n    return -1\n    \n    \nend\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp543_bn_4.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp543_bn_4.jl:26\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp543_bn_4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp543_bn_4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp543_bn_4.jl:28\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp543_bn_4.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp543_bn_4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp543_bn_4.jl:29\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp543_bn_4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp543_bn_4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp543_bn_4.jl:30\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp543_bn_4.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp543_bn_4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp543_bn_4.jl:32\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp543_bn_4.jl:32 [inlined]\n ["
  timestamp: 1659821872
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if(x>y)\n\
    \        return -1\n    end\n    if(y % 2 == 0)\n        return y\n    end\n \
    \   if(x % 2 == 0)\n        return x\n    end\n    return choose_num(x+1, y-1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy0b6mvve.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpy0b6mvve.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0b6mvve.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0b6mvve.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy0b6mvve.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0b6mvve.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0b6mvve.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659821872
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ num in range(x, y+1)\n        if num % 2 == 0\n            return num\n    \
    \    end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqjck36iz.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpqjck36iz.jl:20\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjck36iz.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjck36iz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqjck36iz.jl:22\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjck36iz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjck36iz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqjck36iz.jl:23\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjck36iz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjck36iz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqjck36iz.jl:24\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjck36iz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjck36iz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqjck36iz.jl:26\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjck36iz.jl:26 [inlined]\n ["
  timestamp: 1659821872
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    if x % 2 == 0\n        return x\n    else\n\
    \        return x + 1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprssdwdel.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmprssdwdel.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprssdwdel.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprssdwdel.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprssdwdel.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprssdwdel.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprssdwdel.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprssdwdel.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprssdwdel.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprssdwdel.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprssdwdel.jl:28\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprssdwdel.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprssdwdel.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821872
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    lst = [i for i in x:y if i % 2 == 0]\n\
    \    if length(lst) == 0\n        return -1\n    end\n    return maximum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821870
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ < 2 || y < 2 || x > y\n        return 0\n    end\n    num = 2\n    while num\
    \ < y\n        if num >= x && num <= y\n            return num\n        end\n\
    \        num += 2\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvc_wj68e.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpvc_wj68e.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvc_wj68e.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvc_wj68e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvc_wj68e.jl:26\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvc_wj68e.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvc_wj68e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvc_wj68e.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvc_wj68e.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvc_wj68e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvc_wj68e.jl:28\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvc_wj68e.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvc_wj68e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvc_wj68e.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvc_wj68e.jl:29 [inlined]\n [3"
  timestamp: 1659821872
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    max_even_num = -1\n    for i in x:y\n \
    \       if i % 2 == 0\n            max_even_num = i\n        end\n    end\n  \
    \  return max_even_num\nend\n@assert choose_num(1, 4) == 4\n@assert choose_num(1,\
    \ 2) == 2\n@assert choose_num(1, 3) == -1\n@assert choose_num(1, 4) == 4\n@assert\
    \ choose_num(1, 5) == 4\n@assert choose_num(1, 6) == 6\n@assert choose_num(4,\
    \ 4) == 4\n@assert choose_num(4, 6) == 6\n \nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: AssertionError: choose_num(1, 3) == -1\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnzydnw1.jl:21\nin expression starting at\
    \ /tmp/tmplnzydnw1.jl:21\n"
  stdout: ''
  timestamp: 1659821871
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    a =\
    \ y-x+1\n    # Storing x value as a prev variable\n    prev = x\n    # we will\
    \ store the first even number \n    # which is multiple of 2\n    # that occurs\
    \ in the range\n    even = 0\n    i = 1\n    while(i < a):\n        # Check whether\
    \ the current element is even\n        if(x%2 == 0):\n            # if yes, update\
    \ even\n            even = x\n            break\n        # update x for next iteration\n\
    \        x = prev + i\n        i += 1\n    \n    # condition for no even number\
    \ \n    if(even == 0):\n        return -1\n    \n    # If first even number found\
    \ \n    # then return it \n    return even \n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf25dye2d.jl:17\nin expression starting at\
    \ /tmp/tmpf25dye2d.jl:17\n"
  stdout: ''
  timestamp: 1659821872
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    if x % 2 == 0\n        big_even = x\n \
    \   else\n        big_even = x + 1\n    end\n    for i in (big_even:2:y)\n   \
    \     big_even = i\n    end\n    return big_even\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqsqetfjm.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpqsqetfjm.jl:32\n  Expression: candidate(7,\
    \ 7) == -1\n   Evaluated: 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqsqetfjm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqsqetfjm.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659821873
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # test\
    \ to see if x is > 0 and y is > 0\n    if x > 0 && y > 0\n        # test to see\
    \ if x is even and y is even\n        if x % 2 == 0 && y % 2 == 0\n          \
    \  # return the largest integer number between x and y\n            return max(x,\
    \ y)\n        elseif x % 2 == 0 && y % 2 != 0\n            # return the largest\
    \ integer number between x and y - 1\n            return max(x, y - 1)\n     \
    \   elseif x % 2 != 0 && y % 2 == 0\n            # return the largest integer\
    \ number between x + 1 and y\n            return max(x + 1, y)\n        else \n\
    \            # return the largest integer number between x + 1 and y - 1\n   \
    \         return max(x + 1, y - 1)\n        end\n    else \n        # if the inputs\
    \ are not both positive integers\n        return -1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk3qfw6i6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpk3qfw6i6.jl:35\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk3qfw6i6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk3qfw6i6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpk3qfw6i6.jl:37\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk3qfw6i6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk3qfw6i6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpk3qfw6i6.jl:39\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk3qfw6i6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk3qfw6i6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpk3qfw6i6.jl:40\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk3qfw6i6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk3qfw6i6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821873
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    even_nums\
    \ = [num for num in x:y if num % 2 == 0]\n    if !isempty(even_nums)\n       \
    \ return maximum(even_nums)\n    else\n        return -1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821871
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i = y:-1:x \n        if i % 2 == 0\n            return i\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821871
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    even_nums\
    \ = []\n    for i in x:y\n        if i % 2 == 0\n            push!(even_nums,\
    \ i)\n        end\n    end\n    if length(even_nums) == 0\n        return -1\n\
    \    else\n        return maximum(even_nums)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821871
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    num\
    \ = 0\n    if x%2 == 0\n        num = x\n    else\n        num = x + 1\n    end\n\
    \    while num < y\n        if num%2 == 0\n            if num < y\n          \
    \      num = num + 2\n            else\n                return num\n         \
    \   end\n        else\n            num = num + 1\n        end\n    end\n    if\
    \ num > y\n        return -1\n    else\n        return num\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsfa37uqv.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpsfa37uqv.jl:36\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: -1 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsfa37uqv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsfa37uqv.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsfa37uqv.jl:40\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ -1 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsfa37uqv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsfa37uqv.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659821873
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in x:y\n        if i % 2 == 0\n            if i == y \n                return\
    \ i\n            end\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvwjbn86_.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvwjbn86_.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: -1 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvwjbn86_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvwjbn86_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvwjbn86_.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ -1 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvwjbn86_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvwjbn86_.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    #Check\
    \ if both numbers are positive\n    if (x > 0) && (y > 0)\n        #If x is bigger\
    \ than y, switch them\n        if x > y\n            x, y = y, x\n        end\n\
    \        #Check if there is even number between x and y\n        if x%2 == 0\n\
    \            #If yes, take it\n            return x\n        else\n          \
    \  #If not, take the next bigger number\n            return x+1\n        end\n\
    \    else\n        #If x or y are negative, return -1\n        return -1\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwzyy3p7d.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpwzyy3p7d.jl:32\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwzyy3p7d.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwzyy3p7d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwzyy3p7d.jl:33\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwzyy3p7d.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwzyy3p7d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwzyy3p7d.jl:34\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwzyy3p7d.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwzyy3p7d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwzyy3p7d.jl:35\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwzyy3p7d.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwzyy3p7d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwzyy3p7d.jl:36\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwzyy3p7d.jl:36 [inlined]"
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2==0\n\
    \        if y%2==0\n            if x>y\n                return x\n           \
    \ else\n                return y\n            end\n        else\n            if\
    \ x<y\n                return choose_num(x, y-1)\n            else\n         \
    \       return x\n            end\n        end\n    else\n        if y%2==0\n\
    \            if x<y\n                return y\n            else\n            \
    \    return choose_num(x+1, y)\n            end\n        else\n            if\
    \ x<y\n                return choose_num(x+1, y-1)\n            else\n       \
    \         return -1\n            end\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmvkg0y_8.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpmvkg0y_8.jl:44\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvkg0y_8.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvkg0y_8.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpmvkg0y_8.jl:46\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvkg0y_8.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvkg0y_8.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpmvkg0y_8.jl:48\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvkg0y_8.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvkg0y_8.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ <= y\n        for i in range(x, y+1)\n            if i % 2 == 0\n          \
    \      return i\n            end\n        end\n        return -1\n    else\n \
    \       return -1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvzc2bq6_.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpvzc2bq6_.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvzc2bq6_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvzc2bq6_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvzc2bq6_.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvzc2bq6_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvzc2bq6_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvzc2bq6_.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvzc2bq6_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvzc2bq6_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvzc2bq6_.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvzc2bq6_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvzc2bq6_.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ < 2 && y < 2\n        return -1\n    end\n    \n    for i in x:y\n        if\
    \ i % 2 == 0\n            max_even = i\n        end\n    end\n    \n    return\
    \ max_even\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpq241p2g_.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpq241p2g_.jl:25\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  UndefVarError: max_even not defined\n\
    \  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpq241p2g_.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq241p2g_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq241p2g_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpq241p2g_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  UndefVarError: max_even not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpq241p2g_.jl:18\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq241p2g_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq241p2g_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpq241p2g_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(33, 12354) == 12354\n  UndefVarError: max_even not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpq241p2g_.jl:18\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq241p2g_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq241p2g_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpq241p2g_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(5234, 5233) == -1\n  UndefVarError: max_even not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpq241p2g_.jl:18\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ % 2 == 0\n        z = x\n    else\n        z = x + 1\n    end\n    while z >=\
    \ x && z <= y\n        return z\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkjo5y4jl.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpkjo5y4jl.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjo5y4jl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjo5y4jl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkjo5y4jl.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjo5y4jl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjo5y4jl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkjo5y4jl.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjo5y4jl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjo5y4jl.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \"\"\
    \"Return the biggest even integer in the range [x, y].\n    \"\"\"\n    # first\
    \ test if x<y\n    if x > y\n        println(\"Input numbers should be: x <= y.\
    \ Try again.\")\n        return -1\n    end\n    for i in x:y\n        if i%2\
    \ == 0\n            return i\n        end\n    end\n    return -1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprh_61s37.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmprh_61s37.jl:27\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprh_61s37.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprh_61s37.jl:26\nInput numbers\
    \ should be: x <= y. Try again.\ntest set: Test Failed at /tmp/tmprh_61s37.jl:29\n\
    \  Expression: candidate(33, 12354) == 12354\n   Evaluated: 34 == 12354\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprh_61s37.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprh_61s37.jl:26\nInput numbers\
    \ should be: x <= y. Try again.\ntest set: Test Failed at /tmp/tmprh_61s37.jl:31\n\
    \  Expression: candidate(6, 29) == 28\n   Evaluated: 6 == 28\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprh_61s37.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprh_61s37.jl:26\nInput numbers\
    \ should be: x <= y. Try again.\nTest Summary: | Pass  Fail  Total\ntest set \
    \     |    5     3      8\n"
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if x > y\n        return -1\n    end\n    return max(x:2:y)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpkr8z2wyx.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpkr8z2wyx.jl:19\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  MethodError: no method matching max(::StepRange{Int64,\
    \ Int64})\n  Closest candidates are:\n    max(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n\
    \    max(::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n\
    \    max(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpkr8z2wyx.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkr8z2wyx.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkr8z2wyx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpkr8z2wyx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(33, 12354) == 12354\n  MethodError: no method matching max(::StepRange{Int64,\
    \ Int64})\n  Closest candidates are:\n    max(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n\
    \    max(::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n\
    \    max(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpkr8z2wyx.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkr8z2wyx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkr8z2wyx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpkr8z2wyx.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(6, 29) == 28\n  MethodError: no method matching max(::StepRange{"
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in x:y\n        if i%2 == 0\n            return i\n        end\n    end\n\
    \    return -1\nend\nchoose_num(2, 5)\nchoose_num(2, 10)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpecxixxkw.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpecxixxkw.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecxixxkw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecxixxkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpecxixxkw.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecxixxkw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecxixxkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpecxixxkw.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecxixxkw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecxixxkw.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    if mod(x, 2) == 0\n        return x\n \
    \   end\n    return choose_num(x+1, y)\nend\nchoose_num(6, 8)\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2ogxhsje.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2ogxhsje.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ogxhsje.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ogxhsje.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2ogxhsje.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ogxhsje.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ogxhsje.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2ogxhsje.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ogxhsje.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ogxhsje.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if(x%2\
    \ != 0)\n        x = x + 1\n    end\n    for i in x:y\n        if(i%2 == 0)\n\
    \            a = i\n        end\n    end\n    if(a == y)\n        a = -1\n   \
    \ end\n    return a\nend\n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp44bcbpzl.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp44bcbpzl.jl:30\n  Test threw exception\n\
    \  Expression: candidate(13, 12) == -1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp44bcbpzl.jl:16\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44bcbpzl.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44bcbpzl.jl:28\ntest set:\
    \ Test Failed at /tmp/tmp44bcbpzl.jl:31\n  Expression: candidate(33, 12354) ==\
    \ 12354\n   Evaluated: -1 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp44bcbpzl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp44bcbpzl.jl:28\ntest set: Error\
    \ During Test at /tmp/tmp44bcbpzl.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(5234, 5233) == -1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp44bcbpzl.jl:16\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44bcbpzl.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44bcbpzl.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp44bcbpzl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(27, 10) == -1\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp44bcbpzl.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44bcbpzl.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/ju"
  timestamp: 1659821876
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    n =\
    \ y\n    while n >= x\n        if n % 2 == 0\n            return n\n        end\n\
    \        n -= 1\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821872
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if x > y  \n        \n        z = y\n        \n        while z <= x \n   \
    \         if z % 2 == 0\n                return z\n            end\n         \
    \   z = z + 1\n        end\n        return -1\n    end\n    \n    if x < y \n\
    \        \n        z = x\n        \n        while z <= y \n            if z %\
    \ 2 == 0\n                return z\n            end\n            z = z + 1\n \
    \       end\n        return -1\n    end\n    return x\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph765qxc5.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmph765qxc5.jl:41\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph765qxc5.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph765qxc5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmph765qxc5.jl:42\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph765qxc5.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph765qxc5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmph765qxc5.jl:43\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph765qxc5.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph765qxc5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmph765qxc5.jl:44\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph765qxc5.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph765qxc5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmph765qxc5.jl:45\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph765qxc5.jl:45 [inlined]"
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    \n    if x % 2 == 0 && y % 2 == 0\n   \
    \     return y\n    end\n    \n    if x % 2 == 0 && y % 2 != 0\n        return\
    \ y - 1\n    end\n    \n    if x % 2 != 0 && y % 2 == 0\n        return y\n  \
    \  end\n    \n    if x % 2 != 0 && y % 2 != 0\n        return y - 1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9k0grpu0.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp9k0grpu0.jl:39\n  Expression: candidate(7,\
    \ 7) == -1\n   Evaluated: 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9k0grpu0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9k0grpu0.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n  if x>y\n\
    \    return -1\n  end\n    \n  if y%2==0\n    return y\n  else\n    return y-1\n\
    \  end\nend\n\"\"\"This function takes two positive numbers x and y and returns\
    \ the\n    biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    there's no such number, then the function should return -1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihetjist.jl:18\nin expression starting at\
    \ /tmp/tmpihetjist.jl:18\n"
  stdout: ''
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in range(x, y+1)\n        if i % 2 == 0\n            return i\n        end\n\
    \    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpggiituox.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpggiituox.jl:20\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggiituox.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggiituox.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpggiituox.jl:22\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggiituox.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggiituox.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpggiituox.jl:23\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggiituox.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggiituox.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpggiituox.jl:24\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggiituox.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggiituox.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpggiituox.jl:26\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggiituox.jl:26 [inlined]\n ["
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   if x > y\n        return -1\n        \n    elseif y%2 == 0\n        if x%2\
    \ == 0\n            if y > x\n                return y\n            else\n   \
    \             return x\n            end\n        else\n            return y\n\
    \        end\n    elseif x%2 == 0\n        return x\n    else\n        if y >\
    \ x\n            return (y-1)\n        else\n            return (x-1)\n      \
    \  end\n    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnucssye7.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpnucssye7.jl:38\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnucssye7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnucssye7.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnucssye7.jl:42\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnucssye7.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnucssye7.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnucssye7.jl:44\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnucssye7.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnucssye7.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y \n        return -1\n    end\n    if x % 2 == 0 \n        return x\n   \
    \ end\n    if x % 2 == 1 \n        return choose_num(x+1, y)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmputvtji5c.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmputvtji5c.jl:23\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputvtji5c.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputvtji5c.jl:22\ntest set: Test\
    \ Failed at /tmp/tmputvtji5c.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputvtji5c.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputvtji5c.jl:22\ntest set: Test\
    \ Failed at /tmp/tmputvtji5c.jl:27\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputvtji5c.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputvtji5c.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ > y\n        return -1\n    end\n    \n    for i in x:y\n        if i % 2 ==\
    \ 0\n            return i\n        end\n    end\n    return -1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxmr91r7d.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpxmr91r7d.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmr91r7d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmr91r7d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxmr91r7d.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmr91r7d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmr91r7d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxmr91r7d.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmr91r7d.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmr91r7d.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if mod(x,\
    \ 2) == 0 && x >= y \n        return x\n    elseif mod(x, 2) == 0 && x <= y\n\
    \        while x < y\n            x += 2\n        end\n        return x\n    elseif\
    \ mod(x, 2) != 0 && x < y\n        x += 1\n        while x < y\n            x\
    \ += 2\n        end\n        return x\n    else\n        return -1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8o126dab.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp8o126dab.jl:30\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 16 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8o126dab.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8o126dab.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8o126dab.jl:33\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8o126dab.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8o126dab.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8o126dab.jl:34\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 30 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8o126dab.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8o126dab.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        return -1\n    end\n    if y % 2 == 0\n        return y\n    elseif y\
    \ % 2 != 0\n        y -= 1\n        return y\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr0jgtuds.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpr0jgtuds.jl:29\n  Expression: candidate(7,\
    \ 7) == -1\n   Evaluated: 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0jgtuds.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0jgtuds.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # Your\
    \ code here.\nend\n \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpivtdo7qz.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpivtdo7qz.jl:16\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpivtdo7qz.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivtdo7qz.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivtdo7qz.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpivtdo7qz.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpivtdo7qz.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivtdo7qz.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivtdo7qz.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpivtdo7qz.jl:18\n  Test threw exception\n  E"
  timestamp: 1659821877
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    #TODO:\
    \ implement\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpi5gjhz76.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpi5gjhz76.jl:15\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpi5gjhz76.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5gjhz76.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5gjhz76.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpi5gjhz76.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpi5gjhz76.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5gjhz76.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5gjhz76.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpi5gjhz76.jl:17\n  Test threw exception\n  E"
  timestamp: 1659821878
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   n = 0\n    big_num = 0\n    \n    for n in x:y\n        if n > big_num &&\
    \ n % 2 == 0\n            big_num = n\n        end\n    end\n    \n    if big_num\
    \ == 0\n        return -1\n    else\n        return big_num\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821874
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    bigger\
    \ = 0\n    if x > y\n        bigger = x\n    else\n        bigger = y\n    end\n\
    \    count = bigger\n    while true\n        if count % 2 == 0\n            return\
    \ count\n        end\n        count -= 1\n        if count < 1\n            return\
    \ -1\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyyj4brf4.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpyyj4brf4.jl:31\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyyj4brf4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyyj4brf4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyyj4brf4.jl:33\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyyj4brf4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyyj4brf4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyyj4brf4.jl:35\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 26 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyyj4brf4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyyj4brf4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyyj4brf4.jl:36\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 6 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyyj4brf4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyyj4brf4.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659821876
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    start\
    \ = x\n    while start <= y\n        if start % 2 == 0\n            return start\n\
    \        end\n        start += 1\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6go219fy.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp6go219fy.jl:22\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6go219fy.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6go219fy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6go219fy.jl:24\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6go219fy.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6go219fy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6go219fy.jl:26\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6go219fy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6go219fy.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821876
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in x:y\n        if i % 2 == 0\n            return i\n    return -1\nend\n\
    end\nchoose_num(15, 16)\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5o1we6qt.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5o1we6qt.jl:1\n\
    in expression starting at /tmp/tmp5o1we6qt.jl:1\n"
  stdout: ''
  timestamp: 1659821876
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        println(\"x is not bigger than y\")\n    else\n        x=x-1 # we need\
    \ to start from x-1\n        while x<y\n            x=x+1\n            if x%2==0\n\
    \                even_num=x\n            end\n        end\n        if x%2==0\n\
    \            return even_num\n        else\n            return -1\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzap5003k.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpzap5003k.jl:30\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: -1 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzap5003k.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzap5003k.jl:29\nx is not bigger\
    \ than y\ntest set: Error During Test at /tmp/tmpzap5003k.jl:31\n  Test threw\
    \ exception\n  Expression: candidate(13, 12) == -1\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpzap5003k.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzap5003k.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzap5003k.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpzap5003k.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(33, 12354) == 12354\n  UndefVarError: even_num not defined\n  Stacktrace:\n\
    \   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpzap5003k.jl:19\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzap5003k.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzap5003k.jl:29\nx is not bigger\
    \ than y\nt"
  timestamp: 1659821879
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # YOUR\
    \ CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2ibd2gu5.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp2ibd2gu5.jl:15\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp2ibd2gu5.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ibd2gu5.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ibd2gu5.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2ibd2gu5.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmp2ibd2gu5.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ibd2gu5.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ibd2gu5.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2ibd2gu5.jl:17\n  Test threw exception\n  E"
  timestamp: 1659821879
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    m =\
    \ max(x, y)\n    n = min(x, y)\n    if m > n\n        for i in n:m\n         \
    \   if i % 2 == 0\n                return i\n            end\n        end\n  \
    \  else\n        return -1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk9eterrs.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpk9eterrs.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9eterrs.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9eterrs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpk9eterrs.jl:26\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9eterrs.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9eterrs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpk9eterrs.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9eterrs.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9eterrs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpk9eterrs.jl:28\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9eterrs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9eterrs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpk9eterrs.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9eterrs.jl:29 [inlined]"
  timestamp: 1659821877
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \n \
    \   # Your code here\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpa12xv_4_.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpa12xv_4_.jl:17\n  Test threw exception\n\
    \  Expression: candidate(12, 15) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpa12xv_4_.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa12xv_4_.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa12xv_4_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpa12xv_4_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(13, 12) == -1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] choose_num(x::Int64, y::Int64)\n     @ Main /tmp/tmpa12xv_4_.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa12xv_4_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa12xv_4_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpa12xv_4_.jl:19\n  Test threw exception\n "
  timestamp: 1659821878
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    # define\
    \ a local variable which will be returned\n    num = 0\n    # check if both numbers\
    \ are positive\n    if x > 0 && y > 0\n        # loop through all numbers in range\
    \ [x, y]\n        for i = x:y\n            # check if number is even\n       \
    \     if i % 2 == 0\n                # if so, then update the return variable\n\
    \                num = i\n            end\n        end\n    end\n    # if both\
    \ numbers are positive, then num should be 0\n    # so we return -1 \n    if num\
    \ == 0\n        return -1\n    else\n        return num\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ >= y\n        return -1\n    end\n    if x % 2 == 0\n        return x\n    end\n\
    \    if y % 2 == 0\n        return y\n    end\n    return -1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgkusn1pv.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpgkusn1pv.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgkusn1pv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgkusn1pv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgkusn1pv.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgkusn1pv.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgkusn1pv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgkusn1pv.jl:31\n  Expression: candidate(546, 546) == 546\n\
    \   Evaluated: -1 == 546\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgkusn1pv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgkusn1pv.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821876
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x>y\n\
    \        return -1\n    end\n    while x<=y\n        if x%2==0\n            return\
    \ x\n        end\n        x=x+1\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphokhmy7o.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmphokhmy7o.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphokhmy7o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphokhmy7o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphokhmy7o.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphokhmy7o.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphokhmy7o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphokhmy7o.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphokhmy7o.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphokhmy7o.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821877
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x%2\
    \ == 0\n        return x\n    else\n        return x+1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwm4xe1_l.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpwm4xe1_l.jl:19\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm4xe1_l.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm4xe1_l.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwm4xe1_l.jl:20\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm4xe1_l.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm4xe1_l.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwm4xe1_l.jl:21\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm4xe1_l.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm4xe1_l.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwm4xe1_l.jl:22\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm4xe1_l.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm4xe1_l.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwm4xe1_l.jl:23\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm4xe1_l.jl:23 [inlined]"
  timestamp: 1659821877
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    for\
    \ i in y:-1:x\n        if i % 2 == 0\n            return i\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821856
- exit_code: 0
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    \"\"\
    \"Returns the largest even number in the range [x, y].\"\"\"\n    result = -1\n\
    \    for i = x:y\n        if i % 2 == 0 && i > result\n            result = i\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659821875
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \            \"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x\
    \ < 0 || y < 0\n        println(\"numbers should be positive\")\n        return\
    \ -1\n    end\n    if x > y\n        println(\"y should be greater than x\")\n\
    \        return -1\n    end\n    for i in x:y\n        if i % 2 == 0\n       \
    \     return i\n        end\n    end\n    return -1\nend\nprintln(choose_num(3,4))\n\
    println(choose_num(3, 3))\nprintln(choose_num(4, 3))\nprintln(choose_num(-4, 2))\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp93wfsm8e.jl:29

    '
  stdout: "4\n-1\ny should be greater than x\n-1\nnumbers should be positive\n-1\n\
    test set: Test Failed at /tmp/tmp93wfsm8e.jl:32\n  Expression: candidate(12, 15)\
    \ == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93wfsm8e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93wfsm8e.jl:31\ny should be greater\
    \ than x\ntest set: Test Failed at /tmp/tmp93wfsm8e.jl:34\n  Expression: candidate(33,\
    \ 12354) == 12354\n   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp93wfsm8e.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp93wfsm8e.jl:31\ny should be greater than x\n\
    test set: Test Failed at /tmp/tmp93wfsm8e.jl:36\n  Expression: candidate(6, 29)\
    \ == 28\n   Evaluated: 6 == 28\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93wfsm8e.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93wfsm8e.jl:31\ny should be greater\
    \ than x\nTest Summary: | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659821877
