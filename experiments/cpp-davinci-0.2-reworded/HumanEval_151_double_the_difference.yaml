name: HumanEval_151_double_the_difference
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
  \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
  \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
  \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
  \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
  \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
  // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
  \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
  \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3})))\
  \ == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0,\
  \ (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
  \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
  \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
  \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0,\
  \ (float)7.0, (float)9.0}))) == (165));\n}\n"
completions: ["    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i] ==\
    \ (int)lst[i] && lst[i] % 2 != 0){\n            sum += lst[i] * lst[i];\n    \
    \    }\n    }\n    return sum;", "    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n\
    \            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;", "  \
    \  long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ >= 0 && lst[i] == (int)lst[i]){\n            if(lst[i] % 2 == 1){\n        \
    \        sum += lst[i] * lst[i];\n            }\n        }\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 == 1){\n            sum\
    \ += pow(lst[i], 2);\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i] ==\
    \ (int)lst[i] && lst[i] % 2 != 0){\n            sum += lst[i] * lst[i];\n    \
    \    }\n    }\n    return sum;", "    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n\
    \            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;", "  \
    \  long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i]\
    \ && lst[i] % 2 != 0){\n            sum += lst[i] * lst[i];\n        }\n    }\n\
    \    return sum;", "    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i]\
    \ == (int)lst[i] && lst[i] % 2 == 1){\n            sum += lst[i] * lst[i];\n \
    \       }\n    }\n    return sum;", "    long sum = 0;\n    for(int i = 0; i <\
    \ lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for(auto i : lst){\n        if(i > 0 && i ==\
    \ (int)i){\n            if(i % 2 != 0){\n                sum += i * i;\n     \
    \       }\n        }\n    }\n    return sum;", "    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i]\
    \ && lst[i] % 2 != 0){\n            sum += lst[i] * lst[i];\n        }\n    }\n\
    \    return sum;", "    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] >= 0 && lst[i]\
    \ == (int)lst[i]){\n            if(lst[i] % 2 != 0){\n                sum += lst[i]\
    \ * lst[i];\n            }\n        }\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i]\
    \ == (int)lst[i] && lst[i] % 2 != 0){\n            sum += lst[i] * lst[i];\n \
    \       }\n    }\n    return sum;", "    long sum = 0;\n    for(int i = 0; i <\
    \ lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && fmod(lst[i],\
    \ 1) == 0 && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n\
    \    }\n    return sum;"]
stop_tokens:
- "\n}"
