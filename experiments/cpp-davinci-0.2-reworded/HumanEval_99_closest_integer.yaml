name: HumanEval_99_closest_integer
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes\
  \ a value (string) representing a number\n// and returns the closest integer to\
  \ it. If the number is equidistant\n// from two integers, round it away from zero.\n\
  // Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
  15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
  \ number is equidistant\n// from two integers, the one you should return is the\
  \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\")\
  \ should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string\
  \ value) {\n"
tests: "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
  10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
  -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
  0\")) == (0));\n}\n"
completions: ["  long val = std::stol(value);\n  if (val < 0) {\n    val = val - 0.5;\n\
    \  } else {\n    val = val + 0.5;\n  }\n  return val;", "  double d = std::stod(value);\n\
    \  return std::lround(d);", "  double num = std::stod(value);\n  long result =\
    \ std::lround(num);\n  return result;", "  // your code here\n  double x = std::stod(value);\n\
    \  if(x < 0)\n    return std::ceil(x);\n  else\n    return std::floor(x);", " \
    \ double d = std::stod(value);\n  return std::round(d);", "  double num = std::stod(value);\n\
    \  return std::lround(num);", "  double d = std::stod(value);\n  return std::lround(d);",
  "  // your code here\n  double d = std::stod(value);\n  if (d < 0) {\n    return\
    \ std::ceil(d);\n  }\n  return std::floor(d);", "    double val = std::stod(value);\n\
    \    if (val < 0) {\n        return std::ceil(val);\n    }\n    return std::floor(val);",
  "  // your code here\n  return 0;", "  double val = std::stod(value);\n  if (val\
    \ > 0) {\n    return std::ceil(val);\n  } else {\n    return std::floor(val);\n\
    \  }", "  double val = std::stod(value);\n  long intval = std::lround(val);\n\
    \  return intval;", "  double d = std::stod(value);\n  return std::lround(d);",
  "  int len = value.length();\n  int i = 0;\n  int num = 0;\n  int sign = 1;\n  if(value[0]\
    \ == '-'){\n    sign = -1;\n    i++;\n  }\n  for(; i < len; i++){\n    if(value[i]\
    \ == '.'){\n      break;\n    }\n    num = num * 10 + (value[i] - '0');\n  }\n\
    \  int decimal = 0;\n  int j = 0;\n  for(i = i + 1; i < len; i++){\n    decimal\
    \ = decimal * 10 + (value[i] - '0');\n    j++;\n  }\n  if(decimal >= 5 * pow(10,\
    \ j - 1)){\n    num++;\n  }\n  return num * sign;", "  double d = std::stod(value);\n\
    \  return std::lround(d);", "  double d = std::stod(value);\n  return std::round(d);",
  "  double val = std::stod(value);\n  long int_val = std::lround(val);\n  return\
    \ int_val;", "  // your code here\n  double d = std::stod(value);\n  if (d < 0)\
    \ {\n    return std::ceil(d);\n  }\n  return std::floor(d);", "    double d =\
    \ std::stod(value);\n    return std::lround(d);", "  double val = std::stod(value);\n\
    \  if (val > 0) {\n    return std::ceil(val);\n  } else {\n    return std::floor(val);\n\
    \  }"]
stop_tokens:
- "\n}"
